; ModuleID = 'compression.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.anon = type { i32, i8* }
%struct.mz_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.mz_internal_state*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.mz_internal_state = type opaque
%struct.tdefl_compressor = type { i32 (i8*, i32, i8*)*, i8*, i32, [2 x i32], i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64*, i64*, i32, i8*, i64, i64, [33025 x i8], [3 x [288 x i16]], [3 x [288 x i16]], [3 x [288 x i8]], [65536 x i8], [32768 x i16], [32768 x i16], [85196 x i8] }
%struct.inflate_state = type { %struct.tinfl_decompressor_tag, i32, i32, i32, i32, i32, [32768 x i8], i32 }
%struct.tinfl_decompressor_tag = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i64, i64, [3 x %struct.tinfl_huff_table], [4 x i8], [457 x i8] }
%struct.tinfl_huff_table = type { [288 x i8], [1024 x i16], [576 x i16] }
%struct.tdefl_output_buffer = type { i64, i64, i8*, i32 }
%struct.mz_zip_archive_tag = type { i64, i64, i32, i32, i32, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i8* (i8*, i8*, i64, i64)*, i8*, i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)*, i8*, %struct.mz_zip_internal_state_tag* }
%struct.mz_zip_internal_state_tag = type { %struct.mz_zip_array, %struct.mz_zip_array, %struct.mz_zip_array, %struct._IO_FILE*, i8*, i64, i64 }
%struct.mz_zip_array = type { i8*, i64, i64, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.mz_zip_archive_file_stat = type { i32, i32, i16, i16, i16, i16, i64, i32, i64, i64, i16, i32, i64, i32, [260 x i8], [256 x i8] }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.utimbuf = type { i64, i64 }
%struct.mz_zip_writer_add_state = type { %struct.mz_zip_archive_tag*, i64, i64 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.tdefl_sym_freq = type { i16, i16 }

@mz_crc32.s_crc32 = internal constant [16 x i32] [i32 0, i32 498536548, i32 997073096, i32 651767980, i32 1994146192, i32 1802195444, i32 1303535960, i32 1342533948, i32 -306674912, i32 -267414716, i32 -690576408, i32 -882789492, i32 -1687895376, i32 -2032938284, i32 -1609899400, i32 -1111625188], align 16
@.str = private unnamed_addr constant [7 x i8] c"9.1.15\00", align 1
@mz_error.s_error_descs = internal global [10 x %struct.anon] [%struct.anon { i32 0, i8* getelementptr inbounds ([1 x i8]* @.str1, i32 0, i32 0) }, %struct.anon { i32 1, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0) }, %struct.anon { i32 2, i8* getelementptr inbounds ([16 x i8]* @.str3, i32 0, i32 0) }, %struct.anon { i32 -1, i8* getelementptr inbounds ([11 x i8]* @.str4, i32 0, i32 0) }, %struct.anon { i32 -2, i8* getelementptr inbounds ([13 x i8]* @.str5, i32 0, i32 0) }, %struct.anon { i32 -3, i8* getelementptr inbounds ([11 x i8]* @.str6, i32 0, i32 0) }, %struct.anon { i32 -4, i8* getelementptr inbounds ([14 x i8]* @.str7, i32 0, i32 0) }, %struct.anon { i32 -5, i8* getelementptr inbounds ([10 x i8]* @.str8, i32 0, i32 0) }, %struct.anon { i32 -6, i8* getelementptr inbounds ([14 x i8]* @.str9, i32 0, i32 0) }, %struct.anon { i32 -10000, i8* getelementptr inbounds ([16 x i8]* @.str10, i32 0, i32 0) }], align 16
@.str1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str2 = private unnamed_addr constant [11 x i8] c"stream end\00", align 1
@.str3 = private unnamed_addr constant [16 x i8] c"need dictionary\00", align 1
@.str4 = private unnamed_addr constant [11 x i8] c"file error\00", align 1
@.str5 = private unnamed_addr constant [13 x i8] c"stream error\00", align 1
@.str6 = private unnamed_addr constant [11 x i8] c"data error\00", align 1
@.str7 = private unnamed_addr constant [14 x i8] c"out of memory\00", align 1
@.str8 = private unnamed_addr constant [10 x i8] c"buf error\00", align 1
@.str9 = private unnamed_addr constant [14 x i8] c"version error\00", align 1
@.str10 = private unnamed_addr constant [16 x i8] c"parameter error\00", align 1
@tinfl_decompress.s_length_base = internal constant [31 x i32] [i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 13, i32 15, i32 17, i32 19, i32 23, i32 27, i32 31, i32 35, i32 43, i32 51, i32 59, i32 67, i32 83, i32 99, i32 115, i32 131, i32 163, i32 195, i32 227, i32 258, i32 0, i32 0], align 16
@tinfl_decompress.s_length_extra = internal constant [31 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0], align 16
@tinfl_decompress.s_dist_base = internal constant [32 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 7, i32 9, i32 13, i32 17, i32 25, i32 33, i32 49, i32 65, i32 97, i32 129, i32 193, i32 257, i32 385, i32 513, i32 769, i32 1025, i32 1537, i32 2049, i32 3073, i32 4097, i32 6145, i32 8193, i32 12289, i32 16385, i32 24577, i32 0, i32 0], align 16
@tinfl_decompress.s_dist_extra = internal constant [32 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 0, i32 0], align 16
@tinfl_decompress.s_length_dezigzag = internal constant [19 x i8] c"\10\11\12\00\08\07\09\06\0A\05\0B\04\0C\03\0D\02\0E\01\0F", align 16
@tinfl_decompress.s_min_table_sizes = internal constant [3 x i32] [i32 257, i32 1, i32 4], align 4
@.str11 = private unnamed_addr constant [4 x i8] c"\05\05\04\00", align 1
@.str12 = private unnamed_addr constant [4 x i8] c"\02\03\07\00", align 1
@.str13 = private unnamed_addr constant [4 x i8] c"\03\03\0B\00", align 1
@.str14 = private unnamed_addr constant [19 x i8] c"d->m_pPut_buf_func\00", align 1
@.str15 = private unnamed_addr constant [10 x i8] c"./miniz.c\00", align 1
@__PRETTY_FUNCTION__.tdefl_compress_buffer = private unnamed_addr constant [90 x i8] c"tdefl_status tdefl_compress_buffer(tdefl_compressor *, const void *, size_t, tdefl_flush)\00", align 1
@s_tdefl_num_probes = internal constant [11 x i32] [i32 0, i32 1, i32 6, i32 32, i32 16, i32 32, i32 128, i32 256, i32 512, i32 768, i32 1500], align 16
@tdefl_write_image_to_png_file_in_memory_ex.s_tdefl_png_num_probes = internal constant [11 x i32] [i32 0, i32 1, i32 6, i32 32, i32 16, i32 32, i32 128, i32 256, i32 512, i32 768, i32 1500], align 16
@tdefl_write_image_to_png_file_in_memory_ex.chans = internal constant [5 x i8] c"\00\00\04\02\06", align 1
@.str16 = private unnamed_addr constant [17 x i8] c"\00\00\00\00\00\00\00\00IEND\AEB`\82\00", align 1
@.str17 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str18 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str19 = private unnamed_addr constant [4 x i8] c"r+b\00", align 1
@.str20 = private unnamed_addr constant [66 x i8] c"(local_dir_header_ofs & (pZip->m_file_offset_alignment - 1)) == 0\00", align 1
@__PRETTY_FUNCTION__.mz_zip_writer_add_mem_ex = private unnamed_addr constant [143 x i8] c"mz_bool mz_zip_writer_add_mem_ex(mz_zip_archive *, const char *, const void *, size_t, const void *, mz_uint16, mz_uint, mz_uint64, mz_uint32)\00", align 1
@__PRETTY_FUNCTION__.mz_zip_writer_add_file = private unnamed_addr constant [111 x i8] c"mz_bool mz_zip_writer_add_file(mz_zip_archive *, const char *, const char *, const void *, mz_uint16, mz_uint)\00", align 1
@__PRETTY_FUNCTION__.mz_zip_writer_add_from_zip_reader = private unnamed_addr constant [87 x i8] c"mz_bool mz_zip_writer_add_from_zip_reader(mz_zip_archive *, mz_zip_archive *, mz_uint)\00", align 1
@s_pStr = internal global i8* getelementptr inbounds ([491 x i8]* @.str30, i32 0, i32 0), align 8
@.str21 = private unnamed_addr constant [21 x i8] c"miniz.c version: %s\0A\00", align 1
@.str22 = private unnamed_addr constant [16 x i8] c"Out of memory!\0A\00", align 1
@.str23 = private unnamed_addr constant [20 x i8] c"compress() failed!\0A\00", align 1
@.str24 = private unnamed_addr constant [32 x i8] c"Compressed from %u to %u bytes\0A\00", align 1
@.str25 = private unnamed_addr constant [48 x i8] c"Simple fuzzy test: step %u total_succeeded: %u\0A\00", align 1
@.str26 = private unnamed_addr constant [20 x i8] c"uncompress failed!\0A\00", align 1
@.str27 = private unnamed_addr constant [34 x i8] c"Decompressed from %u to %u bytes\0A\00", align 1
@.str28 = private unnamed_addr constant [23 x i8] c"Decompression failed!\0A\00", align 1
@.str29 = private unnamed_addr constant [10 x i8] c"Success.\0A\00", align 1
@.str30 = private unnamed_addr constant [491 x i8] c"Good morning Dr. Chandra. This is Hal. I am ready for my first lesson.Good morning Dr. Chandra. This is Hal. I am ready for my first lesson.Good morning Dr. Chandra. This is Hal. I am ready for my first lesson.Good morning Dr. Chandra. This is Hal. I am ready for my first lesson.Good morning Dr. Chandra. This is Hal. I am ready for my first lesson.Good morning Dr. Chandra. This is Hal. I am ready for my first lesson.Good morning Dr. Chandra. This is Hal. I am ready for my first lesson.\00", align 1
@.str31 = private unnamed_addr constant [23 x i8] c"pArray->m_element_size\00", align 1
@__PRETTY_FUNCTION__.mz_zip_array_ensure_capacity = private unnamed_addr constant [88 x i8] c"mz_bool mz_zip_array_ensure_capacity(mz_zip_archive *, mz_zip_array *, size_t, mz_uint)\00", align 1
@.str32 = private unnamed_addr constant [29 x i8] c"!d->m_output_flush_remaining\00", align 1
@__PRETTY_FUNCTION__.tdefl_flush_block = private unnamed_addr constant [47 x i8] c"int tdefl_flush_block(tdefl_compressor *, int)\00", align 1
@.str33 = private unnamed_addr constant [27 x i8] c"bits <= ((1U << len) - 1U)\00", align 1
@.str34 = private unnamed_addr constant [40 x i8] c"d->m_pOutput_buf < d->m_pOutput_buf_end\00", align 1
@s_tdefl_len_sym = internal constant [256 x i16] [i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 265, i16 266, i16 266, i16 267, i16 267, i16 268, i16 268, i16 269, i16 269, i16 269, i16 269, i16 270, i16 270, i16 270, i16 270, i16 271, i16 271, i16 271, i16 271, i16 272, i16 272, i16 272, i16 272, i16 273, i16 273, i16 273, i16 273, i16 273, i16 273, i16 273, i16 273, i16 274, i16 274, i16 274, i16 274, i16 274, i16 274, i16 274, i16 274, i16 275, i16 275, i16 275, i16 275, i16 275, i16 275, i16 275, i16 275, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 285], align 16
@.str35 = private unnamed_addr constant [52 x i8] c"d->m_huff_code_sizes[0][s_tdefl_len_sym[match_len]]\00", align 1
@__PRETTY_FUNCTION__.tdefl_compress_lz_codes = private unnamed_addr constant [52 x i8] c"mz_bool tdefl_compress_lz_codes(tdefl_compressor *)\00", align 1
@s_tdefl_len_extra = internal constant [256 x i8] calign 16
@mz_bitmasks = internal constant [17 x i32] [i32 0, i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255, i32 511, i32 1023, i32 2047, i32 4095, i32 8191, i32 16383, i32 32767, i32 65535], align 16
@s_tdefl_small_dist_sym = internal constant [512 x i8] calign 16
@s_tdefl_small_dist_extra = internal constant [512 x i8] calign 16
@s_tdefl_large_dist_sym = internal constant [128 x i8] c"\00\00\12\13\14\14\15\15\16\16\16\16\17\17\17\17\18\18\18\18\18\18\18\18\19\19\19\19\19\19\19\19\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D", align 16
@s_tdefl_large_dist_extra = internal constant [128 x i8] c"\00\00\08\08\09\09\09\09\0A\0A\0A\0A\0A\0A\0A\0A\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D", align 16
@.str36 = private unnamed_addr constant [29 x i8] c"d->m_huff_code_sizes[1][sym]\00", align 1
@.str37 = private unnamed_addr constant [29 x i8] c"d->m_huff_code_sizes[0][lit]\00", align 1
@__PRETTY_FUNCTION__.tdefl_start_dynamic_block = private unnamed_addr constant [51 x i8] c"void tdefl_start_dynamic_block(tdefl_compressor *)\00", align 1
@s_tdefl_packed_code_size_syms_swizzle = internal global [19 x i8] c"\10\11\12\00\08\07\09\06\0A\05\0B\04\0C\03\0D\02\0E\01\0F", align 16
@.str38 = private unnamed_addr constant [32 x i8] c"code < TDEFL_MAX_HUFF_SYMBOLS_2\00", align 1
@__PRETTY_FUNCTION__.tdefl_start_static_block = private unnamed_addr constant [50 x i8] c"void tdefl_start_static_block(tdefl_compressor *)\00", align 1
@.str39 = private unnamed_addr constant [35 x i8] c"d->m_lookahead_size >= len_to_move\00", align 1
@__PRETTY_FUNCTION__.tdefl_compress_normal = private unnamed_addr constant [50 x i8] c"mz_bool tdefl_compress_normal(tdefl_compressor *)\00", align 1
@.str40 = private unnamed_addr constant [94 x i8] c"(match_len >= TDEFL_MIN_MATCH_LEN) && (match_dist >= 1) && (match_dist <= TDEFL_LZ_DICT_SIZE)\00", align 1
@__PRETTY_FUNCTION__.tdefl_record_match = private unnamed_addr constant [62 x i8] c"void tdefl_record_match(tdefl_compressor *, mz_uint, mz_uint)\00", align 1
@.str41 = private unnamed_addr constant [37 x i8] c"max_match_len <= TDEFL_MAX_MATCH_LEN\00", align 1
@__PRETTY_FUNCTION__.tdefl_find_match = private unnamed_addr constant [91 x i8] c"void tdefl_find_match(tdefl_compressor *, mz_uint, mz_uint, mz_uint, mz_uint *, mz_uint *)\00", align 1
@.str42 = private unnamed_addr constant [106 x i8] c"(cur_match_len >= TDEFL_MIN_MATCH_LEN) && (cur_match_dist >= 1) && (cur_match_dist <= TDEFL_LZ_DICT_SIZE)\00", align 1
@__PRETTY_FUNCTION__.tdefl_compress_fast = private unnamed_addr constant [48 x i8] c"mz_bool tdefl_compress_fast(tdefl_compressor *)\00", align 1
@.str43 = private unnamed_addr constant [32 x i8] c"lookahead_size >= cur_match_len\00", align 1

; Function Attrs: nounwind uwtable
define i64 @mz_adler32(i64 %adler, i8* %ptr, i64 %buf_len) #0 {
entry:
  %retval = alloca i64, align 8
  %adler.addr = alloca i64, align 8
  %ptr.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %block_len = alloca i64, align 8
  store i64 %adler, i64* %adler.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %buf_len, i64* %buf_len.addr, align 8
  %0 = load i64* %adler.addr, align 8
  %and = and i64 %0, 65535
  %conv = trunc i64 %and to i32
  store i32 %conv, i32* %s1, align 4
  %1 = load i64* %adler.addr, align 8
  %shr = lshr i64 %1, 16
  %conv1 = trunc i64 %shr to i32
  store i32 %conv1, i32* %s2, align 4
  %2 = load i64* %buf_len.addr, align 8
  %rem = urem i64 %2, 5552
  store i64 %rem, i64* %block_len, align 8
  %3 = load i8** %ptr.addr, align 8
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %for.end46, %if.end
  %4 = load i64* %buf_len.addr, align 8
  %tobool2 = icmp ne i64 %4, 0
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %5 = load i32* %i, align 4
  %add = add i32 %5, 7
  %conv3 = zext i32 %add to i64
  %6 = load i64* %block_len, align 8
  %cmp = icmp ult i64 %conv3, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8** %ptr.addr, align 8
  %arrayidx = getelementptr inbounds i8* %7, i64 0
  %8 = load i8* %arrayidx, align 1
  %conv5 = zext i8 %8 to i32
  %9 = load i32* %s1, align 4
  %add6 = add i32 %9, %conv5
  store i32 %add6, i32* %s1, align 4
  %10 = load i32* %s1, align 4
  %11 = load i32* %s2, align 4
  %add7 = add i32 %11, %10
  store i32 %add7, i32* %s2, align 4
  %12 = load i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr inbounds i8* %12, i64 1
  %13 = load i8* %arrayidx8, align 1
  %conv9 = zext i8 %13 to i32
  %14 = load i32* %s1, align 4
  %add10 = add i32 %14, %conv9
  store i32 %add10, i32* %s1, align 4
  %15 = load i32* %s1, align 4
  %16 = load i32* %s2, align 4
  %add11 = add i32 %16, %15
  store i32 %add11, i32* %s2, align 4
  %17 = load i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr inbounds i8* %17, i64 2
  %18 = load i8* %arrayidx12, align 1
  %conv13 = zext i8 %18 to i32
  %19 = load i32* %s1, align 4
  %add14 = add i32 %19, %conv13
  store i32 %add14, i32* %s1, align 4
  %20 = load i32* %s1, align 4
  %21 = load i32* %s2, align 4
  %add15 = add i32 %21, %20
  store i32 %add15, i32* %s2, align 4
  %22 = load i8** %ptr.addr, align 8
  %arrayidx16 = getelementptr inbounds i8* %22, i64 3
  %23 = load i8* %arrayidx16, align 1
  %conv17 = zext i8 %23 to i32
  %24 = load i32* %s1, align 4
  %add18 = add i32 %24, %conv17
  store i32 %add18, i32* %s1, align 4
  %25 = load i32* %s1, align 4
  %26 = load i32* %s2, align 4
  %add19 = add i32 %26, %25
  store i32 %add19, i32* %s2, align 4
  %27 = load i8** %ptr.addr, align 8
  %arrayidx20 = getelementptr inbounds i8* %27, i64 4
  %28 = load i8* %arrayidx20, align 1
  %conv21 = zext i8 %28 to i32
  %29 = load i32* %s1, align 4
  %add22 = add i32 %29, %conv21
  store i32 %add22, i32* %s1, align 4
  %30 = load i32* %s1, align 4
  %31 = load i32* %s2, align 4
  %add23 = add i32 %31, %30
  store i32 %add23, i32* %s2, align 4
  %32 = load i8** %ptr.addr, align 8
  %arrayidx24 = getelementptr inbounds i8* %32, i64 5
  %33 = load i8* %arrayidx24, align 1
  %conv25 = zext i8 %33 to i32
  %34 = load i32* %s1, align 4
  %add26 = add i32 %34, %conv25
  store i32 %add26, i32* %s1, align 4
  %35 = load i32* %s1, align 4
  %36 = load i32* %s2, align 4
  %add27 = add i32 %36, %35
  store i32 %add27, i32* %s2, align 4
  %37 = load i8** %ptr.addr, align 8
  %arrayidx28 = getelementptr inbounds i8* %37, i64 6
  %38 = load i8* %arrayidx28, align 1
  %conv29 = zext i8 %38 to i32
  %39 = load i32* %s1, align 4
  %add30 = add i32 %39, %conv29
  store i32 %add30, i32* %s1, align 4
  %40 = load i32* %s1, align 4
  %41 = load i32* %s2, align 4
  %add31 = add i32 %41, %40
  store i32 %add31, i32* %s2, align 4
  %42 = load i8** %ptr.addr, align 8
  %arrayidx32 = getelementptr inbounds i8* %42, i64 7
  %43 = load i8* %arrayidx32, align 1
  %conv33 = zext i8 %43 to i32
  %44 = load i32* %s1, align 4
  %add34 = add i32 %44, %conv33
  store i32 %add34, i32* %s1, align 4
  %45 = load i32* %s1, align 4
  %46 = load i32* %s2, align 4
  %add35 = add i32 %46, %45
  store i32 %add35, i32* %s2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %47 = load i32* %i, align 4
  %add36 = add i32 %47, 8
  store i32 %add36, i32* %i, align 4
  %48 = load i8** %ptr.addr, align 8
  %add.ptr = getelementptr inbounds i8* %48, i64 8
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc45, %for.end
  %49 = load i32* %i, align 4
  %conv38 = zext i32 %49 to i64
  %50 = load i64* %block_len, align 8
  %cmp39 = icmp ult i64 %conv38, %50
  br i1 %cmp39, label %for.body41, label %for.end46

for.body41:                                       ; preds = %for.cond37
  %51 = load i8** %ptr.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %51, i32 1
  store i8* %incdec.ptr, i8** %ptr.addr, align 8
  %52 = load i8* %51, align 1
  %conv42 = zext i8 %52 to i32
  %53 = load i32* %s1, align 4
  %add43 = add i32 %53, %conv42
  store i32 %add43, i32* %s1, align 4
  %54 = load i32* %s1, align 4
  %55 = load i32* %s2, align 4
  %add44 = add i32 %55, %54
  store i32 %add44, i32* %s2, align 4
  br label %for.inc45

for.inc45:                                        ; preds = %for.body41
  %56 = load i32* %i, align 4
  %inc = add i32 %56, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond37

for.end46:                                        ; preds = %for.cond37
  %57 = load i32* %s1, align 4
  %rem47 = urem i32 %57, 65521
  store i32 %rem47, i32* %s1, align 4
  %58 = load i32* %s2, align 4
  %rem48 = urem i32 %58, 65521
  store i32 %rem48, i32* %s2, align 4
  %59 = load i64* %block_len, align 8
  %60 = load i64* %buf_len.addr, align 8
  %sub = sub i64 %60, %59
  store i64 %sub, i64* %buf_len.addr, align 8
  store i64 5552, i64* %block_len, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %61 = load i32* %s2, align 4
  %shl = shl i32 %61, 16
  %62 = load i32* %s1, align 4
  %add49 = add i32 %shl, %62
  %conv50 = zext i32 %add49 to i64
  store i64 %conv50, i64* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then
  %63 = load i64* %retval
  ret i64 %63
}

; Function Attrs: nounwind uwtable
define i64 @mz_crc32(i64 %crc, i8* %ptr, i64 %buf_len) #0 {
entry:
  %retval = alloca i64, align 8
  %crc.addr = alloca i64, align 8
  %ptr.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %crcu32 = alloca i32, align 4
  %b = alloca i8, align 1
  store i64 %crc, i64* %crc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %buf_len, i64* %buf_len.addr, align 8
  %0 = load i64* %crc.addr, align 8
  %conv = trunc i64 %0 to i32
  store i32 %conv, i32* %crcu32, align 4
  %1 = load i8** %ptr.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32* %crcu32, align 4
  %neg = xor i32 %2, -1
  store i32 %neg, i32* %crcu32, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i64* %buf_len.addr, align 8
  %dec = add i64 %3, -1
  store i64 %dec, i64* %buf_len.addr, align 8
  %tobool1 = icmp ne i64 %3, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8** %ptr.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %4, i32 1
  store i8* %incdec.ptr, i8** %ptr.addr, align 8
  %5 = load i8* %4, align 1
  store i8 %5, i8* %b, align 1
  %6 = load i32* %crcu32, align 4
  %shr = lshr i32 %6, 4
  %7 = load i32* %crcu32, align 4
  %and = and i32 %7, 15
  %8 = load i8* %b, align 1
  %conv2 = zext i8 %8 to i32
  %and3 = and i32 %conv2, 15
  %xor = xor i32 %and, %and3
  %idxprom = zext i32 %xor to i64
  %arrayidx = getelementptr inbounds [16 x i32]* @mz_crc32.s_crc32, i32 0, i64 %idxprom
  %9 = load i32* %arrayidx, align 4
  %xor4 = xor i32 %shr, %9
  store i32 %xor4, i32* %crcu32, align 4
  %10 = load i32* %crcu32, align 4
  %shr5 = lshr i32 %10, 4
  %11 = load i32* %crcu32, align 4
  %and6 = and i32 %11, 15
  %12 = load i8* %b, align 1
  %conv7 = zext i8 %12 to i32
  %shr8 = ashr i32 %conv7, 4
  %xor9 = xor i32 %and6, %shr8
  %idxprom10 = zext i32 %xor9 to i64
  %arrayidx11 = getelementptr inbounds [16 x i32]* @mz_crc32.s_crc32, i32 0, i64 %idxprom10
  %13 = load i32* %arrayidx11, align 4
  %xor12 = xor i32 %shr5, %13
  store i32 %xor12, i32* %crcu32, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i32* %crcu32, align 4
  %neg13 = xor i32 %14, -1
  %conv14 = zext i32 %neg13 to i64
  store i64 %conv14, i64* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then
  %15 = load i64* %retval
  ret i64 %15
}

; Function Attrs: nounwind uwtable
define void @mz_free(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8** %p.addr, align 8
  call void @free(i8* %0) #2
  ret void
}

; Function Attrs: nounwind
declare void @free(i8*) #1

; Function Attrs: nounwind uwtable
define i8* @mz_version() #0 {
entry:
  ret i8* getelementptr inbounds ([7 x i8]* @.str, i32 0, i32 0)
}

; Function Attrs: nounwind uwtable
define i32 @mz_deflateInit(%struct.mz_stream_s* %pStream, i32 %level) #0 {
entry:
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %level.addr = alloca i32, align 4
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  store i32 %level, i32* %level.addr, align 4
  %0 = load %struct.mz_stream_s** %pStream.addr, align 8
  %1 = load i32* %level.addr, align 4
  %call = call i32 @mz_deflateInit2(%struct.mz_stream_s* %0, i32 %1, i32 8, i32 15, i32 9, i32 0)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define i32 @mz_deflateInit2(%struct.mz_stream_s* %pStream, i32 %level, i32 %method, i32 %window_bits, i32 %mem_level, i32 %strategy) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %level.addr = alloca i32, align 4
  %method.addr = alloca i32, align 4
  %window_bits.addr = alloca i32, align 4
  %mem_level.addr = alloca i32, align 4
  %strategy.addr = alloca i32, align 4
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %comp_flags = alloca i32, align 4
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  store i32 %level, i32* %level.addr, align 4
  store i32 %method, i32* %method.addr, align 4
  store i32 %window_bits, i32* %window_bits.addr, align 4
  store i32 %mem_level, i32* %mem_level.addr, align 4
  store i32 %strategy, i32* %strategy.addr, align 4
  %0 = load i32* %level.addr, align 4
  %1 = load i32* %window_bits.addr, align 4
  %2 = load i32* %strategy.addr, align 4
  %call = call i32 @tdefl_create_comp_flags_from_zip_params(i32 %0, i32 %1, i32 %2)
  %or = or i32 8192, %call
  store i32 %or, i32* %comp_flags, align 4
  %3 = load %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32* %method.addr, align 4
  %cmp = icmp ne i32 %4, 8
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %5 = load i32* %mem_level.addr, align 4
  %cmp1 = icmp slt i32 %5, 1
  br i1 %cmp1, label %if.then7, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %6 = load i32* %mem_level.addr, align 4
  %cmp3 = icmp sgt i32 %6, 9
  br i1 %cmp3, label %if.then7, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %7 = load i32* %window_bits.addr, align 4
  %cmp5 = icmp ne i32 %7, 15
  br i1 %cmp5, label %land.lhs.true, label %if.end8

land.lhs.true:                                    ; preds = %lor.lhs.false4
  %8 = load i32* %window_bits.addr, align 4
  %sub = sub nsw i32 0, %8
  %cmp6 = icmp ne i32 %sub, 15
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %land.lhs.true, %lor.lhs.false2, %lor.lhs.false, %if.end
  store i32 -10000, i32* %retval
  br label %return

if.end8:                                          ; preds = %land.lhs.true, %lor.lhs.false4
  %9 = load %struct.mz_stream_s** %pStream.addr, align 8
  %data_type = getelementptr inbounds %struct.mz_stream_s* %9, i32 0, i32 11
  store i32 0, i32* %data_type, align 4
  %10 = load %struct.mz_stream_s** %pStream.addr, align 8
  %adler = getelementptr inbounds %struct.mz_stream_s* %10, i32 0, i32 12
  store i64 1, i64* %adler, align 8
  %11 = load %struct.mz_stream_s** %pStream.addr, align 8
  %msg = getelementptr inbounds %struct.mz_stream_s* %11, i32 0, i32 6
  store i8* null, i8** %msg, align 8
  %12 = load %struct.mz_stream_s** %pStream.addr, align 8
  %reserved = getelementptr inbounds %struct.mz_stream_s* %12, i32 0, i32 13
  store i64 0, i64* %reserved, align 8
  %13 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_in = getelementptr inbounds %struct.mz_stream_s* %13, i32 0, i32 2
  store i64 0, i64* %total_in, align 8
  %14 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_out = getelementptr inbounds %struct.mz_stream_s* %14, i32 0, i32 5
  store i64 0, i64* %total_out, align 8
  %15 = load %struct.mz_stream_s** %pStream.addr, align 8
  %zalloc = getelementptr inbounds %struct.mz_stream_s* %15, i32 0, i32 8
  %16 = load i8* (i8*, i64, i64)** %zalloc, align 8
  %tobool9 = icmp ne i8* (i8*, i64, i64)* %16, null
  br i1 %tobool9, label %if.end12, label %if.then10

if.then10:                                        ; preds = %if.end8
  %17 = load %struct.mz_stream_s** %pStream.addr, align 8
  %zalloc11 = getelementptr inbounds %struct.mz_stream_s* %17, i32 0, i32 8
  store i8* (i8*, i64, i64)* @def_alloc_func, i8* (i8*, i64, i64)** %zalloc11, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %18 = load %struct.mz_stream_s** %pStream.addr, align 8
  %zfree = getelementptr inbounds %struct.mz_stream_s* %18, i32 0, i32 9
  %19 = load void (i8*, i8*)** %zfree, align 8
  %tobool13 = icmp ne void (i8*, i8*)* %19, null
  br i1 %tobool13, label %if.end16, label %if.then14

if.then14:                                        ; preds = %if.end12
  %20 = load %struct.mz_stream_s** %pStream.addr, align 8
  %zfree15 = getelementptr inbounds %struct.mz_stream_s* %20, i32 0, i32 9
  store void (i8*, i8*)* @def_free_func, void (i8*, i8*)** %zfree15, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %if.end12
  %21 = load %struct.mz_stream_s** %pStream.addr, align 8
  %zalloc17 = getelementptr inbounds %struct.mz_stream_s* %21, i32 0, i32 8
  %22 = load i8* (i8*, i64, i64)** %zalloc17, align 8
  %23 = load %struct.mz_stream_s** %pStream.addr, align 8
  %opaque = getelementptr inbounds %struct.mz_stream_s* %23, i32 0, i32 10
  %24 = load i8** %opaque, align 8
  %call18 = call i8* %22(i8* %24, i64 1, i64 319352)
  %25 = bitcast i8* %call18 to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %25, %struct.tdefl_compressor** %pComp, align 8
  %26 = load %struct.tdefl_compressor** %pComp, align 8
  %tobool19 = icmp ne %struct.tdefl_compressor* %26, null
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %if.end16
  store i32 -4, i32* %retval
  br label %return

if.end21:                                         ; preds = %if.end16
  %27 = load %struct.tdefl_compressor** %pComp, align 8
  %28 = bitcast %struct.tdefl_compressor* %27 to %struct.mz_internal_state*
  %29 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s* %29, i32 0, i32 7
  store %struct.mz_internal_state* %28, %struct.mz_internal_state** %state, align 8
  %30 = load %struct.tdefl_compressor** %pComp, align 8
  %31 = load i32* %comp_flags, align 4
  %call22 = call i32 @tdefl_init(%struct.tdefl_compressor* %30, i32 (i8*, i32, i8*)* null, i8* null, i32 %31)
  %cmp23 = icmp ne i32 %call22, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end21
  %32 = load %struct.mz_stream_s** %pStream.addr, align 8
  %call25 = call i32 @mz_deflateEnd(%struct.mz_stream_s* %32)
  store i32 -10000, i32* %retval
  br label %return

if.end26:                                         ; preds = %if.end21
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end26, %if.then24, %if.then20, %if.then7, %if.then
  %33 = load i32* %retval
  ret i32 %33
}

; Function Attrs: nounwind uwtable
define i32 @tdefl_create_comp_flags_from_zip_params(i32 %level, i32 %window_bits, i32 %strategy) #0 {
entry:
  %level.addr = alloca i32, align 4
  %window_bits.addr = alloca i32, align 4
  %strategy.addr = alloca i32, align 4
  %comp_flags = alloca i32, align 4
  store i32 %level, i32* %level.addr, align 4
  store i32 %window_bits, i32* %window_bits.addr, align 4
  store i32 %strategy, i32* %strategy.addr, align 4
  %0 = load i32* %level.addr, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %cond.true, label %cond.false3

cond.true:                                        ; preds = %entry
  %1 = load i32* %level.addr, align 4
  %cmp1 = icmp slt i32 10, %1
  br i1 %cmp1, label %cond.true2, label %cond.false

cond.true2:                                       ; preds = %cond.true
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %2 = load i32* %level.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true2
  %cond = phi i32 [ 10, %cond.true2 ], [ %2, %cond.false ]
  br label %cond.end4

cond.false3:                                      ; preds = %entry
  br label %cond.end4

cond.end4:                                        ; preds = %cond.false3, %cond.end
  %cond5 = phi i32 [ %cond, %cond.end ], [ 6, %cond.false3 ]
  %idxprom = sext i32 %cond5 to i64
  %arrayidx = getelementptr inbounds [11 x i32]* @s_tdefl_num_probes, i32 0, i64 %idxprom
  %3 = load i32* %arrayidx, align 4
  %4 = load i32* %level.addr, align 4
  %cmp6 = icmp sle i32 %4, 3
  %cond7 = select i1 %cmp6, i32 16384, i32 0
  %or = or i32 %3, %cond7
  store i32 %or, i32* %comp_flags, align 4
  %5 = load i32* %window_bits.addr, align 4
  %cmp8 = icmp sgt i32 %5, 0
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end4
  %6 = load i32* %comp_flags, align 4
  %or9 = or i32 %6, 4096
  store i32 %or9, i32* %comp_flags, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end4
  %7 = load i32* %level.addr, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.else, label %if.then10

if.then10:                                        ; preds = %if.end
  %8 = load i32* %comp_flags, align 4
  %or11 = or i32 %8, 524288
  store i32 %or11, i32* %comp_flags, align 4
  br label %if.end30

if.else:                                          ; preds = %if.end
  %9 = load i32* %strategy.addr, align 4
  %cmp12 = icmp eq i32 %9, 1
  br i1 %cmp12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %if.else
  %10 = load i32* %comp_flags, align 4
  %or14 = or i32 %10, 131072
  store i32 %or14, i32* %comp_flags, align 4
  br label %if.end29

if.else15:                                        ; preds = %if.else
  %11 = load i32* %strategy.addr, align 4
  %cmp16 = icmp eq i32 %11, 2
  br i1 %cmp16, label %if.then17, label %if.else18

if.then17:                                        ; preds = %if.else15
  %12 = load i32* %comp_flags, align 4
  %and = and i32 %12, -4096
  store i32 %and, i32* %comp_flags, align 4
  br label %if.end28

if.else18:                                        ; preds = %if.else15
  %13 = load i32* %strategy.addr, align 4
  %cmp19 = icmp eq i32 %13, 4
  br i1 %cmp19, label %if.then20, label %if.else22

if.then20:                                        ; preds = %if.else18
  %14 = load i32* %comp_flags, align 4
  %or21 = or i32 %14, 262144
  store i32 %or21, i32* %comp_flags, align 4
  br label %if.end27

if.else22:                                        ; preds = %if.else18
  %15 = load i32* %strategy.addr, align 4
  %cmp23 = icmp eq i32 %15, 3
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.else22
  %16 = load i32* %comp_flags, align 4
  %or25 = or i32 %16, 65536
  store i32 %or25, i32* %comp_flags, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %if.else22
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then20
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then17
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then13
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then10
  %17 = load i32* %comp_flags, align 4
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define internal i8* @def_alloc_func(i8* %opaque, i64 %items, i64 %size) #0 {
entry:
  %opaque.addr = alloca i8*, align 8
  %items.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  store i8* %opaque, i8** %opaque.addr, align 8
  store i64 %items, i64* %items.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %opaque.addr, align 8
  %1 = load i64* %items.addr, align 8
  %2 = load i64* %size.addr, align 8
  %3 = load i64* %items.addr, align 8
  %4 = load i64* %size.addr, align 8
  %mul = mul i64 %3, %4
  %call = call noalias i8* @malloc(i64 %mul) #2
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define internal void @def_free_func(i8* %opaque, i8* %address) #0 {
entry:
  %opaque.addr = alloca i8*, align 8
  %address.addr = alloca i8*, align 8
  store i8* %opaque, i8** %opaque.addr, align 8
  store i8* %address, i8** %address.addr, align 8
  %0 = load i8** %opaque.addr, align 8
  %1 = load i8** %address.addr, align 8
  %2 = load i8** %address.addr, align 8
  call void @free(i8* %2) #2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @tdefl_init(%struct.tdefl_compressor* %d, i32 (i8*, i32, i8*)* %pPut_buf_func, i8* %pPut_buf_user, i32 %flags) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %pPut_buf_func.addr = alloca i32 (i8*, i32, i8*)*, align 8
  %pPut_buf_user.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  store i32 (i8*, i32, i8*)* %pPut_buf_func, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8
  store i8* %pPut_buf_user, i8** %pPut_buf_user.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8
  %1 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_func = getelementptr inbounds %struct.tdefl_compressor* %1, i32 0, i32 0
  store i32 (i8*, i32, i8*)* %0, i32 (i8*, i32, i8*)** %m_pPut_buf_func, align 8
  %2 = load i8** %pPut_buf_user.addr, align 8
  %3 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_user = getelementptr inbounds %struct.tdefl_compressor* %3, i32 0, i32 1
  store i8* %2, i8** %m_pPut_buf_user, align 8
  %4 = load i32* %flags.addr, align 4
  %5 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flags = getelementptr inbounds %struct.tdefl_compressor* %5, i32 0, i32 2
  store i32 %4, i32* %m_flags, align 4
  %6 = load i32* %flags.addr, align 4
  %and = and i32 %6, 4095
  %add = add nsw i32 %and, 2
  %div = sdiv i32 %add, 3
  %add1 = add nsw i32 1, %div
  %7 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_max_probes = getelementptr inbounds %struct.tdefl_compressor* %7, i32 0, i32 3
  %arrayidx = getelementptr inbounds [2 x i32]* %m_max_probes, i32 0, i64 0
  store i32 %add1, i32* %arrayidx, align 4
  %8 = load i32* %flags.addr, align 4
  %and2 = and i32 %8, 16384
  %cmp = icmp ne i32 %and2, 0
  %conv = zext i1 %cmp to i32
  %9 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_greedy_parsing = getelementptr inbounds %struct.tdefl_compressor* %9, i32 0, i32 4
  store i32 %conv, i32* %m_greedy_parsing, align 4
  %10 = load i32* %flags.addr, align 4
  %and3 = and i32 %10, 4095
  %shr = ashr i32 %and3, 2
  %add4 = add nsw i32 %shr, 2
  %div5 = sdiv i32 %add4, 3
  %add6 = add nsw i32 1, %div5
  %11 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_max_probes7 = getelementptr inbounds %struct.tdefl_compressor* %11, i32 0, i32 3
  %arrayidx8 = getelementptr inbounds [2 x i32]* %m_max_probes7, i32 0, i64 1
  store i32 %add6, i32* %arrayidx8, align 4
  %12 = load i32* %flags.addr, align 4
  %and9 = and i32 %12, 32768
  %tobool = icmp ne i32 %and9, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_hash = getelementptr inbounds %struct.tdefl_compressor* %13, i32 0, i32 41
  %14 = bitcast [32768 x i16]* %m_hash to i8*
  call void @llvm.memset.p0i8.i64(i8* %14, i8 0, i64 65536, i32 2, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %15 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor* %15, i32 0, i32 16
  store i32 0, i32* %m_bits_in, align 4
  %16 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf_dict_pos = getelementptr inbounds %struct.tdefl_compressor* %16, i32 0, i32 15
  store i32 0, i32* %m_lz_code_buf_dict_pos, align 4
  %17 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes = getelementptr inbounds %struct.tdefl_compressor* %17, i32 0, i32 14
  store i32 0, i32* %m_total_lz_bytes, align 4
  %18 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor* %18, i32 0, i32 8
  store i32 0, i32* %m_dict_size, align 4
  %19 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size = getelementptr inbounds %struct.tdefl_compressor* %19, i32 0, i32 7
  store i32 0, i32* %m_lookahead_size, align 4
  %20 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos = getelementptr inbounds %struct.tdefl_compressor* %20, i32 0, i32 6
  store i32 0, i32* %m_lookahead_pos, align 4
  %21 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_wants_to_finish = getelementptr inbounds %struct.tdefl_compressor* %21, i32 0, i32 25
  store i32 0, i32* %m_wants_to_finish, align 4
  %22 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor* %22, i32 0, i32 17
  store i32 0, i32* %m_bit_buffer, align 4
  %23 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_block_index = getelementptr inbounds %struct.tdefl_compressor* %23, i32 0, i32 24
  store i32 0, i32* %m_block_index, align 4
  %24 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_finished = getelementptr inbounds %struct.tdefl_compressor* %24, i32 0, i32 23
  store i32 0, i32* %m_finished, align 4
  %25 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining = getelementptr inbounds %struct.tdefl_compressor* %25, i32 0, i32 22
  store i32 0, i32* %m_output_flush_remaining, align 4
  %26 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_ofs = getelementptr inbounds %struct.tdefl_compressor* %26, i32 0, i32 21
  store i32 0, i32* %m_output_flush_ofs, align 4
  %27 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor* %27, i32 0, i32 39
  %arraydecay = getelementptr inbounds [65536 x i8]* %m_lz_code_buf, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8* %arraydecay, i64 1
  %28 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor* %28, i32 0, i32 9
  store i8* %add.ptr, i8** %m_pLZ_code_buf, align 8
  %29 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf10 = getelementptr inbounds %struct.tdefl_compressor* %29, i32 0, i32 39
  %arraydecay11 = getelementptr inbounds [65536 x i8]* %m_lz_code_buf10, i32 0, i32 0
  %30 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags = getelementptr inbounds %struct.tdefl_compressor* %30, i32 0, i32 10
  store i8* %arraydecay11, i8** %m_pLZ_flags, align 8
  %31 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left = getelementptr inbounds %struct.tdefl_compressor* %31, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left, align 4
  %32 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_buf = getelementptr inbounds %struct.tdefl_compressor* %32, i32 0, i32 42
  %arraydecay12 = getelementptr inbounds [85196 x i8]* %m_output_buf, i32 0, i32 0
  %33 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor* %33, i32 0, i32 11
  store i8* %arraydecay12, i8** %m_pOutput_buf, align 8
  %34 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_buf13 = getelementptr inbounds %struct.tdefl_compressor* %34, i32 0, i32 42
  %arraydecay14 = getelementptr inbounds [85196 x i8]* %m_output_buf13, i32 0, i32 0
  %35 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor* %35, i32 0, i32 12
  store i8* %arraydecay14, i8** %m_pOutput_buf_end, align 8
  %36 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor* %36, i32 0, i32 26
  store i32 0, i32* %m_prev_return_status, align 4
  %37 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_lit = getelementptr inbounds %struct.tdefl_compressor* %37, i32 0, i32 20
  store i32 0, i32* %m_saved_lit, align 4
  %38 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len = getelementptr inbounds %struct.tdefl_compressor* %38, i32 0, i32 19
  store i32 0, i32* %m_saved_match_len, align 4
  %39 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_dist = getelementptr inbounds %struct.tdefl_compressor* %39, i32 0, i32 18
  store i32 0, i32* %m_saved_match_dist, align 4
  %40 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_adler32 = getelementptr inbounds %struct.tdefl_compressor* %40, i32 0, i32 5
  store i32 1, i32* %m_adler32, align 4
  %41 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf = getelementptr inbounds %struct.tdefl_compressor* %41, i32 0, i32 27
  store i8* null, i8** %m_pIn_buf, align 8
  %42 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf = getelementptr inbounds %struct.tdefl_compressor* %42, i32 0, i32 28
  store i8* null, i8** %m_pOut_buf, align 8
  %43 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf_size = getelementptr inbounds %struct.tdefl_compressor* %43, i32 0, i32 29
  store i64* null, i64** %m_pIn_buf_size, align 8
  %44 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size = getelementptr inbounds %struct.tdefl_compressor* %44, i32 0, i32 30
  store i64* null, i64** %m_pOut_buf_size, align 8
  %45 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flush = getelementptr inbounds %struct.tdefl_compressor* %45, i32 0, i32 31
  store i32 0, i32* %m_flush, align 4
  %46 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor* %46, i32 0, i32 32
  store i8* null, i8** %m_pSrc, align 8
  %47 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left = getelementptr inbounds %struct.tdefl_compressor* %47, i32 0, i32 33
  store i64 0, i64* %m_src_buf_left, align 8
  %48 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs = getelementptr inbounds %struct.tdefl_compressor* %48, i32 0, i32 34
  store i64 0, i64* %m_out_buf_ofs, align 8
  %49 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor* %49, i32 0, i32 36
  %arrayidx15 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count, i32 0, i64 0
  %arrayidx16 = getelementptr inbounds [288 x i16]* %arrayidx15, i32 0, i64 0
  %50 = bitcast i16* %arrayidx16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %50, i8 0, i64 576, i32 2, i1 false)
  %51 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count17 = getelementptr inbounds %struct.tdefl_compressor* %51, i32 0, i32 36
  %arrayidx18 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count17, i32 0, i64 1
  %arrayidx19 = getelementptr inbounds [288 x i16]* %arrayidx18, i32 0, i64 0
  %52 = bitcast i16* %arrayidx19 to i8*
  call void @llvm.memset.p0i8.i64(i8* %52, i8 0, i64 64, i32 2, i1 false)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define i32 @mz_deflateEnd(%struct.mz_stream_s* %pStream) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  %0 = load %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s* %1, i32 0, i32 7
  %2 = load %struct.mz_internal_state** %state, align 8
  %tobool1 = icmp ne %struct.mz_internal_state* %2, null
  br i1 %tobool1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %3 = load %struct.mz_stream_s** %pStream.addr, align 8
  %zfree = getelementptr inbounds %struct.mz_stream_s* %3, i32 0, i32 9
  %4 = load void (i8*, i8*)** %zfree, align 8
  %5 = load %struct.mz_stream_s** %pStream.addr, align 8
  %opaque = getelementptr inbounds %struct.mz_stream_s* %5, i32 0, i32 10
  %6 = load i8** %opaque, align 8
  %7 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state3 = getelementptr inbounds %struct.mz_stream_s* %7, i32 0, i32 7
  %8 = load %struct.mz_internal_state** %state3, align 8
  %9 = bitcast %struct.mz_internal_state* %8 to i8*
  call void %4(i8* %6, i8* %9)
  %10 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state4 = getelementptr inbounds %struct.mz_stream_s* %10, i32 0, i32 7
  store %struct.mz_internal_state* null, %struct.mz_internal_state** %state4, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end5, %if.then
  %11 = load i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define i32 @mz_deflateReset(%struct.mz_stream_s* %pStream) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  %0 = load %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s* %1, i32 0, i32 7
  %2 = load %struct.mz_internal_state** %state, align 8
  %tobool1 = icmp ne %struct.mz_internal_state* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.mz_stream_s** %pStream.addr, align 8
  %zalloc = getelementptr inbounds %struct.mz_stream_s* %3, i32 0, i32 8
  %4 = load i8* (i8*, i64, i64)** %zalloc, align 8
  %tobool3 = icmp ne i8* (i8*, i64, i64)* %4, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %5 = load %struct.mz_stream_s** %pStream.addr, align 8
  %zfree = getelementptr inbounds %struct.mz_stream_s* %5, i32 0, i32 9
  %6 = load void (i8*, i8*)** %zfree, align 8
  %tobool5 = icmp ne void (i8*, i8*)* %6, null
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -2, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false4
  %7 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_out = getelementptr inbounds %struct.mz_stream_s* %7, i32 0, i32 5
  store i64 0, i64* %total_out, align 8
  %8 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_in = getelementptr inbounds %struct.mz_stream_s* %8, i32 0, i32 2
  store i64 0, i64* %total_in, align 8
  %9 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state6 = getelementptr inbounds %struct.mz_stream_s* %9, i32 0, i32 7
  %10 = load %struct.mz_internal_state** %state6, align 8
  %11 = bitcast %struct.mz_internal_state* %10 to %struct.tdefl_compressor*
  %12 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state7 = getelementptr inbounds %struct.mz_stream_s* %12, i32 0, i32 7
  %13 = load %struct.mz_internal_state** %state7, align 8
  %14 = bitcast %struct.mz_internal_state* %13 to %struct.tdefl_compressor*
  %m_flags = getelementptr inbounds %struct.tdefl_compressor* %14, i32 0, i32 2
  %15 = load i32* %m_flags, align 4
  %call = call i32 @tdefl_init(%struct.tdefl_compressor* %11, i32 (i8*, i32, i8*)* null, i8* null, i32 %15)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %16 = load i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define i32 @mz_deflate(%struct.mz_stream_s* %pStream, i32 %flush) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %flush.addr = alloca i32, align 4
  %in_bytes = alloca i64, align 8
  %out_bytes = alloca i64, align 8
  %orig_total_in = alloca i64, align 8
  %orig_total_out = alloca i64, align 8
  %mz_status = alloca i32, align 4
  %defl_status = alloca i32, align 4
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  store i32 %flush, i32* %flush.addr, align 4
  store i32 0, i32* %mz_status, align 4
  %0 = load %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s* %1, i32 0, i32 7
  %2 = load %struct.mz_internal_state** %state, align 8
  %tobool1 = icmp ne %struct.mz_internal_state* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32* %flush.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %lor.lhs.false2
  %4 = load i32* %flush.addr, align 4
  %cmp4 = icmp sgt i32 %4, 4
  br i1 %cmp4, label %if.then, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false3
  %5 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_out = getelementptr inbounds %struct.mz_stream_s* %5, i32 0, i32 3
  %6 = load i8** %next_out, align 8
  %tobool6 = icmp ne i8* %6, null
  br i1 %tobool6, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false3, %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -2, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false5
  %7 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out = getelementptr inbounds %struct.mz_stream_s* %7, i32 0, i32 4
  %8 = load i32* %avail_out, align 4
  %tobool7 = icmp ne i32 %8, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end
  store i32 -5, i32* %retval
  br label %return

if.end9:                                          ; preds = %if.end
  %9 = load i32* %flush.addr, align 4
  %cmp10 = icmp eq i32 %9, 1
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end9
  store i32 2, i32* %flush.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.end9
  %10 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state13 = getelementptr inbounds %struct.mz_stream_s* %10, i32 0, i32 7
  %11 = load %struct.mz_internal_state** %state13, align 8
  %12 = bitcast %struct.mz_internal_state* %11 to %struct.tdefl_compressor*
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor* %12, i32 0, i32 26
  %13 = load i32* %m_prev_return_status, align 4
  %cmp14 = icmp eq i32 %13, 1
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end12
  %14 = load i32* %flush.addr, align 4
  %cmp16 = icmp eq i32 %14, 4
  %cond = select i1 %cmp16, i32 1, i32 -5
  store i32 %cond, i32* %retval
  br label %return

if.end17:                                         ; preds = %if.end12
  %15 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_in = getelementptr inbounds %struct.mz_stream_s* %15, i32 0, i32 2
  %16 = load i64* %total_in, align 8
  store i64 %16, i64* %orig_total_in, align 8
  %17 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_out = getelementptr inbounds %struct.mz_stream_s* %17, i32 0, i32 5
  %18 = load i64* %total_out, align 8
  store i64 %18, i64* %orig_total_out, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end73, %if.end17
  %19 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in = getelementptr inbounds %struct.mz_stream_s* %19, i32 0, i32 1
  %20 = load i32* %avail_in, align 4
  %conv = zext i32 %20 to i64
  store i64 %conv, i64* %in_bytes, align 8
  %21 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out18 = getelementptr inbounds %struct.mz_stream_s* %21, i32 0, i32 4
  %22 = load i32* %avail_out18, align 4
  %conv19 = zext i32 %22 to i64
  store i64 %conv19, i64* %out_bytes, align 8
  %23 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state20 = getelementptr inbounds %struct.mz_stream_s* %23, i32 0, i32 7
  %24 = load %struct.mz_internal_state** %state20, align 8
  %25 = bitcast %struct.mz_internal_state* %24 to %struct.tdefl_compressor*
  %26 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_in = getelementptr inbounds %struct.mz_stream_s* %26, i32 0, i32 0
  %27 = load i8** %next_in, align 8
  %28 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_out21 = getelementptr inbounds %struct.mz_stream_s* %28, i32 0, i32 3
  %29 = load i8** %next_out21, align 8
  %30 = load i32* %flush.addr, align 4
  %call = call i32 @tdefl_compress(%struct.tdefl_compressor* %25, i8* %27, i64* %in_bytes, i8* %29, i64* %out_bytes, i32 %30)
  store i32 %call, i32* %defl_status, align 4
  %31 = load i64* %in_bytes, align 8
  %conv22 = trunc i64 %31 to i32
  %32 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_in23 = getelementptr inbounds %struct.mz_stream_s* %32, i32 0, i32 0
  %33 = load i8** %next_in23, align 8
  %idx.ext = zext i32 %conv22 to i64
  %add.ptr = getelementptr inbounds i8* %33, i64 %idx.ext
  store i8* %add.ptr, i8** %next_in23, align 8
  %34 = load i64* %in_bytes, align 8
  %conv24 = trunc i64 %34 to i32
  %35 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in25 = getelementptr inbounds %struct.mz_stream_s* %35, i32 0, i32 1
  %36 = load i32* %avail_in25, align 4
  %sub = sub i32 %36, %conv24
  store i32 %sub, i32* %avail_in25, align 4
  %37 = load i64* %in_bytes, align 8
  %conv26 = trunc i64 %37 to i32
  %conv27 = zext i32 %conv26 to i64
  %38 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_in28 = getelementptr inbounds %struct.mz_stream_s* %38, i32 0, i32 2
  %39 = load i64* %total_in28, align 8
  %add = add i64 %39, %conv27
  store i64 %add, i64* %total_in28, align 8
  %40 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state29 = getelementptr inbounds %struct.mz_stream_s* %40, i32 0, i32 7
  %41 = load %struct.mz_internal_state** %state29, align 8
  %42 = bitcast %struct.mz_internal_state* %41 to %struct.tdefl_compressor*
  %call30 = call i32 @tdefl_get_adler32(%struct.tdefl_compressor* %42)
  %conv31 = zext i32 %call30 to i64
  %43 = load %struct.mz_stream_s** %pStream.addr, align 8
  %adler = getelementptr inbounds %struct.mz_stream_s* %43, i32 0, i32 12
  store i64 %conv31, i64* %adler, align 8
  %44 = load i64* %out_bytes, align 8
  %conv32 = trunc i64 %44 to i32
  %45 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_out33 = getelementptr inbounds %struct.mz_stream_s* %45, i32 0, i32 3
  %46 = load i8** %next_out33, align 8
  %idx.ext34 = zext i32 %conv32 to i64
  %add.ptr35 = getelementptr inbounds i8* %46, i64 %idx.ext34
  store i8* %add.ptr35, i8** %next_out33, align 8
  %47 = load i64* %out_bytes, align 8
  %conv36 = trunc i64 %47 to i32
  %48 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out37 = getelementptr inbounds %struct.mz_stream_s* %48, i32 0, i32 4
  %49 = load i32* %avail_out37, align 4
  %sub38 = sub i32 %49, %conv36
  store i32 %sub38, i32* %avail_out37, align 4
  %50 = load i64* %out_bytes, align 8
  %conv39 = trunc i64 %50 to i32
  %conv40 = zext i32 %conv39 to i64
  %51 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_out41 = getelementptr inbounds %struct.mz_stream_s* %51, i32 0, i32 5
  %52 = load i64* %total_out41, align 8
  %add42 = add i64 %52, %conv40
  store i64 %add42, i64* %total_out41, align 8
  %53 = load i32* %defl_status, align 4
  %cmp43 = icmp slt i32 %53, 0
  br i1 %cmp43, label %if.then45, label %if.else

if.then45:                                        ; preds = %for.cond
  store i32 -2, i32* %mz_status, align 4
  br label %for.end

if.else:                                          ; preds = %for.cond
  %54 = load i32* %defl_status, align 4
  %cmp46 = icmp eq i32 %54, 1
  br i1 %cmp46, label %if.then48, label %if.else49

if.then48:                                        ; preds = %if.else
  store i32 1, i32* %mz_status, align 4
  br label %for.end

if.else49:                                        ; preds = %if.else
  %55 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out50 = getelementptr inbounds %struct.mz_stream_s* %55, i32 0, i32 4
  %56 = load i32* %avail_out50, align 4
  %tobool51 = icmp ne i32 %56, 0
  br i1 %tobool51, label %if.else53, label %if.then52

if.then52:                                        ; preds = %if.else49
  br label %for.end

if.else53:                                        ; preds = %if.else49
  %57 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in54 = getelementptr inbounds %struct.mz_stream_s* %57, i32 0, i32 1
  %58 = load i32* %avail_in54, align 4
  %tobool55 = icmp ne i32 %58, 0
  br i1 %tobool55, label %if.end70, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else53
  %59 = load i32* %flush.addr, align 4
  %cmp56 = icmp ne i32 %59, 4
  br i1 %cmp56, label %if.then58, label %if.end70

if.then58:                                        ; preds = %land.lhs.true
  %60 = load i32* %flush.addr, align 4
  %tobool59 = icmp ne i32 %60, 0
  br i1 %tobool59, label %if.then68, label %lor.lhs.false60

lor.lhs.false60:                                  ; preds = %if.then58
  %61 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_in61 = getelementptr inbounds %struct.mz_stream_s* %61, i32 0, i32 2
  %62 = load i64* %total_in61, align 8
  %63 = load i64* %orig_total_in, align 8
  %cmp62 = icmp ne i64 %62, %63
  br i1 %cmp62, label %if.then68, label %lor.lhs.false64

lor.lhs.false64:                                  ; preds = %lor.lhs.false60
  %64 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_out65 = getelementptr inbounds %struct.mz_stream_s* %64, i32 0, i32 5
  %65 = load i64* %total_out65, align 8
  %66 = load i64* %orig_total_out, align 8
  %cmp66 = icmp ne i64 %65, %66
  br i1 %cmp66, label %if.then68, label %if.end69

if.then68:                                        ; preds = %lor.lhs.false64, %lor.lhs.false60, %if.then58
  br label %for.end

if.end69:                                         ; preds = %lor.lhs.false64
  store i32 -5, i32* %retval
  br label %return

if.end70:                                         ; preds = %land.lhs.true, %if.else53
  br label %if.end71

if.end71:                                         ; preds = %if.end70
  br label %if.end72

if.end72:                                         ; preds = %if.end71
  br label %if.end73

if.end73:                                         ; preds = %if.end72
  br label %for.cond

for.end:                                          ; preds = %if.then68, %if.then52, %if.then48, %if.then45
  %67 = load i32* %mz_status, align 4
  store i32 %67, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.end69, %if.then15, %if.then8, %if.then
  %68 = load i32* %retval
  ret i32 %68
}

; Function Attrs: nounwind uwtable
define i32 @tdefl_compress(%struct.tdefl_compressor* %d, i8* %pIn_buf, i64* %pIn_buf_size, i8* %pOut_buf, i64* %pOut_buf_size, i32 %flush) #0 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %pIn_buf.addr = alloca i8*, align 8
  %pIn_buf_size.addr = alloca i64*, align 8
  %pOut_buf.addr = alloca i8*, align 8
  %pOut_buf_size.addr = alloca i64*, align 8
  %flush.addr = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  store i8* %pIn_buf, i8** %pIn_buf.addr, align 8
  store i64* %pIn_buf_size, i64** %pIn_buf_size.addr, align 8
  store i8* %pOut_buf, i8** %pOut_buf.addr, align 8
  store i64* %pOut_buf_size, i64** %pOut_buf_size.addr, align 8
  store i32 %flush, i32* %flush.addr, align 4
  %0 = load %struct.tdefl_compressor** %d.addr, align 8
  %tobool = icmp ne %struct.tdefl_compressor* %0, null
  br i1 %tobool, label %if.end6, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64** %pIn_buf_size.addr, align 8
  %tobool1 = icmp ne i64* %1, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %2 = load i64** %pIn_buf_size.addr, align 8
  store i64 0, i64* %2, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %3 = load i64** %pOut_buf_size.addr, align 8
  %tobool3 = icmp ne i64* %3, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %4 = load i64** %pOut_buf_size.addr, align 8
  store i64 0, i64* %4, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  store i32 -2, i32* %retval
  br label %return

if.end6:                                          ; preds = %entry
  %5 = load i8** %pIn_buf.addr, align 8
  %6 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf = getelementptr inbounds %struct.tdefl_compressor* %6, i32 0, i32 27
  store i8* %5, i8** %m_pIn_buf, align 8
  %7 = load i64** %pIn_buf_size.addr, align 8
  %8 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf_size = getelementptr inbounds %struct.tdefl_compressor* %8, i32 0, i32 29
  store i64* %7, i64** %m_pIn_buf_size, align 8
  %9 = load i8** %pOut_buf.addr, align 8
  %10 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf = getelementptr inbounds %struct.tdefl_compressor* %10, i32 0, i32 28
  store i8* %9, i8** %m_pOut_buf, align 8
  %11 = load i64** %pOut_buf_size.addr, align 8
  %12 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size = getelementptr inbounds %struct.tdefl_compressor* %12, i32 0, i32 30
  store i64* %11, i64** %m_pOut_buf_size, align 8
  %13 = load i8** %pIn_buf.addr, align 8
  %14 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor* %14, i32 0, i32 32
  store i8* %13, i8** %m_pSrc, align 8
  %15 = load i64** %pIn_buf_size.addr, align 8
  %tobool7 = icmp ne i64* %15, null
  br i1 %tobool7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end6
  %16 = load i64** %pIn_buf_size.addr, align 8
  %17 = load i64* %16, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %17, %cond.true ], [ 0, %cond.false ]
  %18 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left = getelementptr inbounds %struct.tdefl_compressor* %18, i32 0, i32 33
  store i64 %cond, i64* %m_src_buf_left, align 8
  %19 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs = getelementptr inbounds %struct.tdefl_compressor* %19, i32 0, i32 34
  store i64 0, i64* %m_out_buf_ofs, align 8
  %20 = load i32* %flush.addr, align 4
  %21 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flush = getelementptr inbounds %struct.tdefl_compressor* %21, i32 0, i32 31
  store i32 %20, i32* %m_flush, align 4
  %22 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_func = getelementptr inbounds %struct.tdefl_compressor* %22, i32 0, i32 0
  %23 = load i32 (i8*, i32, i8*)** %m_pPut_buf_func, align 8
  %cmp = icmp ne i32 (i8*, i32, i8*)* %23, null
  %conv = zext i1 %cmp to i32
  %24 = load i8** %pOut_buf.addr, align 8
  %cmp8 = icmp ne i8* %24, null
  br i1 %cmp8, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end
  %25 = load i64** %pOut_buf_size.addr, align 8
  %cmp10 = icmp ne i64* %25, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.end
  %26 = phi i1 [ true, %cond.end ], [ %cmp10, %lor.rhs ]
  %lor.ext = zext i1 %26 to i32
  %cmp12 = icmp eq i32 %conv, %lor.ext
  br i1 %cmp12, label %if.then32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %lor.end
  %27 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor* %27, i32 0, i32 26
  %28 = load i32* %m_prev_return_status, align 4
  %cmp14 = icmp ne i32 %28, 0
  br i1 %cmp14, label %if.then32, label %lor.lhs.false16

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %29 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_wants_to_finish = getelementptr inbounds %struct.tdefl_compressor* %29, i32 0, i32 25
  %30 = load i32* %m_wants_to_finish, align 4
  %tobool17 = icmp ne i32 %30, 0
  br i1 %tobool17, label %land.lhs.true, label %lor.lhs.false20

land.lhs.true:                                    ; preds = %lor.lhs.false16
  %31 = load i32* %flush.addr, align 4
  %cmp18 = icmp ne i32 %31, 4
  br i1 %cmp18, label %if.then32, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %land.lhs.true, %lor.lhs.false16
  %32 = load i64** %pIn_buf_size.addr, align 8
  %tobool21 = icmp ne i64* %32, null
  br i1 %tobool21, label %land.lhs.true22, label %lor.lhs.false26

land.lhs.true22:                                  ; preds = %lor.lhs.false20
  %33 = load i64** %pIn_buf_size.addr, align 8
  %34 = load i64* %33, align 8
  %tobool23 = icmp ne i64 %34, 0
  br i1 %tobool23, label %land.lhs.true24, label %lor.lhs.false26

land.lhs.true24:                                  ; preds = %land.lhs.true22
  %35 = load i8** %pIn_buf.addr, align 8
  %tobool25 = icmp ne i8* %35, null
  br i1 %tobool25, label %lor.lhs.false26, label %if.then32

lor.lhs.false26:                                  ; preds = %land.lhs.true24, %land.lhs.true22, %lor.lhs.false20
  %36 = load i64** %pOut_buf_size.addr, align 8
  %tobool27 = icmp ne i64* %36, null
  br i1 %tobool27, label %land.lhs.true28, label %if.end40

land.lhs.true28:                                  ; preds = %lor.lhs.false26
  %37 = load i64** %pOut_buf_size.addr, align 8
  %38 = load i64* %37, align 8
  %tobool29 = icmp ne i64 %38, 0
  br i1 %tobool29, label %land.lhs.true30, label %if.end40

land.lhs.true30:                                  ; preds = %land.lhs.true28
  %39 = load i8** %pOut_buf.addr, align 8
  %tobool31 = icmp ne i8* %39, null
  br i1 %tobool31, label %if.end40, label %if.then32

if.then32:                                        ; preds = %land.lhs.true30, %land.lhs.true24, %land.lhs.true, %lor.lhs.false, %lor.end
  %40 = load i64** %pIn_buf_size.addr, align 8
  %tobool33 = icmp ne i64* %40, null
  br i1 %tobool33, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.then32
  %41 = load i64** %pIn_buf_size.addr, align 8
  store i64 0, i64* %41, align 8
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.then32
  %42 = load i64** %pOut_buf_size.addr, align 8
  %tobool36 = icmp ne i64* %42, null
  br i1 %tobool36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.end35
  %43 = load i64** %pOut_buf_size.addr, align 8
  store i64 0, i64* %43, align 8
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %if.end35
  %44 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status39 = getelementptr inbounds %struct.tdefl_compressor* %44, i32 0, i32 26
  store i32 -2, i32* %m_prev_return_status39, align 4
  store i32 -2, i32* %retval
  br label %return

if.end40:                                         ; preds = %land.lhs.true30, %land.lhs.true28, %lor.lhs.false26
  %45 = load i32* %flush.addr, align 4
  %cmp41 = icmp eq i32 %45, 4
  %conv42 = zext i1 %cmp41 to i32
  %46 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_wants_to_finish43 = getelementptr inbounds %struct.tdefl_compressor* %46, i32 0, i32 25
  %47 = load i32* %m_wants_to_finish43, align 4
  %or = or i32 %47, %conv42
  store i32 %or, i32* %m_wants_to_finish43, align 4
  %48 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining = getelementptr inbounds %struct.tdefl_compressor* %48, i32 0, i32 22
  %49 = load i32* %m_output_flush_remaining, align 4
  %tobool44 = icmp ne i32 %49, 0
  br i1 %tobool44, label %if.then47, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %if.end40
  %50 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_finished = getelementptr inbounds %struct.tdefl_compressor* %50, i32 0, i32 23
  %51 = load i32* %m_finished, align 4
  %tobool46 = icmp ne i32 %51, 0
  br i1 %tobool46, label %if.then47, label %if.end49

if.then47:                                        ; preds = %lor.lhs.false45, %if.end40
  %52 = load %struct.tdefl_compressor** %d.addr, align 8
  %call = call i32 @tdefl_flush_output_buffer(%struct.tdefl_compressor* %52)
  %53 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status48 = getelementptr inbounds %struct.tdefl_compressor* %53, i32 0, i32 26
  store i32 %call, i32* %m_prev_return_status48, align 4
  store i32 %call, i32* %retval
  br label %return

if.end49:                                         ; preds = %lor.lhs.false45
  %54 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flags = getelementptr inbounds %struct.tdefl_compressor* %54, i32 0, i32 2
  %55 = load i32* %m_flags, align 4
  %and = and i32 %55, 4095
  %cmp50 = icmp eq i32 %and, 1
  br i1 %cmp50, label %land.lhs.true52, label %if.else

land.lhs.true52:                                  ; preds = %if.end49
  %56 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flags53 = getelementptr inbounds %struct.tdefl_compressor* %56, i32 0, i32 2
  %57 = load i32* %m_flags53, align 4
  %and54 = and i32 %57, 16384
  %cmp55 = icmp ne i32 %and54, 0
  br i1 %cmp55, label %land.lhs.true57, label %if.else

land.lhs.true57:                                  ; preds = %land.lhs.true52
  %58 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flags58 = getelementptr inbounds %struct.tdefl_compressor* %58, i32 0, i32 2
  %59 = load i32* %m_flags58, align 4
  %and59 = and i32 %59, 720896
  %cmp60 = icmp eq i32 %and59, 0
  br i1 %cmp60, label %if.then62, label %if.else

if.then62:                                        ; preds = %land.lhs.true57
  %60 = load %struct.tdefl_compressor** %d.addr, align 8
  %call63 = call i32 @tdefl_compress_fast(%struct.tdefl_compressor* %60)
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.end67, label %if.then65

if.then65:                                        ; preds = %if.then62
  %61 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status66 = getelementptr inbounds %struct.tdefl_compressor* %61, i32 0, i32 26
  %62 = load i32* %m_prev_return_status66, align 4
  store i32 %62, i32* %retval
  br label %return

if.end67:                                         ; preds = %if.then62
  br label %if.end73

if.else:                                          ; preds = %land.lhs.true57, %land.lhs.true52, %if.end49
  %63 = load %struct.tdefl_compressor** %d.addr, align 8
  %call68 = call i32 @tdefl_compress_normal(%struct.tdefl_compressor* %63)
  %tobool69 = icmp ne i32 %call68, 0
  br i1 %tobool69, label %if.end72, label %if.then70

if.then70:                                        ; preds = %if.else
  %64 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status71 = getelementptr inbounds %struct.tdefl_compressor* %64, i32 0, i32 26
  %65 = load i32* %m_prev_return_status71, align 4
  store i32 %65, i32* %retval
  br label %return

if.end72:                                         ; preds = %if.else
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.end67
  %66 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flags74 = getelementptr inbounds %struct.tdefl_compressor* %66, i32 0, i32 2
  %67 = load i32* %m_flags74, align 4
  %and75 = and i32 %67, 12288
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %land.lhs.true77, label %if.end85

land.lhs.true77:                                  ; preds = %if.end73
  %68 = load i8** %pIn_buf.addr, align 8
  %tobool78 = icmp ne i8* %68, null
  br i1 %tobool78, label %if.then79, label %if.end85

if.then79:                                        ; preds = %land.lhs.true77
  %69 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_adler32 = getelementptr inbounds %struct.tdefl_compressor* %69, i32 0, i32 5
  %70 = load i32* %m_adler32, align 4
  %conv80 = zext i32 %70 to i64
  %71 = load i8** %pIn_buf.addr, align 8
  %72 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc81 = getelementptr inbounds %struct.tdefl_compressor* %72, i32 0, i32 32
  %73 = load i8** %m_pSrc81, align 8
  %74 = load i8** %pIn_buf.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %73 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %74 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call82 = call i64 @mz_adler32(i64 %conv80, i8* %71, i64 %sub.ptr.sub)
  %conv83 = trunc i64 %call82 to i32
  %75 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_adler3284 = getelementptr inbounds %struct.tdefl_compressor* %75, i32 0, i32 5
  store i32 %conv83, i32* %m_adler3284, align 4
  br label %if.end85

if.end85:                                         ; preds = %if.then79, %land.lhs.true77, %if.end73
  %76 = load i32* %flush.addr, align 4
  %tobool86 = icmp ne i32 %76, 0
  br i1 %tobool86, label %land.lhs.true87, label %if.end109

land.lhs.true87:                                  ; preds = %if.end85
  %77 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size = getelementptr inbounds %struct.tdefl_compressor* %77, i32 0, i32 7
  %78 = load i32* %m_lookahead_size, align 4
  %tobool88 = icmp ne i32 %78, 0
  br i1 %tobool88, label %if.end109, label %land.lhs.true89

land.lhs.true89:                                  ; preds = %land.lhs.true87
  %79 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left90 = getelementptr inbounds %struct.tdefl_compressor* %79, i32 0, i32 33
  %80 = load i64* %m_src_buf_left90, align 8
  %tobool91 = icmp ne i64 %80, 0
  br i1 %tobool91, label %if.end109, label %land.lhs.true92

land.lhs.true92:                                  ; preds = %land.lhs.true89
  %81 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining93 = getelementptr inbounds %struct.tdefl_compressor* %81, i32 0, i32 22
  %82 = load i32* %m_output_flush_remaining93, align 4
  %tobool94 = icmp ne i32 %82, 0
  br i1 %tobool94, label %if.end109, label %if.then95

if.then95:                                        ; preds = %land.lhs.true92
  %83 = load %struct.tdefl_compressor** %d.addr, align 8
  %84 = load i32* %flush.addr, align 4
  %call96 = call i32 @tdefl_flush_block(%struct.tdefl_compressor* %83, i32 %84)
  %cmp97 = icmp slt i32 %call96, 0
  br i1 %cmp97, label %if.then99, label %if.end101

if.then99:                                        ; preds = %if.then95
  %85 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status100 = getelementptr inbounds %struct.tdefl_compressor* %85, i32 0, i32 26
  %86 = load i32* %m_prev_return_status100, align 4
  store i32 %86, i32* %retval
  br label %return

if.end101:                                        ; preds = %if.then95
  %87 = load i32* %flush.addr, align 4
  %cmp102 = icmp eq i32 %87, 4
  %conv103 = zext i1 %cmp102 to i32
  %88 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_finished104 = getelementptr inbounds %struct.tdefl_compressor* %88, i32 0, i32 23
  store i32 %conv103, i32* %m_finished104, align 4
  %89 = load i32* %flush.addr, align 4
  %cmp105 = icmp eq i32 %89, 3
  br i1 %cmp105, label %if.then107, label %if.end108

if.then107:                                       ; preds = %if.end101
  %90 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_hash = getelementptr inbounds %struct.tdefl_compressor* %90, i32 0, i32 41
  %91 = bitcast [32768 x i16]* %m_hash to i8*
  call void @llvm.memset.p0i8.i64(i8* %91, i8 0, i64 65536, i32 2, i1 false)
  %92 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_next = getelementptr inbounds %struct.tdefl_compressor* %92, i32 0, i32 40
  %93 = bitcast [32768 x i16]* %m_next to i8*
  call void @llvm.memset.p0i8.i64(i8* %93, i8 0, i64 65536, i32 2, i1 false)
  %94 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor* %94, i32 0, i32 8
  store i32 0, i32* %m_dict_size, align 4
  br label %if.end108

if.end108:                                        ; preds = %if.then107, %if.end101
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %land.lhs.true92, %land.lhs.true89, %land.lhs.true87, %if.end85
  %95 = load %struct.tdefl_compressor** %d.addr, align 8
  %call110 = call i32 @tdefl_flush_output_buffer(%struct.tdefl_compressor* %95)
  %96 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status111 = getelementptr inbounds %struct.tdefl_compressor* %96, i32 0, i32 26
  store i32 %call110, i32* %m_prev_return_status111, align 4
  store i32 %call110, i32* %retval
  br label %return

return:                                           ; preds = %if.end109, %if.then99, %if.then70, %if.then65, %if.then47, %if.end38, %if.end5
  %97 = load i32* %retval
  ret i32 %97
}

; Function Attrs: nounwind uwtable
define i32 @tdefl_get_adler32(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  %0 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_adler32 = getelementptr inbounds %struct.tdefl_compressor* %0, i32 0, i32 5
  %1 = load i32* %m_adler32, align 4
  ret i32 %1
}

; Function Attrs: nounwind uwtable
define i64 @mz_deflateBound(%struct.mz_stream_s* %pStream, i64 %source_len) #0 {
entry:
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %source_len.addr = alloca i64, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  store i64 %source_len, i64* %source_len.addr, align 8
  %0 = load %struct.mz_stream_s** %pStream.addr, align 8
  %1 = load i64* %source_len.addr, align 8
  %mul = mul i64 %1, 110
  %div = udiv i64 %mul, 100
  %add = add i64 128, %div
  %2 = load i64* %source_len.addr, align 8
  %add1 = add i64 128, %2
  %3 = load i64* %source_len.addr, align 8
  %div2 = udiv i64 %3, 31744
  %add3 = add i64 %div2, 1
  %mul4 = mul i64 %add3, 5
  %add5 = add i64 %add1, %mul4
  %cmp = icmp ugt i64 %add, %add5
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load i64* %source_len.addr, align 8
  %mul6 = mul i64 %4, 110
  %div7 = udiv i64 %mul6, 100
  %add8 = add i64 128, %div7
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load i64* %source_len.addr, align 8
  %add9 = add i64 128, %5
  %6 = load i64* %source_len.addr, align 8
  %div10 = udiv i64 %6, 31744
  %add11 = add i64 %div10, 1
  %mul12 = mul i64 %add11, 5
  %add13 = add i64 %add9, %mul12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add8, %cond.true ], [ %add13, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i32 @mz_compress2(i8* %pDest, i64* %pDest_len, i8* %pSource, i64 %source_len, i32 %level) #0 {
entry:
  %retval = alloca i32, align 4
  %pDest.addr = alloca i8*, align 8
  %pDest_len.addr = alloca i64*, align 8
  %pSource.addr = alloca i8*, align 8
  %source_len.addr = alloca i64, align 8
  %level.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %stream = alloca %struct.mz_stream_s, align 8
  store i8* %pDest, i8** %pDest.addr, align 8
  store i64* %pDest_len, i64** %pDest_len.addr, align 8
  store i8* %pSource, i8** %pSource.addr, align 8
  store i64 %source_len, i64* %source_len.addr, align 8
  store i32 %level, i32* %level.addr, align 4
  %0 = bitcast %struct.mz_stream_s* %stream to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 112, i32 8, i1 false)
  %1 = load i64* %source_len.addr, align 8
  %2 = load i64** %pDest_len.addr, align 8
  %3 = load i64* %2, align 8
  %or = or i64 %1, %3
  %cmp = icmp ugt i64 %or, 4294967295
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -10000, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8** %pSource.addr, align 8
  %next_in = getelementptr inbounds %struct.mz_stream_s* %stream, i32 0, i32 0
  store i8* %4, i8** %next_in, align 8
  %5 = load i64* %source_len.addr, align 8
  %conv = trunc i64 %5 to i32
  %avail_in = getelementptr inbounds %struct.mz_stream_s* %stream, i32 0, i32 1
  store i32 %conv, i32* %avail_in, align 4
  %6 = load i8** %pDest.addr, align 8
  %next_out = getelementptr inbounds %struct.mz_stream_s* %stream, i32 0, i32 3
  store i8* %6, i8** %next_out, align 8
  %7 = load i64** %pDest_len.addr, align 8
  %8 = load i64* %7, align 8
  %conv1 = trunc i64 %8 to i32
  %avail_out = getelementptr inbounds %struct.mz_stream_s* %stream, i32 0, i32 4
  store i32 %conv1, i32* %avail_out, align 4
  %9 = load i32* %level.addr, align 4
  %call = call i32 @mz_deflateInit(%struct.mz_stream_s* %stream, i32 %9)
  store i32 %call, i32* %status, align 4
  %10 = load i32* %status, align 4
  %cmp2 = icmp ne i32 %10, 0
  br i1 %cmp2, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %11 = load i32* %status, align 4
  store i32 %11, i32* %retval
  br label %return

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @mz_deflate(%struct.mz_stream_s* %stream, i32 4)
  store i32 %call6, i32* %status, align 4
  %12 = load i32* %status, align 4
  %cmp7 = icmp ne i32 %12, 1
  br i1 %cmp7, label %if.then9, label %if.end13

if.then9:                                         ; preds = %if.end5
  %call10 = call i32 @mz_deflateEnd(%struct.mz_stream_s* %stream)
  %13 = load i32* %status, align 4
  %cmp11 = icmp eq i32 %13, 0
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then9
  br label %cond.end

cond.false:                                       ; preds = %if.then9
  %14 = load i32* %status, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -5, %cond.true ], [ %14, %cond.false ]
  store i32 %cond, i32* %retval
  br label %return

if.end13:                                         ; preds = %if.end5
  %total_out = getelementptr inbounds %struct.mz_stream_s* %stream, i32 0, i32 5
  %15 = load i64* %total_out, align 8
  %16 = load i64** %pDest_len.addr, align 8
  store i64 %15, i64* %16, align 8
  %call14 = call i32 @mz_deflateEnd(%struct.mz_stream_s* %stream)
  store i32 %call14, i32* %retval
  br label %return

return:                                           ; preds = %if.end13, %cond.end, %if.then4, %if.then
  %17 = load i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define i32 @mz_compress(i8* %pDest, i64* %pDest_len, i8* %pSource, i64 %source_len) #0 {
entry:
  %pDest.addr = alloca i8*, align 8
  %pDest_len.addr = alloca i64*, align 8
  %pSource.addr = alloca i8*, align 8
  %source_len.addr = alloca i64, align 8
  store i8* %pDest, i8** %pDest.addr, align 8
  store i64* %pDest_len, i64** %pDest_len.addr, align 8
  store i8* %pSource, i8** %pSource.addr, align 8
  store i64 %source_len, i64* %source_len.addr, align 8
  %0 = load i8** %pDest.addr, align 8
  %1 = load i64** %pDest_len.addr, align 8
  %2 = load i8** %pSource.addr, align 8
  %3 = load i64* %source_len.addr, align 8
  %call = call i32 @mz_compress2(i8* %0, i64* %1, i8* %2, i64 %3, i32 -1)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define i64 @mz_compressBound(i64 %source_len) #0 {
entry:
  %source_len.addr = alloca i64, align 8
  store i64 %source_len, i64* %source_len.addr, align 8
  %0 = load i64* %source_len.addr, align 8
  %call = call i64 @mz_deflateBound(%struct.mz_stream_s* null, i64 %0)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define i32 @mz_inflateInit2(%struct.mz_stream_s* %pStream, i32 %window_bits) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %window_bits.addr = alloca i32, align 4
  %pDecomp = alloca %struct.inflate_state*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  store i32 %window_bits, i32* %window_bits.addr, align 4
  %0 = load %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32* %window_bits.addr, align 4
  %cmp = icmp ne i32 %1, 15
  br i1 %cmp, label %land.lhs.true, label %if.end3

land.lhs.true:                                    ; preds = %if.end
  %2 = load i32* %window_bits.addr, align 4
  %sub = sub nsw i32 0, %2
  %cmp1 = icmp ne i32 %sub, 15
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %land.lhs.true
  store i32 -10000, i32* %retval
  br label %return

if.end3:                                          ; preds = %land.lhs.true, %if.end
  %3 = load %struct.mz_stream_s** %pStream.addr, align 8
  %data_type = getelementptr inbounds %struct.mz_stream_s* %3, i32 0, i32 11
  store i32 0, i32* %data_type, align 4
  %4 = load %struct.mz_stream_s** %pStream.addr, align 8
  %adler = getelementptr inbounds %struct.mz_stream_s* %4, i32 0, i32 12
  store i64 0, i64* %adler, align 8
  %5 = load %struct.mz_stream_s** %pStream.addr, align 8
  %msg = getelementptr inbounds %struct.mz_stream_s* %5, i32 0, i32 6
  store i8* null, i8** %msg, align 8
  %6 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_in = getelementptr inbounds %struct.mz_stream_s* %6, i32 0, i32 2
  store i64 0, i64* %total_in, align 8
  %7 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_out = getelementptr inbounds %struct.mz_stream_s* %7, i32 0, i32 5
  store i64 0, i64* %total_out, align 8
  %8 = load %struct.mz_stream_s** %pStream.addr, align 8
  %reserved = getelementptr inbounds %struct.mz_stream_s* %8, i32 0, i32 13
  store i64 0, i64* %reserved, align 8
  %9 = load %struct.mz_stream_s** %pStream.addr, align 8
  %zalloc = getelementptr inbounds %struct.mz_stream_s* %9, i32 0, i32 8
  %10 = load i8* (i8*, i64, i64)** %zalloc, align 8
  %tobool4 = icmp ne i8* (i8*, i64, i64)* %10, null
  br i1 %tobool4, label %if.end7, label %if.then5

if.then5:                                         ; preds = %if.end3
  %11 = load %struct.mz_stream_s** %pStream.addr, align 8
  %zalloc6 = getelementptr inbounds %struct.mz_stream_s* %11, i32 0, i32 8
  store i8* (i8*, i64, i64)* @def_alloc_func, i8* (i8*, i64, i64)** %zalloc6, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end3
  %12 = load %struct.mz_stream_s** %pStream.addr, align 8
  %zfree = getelementptr inbounds %struct.mz_stream_s* %12, i32 0, i32 9
  %13 = load void (i8*, i8*)** %zfree, align 8
  %tobool8 = icmp ne void (i8*, i8*)* %13, null
  br i1 %tobool8, label %if.end11, label %if.then9

if.then9:                                         ; preds = %if.end7
  %14 = load %struct.mz_stream_s** %pStream.addr, align 8
  %zfree10 = getelementptr inbounds %struct.mz_stream_s* %14, i32 0, i32 9
  store void (i8*, i8*)* @def_free_func, void (i8*, i8*)** %zfree10, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %if.end7
  %15 = load %struct.mz_stream_s** %pStream.addr, align 8
  %zalloc12 = getelementptr inbounds %struct.mz_stream_s* %15, i32 0, i32 8
  %16 = load i8* (i8*, i64, i64)** %zalloc12, align 8
  %17 = load %struct.mz_stream_s** %pStream.addr, align 8
  %opaque = getelementptr inbounds %struct.mz_stream_s* %17, i32 0, i32 10
  %18 = load i8** %opaque, align 8
  %call = call i8* %16(i8* %18, i64 1, i64 43792)
  %19 = bitcast i8* %call to %struct.inflate_state*
  store %struct.inflate_state* %19, %struct.inflate_state** %pDecomp, align 8
  %20 = load %struct.inflate_state** %pDecomp, align 8
  %tobool13 = icmp ne %struct.inflate_state* %20, null
  br i1 %tobool13, label %if.end15, label %if.then14

if.then14:                                        ; preds = %if.end11
  store i32 -4, i32* %retval
  br label %return

if.end15:                                         ; preds = %if.end11
  %21 = load %struct.inflate_state** %pDecomp, align 8
  %22 = bitcast %struct.inflate_state* %21 to %struct.mz_internal_state*
  %23 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s* %23, i32 0, i32 7
  store %struct.mz_internal_state* %22, %struct.mz_internal_state** %state, align 8
  br label %do.body

do.body:                                          ; preds = %if.end15
  %24 = load %struct.inflate_state** %pDecomp, align 8
  %m_decomp = getelementptr inbounds %struct.inflate_state* %24, i32 0, i32 0
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag* %m_decomp, i32 0, i32 0
  store i32 0, i32* %m_state, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %25 = load %struct.inflate_state** %pDecomp, align 8
  %m_dict_ofs = getelementptr inbounds %struct.inflate_state* %25, i32 0, i32 1
  store i32 0, i32* %m_dict_ofs, align 4
  %26 = load %struct.inflate_state** %pDecomp, align 8
  %m_dict_avail = getelementptr inbounds %struct.inflate_state* %26, i32 0, i32 2
  store i32 0, i32* %m_dict_avail, align 4
  %27 = load %struct.inflate_state** %pDecomp, align 8
  %m_last_status = getelementptr inbounds %struct.inflate_state* %27, i32 0, i32 7
  store i32 1, i32* %m_last_status, align 4
  %28 = load %struct.inflate_state** %pDecomp, align 8
  %m_first_call = getelementptr inbounds %struct.inflate_state* %28, i32 0, i32 3
  store i32 1, i32* %m_first_call, align 4
  %29 = load %struct.inflate_state** %pDecomp, align 8
  %m_has_flushed = getelementptr inbounds %struct.inflate_state* %29, i32 0, i32 4
  store i32 0, i32* %m_has_flushed, align 4
  %30 = load i32* %window_bits.addr, align 4
  %31 = load %struct.inflate_state** %pDecomp, align 8
  %m_window_bits = getelementptr inbounds %struct.inflate_state* %31, i32 0, i32 5
  store i32 %30, i32* %m_window_bits, align 4
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then14, %if.then2, %if.then
  %32 = load i32* %retval
  ret i32 %32
}

; Function Attrs: nounwind uwtable
define i32 @mz_inflateInit(%struct.mz_stream_s* %pStream) #0 {
entry:
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  %0 = load %struct.mz_stream_s** %pStream.addr, align 8
  %call = call i32 @mz_inflateInit2(%struct.mz_stream_s* %0, i32 15)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define i32 @mz_inflate(%struct.mz_stream_s* %pStream, i32 %flush) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %flush.addr = alloca i32, align 4
  %pState = alloca %struct.inflate_state*, align 8
  %n = alloca i32, align 4
  %first_call = alloca i32, align 4
  %decomp_flags = alloca i32, align 4
  %in_bytes = alloca i64, align 8
  %out_bytes = alloca i64, align 8
  %orig_avail_in = alloca i64, align 8
  %status = alloca i32, align 4
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  store i32 %flush, i32* %flush.addr, align 4
  store i32 8, i32* %decomp_flags, align 4
  %0 = load %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s* %1, i32 0, i32 7
  %2 = load %struct.mz_internal_state** %state, align 8
  %tobool1 = icmp ne %struct.mz_internal_state* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -2, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32* %flush.addr, align 4
  %cmp = icmp eq i32 %3, 1
  br i1 %cmp, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 2, i32* %flush.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load i32* %flush.addr, align 4
  %tobool4 = icmp ne i32 %4, 0
  br i1 %tobool4, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %if.end3
  %5 = load i32* %flush.addr, align 4
  %cmp5 = icmp ne i32 %5, 2
  br i1 %cmp5, label %land.lhs.true6, label %if.end9

land.lhs.true6:                                   ; preds = %land.lhs.true
  %6 = load i32* %flush.addr, align 4
  %cmp7 = icmp ne i32 %6, 4
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %land.lhs.true6
  store i32 -2, i32* %retval
  br label %return

if.end9:                                          ; preds = %land.lhs.true6, %land.lhs.true, %if.end3
  %7 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state10 = getelementptr inbounds %struct.mz_stream_s* %7, i32 0, i32 7
  %8 = load %struct.mz_internal_state** %state10, align 8
  %9 = bitcast %struct.mz_internal_state* %8 to %struct.inflate_state*
  store %struct.inflate_state* %9, %struct.inflate_state** %pState, align 8
  %10 = load %struct.inflate_state** %pState, align 8
  %m_window_bits = getelementptr inbounds %struct.inflate_state* %10, i32 0, i32 5
  %11 = load i32* %m_window_bits, align 4
  %cmp11 = icmp sgt i32 %11, 0
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  %12 = load i32* %decomp_flags, align 4
  %or = or i32 %12, 1
  store i32 %or, i32* %decomp_flags, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.end9
  %13 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in = getelementptr inbounds %struct.mz_stream_s* %13, i32 0, i32 1
  %14 = load i32* %avail_in, align 4
  %conv = zext i32 %14 to i64
  store i64 %conv, i64* %orig_avail_in, align 8
  %15 = load %struct.inflate_state** %pState, align 8
  %m_first_call = getelementptr inbounds %struct.inflate_state* %15, i32 0, i32 3
  %16 = load i32* %m_first_call, align 4
  store i32 %16, i32* %first_call, align 4
  %17 = load %struct.inflate_state** %pState, align 8
  %m_first_call14 = getelementptr inbounds %struct.inflate_state* %17, i32 0, i32 3
  store i32 0, i32* %m_first_call14, align 4
  %18 = load %struct.inflate_state** %pState, align 8
  %m_last_status = getelementptr inbounds %struct.inflate_state* %18, i32 0, i32 7
  %19 = load i32* %m_last_status, align 4
  %cmp15 = icmp slt i32 %19, 0
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end13
  store i32 -3, i32* %retval
  br label %return

if.end18:                                         ; preds = %if.end13
  %20 = load %struct.inflate_state** %pState, align 8
  %m_has_flushed = getelementptr inbounds %struct.inflate_state* %20, i32 0, i32 4
  %21 = load i32* %m_has_flushed, align 4
  %tobool19 = icmp ne i32 %21, 0
  br i1 %tobool19, label %land.lhs.true20, label %if.end24

land.lhs.true20:                                  ; preds = %if.end18
  %22 = load i32* %flush.addr, align 4
  %cmp21 = icmp ne i32 %22, 4
  br i1 %cmp21, label %if.then23, label %if.end24

if.then23:                                        ; preds = %land.lhs.true20
  store i32 -2, i32* %retval
  br label %return

if.end24:                                         ; preds = %land.lhs.true20, %if.end18
  %23 = load i32* %flush.addr, align 4
  %cmp25 = icmp eq i32 %23, 4
  %conv26 = zext i1 %cmp25 to i32
  %24 = load %struct.inflate_state** %pState, align 8
  %m_has_flushed27 = getelementptr inbounds %struct.inflate_state* %24, i32 0, i32 4
  %25 = load i32* %m_has_flushed27, align 4
  %or28 = or i32 %25, %conv26
  store i32 %or28, i32* %m_has_flushed27, align 4
  %26 = load i32* %flush.addr, align 4
  %cmp29 = icmp eq i32 %26, 4
  br i1 %cmp29, label %land.lhs.true31, label %if.end67

land.lhs.true31:                                  ; preds = %if.end24
  %27 = load i32* %first_call, align 4
  %tobool32 = icmp ne i32 %27, 0
  br i1 %tobool32, label %if.then33, label %if.end67

if.then33:                                        ; preds = %land.lhs.true31
  %28 = load i32* %decomp_flags, align 4
  %or34 = or i32 %28, 4
  store i32 %or34, i32* %decomp_flags, align 4
  %29 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in35 = getelementptr inbounds %struct.mz_stream_s* %29, i32 0, i32 1
  %30 = load i32* %avail_in35, align 4
  %conv36 = zext i32 %30 to i64
  store i64 %conv36, i64* %in_bytes, align 8
  %31 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out = getelementptr inbounds %struct.mz_stream_s* %31, i32 0, i32 4
  %32 = load i32* %avail_out, align 4
  %conv37 = zext i32 %32 to i64
  store i64 %conv37, i64* %out_bytes, align 8
  %33 = load %struct.inflate_state** %pState, align 8
  %m_decomp = getelementptr inbounds %struct.inflate_state* %33, i32 0, i32 0
  %34 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_in = getelementptr inbounds %struct.mz_stream_s* %34, i32 0, i32 0
  %35 = load i8** %next_in, align 8
  %36 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_out = getelementptr inbounds %struct.mz_stream_s* %36, i32 0, i32 3
  %37 = load i8** %next_out, align 8
  %38 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_out38 = getelementptr inbounds %struct.mz_stream_s* %38, i32 0, i32 3
  %39 = load i8** %next_out38, align 8
  %40 = load i32* %decomp_flags, align 4
  %call = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %m_decomp, i8* %35, i64* %in_bytes, i8* %37, i8* %39, i64* %out_bytes, i32 %40)
  store i32 %call, i32* %status, align 4
  %41 = load i32* %status, align 4
  %42 = load %struct.inflate_state** %pState, align 8
  %m_last_status39 = getelementptr inbounds %struct.inflate_state* %42, i32 0, i32 7
  store i32 %41, i32* %m_last_status39, align 4
  %43 = load i64* %in_bytes, align 8
  %conv40 = trunc i64 %43 to i32
  %44 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_in41 = getelementptr inbounds %struct.mz_stream_s* %44, i32 0, i32 0
  %45 = load i8** %next_in41, align 8
  %idx.ext = zext i32 %conv40 to i64
  %add.ptr = getelementptr inbounds i8* %45, i64 %idx.ext
  store i8* %add.ptr, i8** %next_in41, align 8
  %46 = load i64* %in_bytes, align 8
  %conv42 = trunc i64 %46 to i32
  %47 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in43 = getelementptr inbounds %struct.mz_stream_s* %47, i32 0, i32 1
  %48 = load i32* %avail_in43, align 4
  %sub = sub i32 %48, %conv42
  store i32 %sub, i32* %avail_in43, align 4
  %49 = load i64* %in_bytes, align 8
  %conv44 = trunc i64 %49 to i32
  %conv45 = zext i32 %conv44 to i64
  %50 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_in = getelementptr inbounds %struct.mz_stream_s* %50, i32 0, i32 2
  %51 = load i64* %total_in, align 8
  %add = add i64 %51, %conv45
  store i64 %add, i64* %total_in, align 8
  %52 = load %struct.inflate_state** %pState, align 8
  %m_decomp46 = getelementptr inbounds %struct.inflate_state* %52, i32 0, i32 0
  %m_check_adler32 = getelementptr inbounds %struct.tinfl_decompressor_tag* %m_decomp46, i32 0, i32 7
  %53 = load i32* %m_check_adler32, align 4
  %conv47 = zext i32 %53 to i64
  %54 = load %struct.mz_stream_s** %pStream.addr, align 8
  %adler = getelementptr inbounds %struct.mz_stream_s* %54, i32 0, i32 12
  store i64 %conv47, i64* %adler, align 8
  %55 = load i64* %out_bytes, align 8
  %conv48 = trunc i64 %55 to i32
  %56 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_out49 = getelementptr inbounds %struct.mz_stream_s* %56, i32 0, i32 3
  %57 = load i8** %next_out49, align 8
  %idx.ext50 = zext i32 %conv48 to i64
  %add.ptr51 = getelementptr inbounds i8* %57, i64 %idx.ext50
  store i8* %add.ptr51, i8** %next_out49, align 8
  %58 = load i64* %out_bytes, align 8
  %conv52 = trunc i64 %58 to i32
  %59 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out53 = getelementptr inbounds %struct.mz_stream_s* %59, i32 0, i32 4
  %60 = load i32* %avail_out53, align 4
  %sub54 = sub i32 %60, %conv52
  store i32 %sub54, i32* %avail_out53, align 4
  %61 = load i64* %out_bytes, align 8
  %conv55 = trunc i64 %61 to i32
  %conv56 = zext i32 %conv55 to i64
  %62 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_out = getelementptr inbounds %struct.mz_stream_s* %62, i32 0, i32 5
  %63 = load i64* %total_out, align 8
  %add57 = add i64 %63, %conv56
  store i64 %add57, i64* %total_out, align 8
  %64 = load i32* %status, align 4
  %cmp58 = icmp slt i32 %64, 0
  br i1 %cmp58, label %if.then60, label %if.else

if.then60:                                        ; preds = %if.then33
  store i32 -3, i32* %retval
  br label %return

if.else:                                          ; preds = %if.then33
  %65 = load i32* %status, align 4
  %cmp61 = icmp ne i32 %65, 0
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else
  %66 = load %struct.inflate_state** %pState, align 8
  %m_last_status64 = getelementptr inbounds %struct.inflate_state* %66, i32 0, i32 7
  store i32 -1, i32* %m_last_status64, align 4
  store i32 -5, i32* %retval
  br label %return

if.end65:                                         ; preds = %if.else
  br label %if.end66

if.end66:                                         ; preds = %if.end65
  store i32 1, i32* %retval
  br label %return

if.end67:                                         ; preds = %land.lhs.true31, %if.end24
  %67 = load i32* %flush.addr, align 4
  %cmp68 = icmp ne i32 %67, 4
  br i1 %cmp68, label %if.then70, label %if.end72

if.then70:                                        ; preds = %if.end67
  %68 = load i32* %decomp_flags, align 4
  %or71 = or i32 %68, 2
  store i32 %or71, i32* %decomp_flags, align 4
  br label %if.end72

if.end72:                                         ; preds = %if.then70, %if.end67
  %69 = load %struct.inflate_state** %pState, align 8
  %m_dict_avail = getelementptr inbounds %struct.inflate_state* %69, i32 0, i32 2
  %70 = load i32* %m_dict_avail, align 4
  %tobool73 = icmp ne i32 %70, 0
  br i1 %tobool73, label %if.then74, label %if.end104

if.then74:                                        ; preds = %if.end72
  %71 = load %struct.inflate_state** %pState, align 8
  %m_dict_avail75 = getelementptr inbounds %struct.inflate_state* %71, i32 0, i32 2
  %72 = load i32* %m_dict_avail75, align 4
  %73 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out76 = getelementptr inbounds %struct.mz_stream_s* %73, i32 0, i32 4
  %74 = load i32* %avail_out76, align 4
  %cmp77 = icmp ult i32 %72, %74
  br i1 %cmp77, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then74
  %75 = load %struct.inflate_state** %pState, align 8
  %m_dict_avail79 = getelementptr inbounds %struct.inflate_state* %75, i32 0, i32 2
  %76 = load i32* %m_dict_avail79, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then74
  %77 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out80 = getelementptr inbounds %struct.mz_stream_s* %77, i32 0, i32 4
  %78 = load i32* %avail_out80, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %76, %cond.true ], [ %78, %cond.false ]
  store i32 %cond, i32* %n, align 4
  %79 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_out81 = getelementptr inbounds %struct.mz_stream_s* %79, i32 0, i32 3
  %80 = load i8** %next_out81, align 8
  %81 = load %struct.inflate_state** %pState, align 8
  %m_dict = getelementptr inbounds %struct.inflate_state* %81, i32 0, i32 6
  %arraydecay = getelementptr inbounds [32768 x i8]* %m_dict, i32 0, i32 0
  %82 = load %struct.inflate_state** %pState, align 8
  %m_dict_ofs = getelementptr inbounds %struct.inflate_state* %82, i32 0, i32 1
  %83 = load i32* %m_dict_ofs, align 4
  %idx.ext82 = zext i32 %83 to i64
  %add.ptr83 = getelementptr inbounds i8* %arraydecay, i64 %idx.ext82
  %84 = load i32* %n, align 4
  %conv84 = zext i32 %84 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %80, i8* %add.ptr83, i64 %conv84, i32 1, i1 false)
  %85 = load i32* %n, align 4
  %86 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_out85 = getelementptr inbounds %struct.mz_stream_s* %86, i32 0, i32 3
  %87 = load i8** %next_out85, align 8
  %idx.ext86 = zext i32 %85 to i64
  %add.ptr87 = getelementptr inbounds i8* %87, i64 %idx.ext86
  store i8* %add.ptr87, i8** %next_out85, align 8
  %88 = load i32* %n, align 4
  %89 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out88 = getelementptr inbounds %struct.mz_stream_s* %89, i32 0, i32 4
  %90 = load i32* %avail_out88, align 4
  %sub89 = sub i32 %90, %88
  store i32 %sub89, i32* %avail_out88, align 4
  %91 = load i32* %n, align 4
  %conv90 = zext i32 %91 to i64
  %92 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_out91 = getelementptr inbounds %struct.mz_stream_s* %92, i32 0, i32 5
  %93 = load i64* %total_out91, align 8
  %add92 = add i64 %93, %conv90
  store i64 %add92, i64* %total_out91, align 8
  %94 = load i32* %n, align 4
  %95 = load %struct.inflate_state** %pState, align 8
  %m_dict_avail93 = getelementptr inbounds %struct.inflate_state* %95, i32 0, i32 2
  %96 = load i32* %m_dict_avail93, align 4
  %sub94 = sub i32 %96, %94
  store i32 %sub94, i32* %m_dict_avail93, align 4
  %97 = load %struct.inflate_state** %pState, align 8
  %m_dict_ofs95 = getelementptr inbounds %struct.inflate_state* %97, i32 0, i32 1
  %98 = load i32* %m_dict_ofs95, align 4
  %99 = load i32* %n, align 4
  %add96 = add i32 %98, %99
  %and = and i32 %add96, 32767
  %100 = load %struct.inflate_state** %pState, align 8
  %m_dict_ofs97 = getelementptr inbounds %struct.inflate_state* %100, i32 0, i32 1
  store i32 %and, i32* %m_dict_ofs97, align 4
  %101 = load %struct.inflate_state** %pState, align 8
  %m_last_status98 = getelementptr inbounds %struct.inflate_state* %101, i32 0, i32 7
  %102 = load i32* %m_last_status98, align 4
  %cmp99 = icmp eq i32 %102, 0
  br i1 %cmp99, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.end
  %103 = load %struct.inflate_state** %pState, align 8
  %m_dict_avail101 = getelementptr inbounds %struct.inflate_state* %103, i32 0, i32 2
  %104 = load i32* %m_dict_avail101, align 4
  %tobool102 = icmp ne i32 %104, 0
  %lnot = xor i1 %tobool102, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end
  %105 = phi i1 [ false, %cond.end ], [ %lnot, %land.rhs ]
  %cond103 = select i1 %105, i32 1, i32 0
  store i32 %cond103, i32* %retval
  br label %return

if.end104:                                        ; preds = %if.end72
  br label %for.cond

for.cond:                                         ; preds = %if.end210, %if.end104
  %106 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in105 = getelementptr inbounds %struct.mz_stream_s* %106, i32 0, i32 1
  %107 = load i32* %avail_in105, align 4
  %conv106 = zext i32 %107 to i64
  store i64 %conv106, i64* %in_bytes, align 8
  %108 = load %struct.inflate_state** %pState, align 8
  %m_dict_ofs107 = getelementptr inbounds %struct.inflate_state* %108, i32 0, i32 1
  %109 = load i32* %m_dict_ofs107, align 4
  %sub108 = sub i32 32768, %109
  %conv109 = zext i32 %sub108 to i64
  store i64 %conv109, i64* %out_bytes, align 8
  %110 = load %struct.inflate_state** %pState, align 8
  %m_decomp110 = getelementptr inbounds %struct.inflate_state* %110, i32 0, i32 0
  %111 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_in111 = getelementptr inbounds %struct.mz_stream_s* %111, i32 0, i32 0
  %112 = load i8** %next_in111, align 8
  %113 = load %struct.inflate_state** %pState, align 8
  %m_dict112 = getelementptr inbounds %struct.inflate_state* %113, i32 0, i32 6
  %arraydecay113 = getelementptr inbounds [32768 x i8]* %m_dict112, i32 0, i32 0
  %114 = load %struct.inflate_state** %pState, align 8
  %m_dict114 = getelementptr inbounds %struct.inflate_state* %114, i32 0, i32 6
  %arraydecay115 = getelementptr inbounds [32768 x i8]* %m_dict114, i32 0, i32 0
  %115 = load %struct.inflate_state** %pState, align 8
  %m_dict_ofs116 = getelementptr inbounds %struct.inflate_state* %115, i32 0, i32 1
  %116 = load i32* %m_dict_ofs116, align 4
  %idx.ext117 = zext i32 %116 to i64
  %add.ptr118 = getelementptr inbounds i8* %arraydecay115, i64 %idx.ext117
  %117 = load i32* %decomp_flags, align 4
  %call119 = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %m_decomp110, i8* %112, i64* %in_bytes, i8* %arraydecay113, i8* %add.ptr118, i64* %out_bytes, i32 %117)
  store i32 %call119, i32* %status, align 4
  %118 = load i32* %status, align 4
  %119 = load %struct.inflate_state** %pState, align 8
  %m_last_status120 = getelementptr inbounds %struct.inflate_state* %119, i32 0, i32 7
  store i32 %118, i32* %m_last_status120, align 4
  %120 = load i64* %in_bytes, align 8
  %conv121 = trunc i64 %120 to i32
  %121 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_in122 = getelementptr inbounds %struct.mz_stream_s* %121, i32 0, i32 0
  %122 = load i8** %next_in122, align 8
  %idx.ext123 = zext i32 %conv121 to i64
  %add.ptr124 = getelementptr inbounds i8* %122, i64 %idx.ext123
  store i8* %add.ptr124, i8** %next_in122, align 8
  %123 = load i64* %in_bytes, align 8
  %conv125 = trunc i64 %123 to i32
  %124 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in126 = getelementptr inbounds %struct.mz_stream_s* %124, i32 0, i32 1
  %125 = load i32* %avail_in126, align 4
  %sub127 = sub i32 %125, %conv125
  store i32 %sub127, i32* %avail_in126, align 4
  %126 = load i64* %in_bytes, align 8
  %conv128 = trunc i64 %126 to i32
  %conv129 = zext i32 %conv128 to i64
  %127 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_in130 = getelementptr inbounds %struct.mz_stream_s* %127, i32 0, i32 2
  %128 = load i64* %total_in130, align 8
  %add131 = add i64 %128, %conv129
  store i64 %add131, i64* %total_in130, align 8
  %129 = load %struct.inflate_state** %pState, align 8
  %m_decomp132 = getelementptr inbounds %struct.inflate_state* %129, i32 0, i32 0
  %m_check_adler32133 = getelementptr inbounds %struct.tinfl_decompressor_tag* %m_decomp132, i32 0, i32 7
  %130 = load i32* %m_check_adler32133, align 4
  %conv134 = zext i32 %130 to i64
  %131 = load %struct.mz_stream_s** %pStream.addr, align 8
  %adler135 = getelementptr inbounds %struct.mz_stream_s* %131, i32 0, i32 12
  store i64 %conv134, i64* %adler135, align 8
  %132 = load i64* %out_bytes, align 8
  %conv136 = trunc i64 %132 to i32
  %133 = load %struct.inflate_state** %pState, align 8
  %m_dict_avail137 = getelementptr inbounds %struct.inflate_state* %133, i32 0, i32 2
  store i32 %conv136, i32* %m_dict_avail137, align 4
  %134 = load %struct.inflate_state** %pState, align 8
  %m_dict_avail138 = getelementptr inbounds %struct.inflate_state* %134, i32 0, i32 2
  %135 = load i32* %m_dict_avail138, align 4
  %136 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out139 = getelementptr inbounds %struct.mz_stream_s* %136, i32 0, i32 4
  %137 = load i32* %avail_out139, align 4
  %cmp140 = icmp ult i32 %135, %137
  br i1 %cmp140, label %cond.true142, label %cond.false144

cond.true142:                                     ; preds = %for.cond
  %138 = load %struct.inflate_state** %pState, align 8
  %m_dict_avail143 = getelementptr inbounds %struct.inflate_state* %138, i32 0, i32 2
  %139 = load i32* %m_dict_avail143, align 4
  br label %cond.end146

cond.false144:                                    ; preds = %for.cond
  %140 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out145 = getelementptr inbounds %struct.mz_stream_s* %140, i32 0, i32 4
  %141 = load i32* %avail_out145, align 4
  br label %cond.end146

cond.end146:                                      ; preds = %cond.false144, %cond.true142
  %cond147 = phi i32 [ %139, %cond.true142 ], [ %141, %cond.false144 ]
  store i32 %cond147, i32* %n, align 4
  %142 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_out148 = getelementptr inbounds %struct.mz_stream_s* %142, i32 0, i32 3
  %143 = load i8** %next_out148, align 8
  %144 = load %struct.inflate_state** %pState, align 8
  %m_dict149 = getelementptr inbounds %struct.inflate_state* %144, i32 0, i32 6
  %arraydecay150 = getelementptr inbounds [32768 x i8]* %m_dict149, i32 0, i32 0
  %145 = load %struct.inflate_state** %pState, align 8
  %m_dict_ofs151 = getelementptr inbounds %struct.inflate_state* %145, i32 0, i32 1
  %146 = load i32* %m_dict_ofs151, align 4
  %idx.ext152 = zext i32 %146 to i64
  %add.ptr153 = getelementptr inbounds i8* %arraydecay150, i64 %idx.ext152
  %147 = load i32* %n, align 4
  %conv154 = zext i32 %147 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %143, i8* %add.ptr153, i64 %conv154, i32 1, i1 false)
  %148 = load i32* %n, align 4
  %149 = load %struct.mz_stream_s** %pStream.addr, align 8
  %next_out155 = getelementptr inbounds %struct.mz_stream_s* %149, i32 0, i32 3
  %150 = load i8** %next_out155, align 8
  %idx.ext156 = zext i32 %148 to i64
  %add.ptr157 = getelementptr inbounds i8* %150, i64 %idx.ext156
  store i8* %add.ptr157, i8** %next_out155, align 8
  %151 = load i32* %n, align 4
  %152 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out158 = getelementptr inbounds %struct.mz_stream_s* %152, i32 0, i32 4
  %153 = load i32* %avail_out158, align 4
  %sub159 = sub i32 %153, %151
  store i32 %sub159, i32* %avail_out158, align 4
  %154 = load i32* %n, align 4
  %conv160 = zext i32 %154 to i64
  %155 = load %struct.mz_stream_s** %pStream.addr, align 8
  %total_out161 = getelementptr inbounds %struct.mz_stream_s* %155, i32 0, i32 5
  %156 = load i64* %total_out161, align 8
  %add162 = add i64 %156, %conv160
  store i64 %add162, i64* %total_out161, align 8
  %157 = load i32* %n, align 4
  %158 = load %struct.inflate_state** %pState, align 8
  %m_dict_avail163 = getelementptr inbounds %struct.inflate_state* %158, i32 0, i32 2
  %159 = load i32* %m_dict_avail163, align 4
  %sub164 = sub i32 %159, %157
  store i32 %sub164, i32* %m_dict_avail163, align 4
  %160 = load %struct.inflate_state** %pState, align 8
  %m_dict_ofs165 = getelementptr inbounds %struct.inflate_state* %160, i32 0, i32 1
  %161 = load i32* %m_dict_ofs165, align 4
  %162 = load i32* %n, align 4
  %add166 = add i32 %161, %162
  %and167 = and i32 %add166, 32767
  %163 = load %struct.inflate_state** %pState, align 8
  %m_dict_ofs168 = getelementptr inbounds %struct.inflate_state* %163, i32 0, i32 1
  store i32 %and167, i32* %m_dict_ofs168, align 4
  %164 = load i32* %status, align 4
  %cmp169 = icmp slt i32 %164, 0
  br i1 %cmp169, label %if.then171, label %if.else172

if.then171:                                       ; preds = %cond.end146
  store i32 -3, i32* %retval
  br label %return

if.else172:                                       ; preds = %cond.end146
  %165 = load i32* %status, align 4
  %cmp173 = icmp eq i32 %165, 1
  br i1 %cmp173, label %land.lhs.true175, label %if.else178

land.lhs.true175:                                 ; preds = %if.else172
  %166 = load i64* %orig_avail_in, align 8
  %tobool176 = icmp ne i64 %166, 0
  br i1 %tobool176, label %if.else178, label %if.then177

if.then177:                                       ; preds = %land.lhs.true175
  store i32 -5, i32* %retval
  br label %return

if.else178:                                       ; preds = %land.lhs.true175, %if.else172
  %167 = load i32* %flush.addr, align 4
  %cmp179 = icmp eq i32 %167, 4
  br i1 %cmp179, label %if.then181, label %if.else194

if.then181:                                       ; preds = %if.else178
  %168 = load i32* %status, align 4
  %cmp182 = icmp eq i32 %168, 0
  br i1 %cmp182, label %if.then184, label %if.else188

if.then184:                                       ; preds = %if.then181
  %169 = load %struct.inflate_state** %pState, align 8
  %m_dict_avail185 = getelementptr inbounds %struct.inflate_state* %169, i32 0, i32 2
  %170 = load i32* %m_dict_avail185, align 4
  %tobool186 = icmp ne i32 %170, 0
  %cond187 = select i1 %tobool186, i32 -5, i32 1
  store i32 %cond187, i32* %retval
  br label %return

if.else188:                                       ; preds = %if.then181
  %171 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out189 = getelementptr inbounds %struct.mz_stream_s* %171, i32 0, i32 4
  %172 = load i32* %avail_out189, align 4
  %tobool190 = icmp ne i32 %172, 0
  br i1 %tobool190, label %if.end192, label %if.then191

if.then191:                                       ; preds = %if.else188
  store i32 -5, i32* %retval
  br label %return

if.end192:                                        ; preds = %if.else188
  br label %if.end193

if.end193:                                        ; preds = %if.end192
  br label %if.end208

if.else194:                                       ; preds = %if.else178
  %173 = load i32* %status, align 4
  %cmp195 = icmp eq i32 %173, 0
  br i1 %cmp195, label %if.then206, label %lor.lhs.false197

lor.lhs.false197:                                 ; preds = %if.else194
  %174 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in198 = getelementptr inbounds %struct.mz_stream_s* %174, i32 0, i32 1
  %175 = load i32* %avail_in198, align 4
  %tobool199 = icmp ne i32 %175, 0
  br i1 %tobool199, label %lor.lhs.false200, label %if.then206

lor.lhs.false200:                                 ; preds = %lor.lhs.false197
  %176 = load %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out201 = getelementptr inbounds %struct.mz_stream_s* %176, i32 0, i32 4
  %177 = load i32* %avail_out201, align 4
  %tobool202 = icmp ne i32 %177, 0
  br i1 %tobool202, label %lor.lhs.false203, label %if.then206

lor.lhs.false203:                                 ; preds = %lor.lhs.false200
  %178 = load %struct.inflate_state** %pState, align 8
  %m_dict_avail204 = getelementptr inbounds %struct.inflate_state* %178, i32 0, i32 2
  %179 = load i32* %m_dict_avail204, align 4
  %tobool205 = icmp ne i32 %179, 0
  br i1 %tobool205, label %if.then206, label %if.end207

if.then206:                                       ; preds = %lor.lhs.false203, %lor.lhs.false200, %lor.lhs.false197, %if.else194
  br label %for.end

if.end207:                                        ; preds = %lor.lhs.false203
  br label %if.end208

if.end208:                                        ; preds = %if.end207, %if.end193
  br label %if.end209

if.end209:                                        ; preds = %if.end208
  br label %if.end210

if.end210:                                        ; preds = %if.end209
  br label %for.cond

for.end:                                          ; preds = %if.then206
  %180 = load i32* %status, align 4
  %cmp211 = icmp eq i32 %180, 0
  br i1 %cmp211, label %land.rhs213, label %land.end217

land.rhs213:                                      ; preds = %for.end
  %181 = load %struct.inflate_state** %pState, align 8
  %m_dict_avail214 = getelementptr inbounds %struct.inflate_state* %181, i32 0, i32 2
  %182 = load i32* %m_dict_avail214, align 4
  %tobool215 = icmp ne i32 %182, 0
  %lnot216 = xor i1 %tobool215, true
  br label %land.end217

land.end217:                                      ; preds = %land.rhs213, %for.end
  %183 = phi i1 [ false, %for.end ], [ %lnot216, %land.rhs213 ]
  %cond218 = select i1 %183, i32 1, i32 0
  store i32 %cond218, i32* %retval
  br label %return

return:                                           ; preds = %land.end217, %if.then191, %if.then184, %if.then177, %if.then171, %land.end, %if.end66, %if.then63, %if.then60, %if.then23, %if.then17, %if.then8, %if.then
  %184 = load i32* %retval
  ret i32 %184
}

; Function Attrs: nounwind uwtable
define i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %r, i8* %pIn_buf_next, i64* %pIn_buf_size, i8* %pOut_buf_start, i8* %pOut_buf_next, i64* %pOut_buf_size, i32 %decomp_flags) #0 {
entry:
  %retval = alloca i32, align 4
  %r.addr = alloca %struct.tinfl_decompressor_tag*, align 8
  %pIn_buf_next.addr = alloca i8*, align 8
  %pIn_buf_size.addr = alloca i64*, align 8
  %pOut_buf_start.addr = alloca i8*, align 8
  %pOut_buf_next.addr = alloca i8*, align 8
  %pOut_buf_size.addr = alloca i64*, align 8
  %decomp_flags.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %num_bits = alloca i32, align 4
  %dist = alloca i32, align 4
  %counter = alloca i32, align 4
  %num_extra = alloca i32, align 4
  %bit_buf = alloca i64, align 8
  %pIn_buf_cur = alloca i8*, align 8
  %pIn_buf_end = alloca i8*, align 8
  %pOut_buf_cur = alloca i8*, align 8
  %pOut_buf_end = alloca i8*, align 8
  %out_buf_size_mask = alloca i64, align 8
  %dist_from_out_buf_start = alloca i64, align 8
  %c = alloca i32, align 4
  %c158 = alloca i32, align 4
  %c215 = alloca i32, align 4
  %c334 = alloca i32, align 4
  %n = alloca i64, align 8
  %p = alloca i8*, align 8
  %i = alloca i32, align 4
  %c548 = alloca i32, align 4
  %s = alloca i32, align 4
  %c635 = alloca i32, align 4
  %tree_next = alloca i32, align 4
  %tree_cur = alloca i32, align 4
  %pTable = alloca %struct.tinfl_huff_table*, align 8
  %i699 = alloca i32, align 4
  %j = alloca i32, align 4
  %used_syms = alloca i32, align 4
  %total = alloca i32, align 4
  %sym_index = alloca i32, align 4
  %next_code = alloca [17 x i32], align 16
  %total_syms = alloca [16 x i32], align 16
  %rev_code = alloca i32, align 4
  %l = alloca i32, align 4
  %cur_code = alloca i32, align 4
  %code_size = alloca i32, align 4
  %k = alloca i16, align 2
  %s874 = alloca i32, align 4
  %temp = alloca i32, align 4
  %code_len = alloca i32, align 4
  %c876 = alloca i32, align 4
  %c1054 = alloca i32, align 4
  %pSrc = alloca i8*, align 8
  %temp1182 = alloca i32, align 4
  %code_len1183 = alloca i32, align 4
  %c1184 = alloca i32, align 4
  %sym2 = alloca i32, align 4
  %code_len1348 = alloca i32, align 4
  %extra_bits = alloca i32, align 4
  %c1457 = alloca i32, align 4
  %temp1509 = alloca i32, align 4
  %code_len1510 = alloca i32, align 4
  %c1511 = alloca i32, align 4
  %extra_bits1664 = alloca i32, align 4
  %c1670 = alloca i32, align 4
  %pSrc_end = alloca i8*, align 8
  %c1863 = alloca i32, align 4
  %s1914 = alloca i32, align 4
  %c1922 = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %buf_len = alloca i64, align 8
  %i2032 = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %block_len = alloca i64, align 8
  store %struct.tinfl_decompressor_tag* %r, %struct.tinfl_decompressor_tag** %r.addr, align 8
  store i8* %pIn_buf_next, i8** %pIn_buf_next.addr, align 8
  store i64* %pIn_buf_size, i64** %pIn_buf_size.addr, align 8
  store i8* %pOut_buf_start, i8** %pOut_buf_start.addr, align 8
  store i8* %pOut_buf_next, i8** %pOut_buf_next.addr, align 8
  store i64* %pOut_buf_size, i64** %pOut_buf_size.addr, align 8
  store i32 %decomp_flags, i32* %decomp_flags.addr, align 4
  store i32 -1, i32* %status, align 4
  %0 = load i8** %pIn_buf_next.addr, align 8
  store i8* %0, i8** %pIn_buf_cur, align 8
  %1 = load i8** %pIn_buf_next.addr, align 8
  %2 = load i64** %pIn_buf_size.addr, align 8
  %3 = load i64* %2, align 8
  %add.ptr = getelementptr inbounds i8* %1, i64 %3
  store i8* %add.ptr, i8** %pIn_buf_end, align 8
  %4 = load i8** %pOut_buf_next.addr, align 8
  store i8* %4, i8** %pOut_buf_cur, align 8
  %5 = load i8** %pOut_buf_next.addr, align 8
  %6 = load i64** %pOut_buf_size.addr, align 8
  %7 = load i64* %6, align 8
  %add.ptr1 = getelementptr inbounds i8* %5, i64 %7
  store i8* %add.ptr1, i8** %pOut_buf_end, align 8
  %8 = load i32* %decomp_flags.addr, align 4
  %and = and i32 %8, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load i8** %pOut_buf_next.addr, align 8
  %10 = load i8** %pOut_buf_start.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %11 = load i64** %pOut_buf_size.addr, align 8
  %12 = load i64* %11, align 8
  %add = add i64 %sub.ptr.sub, %12
  %sub = sub i64 %add, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ -1, %cond.true ], [ %sub, %cond.false ]
  store i64 %cond, i64* %out_buf_size_mask, align 8
  %13 = load i64* %out_buf_size_mask, align 8
  %add2 = add i64 %13, 1
  %14 = load i64* %out_buf_size_mask, align 8
  %and3 = and i64 %add2, %14
  %tobool4 = icmp ne i64 %and3, 0
  br i1 %tobool4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %15 = load i8** %pOut_buf_next.addr, align 8
  %16 = load i8** %pOut_buf_start.addr, align 8
  %cmp = icmp ult i8* %15, %16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  %17 = load i64** %pOut_buf_size.addr, align 8
  store i64 0, i64* %17, align 8
  %18 = load i64** %pIn_buf_size.addr, align 8
  store i64 0, i64* %18, align 8
  store i32 -3, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %19 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_num_bits = getelementptr inbounds %struct.tinfl_decompressor_tag* %19, i32 0, i32 1
  %20 = load i32* %m_num_bits, align 4
  store i32 %20, i32* %num_bits, align 4
  %21 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_bit_buf = getelementptr inbounds %struct.tinfl_decompressor_tag* %21, i32 0, i32 12
  %22 = load i64* %m_bit_buf, align 8
  store i64 %22, i64* %bit_buf, align 8
  %23 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_dist = getelementptr inbounds %struct.tinfl_decompressor_tag* %23, i32 0, i32 8
  %24 = load i32* %m_dist, align 4
  store i32 %24, i32* %dist, align 4
  %25 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_counter = getelementptr inbounds %struct.tinfl_decompressor_tag* %25, i32 0, i32 9
  %26 = load i32* %m_counter, align 4
  store i32 %26, i32* %counter, align 4
  %27 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_num_extra = getelementptr inbounds %struct.tinfl_decompressor_tag* %27, i32 0, i32 10
  %28 = load i32* %m_num_extra, align 4
  store i32 %28, i32* %num_extra, align 4
  %29 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_dist_from_out_buf_start = getelementptr inbounds %struct.tinfl_decompressor_tag* %29, i32 0, i32 13
  %30 = load i64* %m_dist_from_out_buf_start, align 8
  store i64 %30, i64* %dist_from_out_buf_start, align 8
  %31 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag* %31, i32 0, i32 0
  %32 = load i32* %m_state, align 4
  switch i32 %32, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb15
    i32 2, label %sw.bb38
    i32 36, label %sw.bb95
    i32 3, label %sw.bb116
    i32 5, label %sw.bb169
    i32 6, label %sw.bb226
    i32 7, label %sw.bb271
    i32 39, label %sw.bb321
    i32 51, label %sw.bb345
    i32 52, label %sw.bb385
    i32 9, label %sw.bb400
    i32 38, label %sw.bb413
    i32 40, label %sw.bb421
    i32 10, label %sw.bb486
    i32 11, label %sw.bb559
    i32 14, label %sw.bb646
    i32 35, label %sw.bb749
    i32 16, label %sw.bb944
    i32 17, label %sw.bb1039
    i32 18, label %sw.bb1065
    i32 21, label %sw.bb1137
    i32 23, label %sw.bb1253
    i32 24, label %sw.bb1341
    i32 25, label %sw.bb1468
    i32 26, label %sw.bb1580
    i32 27, label %sw.bb1681
    i32 37, label %sw.bb1735
    i32 53, label %sw.bb1766
    i32 32, label %sw.bb1874
    i32 41, label %sw.bb1933
    i32 42, label %sw.bb1978
    i32 34, label %sw.bb2009
  ]

sw.bb:                                            ; preds = %if.end
  %33 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr1 = getelementptr inbounds %struct.tinfl_decompressor_tag* %33, i32 0, i32 3
  store i32 0, i32* %m_zhdr1, align 4
  %34 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr0 = getelementptr inbounds %struct.tinfl_decompressor_tag* %34, i32 0, i32 2
  store i32 0, i32* %m_zhdr0, align 4
  store i32 0, i32* %num_extra, align 4
  store i32 0, i32* %counter, align 4
  store i32 0, i32* %dist, align 4
  store i32 0, i32* %num_bits, align 4
  store i64 0, i64* %bit_buf, align 8
  %35 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_check_adler32 = getelementptr inbounds %struct.tinfl_decompressor_tag* %35, i32 0, i32 7
  store i32 1, i32* %m_check_adler32, align 4
  %36 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_z_adler32 = getelementptr inbounds %struct.tinfl_decompressor_tag* %36, i32 0, i32 4
  store i32 1, i32* %m_z_adler32, align 4
  %37 = load i32* %decomp_flags.addr, align 4
  %and5 = and i32 %37, 1
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then7, label %if.end99

if.then7:                                         ; preds = %sw.bb
  br label %do.body

do.body:                                          ; preds = %if.then7
  %38 = load i8** %pIn_buf_cur, align 8
  %39 = load i8** %pIn_buf_end, align 8
  %cmp8 = icmp uge i8* %38, %39
  br i1 %cmp8, label %if.then9, label %if.else22

if.then9:                                         ; preds = %do.body
  br label %for.cond

for.cond:                                         ; preds = %if.end21, %if.then9
  %40 = load i32* %decomp_flags.addr, align 4
  %and10 = and i32 %40, 2
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %for.cond
  br label %do.body13

do.body13:                                        ; preds = %if.then12
  store i32 1, i32* %status, align 4
  %41 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state14 = getelementptr inbounds %struct.tinfl_decompressor_tag* %41, i32 0, i32 0
  store i32 1, i32* %m_state14, align 4
  br label %common_exit

sw.bb15:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %sw.bb15
  %42 = load i8** %pIn_buf_cur, align 8
  %43 = load i8** %pIn_buf_end, align 8
  %cmp16 = icmp ult i8* %42, %43
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %do.end
  %44 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr = getelementptr inbounds i8* %44, i32 1
  store i8* %incdec.ptr, i8** %pIn_buf_cur, align 8
  %45 = load i8* %44, align 1
  %conv = zext i8 %45 to i32
  %46 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr018 = getelementptr inbounds %struct.tinfl_decompressor_tag* %46, i32 0, i32 2
  store i32 %conv, i32* %m_zhdr018, align 4
  br label %for.end

if.end19:                                         ; preds = %do.end
  br label %if.end21

if.else:                                          ; preds = %for.cond
  %47 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr020 = getelementptr inbounds %struct.tinfl_decompressor_tag* %47, i32 0, i32 2
  store i32 0, i32* %m_zhdr020, align 4
  br label %for.end

if.end21:                                         ; preds = %if.end19
  br label %for.cond

for.end:                                          ; preds = %if.else, %if.then17
  br label %if.end26

if.else22:                                        ; preds = %do.body
  %48 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr23 = getelementptr inbounds i8* %48, i32 1
  store i8* %incdec.ptr23, i8** %pIn_buf_cur, align 8
  %49 = load i8* %48, align 1
  %conv24 = zext i8 %49 to i32
  %50 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr025 = getelementptr inbounds %struct.tinfl_decompressor_tag* %50, i32 0, i32 2
  store i32 %conv24, i32* %m_zhdr025, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else22, %for.end
  br label %do.end27

do.end27:                                         ; preds = %if.end26
  br label %do.body28

do.body28:                                        ; preds = %do.end27
  %51 = load i8** %pIn_buf_cur, align 8
  %52 = load i8** %pIn_buf_end, align 8
  %cmp29 = icmp uge i8* %51, %52
  br i1 %cmp29, label %if.then31, label %if.else51

if.then31:                                        ; preds = %do.body28
  br label %for.cond32

for.cond32:                                       ; preds = %if.end49, %if.then31
  %53 = load i32* %decomp_flags.addr, align 4
  %and33 = and i32 %53, 2
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %if.then35, label %if.else47

if.then35:                                        ; preds = %for.cond32
  br label %do.body36

do.body36:                                        ; preds = %if.then35
  store i32 1, i32* %status, align 4
  %54 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state37 = getelementptr inbounds %struct.tinfl_decompressor_tag* %54, i32 0, i32 0
  store i32 2, i32* %m_state37, align 4
  br label %common_exit

sw.bb38:                                          ; preds = %if.end
  br label %do.end39

do.end39:                                         ; preds = %sw.bb38
  %55 = load i8** %pIn_buf_cur, align 8
  %56 = load i8** %pIn_buf_end, align 8
  %cmp40 = icmp ult i8* %55, %56
  br i1 %cmp40, label %if.then42, label %if.end46

if.then42:                                        ; preds = %do.end39
  %57 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr43 = getelementptr inbounds i8* %57, i32 1
  store i8* %incdec.ptr43, i8** %pIn_buf_cur, align 8
  %58 = load i8* %57, align 1
  %conv44 = zext i8 %58 to i32
  %59 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr145 = getelementptr inbounds %struct.tinfl_decompressor_tag* %59, i32 0, i32 3
  store i32 %conv44, i32* %m_zhdr145, align 4
  br label %for.end50

if.end46:                                         ; preds = %do.end39
  br label %if.end49

if.else47:                                        ; preds = %for.cond32
  %60 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr148 = getelementptr inbounds %struct.tinfl_decompressor_tag* %60, i32 0, i32 3
  store i32 0, i32* %m_zhdr148, align 4
  br label %for.end50

if.end49:                                         ; preds = %if.end46
  br label %for.cond32

for.end50:                                        ; preds = %if.else47, %if.then42
  br label %if.end55

if.else51:                                        ; preds = %do.body28
  %61 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr52 = getelementptr inbounds i8* %61, i32 1
  store i8* %incdec.ptr52, i8** %pIn_buf_cur, align 8
  %62 = load i8* %61, align 1
  %conv53 = zext i8 %62 to i32
  %63 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr154 = getelementptr inbounds %struct.tinfl_decompressor_tag* %63, i32 0, i32 3
  store i32 %conv53, i32* %m_zhdr154, align 4
  br label %if.end55

if.end55:                                         ; preds = %if.else51, %for.end50
  br label %do.end56

do.end56:                                         ; preds = %if.end55
  %64 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr057 = getelementptr inbounds %struct.tinfl_decompressor_tag* %64, i32 0, i32 2
  %65 = load i32* %m_zhdr057, align 4
  %mul = mul i32 %65, 256
  %66 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr158 = getelementptr inbounds %struct.tinfl_decompressor_tag* %66, i32 0, i32 3
  %67 = load i32* %m_zhdr158, align 4
  %add59 = add i32 %mul, %67
  %rem = urem i32 %add59, 31
  %cmp60 = icmp ne i32 %rem, 0
  br i1 %cmp60, label %lor.end, label %lor.lhs.false62

lor.lhs.false62:                                  ; preds = %do.end56
  %68 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr163 = getelementptr inbounds %struct.tinfl_decompressor_tag* %68, i32 0, i32 3
  %69 = load i32* %m_zhdr163, align 4
  %and64 = and i32 %69, 32
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false62
  %70 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr066 = getelementptr inbounds %struct.tinfl_decompressor_tag* %70, i32 0, i32 2
  %71 = load i32* %m_zhdr066, align 4
  %and67 = and i32 %71, 15
  %cmp68 = icmp ne i32 %and67, 8
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false62, %do.end56
  %72 = phi i1 [ true, %lor.lhs.false62 ], [ true, %do.end56 ], [ %cmp68, %lor.rhs ]
  %lor.ext = zext i1 %72 to i32
  store i32 %lor.ext, i32* %counter, align 4
  %73 = load i32* %decomp_flags.addr, align 4
  %and70 = and i32 %73, 4
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %if.end88, label %if.then72

if.then72:                                        ; preds = %lor.end
  %74 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr073 = getelementptr inbounds %struct.tinfl_decompressor_tag* %74, i32 0, i32 2
  %75 = load i32* %m_zhdr073, align 4
  %shr = lshr i32 %75, 4
  %add74 = add i32 8, %shr
  %shl = shl i32 1, %add74
  %cmp75 = icmp ugt i32 %shl, 32768
  br i1 %cmp75, label %lor.end86, label %lor.rhs77

lor.rhs77:                                        ; preds = %if.then72
  %76 = load i64* %out_buf_size_mask, align 8
  %add78 = add i64 %76, 1
  %77 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr079 = getelementptr inbounds %struct.tinfl_decompressor_tag* %77, i32 0, i32 2
  %78 = load i32* %m_zhdr079, align 4
  %shr80 = lshr i32 %78, 4
  %add81 = add i32 8, %shr80
  %shl82 = shl i32 1, %add81
  %conv83 = zext i32 %shl82 to i64
  %cmp84 = icmp ult i64 %add78, %conv83
  br label %lor.end86

lor.end86:                                        ; preds = %lor.rhs77, %if.then72
  %79 = phi i1 [ true, %if.then72 ], [ %cmp84, %lor.rhs77 ]
  %lor.ext87 = zext i1 %79 to i32
  %80 = load i32* %counter, align 4
  %or = or i32 %80, %lor.ext87
  store i32 %or, i32* %counter, align 4
  br label %if.end88

if.end88:                                         ; preds = %lor.end86, %lor.end
  %81 = load i32* %counter, align 4
  %tobool89 = icmp ne i32 %81, 0
  br i1 %tobool89, label %if.then90, label %if.end98

if.then90:                                        ; preds = %if.end88
  br label %do.body91

do.body91:                                        ; preds = %if.then90
  br label %for.cond92

for.cond92:                                       ; preds = %do.end96, %do.body91
  br label %do.body93

do.body93:                                        ; preds = %for.cond92
  store i32 -1, i32* %status, align 4
  %82 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state94 = getelementptr inbounds %struct.tinfl_decompressor_tag* %82, i32 0, i32 0
  store i32 36, i32* %m_state94, align 4
  br label %common_exit

sw.bb95:                                          ; preds = %if.end
  br label %do.end96

do.end96:                                         ; preds = %sw.bb95
  br label %for.cond92

do.end97:                                         ; No predecessors!
  br label %if.end98

if.end98:                                         ; preds = %do.end97, %if.end88
  br label %if.end99

if.end99:                                         ; preds = %if.end98, %sw.bb
  br label %do.body100

do.body100:                                       ; preds = %do.cond1849, %if.end99
  br label %do.body101

do.body101:                                       ; preds = %do.body100
  %83 = load i32* %num_bits, align 4
  %cmp102 = icmp ult i32 %83, 3
  br i1 %cmp102, label %if.then104, label %if.end139

if.then104:                                       ; preds = %do.body101
  br label %do.body105

do.body105:                                       ; preds = %do.cond, %if.then104
  br label %do.body106

do.body106:                                       ; preds = %do.body105
  %84 = load i8** %pIn_buf_cur, align 8
  %85 = load i8** %pIn_buf_end, align 8
  %cmp107 = icmp uge i8* %84, %85
  br i1 %cmp107, label %if.then109, label %if.else127

if.then109:                                       ; preds = %do.body106
  br label %for.cond110

for.cond110:                                      ; preds = %if.end125, %if.then109
  %86 = load i32* %decomp_flags.addr, align 4
  %and111 = and i32 %86, 2
  %tobool112 = icmp ne i32 %and111, 0
  br i1 %tobool112, label %if.then113, label %if.else124

if.then113:                                       ; preds = %for.cond110
  br label %do.body114

do.body114:                                       ; preds = %if.then113
  store i32 1, i32* %status, align 4
  %87 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state115 = getelementptr inbounds %struct.tinfl_decompressor_tag* %87, i32 0, i32 0
  store i32 3, i32* %m_state115, align 4
  br label %common_exit

sw.bb116:                                         ; preds = %if.end
  br label %do.end117

do.end117:                                        ; preds = %sw.bb116
  %88 = load i8** %pIn_buf_cur, align 8
  %89 = load i8** %pIn_buf_end, align 8
  %cmp118 = icmp ult i8* %88, %89
  br i1 %cmp118, label %if.then120, label %if.end123

if.then120:                                       ; preds = %do.end117
  %90 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr121 = getelementptr inbounds i8* %90, i32 1
  store i8* %incdec.ptr121, i8** %pIn_buf_cur, align 8
  %91 = load i8* %90, align 1
  %conv122 = zext i8 %91 to i32
  store i32 %conv122, i32* %c, align 4
  br label %for.end126

if.end123:                                        ; preds = %do.end117
  br label %if.end125

if.else124:                                       ; preds = %for.cond110
  store i32 0, i32* %c, align 4
  br label %for.end126

if.end125:                                        ; preds = %if.end123
  br label %for.cond110

for.end126:                                       ; preds = %if.else124, %if.then120
  br label %if.end130

if.else127:                                       ; preds = %do.body106
  %92 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr128 = getelementptr inbounds i8* %92, i32 1
  store i8* %incdec.ptr128, i8** %pIn_buf_cur, align 8
  %93 = load i8* %92, align 1
  %conv129 = zext i8 %93 to i32
  store i32 %conv129, i32* %c, align 4
  br label %if.end130

if.end130:                                        ; preds = %if.else127, %for.end126
  br label %do.end131

do.end131:                                        ; preds = %if.end130
  %94 = load i32* %c, align 4
  %conv132 = zext i32 %94 to i64
  %95 = load i32* %num_bits, align 4
  %sh_prom = zext i32 %95 to i64
  %shl133 = shl i64 %conv132, %sh_prom
  %96 = load i64* %bit_buf, align 8
  %or134 = or i64 %96, %shl133
  store i64 %or134, i64* %bit_buf, align 8
  %97 = load i32* %num_bits, align 4
  %add135 = add i32 %97, 8
  store i32 %add135, i32* %num_bits, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.end131
  %98 = load i32* %num_bits, align 4
  %cmp136 = icmp ult i32 %98, 3
  br i1 %cmp136, label %do.body105, label %do.end138

do.end138:                                        ; preds = %do.cond
  br label %if.end139

if.end139:                                        ; preds = %do.end138, %do.body101
  %99 = load i64* %bit_buf, align 8
  %and140 = and i64 %99, 7
  %conv141 = trunc i64 %and140 to i32
  %100 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_final = getelementptr inbounds %struct.tinfl_decompressor_tag* %100, i32 0, i32 5
  store i32 %conv141, i32* %m_final, align 4
  %101 = load i64* %bit_buf, align 8
  %shr142 = lshr i64 %101, 3
  store i64 %shr142, i64* %bit_buf, align 8
  %102 = load i32* %num_bits, align 4
  %sub143 = sub i32 %102, 3
  store i32 %sub143, i32* %num_bits, align 4
  br label %do.end145

do.end145:                                        ; preds = %if.end139
  %103 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_final146 = getelementptr inbounds %struct.tinfl_decompressor_tag* %103, i32 0, i32 5
  %104 = load i32* %m_final146, align 4
  %shr147 = lshr i32 %104, 1
  %105 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type = getelementptr inbounds %struct.tinfl_decompressor_tag* %105, i32 0, i32 6
  store i32 %shr147, i32* %m_type, align 4
  %106 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type148 = getelementptr inbounds %struct.tinfl_decompressor_tag* %106, i32 0, i32 6
  %107 = load i32* %m_type148, align 4
  %cmp149 = icmp eq i32 %107, 0
  br i1 %cmp149, label %if.then151, label %if.else477

if.then151:                                       ; preds = %do.end145
  br label %do.body152

do.body152:                                       ; preds = %if.then151
  %108 = load i32* %num_bits, align 4
  %109 = load i32* %num_bits, align 4
  %and153 = and i32 %109, 7
  %cmp154 = icmp ult i32 %108, %and153
  br i1 %cmp154, label %if.then156, label %if.end197

if.then156:                                       ; preds = %do.body152
  br label %do.body157

do.body157:                                       ; preds = %do.cond192, %if.then156
  br label %do.body159

do.body159:                                       ; preds = %do.body157
  %110 = load i8** %pIn_buf_cur, align 8
  %111 = load i8** %pIn_buf_end, align 8
  %cmp160 = icmp uge i8* %110, %111
  br i1 %cmp160, label %if.then162, label %if.else181

if.then162:                                       ; preds = %do.body159
  br label %for.cond163

for.cond163:                                      ; preds = %if.end179, %if.then162
  %112 = load i32* %decomp_flags.addr, align 4
  %and164 = and i32 %112, 2
  %tobool165 = icmp ne i32 %and164, 0
  br i1 %tobool165, label %if.then166, label %if.else178

if.then166:                                       ; preds = %for.cond163
  br label %do.body167

do.body167:                                       ; preds = %if.then166
  store i32 1, i32* %status, align 4
  %113 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state168 = getelementptr inbounds %struct.tinfl_decompressor_tag* %113, i32 0, i32 0
  store i32 5, i32* %m_state168, align 4
  br label %common_exit

sw.bb169:                                         ; preds = %if.end
  br label %do.end171

do.end171:                                        ; preds = %sw.bb169
  %114 = load i8** %pIn_buf_cur, align 8
  %115 = load i8** %pIn_buf_end, align 8
  %cmp172 = icmp ult i8* %114, %115
  br i1 %cmp172, label %if.then174, label %if.end177

if.then174:                                       ; preds = %do.end171
  %116 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr175 = getelementptr inbounds i8* %116, i32 1
  store i8* %incdec.ptr175, i8** %pIn_buf_cur, align 8
  %117 = load i8* %116, align 1
  %conv176 = zext i8 %117 to i32
  store i32 %conv176, i32* %c158, align 4
  br label %for.end180

if.end177:                                        ; preds = %do.end171
  br label %if.end179

if.else178:                                       ; preds = %for.cond163
  store i32 0, i32* %c158, align 4
  br label %for.end180

if.end179:                                        ; preds = %if.end177
  br label %for.cond163

for.end180:                                       ; preds = %if.else178, %if.then174
  br label %if.end184

if.else181:                                       ; preds = %do.body159
  %118 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr182 = getelementptr inbounds i8* %118, i32 1
  store i8* %incdec.ptr182, i8** %pIn_buf_cur, align 8
  %119 = load i8* %118, align 1
  %conv183 = zext i8 %119 to i32
  store i32 %conv183, i32* %c158, align 4
  br label %if.end184

if.end184:                                        ; preds = %if.else181, %for.end180
  br label %do.end186

do.end186:                                        ; preds = %if.end184
  %120 = load i32* %c158, align 4
  %conv187 = zext i32 %120 to i64
  %121 = load i32* %num_bits, align 4
  %sh_prom188 = zext i32 %121 to i64
  %shl189 = shl i64 %conv187, %sh_prom188
  %122 = load i64* %bit_buf, align 8
  %or190 = or i64 %122, %shl189
  store i64 %or190, i64* %bit_buf, align 8
  %123 = load i32* %num_bits, align 4
  %add191 = add i32 %123, 8
  store i32 %add191, i32* %num_bits, align 4
  br label %do.cond192

do.cond192:                                       ; preds = %do.end186
  %124 = load i32* %num_bits, align 4
  %125 = load i32* %num_bits, align 4
  %and193 = and i32 %125, 7
  %cmp194 = icmp ult i32 %124, %and193
  br i1 %cmp194, label %do.body157, label %do.end196

do.end196:                                        ; preds = %do.cond192
  br label %if.end197

if.end197:                                        ; preds = %do.end196, %do.body152
  %126 = load i32* %num_bits, align 4
  %and198 = and i32 %126, 7
  %127 = load i64* %bit_buf, align 8
  %sh_prom199 = zext i32 %and198 to i64
  %shr200 = lshr i64 %127, %sh_prom199
  store i64 %shr200, i64* %bit_buf, align 8
  %128 = load i32* %num_bits, align 4
  %and201 = and i32 %128, 7
  %129 = load i32* %num_bits, align 4
  %sub202 = sub i32 %129, %and201
  store i32 %sub202, i32* %num_bits, align 4
  br label %do.end204

do.end204:                                        ; preds = %if.end197
  store i32 0, i32* %counter, align 4
  br label %for.cond205

for.cond205:                                      ; preds = %for.inc, %do.end204
  %130 = load i32* %counter, align 4
  %cmp206 = icmp ult i32 %130, 4
  br i1 %cmp206, label %for.body, label %for.end297

for.body:                                         ; preds = %for.cond205
  %131 = load i32* %num_bits, align 4
  %tobool208 = icmp ne i32 %131, 0
  br i1 %tobool208, label %if.then209, label %if.else260

if.then209:                                       ; preds = %for.body
  br label %do.body210

do.body210:                                       ; preds = %if.then209
  %132 = load i32* %num_bits, align 4
  %cmp211 = icmp ult i32 %132, 8
  br i1 %cmp211, label %if.then213, label %if.end253

if.then213:                                       ; preds = %do.body210
  br label %do.body214

do.body214:                                       ; preds = %do.cond249, %if.then213
  br label %do.body216

do.body216:                                       ; preds = %do.body214
  %133 = load i8** %pIn_buf_cur, align 8
  %134 = load i8** %pIn_buf_end, align 8
  %cmp217 = icmp uge i8* %133, %134
  br i1 %cmp217, label %if.then219, label %if.else238

if.then219:                                       ; preds = %do.body216
  br label %for.cond220

for.cond220:                                      ; preds = %if.end236, %if.then219
  %135 = load i32* %decomp_flags.addr, align 4
  %and221 = and i32 %135, 2
  %tobool222 = icmp ne i32 %and221, 0
  br i1 %tobool222, label %if.then223, label %if.else235

if.then223:                                       ; preds = %for.cond220
  br label %do.body224

do.body224:                                       ; preds = %if.then223
  store i32 1, i32* %status, align 4
  %136 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state225 = getelementptr inbounds %struct.tinfl_decompressor_tag* %136, i32 0, i32 0
  store i32 6, i32* %m_state225, align 4
  br label %common_exit

sw.bb226:                                         ; preds = %if.end
  br label %do.end228

do.end228:                                        ; preds = %sw.bb226
  %137 = load i8** %pIn_buf_cur, align 8
  %138 = load i8** %pIn_buf_end, align 8
  %cmp229 = icmp ult i8* %137, %138
  br i1 %cmp229, label %if.then231, label %if.end234

if.then231:                                       ; preds = %do.end228
  %139 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr232 = getelementptr inbounds i8* %139, i32 1
  store i8* %incdec.ptr232, i8** %pIn_buf_cur, align 8
  %140 = load i8* %139, align 1
  %conv233 = zext i8 %140 to i32
  store i32 %conv233, i32* %c215, align 4
  br label %for.end237

if.end234:                                        ; preds = %do.end228
  br label %if.end236

if.else235:                                       ; preds = %for.cond220
  store i32 0, i32* %c215, align 4
  br label %for.end237

if.end236:                                        ; preds = %if.end234
  br label %for.cond220

for.end237:                                       ; preds = %if.else235, %if.then231
  br label %if.end241

if.else238:                                       ; preds = %do.body216
  %141 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr239 = getelementptr inbounds i8* %141, i32 1
  store i8* %incdec.ptr239, i8** %pIn_buf_cur, align 8
  %142 = load i8* %141, align 1
  %conv240 = zext i8 %142 to i32
  store i32 %conv240, i32* %c215, align 4
  br label %if.end241

if.end241:                                        ; preds = %if.else238, %for.end237
  br label %do.end243

do.end243:                                        ; preds = %if.end241
  %143 = load i32* %c215, align 4
  %conv244 = zext i32 %143 to i64
  %144 = load i32* %num_bits, align 4
  %sh_prom245 = zext i32 %144 to i64
  %shl246 = shl i64 %conv244, %sh_prom245
  %145 = load i64* %bit_buf, align 8
  %or247 = or i64 %145, %shl246
  store i64 %or247, i64* %bit_buf, align 8
  %146 = load i32* %num_bits, align 4
  %add248 = add i32 %146, 8
  store i32 %add248, i32* %num_bits, align 4
  br label %do.cond249

do.cond249:                                       ; preds = %do.end243
  %147 = load i32* %num_bits, align 4
  %cmp250 = icmp ult i32 %147, 8
  br i1 %cmp250, label %do.body214, label %do.end252

do.end252:                                        ; preds = %do.cond249
  br label %if.end253

if.end253:                                        ; preds = %do.end252, %do.body210
  %148 = load i64* %bit_buf, align 8
  %and254 = and i64 %148, 255
  %conv255 = trunc i64 %and254 to i8
  %149 = load i32* %counter, align 4
  %idxprom = zext i32 %149 to i64
  %150 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_raw_header = getelementptr inbounds %struct.tinfl_decompressor_tag* %150, i32 0, i32 15
  %arrayidx = getelementptr inbounds [4 x i8]* %m_raw_header, i32 0, i64 %idxprom
  store i8 %conv255, i8* %arrayidx, align 1
  %151 = load i64* %bit_buf, align 8
  %shr256 = lshr i64 %151, 8
  store i64 %shr256, i64* %bit_buf, align 8
  %152 = load i32* %num_bits, align 4
  %sub257 = sub i32 %152, 8
  store i32 %sub257, i32* %num_bits, align 4
  br label %do.end259

do.end259:                                        ; preds = %if.end253
  br label %if.end296

if.else260:                                       ; preds = %for.body
  br label %do.body261

do.body261:                                       ; preds = %if.else260
  %153 = load i8** %pIn_buf_cur, align 8
  %154 = load i8** %pIn_buf_end, align 8
  %cmp262 = icmp uge i8* %153, %154
  br i1 %cmp262, label %if.then264, label %if.else288

if.then264:                                       ; preds = %do.body261
  br label %for.cond265

for.cond265:                                      ; preds = %if.end286, %if.then264
  %155 = load i32* %decomp_flags.addr, align 4
  %and266 = and i32 %155, 2
  %tobool267 = icmp ne i32 %and266, 0
  br i1 %tobool267, label %if.then268, label %if.else282

if.then268:                                       ; preds = %for.cond265
  br label %do.body269

do.body269:                                       ; preds = %if.then268
  store i32 1, i32* %status, align 4
  %156 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state270 = getelementptr inbounds %struct.tinfl_decompressor_tag* %156, i32 0, i32 0
  store i32 7, i32* %m_state270, align 4
  br label %common_exit

sw.bb271:                                         ; preds = %if.end
  br label %do.end273

do.end273:                                        ; preds = %sw.bb271
  %157 = load i8** %pIn_buf_cur, align 8
  %158 = load i8** %pIn_buf_end, align 8
  %cmp274 = icmp ult i8* %157, %158
  br i1 %cmp274, label %if.then276, label %if.end281

if.then276:                                       ; preds = %do.end273
  %159 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr277 = getelementptr inbounds i8* %159, i32 1
  store i8* %incdec.ptr277, i8** %pIn_buf_cur, align 8
  %160 = load i8* %159, align 1
  %161 = load i32* %counter, align 4
  %idxprom278 = zext i32 %161 to i64
  %162 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_raw_header279 = getelementptr inbounds %struct.tinfl_decompressor_tag* %162, i32 0, i32 15
  %arrayidx280 = getelementptr inbounds [4 x i8]* %m_raw_header279, i32 0, i64 %idxprom278
  store i8 %160, i8* %arrayidx280, align 1
  br label %for.end287

if.end281:                                        ; preds = %do.end273
  br label %if.end286

if.else282:                                       ; preds = %for.cond265
  %163 = load i32* %counter, align 4
  %idxprom283 = zext i32 %163 to i64
  %164 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_raw_header284 = getelementptr inbounds %struct.tinfl_decompressor_tag* %164, i32 0, i32 15
  %arrayidx285 = getelementptr inbounds [4 x i8]* %m_raw_header284, i32 0, i64 %idxprom283
  store i8 0, i8* %arrayidx285, align 1
  br label %for.end287

if.end286:                                        ; preds = %if.end281
  br label %for.cond265

for.end287:                                       ; preds = %if.else282, %if.then276
  br label %if.end293

if.else288:                                       ; preds = %do.body261
  %165 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr289 = getelementptr inbounds i8* %165, i32 1
  store i8* %incdec.ptr289, i8** %pIn_buf_cur, align 8
  %166 = load i8* %165, align 1
  %167 = load i32* %counter, align 4
  %idxprom290 = zext i32 %167 to i64
  %168 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_raw_header291 = getelementptr inbounds %struct.tinfl_decompressor_tag* %168, i32 0, i32 15
  %arrayidx292 = getelementptr inbounds [4 x i8]* %m_raw_header291, i32 0, i64 %idxprom290
  store i8 %166, i8* %arrayidx292, align 1
  br label %if.end293

if.end293:                                        ; preds = %if.else288, %for.end287
  br label %do.end295

do.end295:                                        ; preds = %if.end293
  br label %if.end296

if.end296:                                        ; preds = %do.end295, %do.end259
  br label %for.inc

for.inc:                                          ; preds = %if.end296
  %169 = load i32* %counter, align 4
  %inc = add i32 %169, 1
  store i32 %inc, i32* %counter, align 4
  br label %for.cond205

for.end297:                                       ; preds = %for.cond205
  %170 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_raw_header298 = getelementptr inbounds %struct.tinfl_decompressor_tag* %170, i32 0, i32 15
  %arrayidx299 = getelementptr inbounds [4 x i8]* %m_raw_header298, i32 0, i64 0
  %171 = load i8* %arrayidx299, align 1
  %conv300 = zext i8 %171 to i32
  %172 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_raw_header301 = getelementptr inbounds %struct.tinfl_decompressor_tag* %172, i32 0, i32 15
  %arrayidx302 = getelementptr inbounds [4 x i8]* %m_raw_header301, i32 0, i64 1
  %173 = load i8* %arrayidx302, align 1
  %conv303 = zext i8 %173 to i32
  %shl304 = shl i32 %conv303, 8
  %or305 = or i32 %conv300, %shl304
  store i32 %or305, i32* %counter, align 4
  %174 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_raw_header306 = getelementptr inbounds %struct.tinfl_decompressor_tag* %174, i32 0, i32 15
  %arrayidx307 = getelementptr inbounds [4 x i8]* %m_raw_header306, i32 0, i64 2
  %175 = load i8* %arrayidx307, align 1
  %conv308 = zext i8 %175 to i32
  %176 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_raw_header309 = getelementptr inbounds %struct.tinfl_decompressor_tag* %176, i32 0, i32 15
  %arrayidx310 = getelementptr inbounds [4 x i8]* %m_raw_header309, i32 0, i64 3
  %177 = load i8* %arrayidx310, align 1
  %conv311 = zext i8 %177 to i32
  %shl312 = shl i32 %conv311, 8
  %or313 = or i32 %conv308, %shl312
  %xor = xor i32 65535, %or313
  %cmp314 = icmp ne i32 %or305, %xor
  br i1 %cmp314, label %if.then316, label %if.end326

if.then316:                                       ; preds = %for.end297
  br label %do.body317

do.body317:                                       ; preds = %if.then316
  br label %for.cond318

for.cond318:                                      ; preds = %do.end323, %do.body317
  br label %do.body319

do.body319:                                       ; preds = %for.cond318
  store i32 -1, i32* %status, align 4
  %178 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state320 = getelementptr inbounds %struct.tinfl_decompressor_tag* %178, i32 0, i32 0
  store i32 39, i32* %m_state320, align 4
  br label %common_exit

sw.bb321:                                         ; preds = %if.end
  br label %do.end323

do.end323:                                        ; preds = %sw.bb321
  br label %for.cond318

do.end325:                                        ; No predecessors!
  br label %if.end326

if.end326:                                        ; preds = %do.end325, %for.end297
  br label %while.cond

while.cond:                                       ; preds = %while.end, %if.end326
  %179 = load i32* %counter, align 4
  %tobool327 = icmp ne i32 %179, 0
  br i1 %tobool327, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %180 = load i32* %num_bits, align 4
  %tobool328 = icmp ne i32 %180, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %181 = phi i1 [ false, %while.cond ], [ %tobool328, %land.rhs ]
  br i1 %181, label %while.body, label %while.end390

while.body:                                       ; preds = %land.end
  br label %do.body329

do.body329:                                       ; preds = %while.body
  %182 = load i32* %num_bits, align 4
  %cmp330 = icmp ult i32 %182, 8
  br i1 %cmp330, label %if.then332, label %if.end372

if.then332:                                       ; preds = %do.body329
  br label %do.body333

do.body333:                                       ; preds = %do.cond368, %if.then332
  br label %do.body335

do.body335:                                       ; preds = %do.body333
  %183 = load i8** %pIn_buf_cur, align 8
  %184 = load i8** %pIn_buf_end, align 8
  %cmp336 = icmp uge i8* %183, %184
  br i1 %cmp336, label %if.then338, label %if.else357

if.then338:                                       ; preds = %do.body335
  br label %for.cond339

for.cond339:                                      ; preds = %if.end355, %if.then338
  %185 = load i32* %decomp_flags.addr, align 4
  %and340 = and i32 %185, 2
  %tobool341 = icmp ne i32 %and340, 0
  br i1 %tobool341, label %if.then342, label %if.else354

if.then342:                                       ; preds = %for.cond339
  br label %do.body343

do.body343:                                       ; preds = %if.then342
  store i32 1, i32* %status, align 4
  %186 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state344 = getelementptr inbounds %struct.tinfl_decompressor_tag* %186, i32 0, i32 0
  store i32 51, i32* %m_state344, align 4
  br label %common_exit

sw.bb345:                                         ; preds = %if.end
  br label %do.end347

do.end347:                                        ; preds = %sw.bb345
  %187 = load i8** %pIn_buf_cur, align 8
  %188 = load i8** %pIn_buf_end, align 8
  %cmp348 = icmp ult i8* %187, %188
  br i1 %cmp348, label %if.then350, label %if.end353

if.then350:                                       ; preds = %do.end347
  %189 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr351 = getelementptr inbounds i8* %189, i32 1
  store i8* %incdec.ptr351, i8** %pIn_buf_cur, align 8
  %190 = load i8* %189, align 1
  %conv352 = zext i8 %190 to i32
  store i32 %conv352, i32* %c334, align 4
  br label %for.end356

if.end353:                                        ; preds = %do.end347
  br label %if.end355

if.else354:                                       ; preds = %for.cond339
  store i32 0, i32* %c334, align 4
  br label %for.end356

if.end355:                                        ; preds = %if.end353
  br label %for.cond339

for.end356:                                       ; preds = %if.else354, %if.then350
  br label %if.end360

if.else357:                                       ; preds = %do.body335
  %191 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr358 = getelementptr inbounds i8* %191, i32 1
  store i8* %incdec.ptr358, i8** %pIn_buf_cur, align 8
  %192 = load i8* %191, align 1
  %conv359 = zext i8 %192 to i32
  store i32 %conv359, i32* %c334, align 4
  br label %if.end360

if.end360:                                        ; preds = %if.else357, %for.end356
  br label %do.end362

do.end362:                                        ; preds = %if.end360
  %193 = load i32* %c334, align 4
  %conv363 = zext i32 %193 to i64
  %194 = load i32* %num_bits, align 4
  %sh_prom364 = zext i32 %194 to i64
  %shl365 = shl i64 %conv363, %sh_prom364
  %195 = load i64* %bit_buf, align 8
  %or366 = or i64 %195, %shl365
  store i64 %or366, i64* %bit_buf, align 8
  %196 = load i32* %num_bits, align 4
  %add367 = add i32 %196, 8
  store i32 %add367, i32* %num_bits, align 4
  br label %do.cond368

do.cond368:                                       ; preds = %do.end362
  %197 = load i32* %num_bits, align 4
  %cmp369 = icmp ult i32 %197, 8
  br i1 %cmp369, label %do.body333, label %do.end371

do.end371:                                        ; preds = %do.cond368
  br label %if.end372

if.end372:                                        ; preds = %do.end371, %do.body329
  %198 = load i64* %bit_buf, align 8
  %and373 = and i64 %198, 255
  %conv374 = trunc i64 %and373 to i32
  store i32 %conv374, i32* %dist, align 4
  %199 = load i64* %bit_buf, align 8
  %shr375 = lshr i64 %199, 8
  store i64 %shr375, i64* %bit_buf, align 8
  %200 = load i32* %num_bits, align 4
  %sub376 = sub i32 %200, 8
  store i32 %sub376, i32* %num_bits, align 4
  br label %do.end378

do.end378:                                        ; preds = %if.end372
  br label %while.cond379

while.cond379:                                    ; preds = %do.end387, %do.end378
  %201 = load i8** %pOut_buf_cur, align 8
  %202 = load i8** %pOut_buf_end, align 8
  %cmp380 = icmp uge i8* %201, %202
  br i1 %cmp380, label %while.body382, label %while.end

while.body382:                                    ; preds = %while.cond379
  br label %do.body383

do.body383:                                       ; preds = %while.body382
  store i32 2, i32* %status, align 4
  %203 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state384 = getelementptr inbounds %struct.tinfl_decompressor_tag* %203, i32 0, i32 0
  store i32 52, i32* %m_state384, align 4
  br label %common_exit

sw.bb385:                                         ; preds = %if.end
  br label %do.end387

do.end387:                                        ; preds = %sw.bb385
  br label %while.cond379

while.end:                                        ; preds = %while.cond379
  %204 = load i32* %dist, align 4
  %conv388 = trunc i32 %204 to i8
  %205 = load i8** %pOut_buf_cur, align 8
  %incdec.ptr389 = getelementptr inbounds i8* %205, i32 1
  store i8* %incdec.ptr389, i8** %pOut_buf_cur, align 8
  store i8 %conv388, i8* %205, align 1
  %206 = load i32* %counter, align 4
  %dec = add i32 %206, -1
  store i32 %dec, i32* %counter, align 4
  br label %while.cond

while.end390:                                     ; preds = %land.end
  br label %while.cond391

while.cond391:                                    ; preds = %cond.end470, %while.end390
  %207 = load i32* %counter, align 4
  %tobool392 = icmp ne i32 %207, 0
  br i1 %tobool392, label %while.body393, label %while.end476

while.body393:                                    ; preds = %while.cond391
  br label %while.cond394

while.cond394:                                    ; preds = %do.end402, %while.body393
  %208 = load i8** %pOut_buf_cur, align 8
  %209 = load i8** %pOut_buf_end, align 8
  %cmp395 = icmp uge i8* %208, %209
  br i1 %cmp395, label %while.body397, label %while.end403

while.body397:                                    ; preds = %while.cond394
  br label %do.body398

do.body398:                                       ; preds = %while.body397
  store i32 2, i32* %status, align 4
  %210 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state399 = getelementptr inbounds %struct.tinfl_decompressor_tag* %210, i32 0, i32 0
  store i32 9, i32* %m_state399, align 4
  br label %common_exit

sw.bb400:                                         ; preds = %if.end
  br label %do.end402

do.end402:                                        ; preds = %sw.bb400
  br label %while.cond394

while.end403:                                     ; preds = %while.cond394
  br label %while.cond404

while.cond404:                                    ; preds = %if.end426, %while.end403
  %211 = load i8** %pIn_buf_cur, align 8
  %212 = load i8** %pIn_buf_end, align 8
  %cmp405 = icmp uge i8* %211, %212
  br i1 %cmp405, label %while.body407, label %while.end427

while.body407:                                    ; preds = %while.cond404
  %213 = load i32* %decomp_flags.addr, align 4
  %and408 = and i32 %213, 2
  %tobool409 = icmp ne i32 %and408, 0
  br i1 %tobool409, label %if.then410, label %if.else416

if.then410:                                       ; preds = %while.body407
  br label %do.body411

do.body411:                                       ; preds = %if.then410
  store i32 1, i32* %status, align 4
  %214 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state412 = getelementptr inbounds %struct.tinfl_decompressor_tag* %214, i32 0, i32 0
  store i32 38, i32* %m_state412, align 4
  br label %common_exit

sw.bb413:                                         ; preds = %if.end
  br label %do.end415

do.end415:                                        ; preds = %sw.bb413
  br label %if.end426

if.else416:                                       ; preds = %while.body407
  br label %do.body417

do.body417:                                       ; preds = %if.else416
  br label %for.cond418

for.cond418:                                      ; preds = %do.end423, %do.body417
  br label %do.body419

do.body419:                                       ; preds = %for.cond418
  store i32 -1, i32* %status, align 4
  %215 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state420 = getelementptr inbounds %struct.tinfl_decompressor_tag* %215, i32 0, i32 0
  store i32 40, i32* %m_state420, align 4
  br label %common_exit

sw.bb421:                                         ; preds = %if.end
  br label %do.end423

do.end423:                                        ; preds = %sw.bb421
  br label %for.cond418

do.end425:                                        ; No predecessors!
  br label %if.end426

if.end426:                                        ; preds = %do.end425, %do.end415
  br label %while.cond404

while.end427:                                     ; preds = %while.cond404
  %216 = load i8** %pOut_buf_end, align 8
  %217 = load i8** %pOut_buf_cur, align 8
  %sub.ptr.lhs.cast428 = ptrtoint i8* %216 to i64
  %sub.ptr.rhs.cast429 = ptrtoint i8* %217 to i64
  %sub.ptr.sub430 = sub i64 %sub.ptr.lhs.cast428, %sub.ptr.rhs.cast429
  %218 = load i8** %pIn_buf_end, align 8
  %219 = load i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast431 = ptrtoint i8* %218 to i64
  %sub.ptr.rhs.cast432 = ptrtoint i8* %219 to i64
  %sub.ptr.sub433 = sub i64 %sub.ptr.lhs.cast431, %sub.ptr.rhs.cast432
  %cmp434 = icmp ult i64 %sub.ptr.sub430, %sub.ptr.sub433
  br i1 %cmp434, label %cond.true436, label %cond.false440

cond.true436:                                     ; preds = %while.end427
  %220 = load i8** %pOut_buf_end, align 8
  %221 = load i8** %pOut_buf_cur, align 8
  %sub.ptr.lhs.cast437 = ptrtoint i8* %220 to i64
  %sub.ptr.rhs.cast438 = ptrtoint i8* %221 to i64
  %sub.ptr.sub439 = sub i64 %sub.ptr.lhs.cast437, %sub.ptr.rhs.cast438
  br label %cond.end444

cond.false440:                                    ; preds = %while.end427
  %222 = load i8** %pIn_buf_end, align 8
  %223 = load i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast441 = ptrtoint i8* %222 to i64
  %sub.ptr.rhs.cast442 = ptrtoint i8* %223 to i64
  %sub.ptr.sub443 = sub i64 %sub.ptr.lhs.cast441, %sub.ptr.rhs.cast442
  br label %cond.end444

cond.end444:                                      ; preds = %cond.false440, %cond.true436
  %cond445 = phi i64 [ %sub.ptr.sub439, %cond.true436 ], [ %sub.ptr.sub443, %cond.false440 ]
  %224 = load i32* %counter, align 4
  %conv446 = zext i32 %224 to i64
  %cmp447 = icmp ult i64 %cond445, %conv446
  br i1 %cmp447, label %cond.true449, label %cond.false468

cond.true449:                                     ; preds = %cond.end444
  %225 = load i8** %pOut_buf_end, align 8
  %226 = load i8** %pOut_buf_cur, align 8
  %sub.ptr.lhs.cast450 = ptrtoint i8* %225 to i64
  %sub.ptr.rhs.cast451 = ptrtoint i8* %226 to i64
  %sub.ptr.sub452 = sub i64 %sub.ptr.lhs.cast450, %sub.ptr.rhs.cast451
  %227 = load i8** %pIn_buf_end, align 8
  %228 = load i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast453 = ptrtoint i8* %227 to i64
  %sub.ptr.rhs.cast454 = ptrtoint i8* %228 to i64
  %sub.ptr.sub455 = sub i64 %sub.ptr.lhs.cast453, %sub.ptr.rhs.cast454
  %cmp456 = icmp ult i64 %sub.ptr.sub452, %sub.ptr.sub455
  br i1 %cmp456, label %cond.true458, label %cond.false462

cond.true458:                                     ; preds = %cond.true449
  %229 = load i8** %pOut_buf_end, align 8
  %230 = load i8** %pOut_buf_cur, align 8
  %sub.ptr.lhs.cast459 = ptrtoint i8* %229 to i64
  %sub.ptr.rhs.cast460 = ptrtoint i8* %230 to i64
  %sub.ptr.sub461 = sub i64 %sub.ptr.lhs.cast459, %sub.ptr.rhs.cast460
  br label %cond.end466

cond.false462:                                    ; preds = %cond.true449
  %231 = load i8** %pIn_buf_end, align 8
  %232 = load i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast463 = ptrtoint i8* %231 to i64
  %sub.ptr.rhs.cast464 = ptrtoint i8* %232 to i64
  %sub.ptr.sub465 = sub i64 %sub.ptr.lhs.cast463, %sub.ptr.rhs.cast464
  br label %cond.end466

cond.end466:                                      ; preds = %cond.false462, %cond.true458
  %cond467 = phi i64 [ %sub.ptr.sub461, %cond.true458 ], [ %sub.ptr.sub465, %cond.false462 ]
  br label %cond.end470

cond.false468:                                    ; preds = %cond.end444
  %233 = load i32* %counter, align 4
  %conv469 = zext i32 %233 to i64
  br label %cond.end470

cond.end470:                                      ; preds = %cond.false468, %cond.end466
  %cond471 = phi i64 [ %cond467, %cond.end466 ], [ %conv469, %cond.false468 ]
  store i64 %cond471, i64* %n, align 8
  %234 = load i8** %pOut_buf_cur, align 8
  %235 = load i8** %pIn_buf_cur, align 8
  %236 = load i64* %n, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %234, i8* %235, i64 %236, i32 1, i1 false)
  %237 = load i64* %n, align 8
  %238 = load i8** %pIn_buf_cur, align 8
  %add.ptr472 = getelementptr inbounds i8* %238, i64 %237
  store i8* %add.ptr472, i8** %pIn_buf_cur, align 8
  %239 = load i64* %n, align 8
  %240 = load i8** %pOut_buf_cur, align 8
  %add.ptr473 = getelementptr inbounds i8* %240, i64 %239
  store i8* %add.ptr473, i8** %pOut_buf_cur, align 8
  %241 = load i64* %n, align 8
  %conv474 = trunc i64 %241 to i32
  %242 = load i32* %counter, align 4
  %sub475 = sub i32 %242, %conv474
  store i32 %sub475, i32* %counter, align 4
  br label %while.cond391

while.end476:                                     ; preds = %while.cond391
  br label %if.end1848

if.else477:                                       ; preds = %do.end145
  %243 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type478 = getelementptr inbounds %struct.tinfl_decompressor_tag* %243, i32 0, i32 6
  %244 = load i32* %m_type478, align 4
  %cmp479 = icmp eq i32 %244, 3
  br i1 %cmp479, label %if.then481, label %if.else491

if.then481:                                       ; preds = %if.else477
  br label %do.body482

do.body482:                                       ; preds = %if.then481
  br label %for.cond483

for.cond483:                                      ; preds = %do.end488, %do.body482
  br label %do.body484

do.body484:                                       ; preds = %for.cond483
  store i32 -1, i32* %status, align 4
  %245 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state485 = getelementptr inbounds %struct.tinfl_decompressor_tag* %245, i32 0, i32 0
  store i32 10, i32* %m_state485, align 4
  br label %common_exit

sw.bb486:                                         ; preds = %if.end
  br label %do.end488

do.end488:                                        ; preds = %sw.bb486
  br label %for.cond483

do.end490:                                        ; No predecessors!
  br label %if.end1847

if.else491:                                       ; preds = %if.else477
  %246 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type492 = getelementptr inbounds %struct.tinfl_decompressor_tag* %246, i32 0, i32 6
  %247 = load i32* %m_type492, align 4
  %cmp493 = icmp eq i32 %247, 1
  br i1 %cmp493, label %if.then495, label %if.else535

if.then495:                                       ; preds = %if.else491
  %248 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables = getelementptr inbounds %struct.tinfl_decompressor_tag* %248, i32 0, i32 14
  %arrayidx496 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables, i32 0, i64 0
  %m_code_size = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx496, i32 0, i32 0
  %arraydecay = getelementptr inbounds [288 x i8]* %m_code_size, i32 0, i32 0
  store i8* %arraydecay, i8** %p, align 8
  %249 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes = getelementptr inbounds %struct.tinfl_decompressor_tag* %249, i32 0, i32 11
  %arrayidx497 = getelementptr inbounds [3 x i32]* %m_table_sizes, i32 0, i64 0
  store i32 288, i32* %arrayidx497, align 4
  %250 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes498 = getelementptr inbounds %struct.tinfl_decompressor_tag* %250, i32 0, i32 11
  %arrayidx499 = getelementptr inbounds [3 x i32]* %m_table_sizes498, i32 0, i64 1
  store i32 32, i32* %arrayidx499, align 4
  %251 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables500 = getelementptr inbounds %struct.tinfl_decompressor_tag* %251, i32 0, i32 14
  %arrayidx501 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables500, i32 0, i64 1
  %m_code_size502 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx501, i32 0, i32 0
  %252 = bitcast [288 x i8]* %m_code_size502 to i8*
  call void @llvm.memset.p0i8.i64(i8* %252, i8 5, i64 32, i32 2, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond503

for.cond503:                                      ; preds = %for.inc508, %if.then495
  %253 = load i32* %i, align 4
  %cmp504 = icmp ule i32 %253, 143
  br i1 %cmp504, label %for.body506, label %for.end510

for.body506:                                      ; preds = %for.cond503
  %254 = load i8** %p, align 8
  %incdec.ptr507 = getelementptr inbounds i8* %254, i32 1
  store i8* %incdec.ptr507, i8** %p, align 8
  store i8 8, i8* %254, align 1
  br label %for.inc508

for.inc508:                                       ; preds = %for.body506
  %255 = load i32* %i, align 4
  %inc509 = add i32 %255, 1
  store i32 %inc509, i32* %i, align 4
  br label %for.cond503

for.end510:                                       ; preds = %for.cond503
  br label %for.cond511

for.cond511:                                      ; preds = %for.inc516, %for.end510
  %256 = load i32* %i, align 4
  %cmp512 = icmp ule i32 %256, 255
  br i1 %cmp512, label %for.body514, label %for.end518

for.body514:                                      ; preds = %for.cond511
  %257 = load i8** %p, align 8
  %incdec.ptr515 = getelementptr inbounds i8* %257, i32 1
  store i8* %incdec.ptr515, i8** %p, align 8
  store i8 9, i8* %257, align 1
  br label %for.inc516

for.inc516:                                       ; preds = %for.body514
  %258 = load i32* %i, align 4
  %inc517 = add i32 %258, 1
  store i32 %inc517, i32* %i, align 4
  br label %for.cond511

for.end518:                                       ; preds = %for.cond511
  br label %for.cond519

for.cond519:                                      ; preds = %for.inc524, %for.end518
  %259 = load i32* %i, align 4
  %cmp520 = icmp ule i32 %259, 279
  br i1 %cmp520, label %for.body522, label %for.end526

for.body522:                                      ; preds = %for.cond519
  %260 = load i8** %p, align 8
  %incdec.ptr523 = getelementptr inbounds i8* %260, i32 1
  store i8* %incdec.ptr523, i8** %p, align 8
  store i8 7, i8* %260, align 1
  br label %for.inc524

for.inc524:                                       ; preds = %for.body522
  %261 = load i32* %i, align 4
  %inc525 = add i32 %261, 1
  store i32 %inc525, i32* %i, align 4
  br label %for.cond519

for.end526:                                       ; preds = %for.cond519
  br label %for.cond527

for.cond527:                                      ; preds = %for.inc532, %for.end526
  %262 = load i32* %i, align 4
  %cmp528 = icmp ule i32 %262, 287
  br i1 %cmp528, label %for.body530, label %for.end534

for.body530:                                      ; preds = %for.cond527
  %263 = load i8** %p, align 8
  %incdec.ptr531 = getelementptr inbounds i8* %263, i32 1
  store i8* %incdec.ptr531, i8** %p, align 8
  store i8 8, i8* %263, align 1
  br label %for.inc532

for.inc532:                                       ; preds = %for.body530
  %264 = load i32* %i, align 4
  %inc533 = add i32 %264, 1
  store i32 %inc533, i32* %i, align 4
  br label %for.cond527

for.end534:                                       ; preds = %for.cond527
  br label %if.end693

if.else535:                                       ; preds = %if.else491
  store i32 0, i32* %counter, align 4
  br label %for.cond536

for.cond536:                                      ; preds = %for.inc618, %if.else535
  %265 = load i32* %counter, align 4
  %cmp537 = icmp ult i32 %265, 3
  br i1 %cmp537, label %for.body539, label %for.end620

for.body539:                                      ; preds = %for.cond536
  br label %do.body540

do.body540:                                       ; preds = %for.body539
  %266 = load i32* %num_bits, align 4
  %267 = load i32* %counter, align 4
  %idxprom541 = zext i32 %267 to i64
  %arrayidx542 = getelementptr inbounds [4 x i8]* @.str11, i32 0, i64 %idxprom541
  %268 = load i8* %arrayidx542, align 1
  %conv543 = sext i8 %268 to i32
  %cmp544 = icmp ult i32 %266, %conv543
  br i1 %cmp544, label %if.then546, label %if.end589

if.then546:                                       ; preds = %do.body540
  br label %do.body547

do.body547:                                       ; preds = %do.cond582, %if.then546
  br label %do.body549

do.body549:                                       ; preds = %do.body547
  %269 = load i8** %pIn_buf_cur, align 8
  %270 = load i8** %pIn_buf_end, align 8
  %cmp550 = icmp uge i8* %269, %270
  br i1 %cmp550, label %if.then552, label %if.else571

if.then552:                                       ; preds = %do.body549
  br label %for.cond553

for.cond553:                                      ; preds = %if.end569, %if.then552
  %271 = load i32* %decomp_flags.addr, align 4
  %and554 = and i32 %271, 2
  %tobool555 = icmp ne i32 %and554, 0
  br i1 %tobool555, label %if.then556, label %if.else568

if.then556:                                       ; preds = %for.cond553
  br label %do.body557

do.body557:                                       ; preds = %if.then556
  store i32 1, i32* %status, align 4
  %272 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state558 = getelementptr inbounds %struct.tinfl_decompressor_tag* %272, i32 0, i32 0
  store i32 11, i32* %m_state558, align 4
  br label %common_exit

sw.bb559:                                         ; preds = %if.end
  br label %do.end561

do.end561:                                        ; preds = %sw.bb559
  %273 = load i8** %pIn_buf_cur, align 8
  %274 = load i8** %pIn_buf_end, align 8
  %cmp562 = icmp ult i8* %273, %274
  br i1 %cmp562, label %if.then564, label %if.end567

if.then564:                                       ; preds = %do.end561
  %275 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr565 = getelementptr inbounds i8* %275, i32 1
  store i8* %incdec.ptr565, i8** %pIn_buf_cur, align 8
  %276 = load i8* %275, align 1
  %conv566 = zext i8 %276 to i32
  store i32 %conv566, i32* %c548, align 4
  br label %for.end570

if.end567:                                        ; preds = %do.end561
  br label %if.end569

if.else568:                                       ; preds = %for.cond553
  store i32 0, i32* %c548, align 4
  br label %for.end570

if.end569:                                        ; preds = %if.end567
  br label %for.cond553

for.end570:                                       ; preds = %if.else568, %if.then564
  br label %if.end574

if.else571:                                       ; preds = %do.body549
  %277 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr572 = getelementptr inbounds i8* %277, i32 1
  store i8* %incdec.ptr572, i8** %pIn_buf_cur, align 8
  %278 = load i8* %277, align 1
  %conv573 = zext i8 %278 to i32
  store i32 %conv573, i32* %c548, align 4
  br label %if.end574

if.end574:                                        ; preds = %if.else571, %for.end570
  br label %do.end576

do.end576:                                        ; preds = %if.end574
  %279 = load i32* %c548, align 4
  %conv577 = zext i32 %279 to i64
  %280 = load i32* %num_bits, align 4
  %sh_prom578 = zext i32 %280 to i64
  %shl579 = shl i64 %conv577, %sh_prom578
  %281 = load i64* %bit_buf, align 8
  %or580 = or i64 %281, %shl579
  store i64 %or580, i64* %bit_buf, align 8
  %282 = load i32* %num_bits, align 4
  %add581 = add i32 %282, 8
  store i32 %add581, i32* %num_bits, align 4
  br label %do.cond582

do.cond582:                                       ; preds = %do.end576
  %283 = load i32* %num_bits, align 4
  %284 = load i32* %counter, align 4
  %idxprom583 = zext i32 %284 to i64
  %arrayidx584 = getelementptr inbounds [4 x i8]* @.str11, i32 0, i64 %idxprom583
  %285 = load i8* %arrayidx584, align 1
  %conv585 = sext i8 %285 to i32
  %cmp586 = icmp ult i32 %283, %conv585
  br i1 %cmp586, label %do.body547, label %do.end588

do.end588:                                        ; preds = %do.cond582
  br label %if.end589

if.end589:                                        ; preds = %do.end588, %do.body540
  %286 = load i64* %bit_buf, align 8
  %287 = load i32* %counter, align 4
  %idxprom590 = zext i32 %287 to i64
  %arrayidx591 = getelementptr inbounds [4 x i8]* @.str11, i32 0, i64 %idxprom590
  %288 = load i8* %arrayidx591, align 1
  %conv592 = sext i8 %288 to i32
  %shl593 = shl i32 1, %conv592
  %sub594 = sub nsw i32 %shl593, 1
  %conv595 = sext i32 %sub594 to i64
  %and596 = and i64 %286, %conv595
  %conv597 = trunc i64 %and596 to i32
  %289 = load i32* %counter, align 4
  %idxprom598 = zext i32 %289 to i64
  %290 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes599 = getelementptr inbounds %struct.tinfl_decompressor_tag* %290, i32 0, i32 11
  %arrayidx600 = getelementptr inbounds [3 x i32]* %m_table_sizes599, i32 0, i64 %idxprom598
  store i32 %conv597, i32* %arrayidx600, align 4
  %291 = load i32* %counter, align 4
  %idxprom601 = zext i32 %291 to i64
  %arrayidx602 = getelementptr inbounds [4 x i8]* @.str11, i32 0, i64 %idxprom601
  %292 = load i8* %arrayidx602, align 1
  %conv603 = sext i8 %292 to i32
  %293 = load i64* %bit_buf, align 8
  %sh_prom604 = zext i32 %conv603 to i64
  %shr605 = lshr i64 %293, %sh_prom604
  store i64 %shr605, i64* %bit_buf, align 8
  %294 = load i32* %counter, align 4
  %idxprom606 = zext i32 %294 to i64
  %arrayidx607 = getelementptr inbounds [4 x i8]* @.str11, i32 0, i64 %idxprom606
  %295 = load i8* %arrayidx607, align 1
  %conv608 = sext i8 %295 to i32
  %296 = load i32* %num_bits, align 4
  %sub609 = sub i32 %296, %conv608
  store i32 %sub609, i32* %num_bits, align 4
  br label %do.end611

do.end611:                                        ; preds = %if.end589
  %297 = load i32* %counter, align 4
  %idxprom612 = zext i32 %297 to i64
  %arrayidx613 = getelementptr inbounds [3 x i32]* @tinfl_decompress.s_min_table_sizes, i32 0, i64 %idxprom612
  %298 = load i32* %arrayidx613, align 4
  %299 = load i32* %counter, align 4
  %idxprom614 = zext i32 %299 to i64
  %300 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes615 = getelementptr inbounds %struct.tinfl_decompressor_tag* %300, i32 0, i32 11
  %arrayidx616 = getelementptr inbounds [3 x i32]* %m_table_sizes615, i32 0, i64 %idxprom614
  %301 = load i32* %arrayidx616, align 4
  %add617 = add i32 %301, %298
  store i32 %add617, i32* %arrayidx616, align 4
  br label %for.inc618

for.inc618:                                       ; preds = %do.end611
  %302 = load i32* %counter, align 4
  %inc619 = add i32 %302, 1
  store i32 %inc619, i32* %counter, align 4
  br label %for.cond536

for.end620:                                       ; preds = %for.cond536
  %303 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables621 = getelementptr inbounds %struct.tinfl_decompressor_tag* %303, i32 0, i32 14
  %arrayidx622 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables621, i32 0, i64 2
  %m_code_size623 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx622, i32 0, i32 0
  %304 = bitcast [288 x i8]* %m_code_size623 to i8*
  call void @llvm.memset.p0i8.i64(i8* %304, i8 0, i64 288, i32 2, i1 false)
  store i32 0, i32* %counter, align 4
  br label %for.cond624

for.cond624:                                      ; preds = %for.inc688, %for.end620
  %305 = load i32* %counter, align 4
  %306 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes625 = getelementptr inbounds %struct.tinfl_decompressor_tag* %306, i32 0, i32 11
  %arrayidx626 = getelementptr inbounds [3 x i32]* %m_table_sizes625, i32 0, i64 2
  %307 = load i32* %arrayidx626, align 4
  %cmp627 = icmp ult i32 %305, %307
  br i1 %cmp627, label %for.body629, label %for.end690

for.body629:                                      ; preds = %for.cond624
  br label %do.body630

do.body630:                                       ; preds = %for.body629
  %308 = load i32* %num_bits, align 4
  %cmp631 = icmp ult i32 %308, 3
  br i1 %cmp631, label %if.then633, label %if.end673

if.then633:                                       ; preds = %do.body630
  br label %do.body634

do.body634:                                       ; preds = %do.cond669, %if.then633
  br label %do.body636

do.body636:                                       ; preds = %do.body634
  %309 = load i8** %pIn_buf_cur, align 8
  %310 = load i8** %pIn_buf_end, align 8
  %cmp637 = icmp uge i8* %309, %310
  br i1 %cmp637, label %if.then639, label %if.else658

if.then639:                                       ; preds = %do.body636
  br label %for.cond640

for.cond640:                                      ; preds = %if.end656, %if.then639
  %311 = load i32* %decomp_flags.addr, align 4
  %and641 = and i32 %311, 2
  %tobool642 = icmp ne i32 %and641, 0
  br i1 %tobool642, label %if.then643, label %if.else655

if.then643:                                       ; preds = %for.cond640
  br label %do.body644

do.body644:                                       ; preds = %if.then643
  store i32 1, i32* %status, align 4
  %312 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state645 = getelementptr inbounds %struct.tinfl_decompressor_tag* %312, i32 0, i32 0
  store i32 14, i32* %m_state645, align 4
  br label %common_exit

sw.bb646:                                         ; preds = %if.end
  br label %do.end648

do.end648:                                        ; preds = %sw.bb646
  %313 = load i8** %pIn_buf_cur, align 8
  %314 = load i8** %pIn_buf_end, align 8
  %cmp649 = icmp ult i8* %313, %314
  br i1 %cmp649, label %if.then651, label %if.end654

if.then651:                                       ; preds = %do.end648
  %315 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr652 = getelementptr inbounds i8* %315, i32 1
  store i8* %incdec.ptr652, i8** %pIn_buf_cur, align 8
  %316 = load i8* %315, align 1
  %conv653 = zext i8 %316 to i32
  store i32 %conv653, i32* %c635, align 4
  br label %for.end657

if.end654:                                        ; preds = %do.end648
  br label %if.end656

if.else655:                                       ; preds = %for.cond640
  store i32 0, i32* %c635, align 4
  br label %for.end657

if.end656:                                        ; preds = %if.end654
  br label %for.cond640

for.end657:                                       ; preds = %if.else655, %if.then651
  br label %if.end661

if.else658:                                       ; preds = %do.body636
  %317 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr659 = getelementptr inbounds i8* %317, i32 1
  store i8* %incdec.ptr659, i8** %pIn_buf_cur, align 8
  %318 = load i8* %317, align 1
  %conv660 = zext i8 %318 to i32
  store i32 %conv660, i32* %c635, align 4
  br label %if.end661

if.end661:                                        ; preds = %if.else658, %for.end657
  br label %do.end663

do.end663:                                        ; preds = %if.end661
  %319 = load i32* %c635, align 4
  %conv664 = zext i32 %319 to i64
  %320 = load i32* %num_bits, align 4
  %sh_prom665 = zext i32 %320 to i64
  %shl666 = shl i64 %conv664, %sh_prom665
  %321 = load i64* %bit_buf, align 8
  %or667 = or i64 %321, %shl666
  store i64 %or667, i64* %bit_buf, align 8
  %322 = load i32* %num_bits, align 4
  %add668 = add i32 %322, 8
  store i32 %add668, i32* %num_bits, align 4
  br label %do.cond669

do.cond669:                                       ; preds = %do.end663
  %323 = load i32* %num_bits, align 4
  %cmp670 = icmp ult i32 %323, 3
  br i1 %cmp670, label %do.body634, label %do.end672

do.end672:                                        ; preds = %do.cond669
  br label %if.end673

if.end673:                                        ; preds = %do.end672, %do.body630
  %324 = load i64* %bit_buf, align 8
  %and674 = and i64 %324, 7
  %conv675 = trunc i64 %and674 to i32
  store i32 %conv675, i32* %s, align 4
  %325 = load i64* %bit_buf, align 8
  %shr676 = lshr i64 %325, 3
  store i64 %shr676, i64* %bit_buf, align 8
  %326 = load i32* %num_bits, align 4
  %sub677 = sub i32 %326, 3
  store i32 %sub677, i32* %num_bits, align 4
  br label %do.end679

do.end679:                                        ; preds = %if.end673
  %327 = load i32* %s, align 4
  %conv680 = trunc i32 %327 to i8
  %328 = load i32* %counter, align 4
  %idxprom681 = zext i32 %328 to i64
  %arrayidx682 = getelementptr inbounds [19 x i8]* @tinfl_decompress.s_length_dezigzag, i32 0, i64 %idxprom681
  %329 = load i8* %arrayidx682, align 1
  %idxprom683 = zext i8 %329 to i64
  %330 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables684 = getelementptr inbounds %struct.tinfl_decompressor_tag* %330, i32 0, i32 14
  %arrayidx685 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables684, i32 0, i64 2
  %m_code_size686 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx685, i32 0, i32 0
  %arrayidx687 = getelementptr inbounds [288 x i8]* %m_code_size686, i32 0, i64 %idxprom683
  store i8 %conv680, i8* %arrayidx687, align 1
  br label %for.inc688

for.inc688:                                       ; preds = %do.end679
  %331 = load i32* %counter, align 4
  %inc689 = add i32 %331, 1
  store i32 %inc689, i32* %counter, align 4
  br label %for.cond624

for.end690:                                       ; preds = %for.cond624
  %332 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes691 = getelementptr inbounds %struct.tinfl_decompressor_tag* %332, i32 0, i32 11
  %arrayidx692 = getelementptr inbounds [3 x i32]* %m_table_sizes691, i32 0, i64 2
  store i32 19, i32* %arrayidx692, align 4
  br label %if.end693

if.end693:                                        ; preds = %for.end690, %for.end534
  br label %for.cond694

for.cond694:                                      ; preds = %for.inc1163, %if.end693
  %333 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type695 = getelementptr inbounds %struct.tinfl_decompressor_tag* %333, i32 0, i32 6
  %334 = load i32* %m_type695, align 4
  %cmp696 = icmp sge i32 %334, 0
  br i1 %cmp696, label %for.body698, label %for.end1166

for.body698:                                      ; preds = %for.cond694
  %335 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type700 = getelementptr inbounds %struct.tinfl_decompressor_tag* %335, i32 0, i32 6
  %336 = load i32* %m_type700, align 4
  %idxprom701 = zext i32 %336 to i64
  %337 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables702 = getelementptr inbounds %struct.tinfl_decompressor_tag* %337, i32 0, i32 14
  %arrayidx703 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables702, i32 0, i64 %idxprom701
  store %struct.tinfl_huff_table* %arrayidx703, %struct.tinfl_huff_table** %pTable, align 8
  %338 = bitcast [16 x i32]* %total_syms to i8*
  call void @llvm.memset.p0i8.i64(i8* %338, i8 0, i64 64, i32 16, i1 false)
  %339 = load %struct.tinfl_huff_table** %pTable, align 8
  %m_look_up = getelementptr inbounds %struct.tinfl_huff_table* %339, i32 0, i32 1
  %340 = bitcast [1024 x i16]* %m_look_up to i8*
  call void @llvm.memset.p0i8.i64(i8* %340, i8 0, i64 2048, i32 2, i1 false)
  %341 = load %struct.tinfl_huff_table** %pTable, align 8
  %m_tree = getelementptr inbounds %struct.tinfl_huff_table* %341, i32 0, i32 2
  %342 = bitcast [576 x i16]* %m_tree to i8*
  call void @llvm.memset.p0i8.i64(i8* %342, i8 0, i64 1152, i32 2, i1 false)
  store i32 0, i32* %i699, align 4
  br label %for.cond704

for.cond704:                                      ; preds = %for.inc718, %for.body698
  %343 = load i32* %i699, align 4
  %344 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type705 = getelementptr inbounds %struct.tinfl_decompressor_tag* %344, i32 0, i32 6
  %345 = load i32* %m_type705, align 4
  %idxprom706 = zext i32 %345 to i64
  %346 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes707 = getelementptr inbounds %struct.tinfl_decompressor_tag* %346, i32 0, i32 11
  %arrayidx708 = getelementptr inbounds [3 x i32]* %m_table_sizes707, i32 0, i64 %idxprom706
  %347 = load i32* %arrayidx708, align 4
  %cmp709 = icmp ult i32 %343, %347
  br i1 %cmp709, label %for.body711, label %for.end720

for.body711:                                      ; preds = %for.cond704
  %348 = load i32* %i699, align 4
  %idxprom712 = zext i32 %348 to i64
  %349 = load %struct.tinfl_huff_table** %pTable, align 8
  %m_code_size713 = getelementptr inbounds %struct.tinfl_huff_table* %349, i32 0, i32 0
  %arrayidx714 = getelementptr inbounds [288 x i8]* %m_code_size713, i32 0, i64 %idxprom712
  %350 = load i8* %arrayidx714, align 1
  %idxprom715 = zext i8 %350 to i64
  %arrayidx716 = getelementptr inbounds [16 x i32]* %total_syms, i32 0, i64 %idxprom715
  %351 = load i32* %arrayidx716, align 4
  %inc717 = add i32 %351, 1
  store i32 %inc717, i32* %arrayidx716, align 4
  br label %for.inc718

for.inc718:                                       ; preds = %for.body711
  %352 = load i32* %i699, align 4
  %inc719 = add i32 %352, 1
  store i32 %inc719, i32* %i699, align 4
  br label %for.cond704

for.end720:                                       ; preds = %for.cond704
  store i32 0, i32* %used_syms, align 4
  store i32 0, i32* %total, align 4
  %arrayidx721 = getelementptr inbounds [17 x i32]* %next_code, i32 0, i64 1
  store i32 0, i32* %arrayidx721, align 4
  %arrayidx722 = getelementptr inbounds [17 x i32]* %next_code, i32 0, i64 0
  store i32 0, i32* %arrayidx722, align 4
  store i32 1, i32* %i699, align 4
  br label %for.cond723

for.cond723:                                      ; preds = %for.inc737, %for.end720
  %353 = load i32* %i699, align 4
  %cmp724 = icmp ule i32 %353, 15
  br i1 %cmp724, label %for.body726, label %for.end739

for.body726:                                      ; preds = %for.cond723
  %354 = load i32* %i699, align 4
  %idxprom727 = zext i32 %354 to i64
  %arrayidx728 = getelementptr inbounds [16 x i32]* %total_syms, i32 0, i64 %idxprom727
  %355 = load i32* %arrayidx728, align 4
  %356 = load i32* %used_syms, align 4
  %add729 = add i32 %356, %355
  store i32 %add729, i32* %used_syms, align 4
  %357 = load i32* %total, align 4
  %358 = load i32* %i699, align 4
  %idxprom730 = zext i32 %358 to i64
  %arrayidx731 = getelementptr inbounds [16 x i32]* %total_syms, i32 0, i64 %idxprom730
  %359 = load i32* %arrayidx731, align 4
  %add732 = add i32 %357, %359
  %shl733 = shl i32 %add732, 1
  store i32 %shl733, i32* %total, align 4
  %360 = load i32* %i699, align 4
  %add734 = add i32 %360, 1
  %idxprom735 = zext i32 %add734 to i64
  %arrayidx736 = getelementptr inbounds [17 x i32]* %next_code, i32 0, i64 %idxprom735
  store i32 %shl733, i32* %arrayidx736, align 4
  br label %for.inc737

for.inc737:                                       ; preds = %for.body726
  %361 = load i32* %i699, align 4
  %inc738 = add i32 %361, 1
  store i32 %inc738, i32* %i699, align 4
  br label %for.cond723

for.end739:                                       ; preds = %for.cond723
  %362 = load i32* %total, align 4
  %cmp740 = icmp ne i32 65536, %362
  br i1 %cmp740, label %land.lhs.true, label %if.end754

land.lhs.true:                                    ; preds = %for.end739
  %363 = load i32* %used_syms, align 4
  %cmp742 = icmp ugt i32 %363, 1
  br i1 %cmp742, label %if.then744, label %if.end754

if.then744:                                       ; preds = %land.lhs.true
  br label %do.body745

do.body745:                                       ; preds = %if.then744
  br label %for.cond746

for.cond746:                                      ; preds = %do.end751, %do.body745
  br label %do.body747

do.body747:                                       ; preds = %for.cond746
  store i32 -1, i32* %status, align 4
  %364 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state748 = getelementptr inbounds %struct.tinfl_decompressor_tag* %364, i32 0, i32 0
  store i32 35, i32* %m_state748, align 4
  br label %common_exit

sw.bb749:                                         ; preds = %if.end
  br label %do.end751

do.end751:                                        ; preds = %sw.bb749
  br label %for.cond746

do.end753:                                        ; No predecessors!
  br label %if.end754

if.end754:                                        ; preds = %do.end753, %land.lhs.true, %for.end739
  store i32 -1, i32* %tree_next, align 4
  store i32 0, i32* %sym_index, align 4
  br label %for.cond755

for.cond755:                                      ; preds = %for.inc858, %if.end754
  %365 = load i32* %sym_index, align 4
  %366 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type756 = getelementptr inbounds %struct.tinfl_decompressor_tag* %366, i32 0, i32 6
  %367 = load i32* %m_type756, align 4
  %idxprom757 = zext i32 %367 to i64
  %368 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes758 = getelementptr inbounds %struct.tinfl_decompressor_tag* %368, i32 0, i32 11
  %arrayidx759 = getelementptr inbounds [3 x i32]* %m_table_sizes758, i32 0, i64 %idxprom757
  %369 = load i32* %arrayidx759, align 4
  %cmp760 = icmp ult i32 %365, %369
  br i1 %cmp760, label %for.body762, label %for.end860

for.body762:                                      ; preds = %for.cond755
  store i32 0, i32* %rev_code, align 4
  %370 = load i32* %sym_index, align 4
  %idxprom763 = zext i32 %370 to i64
  %371 = load %struct.tinfl_huff_table** %pTable, align 8
  %m_code_size764 = getelementptr inbounds %struct.tinfl_huff_table* %371, i32 0, i32 0
  %arrayidx765 = getelementptr inbounds [288 x i8]* %m_code_size764, i32 0, i64 %idxprom763
  %372 = load i8* %arrayidx765, align 1
  %conv766 = zext i8 %372 to i32
  store i32 %conv766, i32* %code_size, align 4
  %373 = load i32* %code_size, align 4
  %tobool767 = icmp ne i32 %373, 0
  br i1 %tobool767, label %if.end769, label %if.then768

if.then768:                                       ; preds = %for.body762
  br label %for.inc858

if.end769:                                        ; preds = %for.body762
  %374 = load i32* %code_size, align 4
  %idxprom770 = zext i32 %374 to i64
  %arrayidx771 = getelementptr inbounds [17 x i32]* %next_code, i32 0, i64 %idxprom770
  %375 = load i32* %arrayidx771, align 4
  %inc772 = add i32 %375, 1
  store i32 %inc772, i32* %arrayidx771, align 4
  store i32 %375, i32* %cur_code, align 4
  %376 = load i32* %code_size, align 4
  store i32 %376, i32* %l, align 4
  br label %for.cond773

for.cond773:                                      ; preds = %for.inc780, %if.end769
  %377 = load i32* %l, align 4
  %cmp774 = icmp ugt i32 %377, 0
  br i1 %cmp774, label %for.body776, label %for.end783

for.body776:                                      ; preds = %for.cond773
  %378 = load i32* %rev_code, align 4
  %shl777 = shl i32 %378, 1
  %379 = load i32* %cur_code, align 4
  %and778 = and i32 %379, 1
  %or779 = or i32 %shl777, %and778
  store i32 %or779, i32* %rev_code, align 4
  br label %for.inc780

for.inc780:                                       ; preds = %for.body776
  %380 = load i32* %l, align 4
  %dec781 = add i32 %380, -1
  store i32 %dec781, i32* %l, align 4
  %381 = load i32* %cur_code, align 4
  %shr782 = lshr i32 %381, 1
  store i32 %shr782, i32* %cur_code, align 4
  br label %for.cond773

for.end783:                                       ; preds = %for.cond773
  %382 = load i32* %code_size, align 4
  %cmp784 = icmp ule i32 %382, 10
  br i1 %cmp784, label %if.then786, label %if.end800

if.then786:                                       ; preds = %for.end783
  %383 = load i32* %code_size, align 4
  %shl787 = shl i32 %383, 9
  %384 = load i32* %sym_index, align 4
  %or788 = or i32 %shl787, %384
  %conv789 = trunc i32 %or788 to i16
  store i16 %conv789, i16* %k, align 2
  br label %while.cond790

while.cond790:                                    ; preds = %while.body793, %if.then786
  %385 = load i32* %rev_code, align 4
  %cmp791 = icmp ult i32 %385, 1024
  br i1 %cmp791, label %while.body793, label %while.end799

while.body793:                                    ; preds = %while.cond790
  %386 = load i16* %k, align 2
  %387 = load i32* %rev_code, align 4
  %idxprom794 = zext i32 %387 to i64
  %388 = load %struct.tinfl_huff_table** %pTable, align 8
  %m_look_up795 = getelementptr inbounds %struct.tinfl_huff_table* %388, i32 0, i32 1
  %arrayidx796 = getelementptr inbounds [1024 x i16]* %m_look_up795, i32 0, i64 %idxprom794
  store i16 %386, i16* %arrayidx796, align 2
  %389 = load i32* %code_size, align 4
  %shl797 = shl i32 1, %389
  %390 = load i32* %rev_code, align 4
  %add798 = add i32 %390, %shl797
  store i32 %add798, i32* %rev_code, align 4
  br label %while.cond790

while.end799:                                     ; preds = %while.cond790
  br label %for.inc858

if.end800:                                        ; preds = %for.end783
  %391 = load i32* %rev_code, align 4
  %and801 = and i32 %391, 1023
  %idxprom802 = zext i32 %and801 to i64
  %392 = load %struct.tinfl_huff_table** %pTable, align 8
  %m_look_up803 = getelementptr inbounds %struct.tinfl_huff_table* %392, i32 0, i32 1
  %arrayidx804 = getelementptr inbounds [1024 x i16]* %m_look_up803, i32 0, i64 %idxprom802
  %393 = load i16* %arrayidx804, align 2
  %conv805 = sext i16 %393 to i32
  store i32 %conv805, i32* %tree_cur, align 4
  %cmp806 = icmp eq i32 0, %conv805
  br i1 %cmp806, label %if.then808, label %if.end815

if.then808:                                       ; preds = %if.end800
  %394 = load i32* %tree_next, align 4
  %conv809 = trunc i32 %394 to i16
  %395 = load i32* %rev_code, align 4
  %and810 = and i32 %395, 1023
  %idxprom811 = zext i32 %and810 to i64
  %396 = load %struct.tinfl_huff_table** %pTable, align 8
  %m_look_up812 = getelementptr inbounds %struct.tinfl_huff_table* %396, i32 0, i32 1
  %arrayidx813 = getelementptr inbounds [1024 x i16]* %m_look_up812, i32 0, i64 %idxprom811
  store i16 %conv809, i16* %arrayidx813, align 2
  %397 = load i32* %tree_next, align 4
  store i32 %397, i32* %tree_cur, align 4
  %398 = load i32* %tree_next, align 4
  %sub814 = sub nsw i32 %398, 2
  store i32 %sub814, i32* %tree_next, align 4
  br label %if.end815

if.end815:                                        ; preds = %if.then808, %if.end800
  %399 = load i32* %rev_code, align 4
  %shr816 = lshr i32 %399, 9
  store i32 %shr816, i32* %rev_code, align 4
  %400 = load i32* %code_size, align 4
  store i32 %400, i32* %j, align 4
  br label %for.cond817

for.cond817:                                      ; preds = %for.inc846, %if.end815
  %401 = load i32* %j, align 4
  %cmp818 = icmp ugt i32 %401, 11
  br i1 %cmp818, label %for.body820, label %for.end848

for.body820:                                      ; preds = %for.cond817
  %402 = load i32* %rev_code, align 4
  %shr821 = lshr i32 %402, 1
  store i32 %shr821, i32* %rev_code, align 4
  %and822 = and i32 %shr821, 1
  %403 = load i32* %tree_cur, align 4
  %sub823 = sub i32 %403, %and822
  store i32 %sub823, i32* %tree_cur, align 4
  %404 = load i32* %tree_cur, align 4
  %sub824 = sub nsw i32 0, %404
  %sub825 = sub nsw i32 %sub824, 1
  %idxprom826 = sext i32 %sub825 to i64
  %405 = load %struct.tinfl_huff_table** %pTable, align 8
  %m_tree827 = getelementptr inbounds %struct.tinfl_huff_table* %405, i32 0, i32 2
  %arrayidx828 = getelementptr inbounds [576 x i16]* %m_tree827, i32 0, i64 %idxprom826
  %406 = load i16* %arrayidx828, align 2
  %tobool829 = icmp ne i16 %406, 0
  br i1 %tobool829, label %if.else838, label %if.then830

if.then830:                                       ; preds = %for.body820
  %407 = load i32* %tree_next, align 4
  %conv831 = trunc i32 %407 to i16
  %408 = load i32* %tree_cur, align 4
  %sub832 = sub nsw i32 0, %408
  %sub833 = sub nsw i32 %sub832, 1
  %idxprom834 = sext i32 %sub833 to i64
  %409 = load %struct.tinfl_huff_table** %pTable, align 8
  %m_tree835 = getelementptr inbounds %struct.tinfl_huff_table* %409, i32 0, i32 2
  %arrayidx836 = getelementptr inbounds [576 x i16]* %m_tree835, i32 0, i64 %idxprom834
  store i16 %conv831, i16* %arrayidx836, align 2
  %410 = load i32* %tree_next, align 4
  store i32 %410, i32* %tree_cur, align 4
  %411 = load i32* %tree_next, align 4
  %sub837 = sub nsw i32 %411, 2
  store i32 %sub837, i32* %tree_next, align 4
  br label %if.end845

if.else838:                                       ; preds = %for.body820
  %412 = load i32* %tree_cur, align 4
  %sub839 = sub nsw i32 0, %412
  %sub840 = sub nsw i32 %sub839, 1
  %idxprom841 = sext i32 %sub840 to i64
  %413 = load %struct.tinfl_huff_table** %pTable, align 8
  %m_tree842 = getelementptr inbounds %struct.tinfl_huff_table* %413, i32 0, i32 2
  %arrayidx843 = getelementptr inbounds [576 x i16]* %m_tree842, i32 0, i64 %idxprom841
  %414 = load i16* %arrayidx843, align 2
  %conv844 = sext i16 %414 to i32
  store i32 %conv844, i32* %tree_cur, align 4
  br label %if.end845

if.end845:                                        ; preds = %if.else838, %if.then830
  br label %for.inc846

for.inc846:                                       ; preds = %if.end845
  %415 = load i32* %j, align 4
  %dec847 = add i32 %415, -1
  store i32 %dec847, i32* %j, align 4
  br label %for.cond817

for.end848:                                       ; preds = %for.cond817
  %416 = load i32* %rev_code, align 4
  %shr849 = lshr i32 %416, 1
  store i32 %shr849, i32* %rev_code, align 4
  %and850 = and i32 %shr849, 1
  %417 = load i32* %tree_cur, align 4
  %sub851 = sub i32 %417, %and850
  store i32 %sub851, i32* %tree_cur, align 4
  %418 = load i32* %sym_index, align 4
  %conv852 = trunc i32 %418 to i16
  %419 = load i32* %tree_cur, align 4
  %sub853 = sub nsw i32 0, %419
  %sub854 = sub nsw i32 %sub853, 1
  %idxprom855 = sext i32 %sub854 to i64
  %420 = load %struct.tinfl_huff_table** %pTable, align 8
  %m_tree856 = getelementptr inbounds %struct.tinfl_huff_table* %420, i32 0, i32 2
  %arrayidx857 = getelementptr inbounds [576 x i16]* %m_tree856, i32 0, i64 %idxprom855
  store i16 %conv852, i16* %arrayidx857, align 2
  br label %for.inc858

for.inc858:                                       ; preds = %for.end848, %while.end799, %if.then768
  %421 = load i32* %sym_index, align 4
  %inc859 = add i32 %421, 1
  store i32 %inc859, i32* %sym_index, align 4
  br label %for.cond755

for.end860:                                       ; preds = %for.cond755
  %422 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type861 = getelementptr inbounds %struct.tinfl_decompressor_tag* %422, i32 0, i32 6
  %423 = load i32* %m_type861, align 4
  %cmp862 = icmp eq i32 %423, 2
  br i1 %cmp862, label %if.then864, label %if.end1162

if.then864:                                       ; preds = %for.end860
  store i32 0, i32* %counter, align 4
  br label %for.cond865

for.cond865:                                      ; preds = %cond.end1120, %if.then1024, %if.then864
  %424 = load i32* %counter, align 4
  %425 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes866 = getelementptr inbounds %struct.tinfl_decompressor_tag* %425, i32 0, i32 11
  %arrayidx867 = getelementptr inbounds [3 x i32]* %m_table_sizes866, i32 0, i64 0
  %426 = load i32* %arrayidx867, align 4
  %427 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes868 = getelementptr inbounds %struct.tinfl_decompressor_tag* %427, i32 0, i32 11
  %arrayidx869 = getelementptr inbounds [3 x i32]* %m_table_sizes868, i32 0, i64 1
  %428 = load i32* %arrayidx869, align 4
  %add870 = add i32 %426, %428
  %cmp871 = icmp ult i32 %424, %add870
  br i1 %cmp871, label %for.body873, label %for.end1124

for.body873:                                      ; preds = %for.cond865
  br label %do.body875

do.body875:                                       ; preds = %for.body873
  %429 = load i32* %num_bits, align 4
  %cmp877 = icmp ult i32 %429, 15
  br i1 %cmp877, label %if.then879, label %if.end986

if.then879:                                       ; preds = %do.body875
  %430 = load i8** %pIn_buf_end, align 8
  %431 = load i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast880 = ptrtoint i8* %430 to i64
  %sub.ptr.rhs.cast881 = ptrtoint i8* %431 to i64
  %sub.ptr.sub882 = sub i64 %sub.ptr.lhs.cast880, %sub.ptr.rhs.cast881
  %cmp883 = icmp slt i64 %sub.ptr.sub882, 2
  br i1 %cmp883, label %if.then885, label %if.else971

if.then885:                                       ; preds = %if.then879
  br label %do.body886

do.body886:                                       ; preds = %do.cond967, %if.then885
  %432 = load i64* %bit_buf, align 8
  %and887 = and i64 %432, 1023
  %433 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables888 = getelementptr inbounds %struct.tinfl_decompressor_tag* %433, i32 0, i32 14
  %arrayidx889 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables888, i32 0, i64 2
  %m_look_up890 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx889, i32 0, i32 1
  %arrayidx891 = getelementptr inbounds [1024 x i16]* %m_look_up890, i32 0, i64 %and887
  %434 = load i16* %arrayidx891, align 2
  %conv892 = sext i16 %434 to i32
  store i32 %conv892, i32* %temp, align 4
  %435 = load i32* %temp, align 4
  %cmp893 = icmp sge i32 %435, 0
  br i1 %cmp893, label %if.then895, label %if.else903

if.then895:                                       ; preds = %do.body886
  %436 = load i32* %temp, align 4
  %shr896 = ashr i32 %436, 9
  store i32 %shr896, i32* %code_len, align 4
  %437 = load i32* %code_len, align 4
  %tobool897 = icmp ne i32 %437, 0
  br i1 %tobool897, label %land.lhs.true898, label %if.end902

land.lhs.true898:                                 ; preds = %if.then895
  %438 = load i32* %num_bits, align 4
  %439 = load i32* %code_len, align 4
  %cmp899 = icmp uge i32 %438, %439
  br i1 %cmp899, label %if.then901, label %if.end902

if.then901:                                       ; preds = %land.lhs.true898
  br label %do.end970

if.end902:                                        ; preds = %land.lhs.true898, %if.then895
  br label %if.end933

if.else903:                                       ; preds = %do.body886
  %440 = load i32* %num_bits, align 4
  %cmp904 = icmp ugt i32 %440, 10
  br i1 %cmp904, label %if.then906, label %if.end932

if.then906:                                       ; preds = %if.else903
  store i32 10, i32* %code_len, align 4
  br label %do.body907

do.body907:                                       ; preds = %land.end926, %if.then906
  %441 = load i32* %temp, align 4
  %neg = xor i32 %441, -1
  %conv908 = sext i32 %neg to i64
  %442 = load i64* %bit_buf, align 8
  %443 = load i32* %code_len, align 4
  %inc909 = add i32 %443, 1
  store i32 %inc909, i32* %code_len, align 4
  %sh_prom910 = zext i32 %443 to i64
  %shr911 = lshr i64 %442, %sh_prom910
  %and912 = and i64 %shr911, 1
  %add913 = add i64 %conv908, %and912
  %444 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables914 = getelementptr inbounds %struct.tinfl_decompressor_tag* %444, i32 0, i32 14
  %arrayidx915 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables914, i32 0, i64 2
  %m_tree916 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx915, i32 0, i32 2
  %arrayidx917 = getelementptr inbounds [576 x i16]* %m_tree916, i32 0, i64 %add913
  %445 = load i16* %arrayidx917, align 2
  %conv918 = sext i16 %445 to i32
  store i32 %conv918, i32* %temp, align 4
  br label %do.cond919

do.cond919:                                       ; preds = %do.body907
  %446 = load i32* %temp, align 4
  %cmp920 = icmp slt i32 %446, 0
  br i1 %cmp920, label %land.rhs922, label %land.end926

land.rhs922:                                      ; preds = %do.cond919
  %447 = load i32* %num_bits, align 4
  %448 = load i32* %code_len, align 4
  %add923 = add i32 %448, 1
  %cmp924 = icmp uge i32 %447, %add923
  br label %land.end926

land.end926:                                      ; preds = %land.rhs922, %do.cond919
  %449 = phi i1 [ false, %do.cond919 ], [ %cmp924, %land.rhs922 ]
  br i1 %449, label %do.body907, label %do.end927

do.end927:                                        ; preds = %land.end926
  %450 = load i32* %temp, align 4
  %cmp928 = icmp sge i32 %450, 0
  br i1 %cmp928, label %if.then930, label %if.end931

if.then930:                                       ; preds = %do.end927
  br label %do.end970

if.end931:                                        ; preds = %do.end927
  br label %if.end932

if.end932:                                        ; preds = %if.end931, %if.else903
  br label %if.end933

if.end933:                                        ; preds = %if.end932, %if.end902
  br label %do.body934

do.body934:                                       ; preds = %if.end933
  %451 = load i8** %pIn_buf_cur, align 8
  %452 = load i8** %pIn_buf_end, align 8
  %cmp935 = icmp uge i8* %451, %452
  br i1 %cmp935, label %if.then937, label %if.else956

if.then937:                                       ; preds = %do.body934
  br label %for.cond938

for.cond938:                                      ; preds = %if.end954, %if.then937
  %453 = load i32* %decomp_flags.addr, align 4
  %and939 = and i32 %453, 2
  %tobool940 = icmp ne i32 %and939, 0
  br i1 %tobool940, label %if.then941, label %if.else953

if.then941:                                       ; preds = %for.cond938
  br label %do.body942

do.body942:                                       ; preds = %if.then941
  store i32 1, i32* %status, align 4
  %454 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state943 = getelementptr inbounds %struct.tinfl_decompressor_tag* %454, i32 0, i32 0
  store i32 16, i32* %m_state943, align 4
  br label %common_exit

sw.bb944:                                         ; preds = %if.end
  br label %do.end946

do.end946:                                        ; preds = %sw.bb944
  %455 = load i8** %pIn_buf_cur, align 8
  %456 = load i8** %pIn_buf_end, align 8
  %cmp947 = icmp ult i8* %455, %456
  br i1 %cmp947, label %if.then949, label %if.end952

if.then949:                                       ; preds = %do.end946
  %457 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr950 = getelementptr inbounds i8* %457, i32 1
  store i8* %incdec.ptr950, i8** %pIn_buf_cur, align 8
  %458 = load i8* %457, align 1
  %conv951 = zext i8 %458 to i32
  store i32 %conv951, i32* %c876, align 4
  br label %for.end955

if.end952:                                        ; preds = %do.end946
  br label %if.end954

if.else953:                                       ; preds = %for.cond938
  store i32 0, i32* %c876, align 4
  br label %for.end955

if.end954:                                        ; preds = %if.end952
  br label %for.cond938

for.end955:                                       ; preds = %if.else953, %if.then949
  br label %if.end959

if.else956:                                       ; preds = %do.body934
  %459 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr957 = getelementptr inbounds i8* %459, i32 1
  store i8* %incdec.ptr957, i8** %pIn_buf_cur, align 8
  %460 = load i8* %459, align 1
  %conv958 = zext i8 %460 to i32
  store i32 %conv958, i32* %c876, align 4
  br label %if.end959

if.end959:                                        ; preds = %if.else956, %for.end955
  br label %do.end961

do.end961:                                        ; preds = %if.end959
  %461 = load i32* %c876, align 4
  %conv962 = zext i32 %461 to i64
  %462 = load i32* %num_bits, align 4
  %sh_prom963 = zext i32 %462 to i64
  %shl964 = shl i64 %conv962, %sh_prom963
  %463 = load i64* %bit_buf, align 8
  %or965 = or i64 %463, %shl964
  store i64 %or965, i64* %bit_buf, align 8
  %464 = load i32* %num_bits, align 4
  %add966 = add i32 %464, 8
  store i32 %add966, i32* %num_bits, align 4
  br label %do.cond967

do.cond967:                                       ; preds = %do.end961
  %465 = load i32* %num_bits, align 4
  %cmp968 = icmp ult i32 %465, 15
  br i1 %cmp968, label %do.body886, label %do.end970

do.end970:                                        ; preds = %do.cond967, %if.then930, %if.then901
  br label %if.end985

if.else971:                                       ; preds = %if.then879
  %466 = load i8** %pIn_buf_cur, align 8
  %arrayidx972 = getelementptr inbounds i8* %466, i64 0
  %467 = load i8* %arrayidx972, align 1
  %conv973 = zext i8 %467 to i64
  %468 = load i32* %num_bits, align 4
  %sh_prom974 = zext i32 %468 to i64
  %shl975 = shl i64 %conv973, %sh_prom974
  %469 = load i8** %pIn_buf_cur, align 8
  %arrayidx976 = getelementptr inbounds i8* %469, i64 1
  %470 = load i8* %arrayidx976, align 1
  %conv977 = zext i8 %470 to i64
  %471 = load i32* %num_bits, align 4
  %add978 = add i32 %471, 8
  %sh_prom979 = zext i32 %add978 to i64
  %shl980 = shl i64 %conv977, %sh_prom979
  %or981 = or i64 %shl975, %shl980
  %472 = load i64* %bit_buf, align 8
  %or982 = or i64 %472, %or981
  store i64 %or982, i64* %bit_buf, align 8
  %473 = load i8** %pIn_buf_cur, align 8
  %add.ptr983 = getelementptr inbounds i8* %473, i64 2
  store i8* %add.ptr983, i8** %pIn_buf_cur, align 8
  %474 = load i32* %num_bits, align 4
  %add984 = add i32 %474, 16
  store i32 %add984, i32* %num_bits, align 4
  br label %if.end985

if.end985:                                        ; preds = %if.else971, %do.end970
  br label %if.end986

if.end986:                                        ; preds = %if.end985, %do.body875
  %475 = load i64* %bit_buf, align 8
  %and987 = and i64 %475, 1023
  %476 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables988 = getelementptr inbounds %struct.tinfl_decompressor_tag* %476, i32 0, i32 14
  %arrayidx989 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables988, i32 0, i64 2
  %m_look_up990 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx989, i32 0, i32 1
  %arrayidx991 = getelementptr inbounds [1024 x i16]* %m_look_up990, i32 0, i64 %and987
  %477 = load i16* %arrayidx991, align 2
  %conv992 = sext i16 %477 to i32
  store i32 %conv992, i32* %temp, align 4
  %cmp993 = icmp sge i32 %conv992, 0
  br i1 %cmp993, label %if.then995, label %if.else998

if.then995:                                       ; preds = %if.end986
  %478 = load i32* %temp, align 4
  %shr996 = ashr i32 %478, 9
  store i32 %shr996, i32* %code_len, align 4
  %479 = load i32* %temp, align 4
  %and997 = and i32 %479, 511
  store i32 %and997, i32* %temp, align 4
  br label %if.end1016

if.else998:                                       ; preds = %if.end986
  store i32 10, i32* %code_len, align 4
  br label %do.body999

do.body999:                                       ; preds = %do.cond1012, %if.else998
  %480 = load i32* %temp, align 4
  %neg1000 = xor i32 %480, -1
  %conv1001 = sext i32 %neg1000 to i64
  %481 = load i64* %bit_buf, align 8
  %482 = load i32* %code_len, align 4
  %inc1002 = add i32 %482, 1
  store i32 %inc1002, i32* %code_len, align 4
  %sh_prom1003 = zext i32 %482 to i64
  %shr1004 = lshr i64 %481, %sh_prom1003
  %and1005 = and i64 %shr1004, 1
  %add1006 = add i64 %conv1001, %and1005
  %483 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1007 = getelementptr inbounds %struct.tinfl_decompressor_tag* %483, i32 0, i32 14
  %arrayidx1008 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1007, i32 0, i64 2
  %m_tree1009 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1008, i32 0, i32 2
  %arrayidx1010 = getelementptr inbounds [576 x i16]* %m_tree1009, i32 0, i64 %add1006
  %484 = load i16* %arrayidx1010, align 2
  %conv1011 = sext i16 %484 to i32
  store i32 %conv1011, i32* %temp, align 4
  br label %do.cond1012

do.cond1012:                                      ; preds = %do.body999
  %485 = load i32* %temp, align 4
  %cmp1013 = icmp slt i32 %485, 0
  br i1 %cmp1013, label %do.body999, label %do.end1015

do.end1015:                                       ; preds = %do.cond1012
  br label %if.end1016

if.end1016:                                       ; preds = %do.end1015, %if.then995
  %486 = load i32* %temp, align 4
  store i32 %486, i32* %dist, align 4
  %487 = load i32* %code_len, align 4
  %488 = load i64* %bit_buf, align 8
  %sh_prom1017 = zext i32 %487 to i64
  %shr1018 = lshr i64 %488, %sh_prom1017
  store i64 %shr1018, i64* %bit_buf, align 8
  %489 = load i32* %code_len, align 4
  %490 = load i32* %num_bits, align 4
  %sub1019 = sub i32 %490, %489
  store i32 %sub1019, i32* %num_bits, align 4
  br label %do.end1021

do.end1021:                                       ; preds = %if.end1016
  %491 = load i32* %dist, align 4
  %cmp1022 = icmp ult i32 %491, 16
  br i1 %cmp1022, label %if.then1024, label %if.end1029

if.then1024:                                      ; preds = %do.end1021
  %492 = load i32* %dist, align 4
  %conv1025 = trunc i32 %492 to i8
  %493 = load i32* %counter, align 4
  %inc1026 = add i32 %493, 1
  store i32 %inc1026, i32* %counter, align 4
  %idxprom1027 = zext i32 %493 to i64
  %494 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_len_codes = getelementptr inbounds %struct.tinfl_decompressor_tag* %494, i32 0, i32 16
  %arrayidx1028 = getelementptr inbounds [457 x i8]* %m_len_codes, i32 0, i64 %idxprom1027
  store i8 %conv1025, i8* %arrayidx1028, align 1
  br label %for.cond865

if.end1029:                                       ; preds = %do.end1021
  %495 = load i32* %dist, align 4
  %cmp1030 = icmp eq i32 %495, 16
  br i1 %cmp1030, label %land.lhs.true1032, label %if.end1044

land.lhs.true1032:                                ; preds = %if.end1029
  %496 = load i32* %counter, align 4
  %tobool1033 = icmp ne i32 %496, 0
  br i1 %tobool1033, label %if.end1044, label %if.then1034

if.then1034:                                      ; preds = %land.lhs.true1032
  br label %do.body1035

do.body1035:                                      ; preds = %if.then1034
  br label %for.cond1036

for.cond1036:                                     ; preds = %do.end1041, %do.body1035
  br label %do.body1037

do.body1037:                                      ; preds = %for.cond1036
  store i32 -1, i32* %status, align 4
  %497 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1038 = getelementptr inbounds %struct.tinfl_decompressor_tag* %497, i32 0, i32 0
  store i32 17, i32* %m_state1038, align 4
  br label %common_exit

sw.bb1039:                                        ; preds = %if.end
  br label %do.end1041

do.end1041:                                       ; preds = %sw.bb1039
  br label %for.cond1036

do.end1043:                                       ; No predecessors!
  br label %if.end1044

if.end1044:                                       ; preds = %do.end1043, %land.lhs.true1032, %if.end1029
  %498 = load i32* %dist, align 4
  %sub1045 = sub i32 %498, 16
  %idxprom1046 = zext i32 %sub1045 to i64
  %arrayidx1047 = getelementptr inbounds [4 x i8]* @.str12, i32 0, i64 %idxprom1046
  %499 = load i8* %arrayidx1047, align 1
  %conv1048 = sext i8 %499 to i32
  store i32 %conv1048, i32* %num_extra, align 4
  br label %do.body1049

do.body1049:                                      ; preds = %if.end1044
  %500 = load i32* %num_bits, align 4
  %501 = load i32* %num_extra, align 4
  %cmp1050 = icmp ult i32 %500, %501
  br i1 %cmp1050, label %if.then1052, label %if.end1092

if.then1052:                                      ; preds = %do.body1049
  br label %do.body1053

do.body1053:                                      ; preds = %do.cond1088, %if.then1052
  br label %do.body1055

do.body1055:                                      ; preds = %do.body1053
  %502 = load i8** %pIn_buf_cur, align 8
  %503 = load i8** %pIn_buf_end, align 8
  %cmp1056 = icmp uge i8* %502, %503
  br i1 %cmp1056, label %if.then1058, label %if.else1077

if.then1058:                                      ; preds = %do.body1055
  br label %for.cond1059

for.cond1059:                                     ; preds = %if.end1075, %if.then1058
  %504 = load i32* %decomp_flags.addr, align 4
  %and1060 = and i32 %504, 2
  %tobool1061 = icmp ne i32 %and1060, 0
  br i1 %tobool1061, label %if.then1062, label %if.else1074

if.then1062:                                      ; preds = %for.cond1059
  br label %do.body1063

do.body1063:                                      ; preds = %if.then1062
  store i32 1, i32* %status, align 4
  %505 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1064 = getelementptr inbounds %struct.tinfl_decompressor_tag* %505, i32 0, i32 0
  store i32 18, i32* %m_state1064, align 4
  br label %common_exit

sw.bb1065:                                        ; preds = %if.end
  br label %do.end1067

do.end1067:                                       ; preds = %sw.bb1065
  %506 = load i8** %pIn_buf_cur, align 8
  %507 = load i8** %pIn_buf_end, align 8
  %cmp1068 = icmp ult i8* %506, %507
  br i1 %cmp1068, label %if.then1070, label %if.end1073

if.then1070:                                      ; preds = %do.end1067
  %508 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1071 = getelementptr inbounds i8* %508, i32 1
  store i8* %incdec.ptr1071, i8** %pIn_buf_cur, align 8
  %509 = load i8* %508, align 1
  %conv1072 = zext i8 %509 to i32
  store i32 %conv1072, i32* %c1054, align 4
  br label %for.end1076

if.end1073:                                       ; preds = %do.end1067
  br label %if.end1075

if.else1074:                                      ; preds = %for.cond1059
  store i32 0, i32* %c1054, align 4
  br label %for.end1076

if.end1075:                                       ; preds = %if.end1073
  br label %for.cond1059

for.end1076:                                      ; preds = %if.else1074, %if.then1070
  br label %if.end1080

if.else1077:                                      ; preds = %do.body1055
  %510 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1078 = getelementptr inbounds i8* %510, i32 1
  store i8* %incdec.ptr1078, i8** %pIn_buf_cur, align 8
  %511 = load i8* %510, align 1
  %conv1079 = zext i8 %511 to i32
  store i32 %conv1079, i32* %c1054, align 4
  br label %if.end1080

if.end1080:                                       ; preds = %if.else1077, %for.end1076
  br label %do.end1082

do.end1082:                                       ; preds = %if.end1080
  %512 = load i32* %c1054, align 4
  %conv1083 = zext i32 %512 to i64
  %513 = load i32* %num_bits, align 4
  %sh_prom1084 = zext i32 %513 to i64
  %shl1085 = shl i64 %conv1083, %sh_prom1084
  %514 = load i64* %bit_buf, align 8
  %or1086 = or i64 %514, %shl1085
  store i64 %or1086, i64* %bit_buf, align 8
  %515 = load i32* %num_bits, align 4
  %add1087 = add i32 %515, 8
  store i32 %add1087, i32* %num_bits, align 4
  br label %do.cond1088

do.cond1088:                                      ; preds = %do.end1082
  %516 = load i32* %num_bits, align 4
  %517 = load i32* %num_extra, align 4
  %cmp1089 = icmp ult i32 %516, %517
  br i1 %cmp1089, label %do.body1053, label %do.end1091

do.end1091:                                       ; preds = %do.cond1088
  br label %if.end1092

if.end1092:                                       ; preds = %do.end1091, %do.body1049
  %518 = load i64* %bit_buf, align 8
  %519 = load i32* %num_extra, align 4
  %shl1093 = shl i32 1, %519
  %sub1094 = sub nsw i32 %shl1093, 1
  %conv1095 = sext i32 %sub1094 to i64
  %and1096 = and i64 %518, %conv1095
  %conv1097 = trunc i64 %and1096 to i32
  store i32 %conv1097, i32* %s874, align 4
  %520 = load i32* %num_extra, align 4
  %521 = load i64* %bit_buf, align 8
  %sh_prom1098 = zext i32 %520 to i64
  %shr1099 = lshr i64 %521, %sh_prom1098
  store i64 %shr1099, i64* %bit_buf, align 8
  %522 = load i32* %num_extra, align 4
  %523 = load i32* %num_bits, align 4
  %sub1100 = sub i32 %523, %522
  store i32 %sub1100, i32* %num_bits, align 4
  br label %do.end1102

do.end1102:                                       ; preds = %if.end1092
  %524 = load i32* %dist, align 4
  %sub1103 = sub i32 %524, 16
  %idxprom1104 = zext i32 %sub1103 to i64
  %arrayidx1105 = getelementptr inbounds [4 x i8]* @.str13, i32 0, i64 %idxprom1104
  %525 = load i8* %arrayidx1105, align 1
  %conv1106 = sext i8 %525 to i32
  %526 = load i32* %s874, align 4
  %add1107 = add i32 %526, %conv1106
  store i32 %add1107, i32* %s874, align 4
  %527 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_len_codes1108 = getelementptr inbounds %struct.tinfl_decompressor_tag* %527, i32 0, i32 16
  %arraydecay1109 = getelementptr inbounds [457 x i8]* %m_len_codes1108, i32 0, i32 0
  %528 = load i32* %counter, align 4
  %idx.ext = zext i32 %528 to i64
  %add.ptr1110 = getelementptr inbounds i8* %arraydecay1109, i64 %idx.ext
  %529 = load i32* %dist, align 4
  %cmp1111 = icmp eq i32 %529, 16
  br i1 %cmp1111, label %cond.true1113, label %cond.false1119

cond.true1113:                                    ; preds = %do.end1102
  %530 = load i32* %counter, align 4
  %sub1114 = sub i32 %530, 1
  %idxprom1115 = zext i32 %sub1114 to i64
  %531 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_len_codes1116 = getelementptr inbounds %struct.tinfl_decompressor_tag* %531, i32 0, i32 16
  %arrayidx1117 = getelementptr inbounds [457 x i8]* %m_len_codes1116, i32 0, i64 %idxprom1115
  %532 = load i8* %arrayidx1117, align 1
  %conv1118 = zext i8 %532 to i32
  br label %cond.end1120

cond.false1119:                                   ; preds = %do.end1102
  br label %cond.end1120

cond.end1120:                                     ; preds = %cond.false1119, %cond.true1113
  %cond1121 = phi i32 [ %conv1118, %cond.true1113 ], [ 0, %cond.false1119 ]
  %533 = trunc i32 %cond1121 to i8
  %534 = load i32* %s874, align 4
  %conv1122 = zext i32 %534 to i64
  call void @llvm.memset.p0i8.i64(i8* %add.ptr1110, i8 %533, i64 %conv1122, i32 1, i1 false)
  %535 = load i32* %s874, align 4
  %536 = load i32* %counter, align 4
  %add1123 = add i32 %536, %535
  store i32 %add1123, i32* %counter, align 4
  br label %for.cond865

for.end1124:                                      ; preds = %for.cond865
  %537 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes1125 = getelementptr inbounds %struct.tinfl_decompressor_tag* %537, i32 0, i32 11
  %arrayidx1126 = getelementptr inbounds [3 x i32]* %m_table_sizes1125, i32 0, i64 0
  %538 = load i32* %arrayidx1126, align 4
  %539 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes1127 = getelementptr inbounds %struct.tinfl_decompressor_tag* %539, i32 0, i32 11
  %arrayidx1128 = getelementptr inbounds [3 x i32]* %m_table_sizes1127, i32 0, i64 1
  %540 = load i32* %arrayidx1128, align 4
  %add1129 = add i32 %538, %540
  %541 = load i32* %counter, align 4
  %cmp1130 = icmp ne i32 %add1129, %541
  br i1 %cmp1130, label %if.then1132, label %if.end1142

if.then1132:                                      ; preds = %for.end1124
  br label %do.body1133

do.body1133:                                      ; preds = %if.then1132
  br label %for.cond1134

for.cond1134:                                     ; preds = %do.end1139, %do.body1133
  br label %do.body1135

do.body1135:                                      ; preds = %for.cond1134
  store i32 -1, i32* %status, align 4
  %542 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1136 = getelementptr inbounds %struct.tinfl_decompressor_tag* %542, i32 0, i32 0
  store i32 21, i32* %m_state1136, align 4
  br label %common_exit

sw.bb1137:                                        ; preds = %if.end
  br label %do.end1139

do.end1139:                                       ; preds = %sw.bb1137
  br label %for.cond1134

do.end1141:                                       ; No predecessors!
  br label %if.end1142

if.end1142:                                       ; preds = %do.end1141, %for.end1124
  %543 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1143 = getelementptr inbounds %struct.tinfl_decompressor_tag* %543, i32 0, i32 14
  %arrayidx1144 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1143, i32 0, i64 0
  %m_code_size1145 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1144, i32 0, i32 0
  %544 = bitcast [288 x i8]* %m_code_size1145 to i8*
  %545 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_len_codes1146 = getelementptr inbounds %struct.tinfl_decompressor_tag* %545, i32 0, i32 16
  %546 = bitcast [457 x i8]* %m_len_codes1146 to i8*
  %547 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes1147 = getelementptr inbounds %struct.tinfl_decompressor_tag* %547, i32 0, i32 11
  %arrayidx1148 = getelementptr inbounds [3 x i32]* %m_table_sizes1147, i32 0, i64 0
  %548 = load i32* %arrayidx1148, align 4
  %conv1149 = zext i32 %548 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %544, i8* %546, i64 %conv1149, i32 2, i1 false)
  %549 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1150 = getelementptr inbounds %struct.tinfl_decompressor_tag* %549, i32 0, i32 14
  %arrayidx1151 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1150, i32 0, i64 1
  %m_code_size1152 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1151, i32 0, i32 0
  %550 = bitcast [288 x i8]* %m_code_size1152 to i8*
  %551 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_len_codes1153 = getelementptr inbounds %struct.tinfl_decompressor_tag* %551, i32 0, i32 16
  %arraydecay1154 = getelementptr inbounds [457 x i8]* %m_len_codes1153, i32 0, i32 0
  %552 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes1155 = getelementptr inbounds %struct.tinfl_decompressor_tag* %552, i32 0, i32 11
  %arrayidx1156 = getelementptr inbounds [3 x i32]* %m_table_sizes1155, i32 0, i64 0
  %553 = load i32* %arrayidx1156, align 4
  %idx.ext1157 = zext i32 %553 to i64
  %add.ptr1158 = getelementptr inbounds i8* %arraydecay1154, i64 %idx.ext1157
  %554 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes1159 = getelementptr inbounds %struct.tinfl_decompressor_tag* %554, i32 0, i32 11
  %arrayidx1160 = getelementptr inbounds [3 x i32]* %m_table_sizes1159, i32 0, i64 1
  %555 = load i32* %arrayidx1160, align 4
  %conv1161 = zext i32 %555 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %550, i8* %add.ptr1158, i64 %conv1161, i32 1, i1 false)
  br label %if.end1162

if.end1162:                                       ; preds = %if.end1142, %for.end860
  br label %for.inc1163

for.inc1163:                                      ; preds = %if.end1162
  %556 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type1164 = getelementptr inbounds %struct.tinfl_decompressor_tag* %556, i32 0, i32 6
  %557 = load i32* %m_type1164, align 4
  %dec1165 = add i32 %557, -1
  store i32 %dec1165, i32* %m_type1164, align 4
  br label %for.cond694

for.end1166:                                      ; preds = %for.cond694
  br label %for.cond1167

for.cond1167:                                     ; preds = %if.end1845, %if.end1814, %while.end1776, %for.end1166
  br label %for.cond1168

for.cond1168:                                     ; preds = %if.end1437, %for.cond1167
  %558 = load i8** %pIn_buf_end, align 8
  %559 = load i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast1169 = ptrtoint i8* %558 to i64
  %sub.ptr.rhs.cast1170 = ptrtoint i8* %559 to i64
  %sub.ptr.sub1171 = sub i64 %sub.ptr.lhs.cast1169, %sub.ptr.rhs.cast1170
  %cmp1172 = icmp slt i64 %sub.ptr.sub1171, 4
  br i1 %cmp1172, label %if.then1180, label %lor.lhs.false1174

lor.lhs.false1174:                                ; preds = %for.cond1168
  %560 = load i8** %pOut_buf_end, align 8
  %561 = load i8** %pOut_buf_cur, align 8
  %sub.ptr.lhs.cast1175 = ptrtoint i8* %560 to i64
  %sub.ptr.rhs.cast1176 = ptrtoint i8* %561 to i64
  %sub.ptr.sub1177 = sub i64 %sub.ptr.lhs.cast1175, %sub.ptr.rhs.cast1176
  %cmp1178 = icmp slt i64 %sub.ptr.sub1177, 2
  br i1 %cmp1178, label %if.then1180, label %if.else1347

if.then1180:                                      ; preds = %lor.lhs.false1174, %for.cond1168
  br label %do.body1181

do.body1181:                                      ; preds = %if.then1180
  %562 = load i32* %num_bits, align 4
  %cmp1185 = icmp ult i32 %562, 15
  br i1 %cmp1185, label %if.then1187, label %if.end1295

if.then1187:                                      ; preds = %do.body1181
  %563 = load i8** %pIn_buf_end, align 8
  %564 = load i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast1188 = ptrtoint i8* %563 to i64
  %sub.ptr.rhs.cast1189 = ptrtoint i8* %564 to i64
  %sub.ptr.sub1190 = sub i64 %sub.ptr.lhs.cast1188, %sub.ptr.rhs.cast1189
  %cmp1191 = icmp slt i64 %sub.ptr.sub1190, 2
  br i1 %cmp1191, label %if.then1193, label %if.else1280

if.then1193:                                      ; preds = %if.then1187
  br label %do.body1194

do.body1194:                                      ; preds = %do.cond1276, %if.then1193
  %565 = load i64* %bit_buf, align 8
  %and1195 = and i64 %565, 1023
  %566 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1196 = getelementptr inbounds %struct.tinfl_decompressor_tag* %566, i32 0, i32 14
  %arrayidx1197 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1196, i32 0, i64 0
  %m_look_up1198 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1197, i32 0, i32 1
  %arrayidx1199 = getelementptr inbounds [1024 x i16]* %m_look_up1198, i32 0, i64 %and1195
  %567 = load i16* %arrayidx1199, align 2
  %conv1200 = sext i16 %567 to i32
  store i32 %conv1200, i32* %temp1182, align 4
  %568 = load i32* %temp1182, align 4
  %cmp1201 = icmp sge i32 %568, 0
  br i1 %cmp1201, label %if.then1203, label %if.else1211

if.then1203:                                      ; preds = %do.body1194
  %569 = load i32* %temp1182, align 4
  %shr1204 = ashr i32 %569, 9
  store i32 %shr1204, i32* %code_len1183, align 4
  %570 = load i32* %code_len1183, align 4
  %tobool1205 = icmp ne i32 %570, 0
  br i1 %tobool1205, label %land.lhs.true1206, label %if.end1210

land.lhs.true1206:                                ; preds = %if.then1203
  %571 = load i32* %num_bits, align 4
  %572 = load i32* %code_len1183, align 4
  %cmp1207 = icmp uge i32 %571, %572
  br i1 %cmp1207, label %if.then1209, label %if.end1210

if.then1209:                                      ; preds = %land.lhs.true1206
  br label %do.end1279

if.end1210:                                       ; preds = %land.lhs.true1206, %if.then1203
  br label %if.end1242

if.else1211:                                      ; preds = %do.body1194
  %573 = load i32* %num_bits, align 4
  %cmp1212 = icmp ugt i32 %573, 10
  br i1 %cmp1212, label %if.then1214, label %if.end1241

if.then1214:                                      ; preds = %if.else1211
  store i32 10, i32* %code_len1183, align 4
  br label %do.body1215

do.body1215:                                      ; preds = %land.end1235, %if.then1214
  %574 = load i32* %temp1182, align 4
  %neg1216 = xor i32 %574, -1
  %conv1217 = sext i32 %neg1216 to i64
  %575 = load i64* %bit_buf, align 8
  %576 = load i32* %code_len1183, align 4
  %inc1218 = add i32 %576, 1
  store i32 %inc1218, i32* %code_len1183, align 4
  %sh_prom1219 = zext i32 %576 to i64
  %shr1220 = lshr i64 %575, %sh_prom1219
  %and1221 = and i64 %shr1220, 1
  %add1222 = add i64 %conv1217, %and1221
  %577 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1223 = getelementptr inbounds %struct.tinfl_decompressor_tag* %577, i32 0, i32 14
  %arrayidx1224 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1223, i32 0, i64 0
  %m_tree1225 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1224, i32 0, i32 2
  %arrayidx1226 = getelementptr inbounds [576 x i16]* %m_tree1225, i32 0, i64 %add1222
  %578 = load i16* %arrayidx1226, align 2
  %conv1227 = sext i16 %578 to i32
  store i32 %conv1227, i32* %temp1182, align 4
  br label %do.cond1228

do.cond1228:                                      ; preds = %do.body1215
  %579 = load i32* %temp1182, align 4
  %cmp1229 = icmp slt i32 %579, 0
  br i1 %cmp1229, label %land.rhs1231, label %land.end1235

land.rhs1231:                                     ; preds = %do.cond1228
  %580 = load i32* %num_bits, align 4
  %581 = load i32* %code_len1183, align 4
  %add1232 = add i32 %581, 1
  %cmp1233 = icmp uge i32 %580, %add1232
  br label %land.end1235

land.end1235:                                     ; preds = %land.rhs1231, %do.cond1228
  %582 = phi i1 [ false, %do.cond1228 ], [ %cmp1233, %land.rhs1231 ]
  br i1 %582, label %do.body1215, label %do.end1236

do.end1236:                                       ; preds = %land.end1235
  %583 = load i32* %temp1182, align 4
  %cmp1237 = icmp sge i32 %583, 0
  br i1 %cmp1237, label %if.then1239, label %if.end1240

if.then1239:                                      ; preds = %do.end1236
  br label %do.end1279

if.end1240:                                       ; preds = %do.end1236
  br label %if.end1241

if.end1241:                                       ; preds = %if.end1240, %if.else1211
  br label %if.end1242

if.end1242:                                       ; preds = %if.end1241, %if.end1210
  br label %do.body1243

do.body1243:                                      ; preds = %if.end1242
  %584 = load i8** %pIn_buf_cur, align 8
  %585 = load i8** %pIn_buf_end, align 8
  %cmp1244 = icmp uge i8* %584, %585
  br i1 %cmp1244, label %if.then1246, label %if.else1265

if.then1246:                                      ; preds = %do.body1243
  br label %for.cond1247

for.cond1247:                                     ; preds = %if.end1263, %if.then1246
  %586 = load i32* %decomp_flags.addr, align 4
  %and1248 = and i32 %586, 2
  %tobool1249 = icmp ne i32 %and1248, 0
  br i1 %tobool1249, label %if.then1250, label %if.else1262

if.then1250:                                      ; preds = %for.cond1247
  br label %do.body1251

do.body1251:                                      ; preds = %if.then1250
  store i32 1, i32* %status, align 4
  %587 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1252 = getelementptr inbounds %struct.tinfl_decompressor_tag* %587, i32 0, i32 0
  store i32 23, i32* %m_state1252, align 4
  br label %common_exit

sw.bb1253:                                        ; preds = %if.end
  br label %do.end1255

do.end1255:                                       ; preds = %sw.bb1253
  %588 = load i8** %pIn_buf_cur, align 8
  %589 = load i8** %pIn_buf_end, align 8
  %cmp1256 = icmp ult i8* %588, %589
  br i1 %cmp1256, label %if.then1258, label %if.end1261

if.then1258:                                      ; preds = %do.end1255
  %590 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1259 = getelementptr inbounds i8* %590, i32 1
  store i8* %incdec.ptr1259, i8** %pIn_buf_cur, align 8
  %591 = load i8* %590, align 1
  %conv1260 = zext i8 %591 to i32
  store i32 %conv1260, i32* %c1184, align 4
  br label %for.end1264

if.end1261:                                       ; preds = %do.end1255
  br label %if.end1263

if.else1262:                                      ; preds = %for.cond1247
  store i32 0, i32* %c1184, align 4
  br label %for.end1264

if.end1263:                                       ; preds = %if.end1261
  br label %for.cond1247

for.end1264:                                      ; preds = %if.else1262, %if.then1258
  br label %if.end1268

if.else1265:                                      ; preds = %do.body1243
  %592 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1266 = getelementptr inbounds i8* %592, i32 1
  store i8* %incdec.ptr1266, i8** %pIn_buf_cur, align 8
  %593 = load i8* %592, align 1
  %conv1267 = zext i8 %593 to i32
  store i32 %conv1267, i32* %c1184, align 4
  br label %if.end1268

if.end1268:                                       ; preds = %if.else1265, %for.end1264
  br label %do.end1270

do.end1270:                                       ; preds = %if.end1268
  %594 = load i32* %c1184, align 4
  %conv1271 = zext i32 %594 to i64
  %595 = load i32* %num_bits, align 4
  %sh_prom1272 = zext i32 %595 to i64
  %shl1273 = shl i64 %conv1271, %sh_prom1272
  %596 = load i64* %bit_buf, align 8
  %or1274 = or i64 %596, %shl1273
  store i64 %or1274, i64* %bit_buf, align 8
  %597 = load i32* %num_bits, align 4
  %add1275 = add i32 %597, 8
  store i32 %add1275, i32* %num_bits, align 4
  br label %do.cond1276

do.cond1276:                                      ; preds = %do.end1270
  %598 = load i32* %num_bits, align 4
  %cmp1277 = icmp ult i32 %598, 15
  br i1 %cmp1277, label %do.body1194, label %do.end1279

do.end1279:                                       ; preds = %do.cond1276, %if.then1239, %if.then1209
  br label %if.end1294

if.else1280:                                      ; preds = %if.then1187
  %599 = load i8** %pIn_buf_cur, align 8
  %arrayidx1281 = getelementptr inbounds i8* %599, i64 0
  %600 = load i8* %arrayidx1281, align 1
  %conv1282 = zext i8 %600 to i64
  %601 = load i32* %num_bits, align 4
  %sh_prom1283 = zext i32 %601 to i64
  %shl1284 = shl i64 %conv1282, %sh_prom1283
  %602 = load i8** %pIn_buf_cur, align 8
  %arrayidx1285 = getelementptr inbounds i8* %602, i64 1
  %603 = load i8* %arrayidx1285, align 1
  %conv1286 = zext i8 %603 to i64
  %604 = load i32* %num_bits, align 4
  %add1287 = add i32 %604, 8
  %sh_prom1288 = zext i32 %add1287 to i64
  %shl1289 = shl i64 %conv1286, %sh_prom1288
  %or1290 = or i64 %shl1284, %shl1289
  %605 = load i64* %bit_buf, align 8
  %or1291 = or i64 %605, %or1290
  store i64 %or1291, i64* %bit_buf, align 8
  %606 = load i8** %pIn_buf_cur, align 8
  %add.ptr1292 = getelementptr inbounds i8* %606, i64 2
  store i8* %add.ptr1292, i8** %pIn_buf_cur, align 8
  %607 = load i32* %num_bits, align 4
  %add1293 = add i32 %607, 16
  store i32 %add1293, i32* %num_bits, align 4
  br label %if.end1294

if.end1294:                                       ; preds = %if.else1280, %do.end1279
  br label %if.end1295

if.end1295:                                       ; preds = %if.end1294, %do.body1181
  %608 = load i64* %bit_buf, align 8
  %and1296 = and i64 %608, 1023
  %609 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1297 = getelementptr inbounds %struct.tinfl_decompressor_tag* %609, i32 0, i32 14
  %arrayidx1298 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1297, i32 0, i64 0
  %m_look_up1299 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1298, i32 0, i32 1
  %arrayidx1300 = getelementptr inbounds [1024 x i16]* %m_look_up1299, i32 0, i64 %and1296
  %610 = load i16* %arrayidx1300, align 2
  %conv1301 = sext i16 %610 to i32
  store i32 %conv1301, i32* %temp1182, align 4
  %cmp1302 = icmp sge i32 %conv1301, 0
  br i1 %cmp1302, label %if.then1304, label %if.else1307

if.then1304:                                      ; preds = %if.end1295
  %611 = load i32* %temp1182, align 4
  %shr1305 = ashr i32 %611, 9
  store i32 %shr1305, i32* %code_len1183, align 4
  %612 = load i32* %temp1182, align 4
  %and1306 = and i32 %612, 511
  store i32 %and1306, i32* %temp1182, align 4
  br label %if.end1325

if.else1307:                                      ; preds = %if.end1295
  store i32 10, i32* %code_len1183, align 4
  br label %do.body1308

do.body1308:                                      ; preds = %do.cond1321, %if.else1307
  %613 = load i32* %temp1182, align 4
  %neg1309 = xor i32 %613, -1
  %conv1310 = sext i32 %neg1309 to i64
  %614 = load i64* %bit_buf, align 8
  %615 = load i32* %code_len1183, align 4
  %inc1311 = add i32 %615, 1
  store i32 %inc1311, i32* %code_len1183, align 4
  %sh_prom1312 = zext i32 %615 to i64
  %shr1313 = lshr i64 %614, %sh_prom1312
  %and1314 = and i64 %shr1313, 1
  %add1315 = add i64 %conv1310, %and1314
  %616 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1316 = getelementptr inbounds %struct.tinfl_decompressor_tag* %616, i32 0, i32 14
  %arrayidx1317 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1316, i32 0, i64 0
  %m_tree1318 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1317, i32 0, i32 2
  %arrayidx1319 = getelementptr inbounds [576 x i16]* %m_tree1318, i32 0, i64 %add1315
  %617 = load i16* %arrayidx1319, align 2
  %conv1320 = sext i16 %617 to i32
  store i32 %conv1320, i32* %temp1182, align 4
  br label %do.cond1321

do.cond1321:                                      ; preds = %do.body1308
  %618 = load i32* %temp1182, align 4
  %cmp1322 = icmp slt i32 %618, 0
  br i1 %cmp1322, label %do.body1308, label %do.end1324

do.end1324:                                       ; preds = %do.cond1321
  br label %if.end1325

if.end1325:                                       ; preds = %do.end1324, %if.then1304
  %619 = load i32* %temp1182, align 4
  store i32 %619, i32* %counter, align 4
  %620 = load i32* %code_len1183, align 4
  %621 = load i64* %bit_buf, align 8
  %sh_prom1326 = zext i32 %620 to i64
  %shr1327 = lshr i64 %621, %sh_prom1326
  store i64 %shr1327, i64* %bit_buf, align 8
  %622 = load i32* %code_len1183, align 4
  %623 = load i32* %num_bits, align 4
  %sub1328 = sub i32 %623, %622
  store i32 %sub1328, i32* %num_bits, align 4
  br label %do.end1330

do.end1330:                                       ; preds = %if.end1325
  %624 = load i32* %counter, align 4
  %cmp1331 = icmp uge i32 %624, 256
  br i1 %cmp1331, label %if.then1333, label %if.end1334

if.then1333:                                      ; preds = %do.end1330
  br label %for.end1438

if.end1334:                                       ; preds = %do.end1330
  br label %while.cond1335

while.cond1335:                                   ; preds = %do.end1343, %if.end1334
  %625 = load i8** %pOut_buf_cur, align 8
  %626 = load i8** %pOut_buf_end, align 8
  %cmp1336 = icmp uge i8* %625, %626
  br i1 %cmp1336, label %while.body1338, label %while.end1344

while.body1338:                                   ; preds = %while.cond1335
  br label %do.body1339

do.body1339:                                      ; preds = %while.body1338
  store i32 2, i32* %status, align 4
  %627 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1340 = getelementptr inbounds %struct.tinfl_decompressor_tag* %627, i32 0, i32 0
  store i32 24, i32* %m_state1340, align 4
  br label %common_exit

sw.bb1341:                                        ; preds = %if.end
  br label %do.end1343

do.end1343:                                       ; preds = %sw.bb1341
  br label %while.cond1335

while.end1344:                                    ; preds = %while.cond1335
  %628 = load i32* %counter, align 4
  %conv1345 = trunc i32 %628 to i8
  %629 = load i8** %pOut_buf_cur, align 8
  %incdec.ptr1346 = getelementptr inbounds i8* %629, i32 1
  store i8* %incdec.ptr1346, i8** %pOut_buf_cur, align 8
  store i8 %conv1345, i8* %629, align 1
  br label %if.end1437

if.else1347:                                      ; preds = %lor.lhs.false1174
  %630 = load i32* %num_bits, align 4
  %cmp1349 = icmp ult i32 %630, 30
  br i1 %cmp1349, label %if.then1351, label %if.end1358

if.then1351:                                      ; preds = %if.else1347
  %631 = load i8** %pIn_buf_cur, align 8
  %632 = bitcast i8* %631 to i32*
  %633 = load i32* %632, align 4
  %conv1352 = zext i32 %633 to i64
  %634 = load i32* %num_bits, align 4
  %sh_prom1353 = zext i32 %634 to i64
  %shl1354 = shl i64 %conv1352, %sh_prom1353
  %635 = load i64* %bit_buf, align 8
  %or1355 = or i64 %635, %shl1354
  store i64 %or1355, i64* %bit_buf, align 8
  %636 = load i8** %pIn_buf_cur, align 8
  %add.ptr1356 = getelementptr inbounds i8* %636, i64 4
  store i8* %add.ptr1356, i8** %pIn_buf_cur, align 8
  %637 = load i32* %num_bits, align 4
  %add1357 = add i32 %637, 32
  store i32 %add1357, i32* %num_bits, align 4
  br label %if.end1358

if.end1358:                                       ; preds = %if.then1351, %if.else1347
  %638 = load i64* %bit_buf, align 8
  %and1359 = and i64 %638, 1023
  %639 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1360 = getelementptr inbounds %struct.tinfl_decompressor_tag* %639, i32 0, i32 14
  %arrayidx1361 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1360, i32 0, i64 0
  %m_look_up1362 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1361, i32 0, i32 1
  %arrayidx1363 = getelementptr inbounds [1024 x i16]* %m_look_up1362, i32 0, i64 %and1359
  %640 = load i16* %arrayidx1363, align 2
  %conv1364 = sext i16 %640 to i32
  store i32 %conv1364, i32* %sym2, align 4
  %cmp1365 = icmp sge i32 %conv1364, 0
  br i1 %cmp1365, label %if.then1367, label %if.else1369

if.then1367:                                      ; preds = %if.end1358
  %641 = load i32* %sym2, align 4
  %shr1368 = ashr i32 %641, 9
  store i32 %shr1368, i32* %code_len1348, align 4
  br label %if.end1387

if.else1369:                                      ; preds = %if.end1358
  store i32 10, i32* %code_len1348, align 4
  br label %do.body1370

do.body1370:                                      ; preds = %do.cond1383, %if.else1369
  %642 = load i32* %sym2, align 4
  %neg1371 = xor i32 %642, -1
  %conv1372 = sext i32 %neg1371 to i64
  %643 = load i64* %bit_buf, align 8
  %644 = load i32* %code_len1348, align 4
  %inc1373 = add i32 %644, 1
  store i32 %inc1373, i32* %code_len1348, align 4
  %sh_prom1374 = zext i32 %644 to i64
  %shr1375 = lshr i64 %643, %sh_prom1374
  %and1376 = and i64 %shr1375, 1
  %add1377 = add i64 %conv1372, %and1376
  %645 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1378 = getelementptr inbounds %struct.tinfl_decompressor_tag* %645, i32 0, i32 14
  %arrayidx1379 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1378, i32 0, i64 0
  %m_tree1380 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1379, i32 0, i32 2
  %arrayidx1381 = getelementptr inbounds [576 x i16]* %m_tree1380, i32 0, i64 %add1377
  %646 = load i16* %arrayidx1381, align 2
  %conv1382 = sext i16 %646 to i32
  store i32 %conv1382, i32* %sym2, align 4
  br label %do.cond1383

do.cond1383:                                      ; preds = %do.body1370
  %647 = load i32* %sym2, align 4
  %cmp1384 = icmp slt i32 %647, 0
  br i1 %cmp1384, label %do.body1370, label %do.end1386

do.end1386:                                       ; preds = %do.cond1383
  br label %if.end1387

if.end1387:                                       ; preds = %do.end1386, %if.then1367
  %648 = load i32* %sym2, align 4
  store i32 %648, i32* %counter, align 4
  %649 = load i32* %code_len1348, align 4
  %650 = load i64* %bit_buf, align 8
  %sh_prom1388 = zext i32 %649 to i64
  %shr1389 = lshr i64 %650, %sh_prom1388
  store i64 %shr1389, i64* %bit_buf, align 8
  %651 = load i32* %code_len1348, align 4
  %652 = load i32* %num_bits, align 4
  %sub1390 = sub i32 %652, %651
  store i32 %sub1390, i32* %num_bits, align 4
  %653 = load i32* %counter, align 4
  %and1391 = and i32 %653, 256
  %tobool1392 = icmp ne i32 %and1391, 0
  br i1 %tobool1392, label %if.then1393, label %if.end1394

if.then1393:                                      ; preds = %if.end1387
  br label %for.end1438

if.end1394:                                       ; preds = %if.end1387
  %654 = load i64* %bit_buf, align 8
  %and1395 = and i64 %654, 1023
  %655 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1396 = getelementptr inbounds %struct.tinfl_decompressor_tag* %655, i32 0, i32 14
  %arrayidx1397 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1396, i32 0, i64 0
  %m_look_up1398 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1397, i32 0, i32 1
  %arrayidx1399 = getelementptr inbounds [1024 x i16]* %m_look_up1398, i32 0, i64 %and1395
  %656 = load i16* %arrayidx1399, align 2
  %conv1400 = sext i16 %656 to i32
  store i32 %conv1400, i32* %sym2, align 4
  %cmp1401 = icmp sge i32 %conv1400, 0
  br i1 %cmp1401, label %if.then1403, label %if.else1405

if.then1403:                                      ; preds = %if.end1394
  %657 = load i32* %sym2, align 4
  %shr1404 = ashr i32 %657, 9
  store i32 %shr1404, i32* %code_len1348, align 4
  br label %if.end1423

if.else1405:                                      ; preds = %if.end1394
  store i32 10, i32* %code_len1348, align 4
  br label %do.body1406

do.body1406:                                      ; preds = %do.cond1419, %if.else1405
  %658 = load i32* %sym2, align 4
  %neg1407 = xor i32 %658, -1
  %conv1408 = sext i32 %neg1407 to i64
  %659 = load i64* %bit_buf, align 8
  %660 = load i32* %code_len1348, align 4
  %inc1409 = add i32 %660, 1
  store i32 %inc1409, i32* %code_len1348, align 4
  %sh_prom1410 = zext i32 %660 to i64
  %shr1411 = lshr i64 %659, %sh_prom1410
  %and1412 = and i64 %shr1411, 1
  %add1413 = add i64 %conv1408, %and1412
  %661 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1414 = getelementptr inbounds %struct.tinfl_decompressor_tag* %661, i32 0, i32 14
  %arrayidx1415 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1414, i32 0, i64 0
  %m_tree1416 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1415, i32 0, i32 2
  %arrayidx1417 = getelementptr inbounds [576 x i16]* %m_tree1416, i32 0, i64 %add1413
  %662 = load i16* %arrayidx1417, align 2
  %conv1418 = sext i16 %662 to i32
  store i32 %conv1418, i32* %sym2, align 4
  br label %do.cond1419

do.cond1419:                                      ; preds = %do.body1406
  %663 = load i32* %sym2, align 4
  %cmp1420 = icmp slt i32 %663, 0
  br i1 %cmp1420, label %do.body1406, label %do.end1422

do.end1422:                                       ; preds = %do.cond1419
  br label %if.end1423

if.end1423:                                       ; preds = %do.end1422, %if.then1403
  %664 = load i32* %code_len1348, align 4
  %665 = load i64* %bit_buf, align 8
  %sh_prom1424 = zext i32 %664 to i64
  %shr1425 = lshr i64 %665, %sh_prom1424
  store i64 %shr1425, i64* %bit_buf, align 8
  %666 = load i32* %code_len1348, align 4
  %667 = load i32* %num_bits, align 4
  %sub1426 = sub i32 %667, %666
  store i32 %sub1426, i32* %num_bits, align 4
  %668 = load i32* %counter, align 4
  %conv1427 = trunc i32 %668 to i8
  %669 = load i8** %pOut_buf_cur, align 8
  %arrayidx1428 = getelementptr inbounds i8* %669, i64 0
  store i8 %conv1427, i8* %arrayidx1428, align 1
  %670 = load i32* %sym2, align 4
  %and1429 = and i32 %670, 256
  %tobool1430 = icmp ne i32 %and1429, 0
  br i1 %tobool1430, label %if.then1431, label %if.end1433

if.then1431:                                      ; preds = %if.end1423
  %671 = load i8** %pOut_buf_cur, align 8
  %incdec.ptr1432 = getelementptr inbounds i8* %671, i32 1
  store i8* %incdec.ptr1432, i8** %pOut_buf_cur, align 8
  %672 = load i32* %sym2, align 4
  store i32 %672, i32* %counter, align 4
  br label %for.end1438

if.end1433:                                       ; preds = %if.end1423
  %673 = load i32* %sym2, align 4
  %conv1434 = trunc i32 %673 to i8
  %674 = load i8** %pOut_buf_cur, align 8
  %arrayidx1435 = getelementptr inbounds i8* %674, i64 1
  store i8 %conv1434, i8* %arrayidx1435, align 1
  %675 = load i8** %pOut_buf_cur, align 8
  %add.ptr1436 = getelementptr inbounds i8* %675, i64 2
  store i8* %add.ptr1436, i8** %pOut_buf_cur, align 8
  br label %if.end1437

if.end1437:                                       ; preds = %if.end1433, %while.end1344
  br label %for.cond1168

for.end1438:                                      ; preds = %if.then1431, %if.then1393, %if.then1333
  %676 = load i32* %counter, align 4
  %and1439 = and i32 %676, 511
  store i32 %and1439, i32* %counter, align 4
  %cmp1440 = icmp eq i32 %and1439, 256
  br i1 %cmp1440, label %if.then1442, label %if.end1443

if.then1442:                                      ; preds = %for.end1438
  br label %for.end1846

if.end1443:                                       ; preds = %for.end1438
  %677 = load i32* %counter, align 4
  %sub1444 = sub i32 %677, 257
  %idxprom1445 = zext i32 %sub1444 to i64
  %arrayidx1446 = getelementptr inbounds [31 x i32]* @tinfl_decompress.s_length_extra, i32 0, i64 %idxprom1445
  %678 = load i32* %arrayidx1446, align 4
  store i32 %678, i32* %num_extra, align 4
  %679 = load i32* %counter, align 4
  %sub1447 = sub i32 %679, 257
  %idxprom1448 = zext i32 %sub1447 to i64
  %arrayidx1449 = getelementptr inbounds [31 x i32]* @tinfl_decompress.s_length_base, i32 0, i64 %idxprom1448
  %680 = load i32* %arrayidx1449, align 4
  store i32 %680, i32* %counter, align 4
  %681 = load i32* %num_extra, align 4
  %tobool1450 = icmp ne i32 %681, 0
  br i1 %tobool1450, label %if.then1451, label %if.end1507

if.then1451:                                      ; preds = %if.end1443
  br label %do.body1452

do.body1452:                                      ; preds = %if.then1451
  %682 = load i32* %num_bits, align 4
  %683 = load i32* %num_extra, align 4
  %cmp1453 = icmp ult i32 %682, %683
  br i1 %cmp1453, label %if.then1455, label %if.end1495

if.then1455:                                      ; preds = %do.body1452
  br label %do.body1456

do.body1456:                                      ; preds = %do.cond1491, %if.then1455
  br label %do.body1458

do.body1458:                                      ; preds = %do.body1456
  %684 = load i8** %pIn_buf_cur, align 8
  %685 = load i8** %pIn_buf_end, align 8
  %cmp1459 = icmp uge i8* %684, %685
  br i1 %cmp1459, label %if.then1461, label %if.else1480

if.then1461:                                      ; preds = %do.body1458
  br label %for.cond1462

for.cond1462:                                     ; preds = %if.end1478, %if.then1461
  %686 = load i32* %decomp_flags.addr, align 4
  %and1463 = and i32 %686, 2
  %tobool1464 = icmp ne i32 %and1463, 0
  br i1 %tobool1464, label %if.then1465, label %if.else1477

if.then1465:                                      ; preds = %for.cond1462
  br label %do.body1466

do.body1466:                                      ; preds = %if.then1465
  store i32 1, i32* %status, align 4
  %687 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1467 = getelementptr inbounds %struct.tinfl_decompressor_tag* %687, i32 0, i32 0
  store i32 25, i32* %m_state1467, align 4
  br label %common_exit

sw.bb1468:                                        ; preds = %if.end
  br label %do.end1470

do.end1470:                                       ; preds = %sw.bb1468
  %688 = load i8** %pIn_buf_cur, align 8
  %689 = load i8** %pIn_buf_end, align 8
  %cmp1471 = icmp ult i8* %688, %689
  br i1 %cmp1471, label %if.then1473, label %if.end1476

if.then1473:                                      ; preds = %do.end1470
  %690 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1474 = getelementptr inbounds i8* %690, i32 1
  store i8* %incdec.ptr1474, i8** %pIn_buf_cur, align 8
  %691 = load i8* %690, align 1
  %conv1475 = zext i8 %691 to i32
  store i32 %conv1475, i32* %c1457, align 4
  br label %for.end1479

if.end1476:                                       ; preds = %do.end1470
  br label %if.end1478

if.else1477:                                      ; preds = %for.cond1462
  store i32 0, i32* %c1457, align 4
  br label %for.end1479

if.end1478:                                       ; preds = %if.end1476
  br label %for.cond1462

for.end1479:                                      ; preds = %if.else1477, %if.then1473
  br label %if.end1483

if.else1480:                                      ; preds = %do.body1458
  %692 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1481 = getelementptr inbounds i8* %692, i32 1
  store i8* %incdec.ptr1481, i8** %pIn_buf_cur, align 8
  %693 = load i8* %692, align 1
  %conv1482 = zext i8 %693 to i32
  store i32 %conv1482, i32* %c1457, align 4
  br label %if.end1483

if.end1483:                                       ; preds = %if.else1480, %for.end1479
  br label %do.end1485

do.end1485:                                       ; preds = %if.end1483
  %694 = load i32* %c1457, align 4
  %conv1486 = zext i32 %694 to i64
  %695 = load i32* %num_bits, align 4
  %sh_prom1487 = zext i32 %695 to i64
  %shl1488 = shl i64 %conv1486, %sh_prom1487
  %696 = load i64* %bit_buf, align 8
  %or1489 = or i64 %696, %shl1488
  store i64 %or1489, i64* %bit_buf, align 8
  %697 = load i32* %num_bits, align 4
  %add1490 = add i32 %697, 8
  store i32 %add1490, i32* %num_bits, align 4
  br label %do.cond1491

do.cond1491:                                      ; preds = %do.end1485
  %698 = load i32* %num_bits, align 4
  %699 = load i32* %num_extra, align 4
  %cmp1492 = icmp ult i32 %698, %699
  br i1 %cmp1492, label %do.body1456, label %do.end1494

do.end1494:                                       ; preds = %do.cond1491
  br label %if.end1495

if.end1495:                                       ; preds = %do.end1494, %do.body1452
  %700 = load i64* %bit_buf, align 8
  %701 = load i32* %num_extra, align 4
  %shl1496 = shl i32 1, %701
  %sub1497 = sub nsw i32 %shl1496, 1
  %conv1498 = sext i32 %sub1497 to i64
  %and1499 = and i64 %700, %conv1498
  %conv1500 = trunc i64 %and1499 to i32
  store i32 %conv1500, i32* %extra_bits, align 4
  %702 = load i32* %num_extra, align 4
  %703 = load i64* %bit_buf, align 8
  %sh_prom1501 = zext i32 %702 to i64
  %shr1502 = lshr i64 %703, %sh_prom1501
  store i64 %shr1502, i64* %bit_buf, align 8
  %704 = load i32* %num_extra, align 4
  %705 = load i32* %num_bits, align 4
  %sub1503 = sub i32 %705, %704
  store i32 %sub1503, i32* %num_bits, align 4
  br label %do.end1505

do.end1505:                                       ; preds = %if.end1495
  %706 = load i32* %extra_bits, align 4
  %707 = load i32* %counter, align 4
  %add1506 = add i32 %707, %706
  store i32 %add1506, i32* %counter, align 4
  br label %if.end1507

if.end1507:                                       ; preds = %do.end1505, %if.end1443
  br label %do.body1508

do.body1508:                                      ; preds = %if.end1507
  %708 = load i32* %num_bits, align 4
  %cmp1512 = icmp ult i32 %708, 15
  br i1 %cmp1512, label %if.then1514, label %if.end1622

if.then1514:                                      ; preds = %do.body1508
  %709 = load i8** %pIn_buf_end, align 8
  %710 = load i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast1515 = ptrtoint i8* %709 to i64
  %sub.ptr.rhs.cast1516 = ptrtoint i8* %710 to i64
  %sub.ptr.sub1517 = sub i64 %sub.ptr.lhs.cast1515, %sub.ptr.rhs.cast1516
  %cmp1518 = icmp slt i64 %sub.ptr.sub1517, 2
  br i1 %cmp1518, label %if.then1520, label %if.else1607

if.then1520:                                      ; preds = %if.then1514
  br label %do.body1521

do.body1521:                                      ; preds = %do.cond1603, %if.then1520
  %711 = load i64* %bit_buf, align 8
  %and1522 = and i64 %711, 1023
  %712 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1523 = getelementptr inbounds %struct.tinfl_decompressor_tag* %712, i32 0, i32 14
  %arrayidx1524 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1523, i32 0, i64 1
  %m_look_up1525 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1524, i32 0, i32 1
  %arrayidx1526 = getelementptr inbounds [1024 x i16]* %m_look_up1525, i32 0, i64 %and1522
  %713 = load i16* %arrayidx1526, align 2
  %conv1527 = sext i16 %713 to i32
  store i32 %conv1527, i32* %temp1509, align 4
  %714 = load i32* %temp1509, align 4
  %cmp1528 = icmp sge i32 %714, 0
  br i1 %cmp1528, label %if.then1530, label %if.else1538

if.then1530:                                      ; preds = %do.body1521
  %715 = load i32* %temp1509, align 4
  %shr1531 = ashr i32 %715, 9
  store i32 %shr1531, i32* %code_len1510, align 4
  %716 = load i32* %code_len1510, align 4
  %tobool1532 = icmp ne i32 %716, 0
  br i1 %tobool1532, label %land.lhs.true1533, label %if.end1537

land.lhs.true1533:                                ; preds = %if.then1530
  %717 = load i32* %num_bits, align 4
  %718 = load i32* %code_len1510, align 4
  %cmp1534 = icmp uge i32 %717, %718
  br i1 %cmp1534, label %if.then1536, label %if.end1537

if.then1536:                                      ; preds = %land.lhs.true1533
  br label %do.end1606

if.end1537:                                       ; preds = %land.lhs.true1533, %if.then1530
  br label %if.end1569

if.else1538:                                      ; preds = %do.body1521
  %719 = load i32* %num_bits, align 4
  %cmp1539 = icmp ugt i32 %719, 10
  br i1 %cmp1539, label %if.then1541, label %if.end1568

if.then1541:                                      ; preds = %if.else1538
  store i32 10, i32* %code_len1510, align 4
  br label %do.body1542

do.body1542:                                      ; preds = %land.end1562, %if.then1541
  %720 = load i32* %temp1509, align 4
  %neg1543 = xor i32 %720, -1
  %conv1544 = sext i32 %neg1543 to i64
  %721 = load i64* %bit_buf, align 8
  %722 = load i32* %code_len1510, align 4
  %inc1545 = add i32 %722, 1
  store i32 %inc1545, i32* %code_len1510, align 4
  %sh_prom1546 = zext i32 %722 to i64
  %shr1547 = lshr i64 %721, %sh_prom1546
  %and1548 = and i64 %shr1547, 1
  %add1549 = add i64 %conv1544, %and1548
  %723 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1550 = getelementptr inbounds %struct.tinfl_decompressor_tag* %723, i32 0, i32 14
  %arrayidx1551 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1550, i32 0, i64 1
  %m_tree1552 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1551, i32 0, i32 2
  %arrayidx1553 = getelementptr inbounds [576 x i16]* %m_tree1552, i32 0, i64 %add1549
  %724 = load i16* %arrayidx1553, align 2
  %conv1554 = sext i16 %724 to i32
  store i32 %conv1554, i32* %temp1509, align 4
  br label %do.cond1555

do.cond1555:                                      ; preds = %do.body1542
  %725 = load i32* %temp1509, align 4
  %cmp1556 = icmp slt i32 %725, 0
  br i1 %cmp1556, label %land.rhs1558, label %land.end1562

land.rhs1558:                                     ; preds = %do.cond1555
  %726 = load i32* %num_bits, align 4
  %727 = load i32* %code_len1510, align 4
  %add1559 = add i32 %727, 1
  %cmp1560 = icmp uge i32 %726, %add1559
  br label %land.end1562

land.end1562:                                     ; preds = %land.rhs1558, %do.cond1555
  %728 = phi i1 [ false, %do.cond1555 ], [ %cmp1560, %land.rhs1558 ]
  br i1 %728, label %do.body1542, label %do.end1563

do.end1563:                                       ; preds = %land.end1562
  %729 = load i32* %temp1509, align 4
  %cmp1564 = icmp sge i32 %729, 0
  br i1 %cmp1564, label %if.then1566, label %if.end1567

if.then1566:                                      ; preds = %do.end1563
  br label %do.end1606

if.end1567:                                       ; preds = %do.end1563
  br label %if.end1568

if.end1568:                                       ; preds = %if.end1567, %if.else1538
  br label %if.end1569

if.end1569:                                       ; preds = %if.end1568, %if.end1537
  br label %do.body1570

do.body1570:                                      ; preds = %if.end1569
  %730 = load i8** %pIn_buf_cur, align 8
  %731 = load i8** %pIn_buf_end, align 8
  %cmp1571 = icmp uge i8* %730, %731
  br i1 %cmp1571, label %if.then1573, label %if.else1592

if.then1573:                                      ; preds = %do.body1570
  br label %for.cond1574

for.cond1574:                                     ; preds = %if.end1590, %if.then1573
  %732 = load i32* %decomp_flags.addr, align 4
  %and1575 = and i32 %732, 2
  %tobool1576 = icmp ne i32 %and1575, 0
  br i1 %tobool1576, label %if.then1577, label %if.else1589

if.then1577:                                      ; preds = %for.cond1574
  br label %do.body1578

do.body1578:                                      ; preds = %if.then1577
  store i32 1, i32* %status, align 4
  %733 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1579 = getelementptr inbounds %struct.tinfl_decompressor_tag* %733, i32 0, i32 0
  store i32 26, i32* %m_state1579, align 4
  br label %common_exit

sw.bb1580:                                        ; preds = %if.end
  br label %do.end1582

do.end1582:                                       ; preds = %sw.bb1580
  %734 = load i8** %pIn_buf_cur, align 8
  %735 = load i8** %pIn_buf_end, align 8
  %cmp1583 = icmp ult i8* %734, %735
  br i1 %cmp1583, label %if.then1585, label %if.end1588

if.then1585:                                      ; preds = %do.end1582
  %736 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1586 = getelementptr inbounds i8* %736, i32 1
  store i8* %incdec.ptr1586, i8** %pIn_buf_cur, align 8
  %737 = load i8* %736, align 1
  %conv1587 = zext i8 %737 to i32
  store i32 %conv1587, i32* %c1511, align 4
  br label %for.end1591

if.end1588:                                       ; preds = %do.end1582
  br label %if.end1590

if.else1589:                                      ; preds = %for.cond1574
  store i32 0, i32* %c1511, align 4
  br label %for.end1591

if.end1590:                                       ; preds = %if.end1588
  br label %for.cond1574

for.end1591:                                      ; preds = %if.else1589, %if.then1585
  br label %if.end1595

if.else1592:                                      ; preds = %do.body1570
  %738 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1593 = getelementptr inbounds i8* %738, i32 1
  store i8* %incdec.ptr1593, i8** %pIn_buf_cur, align 8
  %739 = load i8* %738, align 1
  %conv1594 = zext i8 %739 to i32
  store i32 %conv1594, i32* %c1511, align 4
  br label %if.end1595

if.end1595:                                       ; preds = %if.else1592, %for.end1591
  br label %do.end1597

do.end1597:                                       ; preds = %if.end1595
  %740 = load i32* %c1511, align 4
  %conv1598 = zext i32 %740 to i64
  %741 = load i32* %num_bits, align 4
  %sh_prom1599 = zext i32 %741 to i64
  %shl1600 = shl i64 %conv1598, %sh_prom1599
  %742 = load i64* %bit_buf, align 8
  %or1601 = or i64 %742, %shl1600
  store i64 %or1601, i64* %bit_buf, align 8
  %743 = load i32* %num_bits, align 4
  %add1602 = add i32 %743, 8
  store i32 %add1602, i32* %num_bits, align 4
  br label %do.cond1603

do.cond1603:                                      ; preds = %do.end1597
  %744 = load i32* %num_bits, align 4
  %cmp1604 = icmp ult i32 %744, 15
  br i1 %cmp1604, label %do.body1521, label %do.end1606

do.end1606:                                       ; preds = %do.cond1603, %if.then1566, %if.then1536
  br label %if.end1621

if.else1607:                                      ; preds = %if.then1514
  %745 = load i8** %pIn_buf_cur, align 8
  %arrayidx1608 = getelementptr inbounds i8* %745, i64 0
  %746 = load i8* %arrayidx1608, align 1
  %conv1609 = zext i8 %746 to i64
  %747 = load i32* %num_bits, align 4
  %sh_prom1610 = zext i32 %747 to i64
  %shl1611 = shl i64 %conv1609, %sh_prom1610
  %748 = load i8** %pIn_buf_cur, align 8
  %arrayidx1612 = getelementptr inbounds i8* %748, i64 1
  %749 = load i8* %arrayidx1612, align 1
  %conv1613 = zext i8 %749 to i64
  %750 = load i32* %num_bits, align 4
  %add1614 = add i32 %750, 8
  %sh_prom1615 = zext i32 %add1614 to i64
  %shl1616 = shl i64 %conv1613, %sh_prom1615
  %or1617 = or i64 %shl1611, %shl1616
  %751 = load i64* %bit_buf, align 8
  %or1618 = or i64 %751, %or1617
  store i64 %or1618, i64* %bit_buf, align 8
  %752 = load i8** %pIn_buf_cur, align 8
  %add.ptr1619 = getelementptr inbounds i8* %752, i64 2
  store i8* %add.ptr1619, i8** %pIn_buf_cur, align 8
  %753 = load i32* %num_bits, align 4
  %add1620 = add i32 %753, 16
  store i32 %add1620, i32* %num_bits, align 4
  br label %if.end1621

if.end1621:                                       ; preds = %if.else1607, %do.end1606
  br label %if.end1622

if.end1622:                                       ; preds = %if.end1621, %do.body1508
  %754 = load i64* %bit_buf, align 8
  %and1623 = and i64 %754, 1023
  %755 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1624 = getelementptr inbounds %struct.tinfl_decompressor_tag* %755, i32 0, i32 14
  %arrayidx1625 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1624, i32 0, i64 1
  %m_look_up1626 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1625, i32 0, i32 1
  %arrayidx1627 = getelementptr inbounds [1024 x i16]* %m_look_up1626, i32 0, i64 %and1623
  %756 = load i16* %arrayidx1627, align 2
  %conv1628 = sext i16 %756 to i32
  store i32 %conv1628, i32* %temp1509, align 4
  %cmp1629 = icmp sge i32 %conv1628, 0
  br i1 %cmp1629, label %if.then1631, label %if.else1634

if.then1631:                                      ; preds = %if.end1622
  %757 = load i32* %temp1509, align 4
  %shr1632 = ashr i32 %757, 9
  store i32 %shr1632, i32* %code_len1510, align 4
  %758 = load i32* %temp1509, align 4
  %and1633 = and i32 %758, 511
  store i32 %and1633, i32* %temp1509, align 4
  br label %if.end1652

if.else1634:                                      ; preds = %if.end1622
  store i32 10, i32* %code_len1510, align 4
  br label %do.body1635

do.body1635:                                      ; preds = %do.cond1648, %if.else1634
  %759 = load i32* %temp1509, align 4
  %neg1636 = xor i32 %759, -1
  %conv1637 = sext i32 %neg1636 to i64
  %760 = load i64* %bit_buf, align 8
  %761 = load i32* %code_len1510, align 4
  %inc1638 = add i32 %761, 1
  store i32 %inc1638, i32* %code_len1510, align 4
  %sh_prom1639 = zext i32 %761 to i64
  %shr1640 = lshr i64 %760, %sh_prom1639
  %and1641 = and i64 %shr1640, 1
  %add1642 = add i64 %conv1637, %and1641
  %762 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1643 = getelementptr inbounds %struct.tinfl_decompressor_tag* %762, i32 0, i32 14
  %arrayidx1644 = getelementptr inbounds [3 x %struct.tinfl_huff_table]* %m_tables1643, i32 0, i64 1
  %m_tree1645 = getelementptr inbounds %struct.tinfl_huff_table* %arrayidx1644, i32 0, i32 2
  %arrayidx1646 = getelementptr inbounds [576 x i16]* %m_tree1645, i32 0, i64 %add1642
  %763 = load i16* %arrayidx1646, align 2
  %conv1647 = sext i16 %763 to i32
  store i32 %conv1647, i32* %temp1509, align 4
  br label %do.cond1648

do.cond1648:                                      ; preds = %do.body1635
  %764 = load i32* %temp1509, align 4
  %cmp1649 = icmp slt i32 %764, 0
  br i1 %cmp1649, label %do.body1635, label %do.end1651

do.end1651:                                       ; preds = %do.cond1648
  br label %if.end1652

if.end1652:                                       ; preds = %do.end1651, %if.then1631
  %765 = load i32* %temp1509, align 4
  store i32 %765, i32* %dist, align 4
  %766 = load i32* %code_len1510, align 4
  %767 = load i64* %bit_buf, align 8
  %sh_prom1653 = zext i32 %766 to i64
  %shr1654 = lshr i64 %767, %sh_prom1653
  store i64 %shr1654, i64* %bit_buf, align 8
  %768 = load i32* %code_len1510, align 4
  %769 = load i32* %num_bits, align 4
  %sub1655 = sub i32 %769, %768
  store i32 %sub1655, i32* %num_bits, align 4
  br label %do.end1657

do.end1657:                                       ; preds = %if.end1652
  %770 = load i32* %dist, align 4
  %idxprom1658 = zext i32 %770 to i64
  %arrayidx1659 = getelementptr inbounds [32 x i32]* @tinfl_decompress.s_dist_extra, i32 0, i64 %idxprom1658
  %771 = load i32* %arrayidx1659, align 4
  store i32 %771, i32* %num_extra, align 4
  %772 = load i32* %dist, align 4
  %idxprom1660 = zext i32 %772 to i64
  %arrayidx1661 = getelementptr inbounds [32 x i32]* @tinfl_decompress.s_dist_base, i32 0, i64 %idxprom1660
  %773 = load i32* %arrayidx1661, align 4
  store i32 %773, i32* %dist, align 4
  %774 = load i32* %num_extra, align 4
  %tobool1662 = icmp ne i32 %774, 0
  br i1 %tobool1662, label %if.then1663, label %if.end1720

if.then1663:                                      ; preds = %do.end1657
  br label %do.body1665

do.body1665:                                      ; preds = %if.then1663
  %775 = load i32* %num_bits, align 4
  %776 = load i32* %num_extra, align 4
  %cmp1666 = icmp ult i32 %775, %776
  br i1 %cmp1666, label %if.then1668, label %if.end1708

if.then1668:                                      ; preds = %do.body1665
  br label %do.body1669

do.body1669:                                      ; preds = %do.cond1704, %if.then1668
  br label %do.body1671

do.body1671:                                      ; preds = %do.body1669
  %777 = load i8** %pIn_buf_cur, align 8
  %778 = load i8** %pIn_buf_end, align 8
  %cmp1672 = icmp uge i8* %777, %778
  br i1 %cmp1672, label %if.then1674, label %if.else1693

if.then1674:                                      ; preds = %do.body1671
  br label %for.cond1675

for.cond1675:                                     ; preds = %if.end1691, %if.then1674
  %779 = load i32* %decomp_flags.addr, align 4
  %and1676 = and i32 %779, 2
  %tobool1677 = icmp ne i32 %and1676, 0
  br i1 %tobool1677, label %if.then1678, label %if.else1690

if.then1678:                                      ; preds = %for.cond1675
  br label %do.body1679

do.body1679:                                      ; preds = %if.then1678
  store i32 1, i32* %status, align 4
  %780 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1680 = getelementptr inbounds %struct.tinfl_decompressor_tag* %780, i32 0, i32 0
  store i32 27, i32* %m_state1680, align 4
  br label %common_exit

sw.bb1681:                                        ; preds = %if.end
  br label %do.end1683

do.end1683:                                       ; preds = %sw.bb1681
  %781 = load i8** %pIn_buf_cur, align 8
  %782 = load i8** %pIn_buf_end, align 8
  %cmp1684 = icmp ult i8* %781, %782
  br i1 %cmp1684, label %if.then1686, label %if.end1689

if.then1686:                                      ; preds = %do.end1683
  %783 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1687 = getelementptr inbounds i8* %783, i32 1
  store i8* %incdec.ptr1687, i8** %pIn_buf_cur, align 8
  %784 = load i8* %783, align 1
  %conv1688 = zext i8 %784 to i32
  store i32 %conv1688, i32* %c1670, align 4
  br label %for.end1692

if.end1689:                                       ; preds = %do.end1683
  br label %if.end1691

if.else1690:                                      ; preds = %for.cond1675
  store i32 0, i32* %c1670, align 4
  br label %for.end1692

if.end1691:                                       ; preds = %if.end1689
  br label %for.cond1675

for.end1692:                                      ; preds = %if.else1690, %if.then1686
  br label %if.end1696

if.else1693:                                      ; preds = %do.body1671
  %785 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1694 = getelementptr inbounds i8* %785, i32 1
  store i8* %incdec.ptr1694, i8** %pIn_buf_cur, align 8
  %786 = load i8* %785, align 1
  %conv1695 = zext i8 %786 to i32
  store i32 %conv1695, i32* %c1670, align 4
  br label %if.end1696

if.end1696:                                       ; preds = %if.else1693, %for.end1692
  br label %do.end1698

do.end1698:                                       ; preds = %if.end1696
  %787 = load i32* %c1670, align 4
  %conv1699 = zext i32 %787 to i64
  %788 = load i32* %num_bits, align 4
  %sh_prom1700 = zext i32 %788 to i64
  %shl1701 = shl i64 %conv1699, %sh_prom1700
  %789 = load i64* %bit_buf, align 8
  %or1702 = or i64 %789, %shl1701
  store i64 %or1702, i64* %bit_buf, align 8
  %790 = load i32* %num_bits, align 4
  %add1703 = add i32 %790, 8
  store i32 %add1703, i32* %num_bits, align 4
  br label %do.cond1704

do.cond1704:                                      ; preds = %do.end1698
  %791 = load i32* %num_bits, align 4
  %792 = load i32* %num_extra, align 4
  %cmp1705 = icmp ult i32 %791, %792
  br i1 %cmp1705, label %do.body1669, label %do.end1707

do.end1707:                                       ; preds = %do.cond1704
  br label %if.end1708

if.end1708:                                       ; preds = %do.end1707, %do.body1665
  %793 = load i64* %bit_buf, align 8
  %794 = load i32* %num_extra, align 4
  %shl1709 = shl i32 1, %794
  %sub1710 = sub nsw i32 %shl1709, 1
  %conv1711 = sext i32 %sub1710 to i64
  %and1712 = and i64 %793, %conv1711
  %conv1713 = trunc i64 %and1712 to i32
  store i32 %conv1713, i32* %extra_bits1664, align 4
  %795 = load i32* %num_extra, align 4
  %796 = load i64* %bit_buf, align 8
  %sh_prom1714 = zext i32 %795 to i64
  %shr1715 = lshr i64 %796, %sh_prom1714
  store i64 %shr1715, i64* %bit_buf, align 8
  %797 = load i32* %num_extra, align 4
  %798 = load i32* %num_bits, align 4
  %sub1716 = sub i32 %798, %797
  store i32 %sub1716, i32* %num_bits, align 4
  br label %do.end1718

do.end1718:                                       ; preds = %if.end1708
  %799 = load i32* %extra_bits1664, align 4
  %800 = load i32* %dist, align 4
  %add1719 = add i32 %800, %799
  store i32 %add1719, i32* %dist, align 4
  br label %if.end1720

if.end1720:                                       ; preds = %do.end1718, %do.end1657
  %801 = load i8** %pOut_buf_cur, align 8
  %802 = load i8** %pOut_buf_start.addr, align 8
  %sub.ptr.lhs.cast1721 = ptrtoint i8* %801 to i64
  %sub.ptr.rhs.cast1722 = ptrtoint i8* %802 to i64
  %sub.ptr.sub1723 = sub i64 %sub.ptr.lhs.cast1721, %sub.ptr.rhs.cast1722
  store i64 %sub.ptr.sub1723, i64* %dist_from_out_buf_start, align 8
  %803 = load i32* %dist, align 4
  %conv1724 = zext i32 %803 to i64
  %804 = load i64* %dist_from_out_buf_start, align 8
  %cmp1725 = icmp ugt i64 %conv1724, %804
  br i1 %cmp1725, label %land.lhs.true1727, label %if.end1740

land.lhs.true1727:                                ; preds = %if.end1720
  %805 = load i32* %decomp_flags.addr, align 4
  %and1728 = and i32 %805, 4
  %tobool1729 = icmp ne i32 %and1728, 0
  br i1 %tobool1729, label %if.then1730, label %if.end1740

if.then1730:                                      ; preds = %land.lhs.true1727
  br label %do.body1731

do.body1731:                                      ; preds = %if.then1730
  br label %for.cond1732

for.cond1732:                                     ; preds = %do.end1737, %do.body1731
  br label %do.body1733

do.body1733:                                      ; preds = %for.cond1732
  store i32 -1, i32* %status, align 4
  %806 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1734 = getelementptr inbounds %struct.tinfl_decompressor_tag* %806, i32 0, i32 0
  store i32 37, i32* %m_state1734, align 4
  br label %common_exit

sw.bb1735:                                        ; preds = %if.end
  br label %do.end1737

do.end1737:                                       ; preds = %sw.bb1735
  br label %for.cond1732

do.end1739:                                       ; No predecessors!
  br label %if.end1740

if.end1740:                                       ; preds = %do.end1739, %land.lhs.true1727, %if.end1720
  %807 = load i8** %pOut_buf_start.addr, align 8
  %808 = load i64* %dist_from_out_buf_start, align 8
  %809 = load i32* %dist, align 4
  %conv1741 = zext i32 %809 to i64
  %sub1742 = sub i64 %808, %conv1741
  %810 = load i64* %out_buf_size_mask, align 8
  %and1743 = and i64 %sub1742, %810
  %add.ptr1744 = getelementptr inbounds i8* %807, i64 %and1743
  store i8* %add.ptr1744, i8** %pSrc, align 8
  %811 = load i8** %pOut_buf_cur, align 8
  %812 = load i8** %pSrc, align 8
  %cmp1745 = icmp ugt i8* %811, %812
  br i1 %cmp1745, label %cond.true1747, label %cond.false1748

cond.true1747:                                    ; preds = %if.end1740
  %813 = load i8** %pOut_buf_cur, align 8
  br label %cond.end1749

cond.false1748:                                   ; preds = %if.end1740
  %814 = load i8** %pSrc, align 8
  br label %cond.end1749

cond.end1749:                                     ; preds = %cond.false1748, %cond.true1747
  %cond1750 = phi i8* [ %813, %cond.true1747 ], [ %814, %cond.false1748 ]
  %815 = load i32* %counter, align 4
  %idx.ext1751 = zext i32 %815 to i64
  %add.ptr1752 = getelementptr inbounds i8* %cond1750, i64 %idx.ext1751
  %816 = load i8** %pOut_buf_end, align 8
  %cmp1753 = icmp ugt i8* %add.ptr1752, %816
  br i1 %cmp1753, label %if.then1755, label %if.else1777

if.then1755:                                      ; preds = %cond.end1749
  br label %while.cond1756

while.cond1756:                                   ; preds = %while.end1769, %if.then1755
  %817 = load i32* %counter, align 4
  %dec1757 = add i32 %817, -1
  store i32 %dec1757, i32* %counter, align 4
  %tobool1758 = icmp ne i32 %817, 0
  br i1 %tobool1758, label %while.body1759, label %while.end1776

while.body1759:                                   ; preds = %while.cond1756
  br label %while.cond1760

while.cond1760:                                   ; preds = %do.end1768, %while.body1759
  %818 = load i8** %pOut_buf_cur, align 8
  %819 = load i8** %pOut_buf_end, align 8
  %cmp1761 = icmp uge i8* %818, %819
  br i1 %cmp1761, label %while.body1763, label %while.end1769

while.body1763:                                   ; preds = %while.cond1760
  br label %do.body1764

do.body1764:                                      ; preds = %while.body1763
  store i32 2, i32* %status, align 4
  %820 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1765 = getelementptr inbounds %struct.tinfl_decompressor_tag* %820, i32 0, i32 0
  store i32 53, i32* %m_state1765, align 4
  br label %common_exit

sw.bb1766:                                        ; preds = %if.end
  br label %do.end1768

do.end1768:                                       ; preds = %sw.bb1766
  br label %while.cond1760

while.end1769:                                    ; preds = %while.cond1760
  %821 = load i64* %dist_from_out_buf_start, align 8
  %inc1770 = add i64 %821, 1
  store i64 %inc1770, i64* %dist_from_out_buf_start, align 8
  %822 = load i32* %dist, align 4
  %conv1771 = zext i32 %822 to i64
  %sub1772 = sub i64 %821, %conv1771
  %823 = load i64* %out_buf_size_mask, align 8
  %and1773 = and i64 %sub1772, %823
  %824 = load i8** %pOut_buf_start.addr, align 8
  %arrayidx1774 = getelementptr inbounds i8* %824, i64 %and1773
  %825 = load i8* %arrayidx1774, align 1
  %826 = load i8** %pOut_buf_cur, align 8
  %incdec.ptr1775 = getelementptr inbounds i8* %826, i32 1
  store i8* %incdec.ptr1775, i8** %pOut_buf_cur, align 8
  store i8 %825, i8* %826, align 1
  br label %while.cond1756

while.end1776:                                    ; preds = %while.cond1756
  br label %for.cond1167

if.else1777:                                      ; preds = %cond.end1749
  %827 = load i32* %counter, align 4
  %cmp1778 = icmp uge i32 %827, 9
  br i1 %cmp1778, label %land.lhs.true1780, label %if.end1816

land.lhs.true1780:                                ; preds = %if.else1777
  %828 = load i32* %counter, align 4
  %829 = load i32* %dist, align 4
  %cmp1781 = icmp ule i32 %828, %829
  br i1 %cmp1781, label %if.then1783, label %if.end1816

if.then1783:                                      ; preds = %land.lhs.true1780
  %830 = load i8** %pSrc, align 8
  %831 = load i32* %counter, align 4
  %and1784 = and i32 %831, -8
  %idx.ext1785 = zext i32 %and1784 to i64
  %add.ptr1786 = getelementptr inbounds i8* %830, i64 %idx.ext1785
  store i8* %add.ptr1786, i8** %pSrc_end, align 8
  br label %do.body1787

do.body1787:                                      ; preds = %do.cond1793, %if.then1783
  %832 = load i8** %pSrc, align 8
  %833 = bitcast i8* %832 to i32*
  %arrayidx1788 = getelementptr inbounds i32* %833, i64 0
  %834 = load i32* %arrayidx1788, align 4
  %835 = load i8** %pOut_buf_cur, align 8
  %836 = bitcast i8* %835 to i32*
  %arrayidx1789 = getelementptr inbounds i32* %836, i64 0
  store i32 %834, i32* %arrayidx1789, align 4
  %837 = load i8** %pSrc, align 8
  %838 = bitcast i8* %837 to i32*
  %arrayidx1790 = getelementptr inbounds i32* %838, i64 1
  %839 = load i32* %arrayidx1790, align 4
  %840 = load i8** %pOut_buf_cur, align 8
  %841 = bitcast i8* %840 to i32*
  %arrayidx1791 = getelementptr inbounds i32* %841, i64 1
  store i32 %839, i32* %arrayidx1791, align 4
  %842 = load i8** %pOut_buf_cur, align 8
  %add.ptr1792 = getelementptr inbounds i8* %842, i64 8
  store i8* %add.ptr1792, i8** %pOut_buf_cur, align 8
  br label %do.cond1793

do.cond1793:                                      ; preds = %do.body1787
  %843 = load i8** %pSrc, align 8
  %add.ptr1794 = getelementptr inbounds i8* %843, i64 8
  store i8* %add.ptr1794, i8** %pSrc, align 8
  %844 = load i8** %pSrc_end, align 8
  %cmp1795 = icmp ult i8* %add.ptr1794, %844
  br i1 %cmp1795, label %do.body1787, label %do.end1797

do.end1797:                                       ; preds = %do.cond1793
  %845 = load i32* %counter, align 4
  %and1798 = and i32 %845, 7
  store i32 %and1798, i32* %counter, align 4
  %cmp1799 = icmp ult i32 %and1798, 3
  br i1 %cmp1799, label %if.then1801, label %if.end1815

if.then1801:                                      ; preds = %do.end1797
  %846 = load i32* %counter, align 4
  %tobool1802 = icmp ne i32 %846, 0
  br i1 %tobool1802, label %if.then1803, label %if.end1814

if.then1803:                                      ; preds = %if.then1801
  %847 = load i8** %pSrc, align 8
  %arrayidx1804 = getelementptr inbounds i8* %847, i64 0
  %848 = load i8* %arrayidx1804, align 1
  %849 = load i8** %pOut_buf_cur, align 8
  %arrayidx1805 = getelementptr inbounds i8* %849, i64 0
  store i8 %848, i8* %arrayidx1805, align 1
  %850 = load i32* %counter, align 4
  %cmp1806 = icmp ugt i32 %850, 1
  br i1 %cmp1806, label %if.then1808, label %if.end1811

if.then1808:                                      ; preds = %if.then1803
  %851 = load i8** %pSrc, align 8
  %arrayidx1809 = getelementptr inbounds i8* %851, i64 1
  %852 = load i8* %arrayidx1809, align 1
  %853 = load i8** %pOut_buf_cur, align 8
  %arrayidx1810 = getelementptr inbounds i8* %853, i64 1
  store i8 %852, i8* %arrayidx1810, align 1
  br label %if.end1811

if.end1811:                                       ; preds = %if.then1808, %if.then1803
  %854 = load i32* %counter, align 4
  %855 = load i8** %pOut_buf_cur, align 8
  %idx.ext1812 = zext i32 %854 to i64
  %add.ptr1813 = getelementptr inbounds i8* %855, i64 %idx.ext1812
  store i8* %add.ptr1813, i8** %pOut_buf_cur, align 8
  br label %if.end1814

if.end1814:                                       ; preds = %if.end1811, %if.then1801
  br label %for.cond1167

if.end1815:                                       ; preds = %do.end1797
  br label %if.end1816

if.end1816:                                       ; preds = %if.end1815, %land.lhs.true1780, %if.else1777
  br label %if.end1817

if.end1817:                                       ; preds = %if.end1816
  br label %do.body1818

do.body1818:                                      ; preds = %do.cond1827, %if.end1817
  %856 = load i8** %pSrc, align 8
  %arrayidx1819 = getelementptr inbounds i8* %856, i64 0
  %857 = load i8* %arrayidx1819, align 1
  %858 = load i8** %pOut_buf_cur, align 8
  %arrayidx1820 = getelementptr inbounds i8* %858, i64 0
  store i8 %857, i8* %arrayidx1820, align 1
  %859 = load i8** %pSrc, align 8
  %arrayidx1821 = getelementptr inbounds i8* %859, i64 1
  %860 = load i8* %arrayidx1821, align 1
  %861 = load i8** %pOut_buf_cur, align 8
  %arrayidx1822 = getelementptr inbounds i8* %861, i64 1
  store i8 %860, i8* %arrayidx1822, align 1
  %862 = load i8** %pSrc, align 8
  %arrayidx1823 = getelementptr inbounds i8* %862, i64 2
  %863 = load i8* %arrayidx1823, align 1
  %864 = load i8** %pOut_buf_cur, align 8
  %arrayidx1824 = getelementptr inbounds i8* %864, i64 2
  store i8 %863, i8* %arrayidx1824, align 1
  %865 = load i8** %pOut_buf_cur, align 8
  %add.ptr1825 = getelementptr inbounds i8* %865, i64 3
  store i8* %add.ptr1825, i8** %pOut_buf_cur, align 8
  %866 = load i8** %pSrc, align 8
  %add.ptr1826 = getelementptr inbounds i8* %866, i64 3
  store i8* %add.ptr1826, i8** %pSrc, align 8
  br label %do.cond1827

do.cond1827:                                      ; preds = %do.body1818
  %867 = load i32* %counter, align 4
  %sub1828 = sub i32 %867, 3
  store i32 %sub1828, i32* %counter, align 4
  %cmp1829 = icmp sgt i32 %sub1828, 2
  br i1 %cmp1829, label %do.body1818, label %do.end1831

do.end1831:                                       ; preds = %do.cond1827
  %868 = load i32* %counter, align 4
  %cmp1832 = icmp sgt i32 %868, 0
  br i1 %cmp1832, label %if.then1834, label %if.end1845

if.then1834:                                      ; preds = %do.end1831
  %869 = load i8** %pSrc, align 8
  %arrayidx1835 = getelementptr inbounds i8* %869, i64 0
  %870 = load i8* %arrayidx1835, align 1
  %871 = load i8** %pOut_buf_cur, align 8
  %arrayidx1836 = getelementptr inbounds i8* %871, i64 0
  store i8 %870, i8* %arrayidx1836, align 1
  %872 = load i32* %counter, align 4
  %cmp1837 = icmp sgt i32 %872, 1
  br i1 %cmp1837, label %if.then1839, label %if.end1842

if.then1839:                                      ; preds = %if.then1834
  %873 = load i8** %pSrc, align 8
  %arrayidx1840 = getelementptr inbounds i8* %873, i64 1
  %874 = load i8* %arrayidx1840, align 1
  %875 = load i8** %pOut_buf_cur, align 8
  %arrayidx1841 = getelementptr inbounds i8* %875, i64 1
  store i8 %874, i8* %arrayidx1841, align 1
  br label %if.end1842

if.end1842:                                       ; preds = %if.then1839, %if.then1834
  %876 = load i32* %counter, align 4
  %877 = load i8** %pOut_buf_cur, align 8
  %idx.ext1843 = zext i32 %876 to i64
  %add.ptr1844 = getelementptr inbounds i8* %877, i64 %idx.ext1843
  store i8* %add.ptr1844, i8** %pOut_buf_cur, align 8
  br label %if.end1845

if.end1845:                                       ; preds = %if.end1842, %do.end1831
  br label %for.cond1167

for.end1846:                                      ; preds = %if.then1442
  br label %if.end1847

if.end1847:                                       ; preds = %for.end1846, %do.end490
  br label %if.end1848

if.end1848:                                       ; preds = %if.end1847, %while.end476
  br label %do.cond1849

do.cond1849:                                      ; preds = %if.end1848
  %878 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_final1850 = getelementptr inbounds %struct.tinfl_decompressor_tag* %878, i32 0, i32 5
  %879 = load i32* %m_final1850, align 4
  %and1851 = and i32 %879, 1
  %tobool1852 = icmp ne i32 %and1851, 0
  %lnot = xor i1 %tobool1852, true
  br i1 %lnot, label %do.body100, label %do.end1853

do.end1853:                                       ; preds = %do.cond1849
  %880 = load i32* %decomp_flags.addr, align 4
  %and1854 = and i32 %880, 1
  %tobool1855 = icmp ne i32 %and1854, 0
  br i1 %tobool1855, label %if.then1856, label %if.end2004

if.then1856:                                      ; preds = %do.end1853
  br label %do.body1857

do.body1857:                                      ; preds = %if.then1856
  %881 = load i32* %num_bits, align 4
  %882 = load i32* %num_bits, align 4
  %and1858 = and i32 %882, 7
  %cmp1859 = icmp ult i32 %881, %and1858
  br i1 %cmp1859, label %if.then1861, label %if.end1902

if.then1861:                                      ; preds = %do.body1857
  br label %do.body1862

do.body1862:                                      ; preds = %do.cond1897, %if.then1861
  br label %do.body1864

do.body1864:                                      ; preds = %do.body1862
  %883 = load i8** %pIn_buf_cur, align 8
  %884 = load i8** %pIn_buf_end, align 8
  %cmp1865 = icmp uge i8* %883, %884
  br i1 %cmp1865, label %if.then1867, label %if.else1886

if.then1867:                                      ; preds = %do.body1864
  br label %for.cond1868

for.cond1868:                                     ; preds = %if.end1884, %if.then1867
  %885 = load i32* %decomp_flags.addr, align 4
  %and1869 = and i32 %885, 2
  %tobool1870 = icmp ne i32 %and1869, 0
  br i1 %tobool1870, label %if.then1871, label %if.else1883

if.then1871:                                      ; preds = %for.cond1868
  br label %do.body1872

do.body1872:                                      ; preds = %if.then1871
  store i32 1, i32* %status, align 4
  %886 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1873 = getelementptr inbounds %struct.tinfl_decompressor_tag* %886, i32 0, i32 0
  store i32 32, i32* %m_state1873, align 4
  br label %common_exit

sw.bb1874:                                        ; preds = %if.end
  br label %do.end1876

do.end1876:                                       ; preds = %sw.bb1874
  %887 = load i8** %pIn_buf_cur, align 8
  %888 = load i8** %pIn_buf_end, align 8
  %cmp1877 = icmp ult i8* %887, %888
  br i1 %cmp1877, label %if.then1879, label %if.end1882

if.then1879:                                      ; preds = %do.end1876
  %889 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1880 = getelementptr inbounds i8* %889, i32 1
  store i8* %incdec.ptr1880, i8** %pIn_buf_cur, align 8
  %890 = load i8* %889, align 1
  %conv1881 = zext i8 %890 to i32
  store i32 %conv1881, i32* %c1863, align 4
  br label %for.end1885

if.end1882:                                       ; preds = %do.end1876
  br label %if.end1884

if.else1883:                                      ; preds = %for.cond1868
  store i32 0, i32* %c1863, align 4
  br label %for.end1885

if.end1884:                                       ; preds = %if.end1882
  br label %for.cond1868

for.end1885:                                      ; preds = %if.else1883, %if.then1879
  br label %if.end1889

if.else1886:                                      ; preds = %do.body1864
  %891 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1887 = getelementptr inbounds i8* %891, i32 1
  store i8* %incdec.ptr1887, i8** %pIn_buf_cur, align 8
  %892 = load i8* %891, align 1
  %conv1888 = zext i8 %892 to i32
  store i32 %conv1888, i32* %c1863, align 4
  br label %if.end1889

if.end1889:                                       ; preds = %if.else1886, %for.end1885
  br label %do.end1891

do.end1891:                                       ; preds = %if.end1889
  %893 = load i32* %c1863, align 4
  %conv1892 = zext i32 %893 to i64
  %894 = load i32* %num_bits, align 4
  %sh_prom1893 = zext i32 %894 to i64
  %shl1894 = shl i64 %conv1892, %sh_prom1893
  %895 = load i64* %bit_buf, align 8
  %or1895 = or i64 %895, %shl1894
  store i64 %or1895, i64* %bit_buf, align 8
  %896 = load i32* %num_bits, align 4
  %add1896 = add i32 %896, 8
  store i32 %add1896, i32* %num_bits, align 4
  br label %do.cond1897

do.cond1897:                                      ; preds = %do.end1891
  %897 = load i32* %num_bits, align 4
  %898 = load i32* %num_bits, align 4
  %and1898 = and i32 %898, 7
  %cmp1899 = icmp ult i32 %897, %and1898
  br i1 %cmp1899, label %do.body1862, label %do.end1901

do.end1901:                                       ; preds = %do.cond1897
  br label %if.end1902

if.end1902:                                       ; preds = %do.end1901, %do.body1857
  %899 = load i32* %num_bits, align 4
  %and1903 = and i32 %899, 7
  %900 = load i64* %bit_buf, align 8
  %sh_prom1904 = zext i32 %and1903 to i64
  %shr1905 = lshr i64 %900, %sh_prom1904
  store i64 %shr1905, i64* %bit_buf, align 8
  %901 = load i32* %num_bits, align 4
  %and1906 = and i32 %901, 7
  %902 = load i32* %num_bits, align 4
  %sub1907 = sub i32 %902, %and1906
  store i32 %sub1907, i32* %num_bits, align 4
  br label %do.end1909

do.end1909:                                       ; preds = %if.end1902
  store i32 0, i32* %counter, align 4
  br label %for.cond1910

for.cond1910:                                     ; preds = %for.inc2001, %do.end1909
  %903 = load i32* %counter, align 4
  %cmp1911 = icmp ult i32 %903, 4
  br i1 %cmp1911, label %for.body1913, label %for.end2003

for.body1913:                                     ; preds = %for.cond1910
  %904 = load i32* %num_bits, align 4
  %tobool1915 = icmp ne i32 %904, 0
  br i1 %tobool1915, label %if.then1916, label %if.else1967

if.then1916:                                      ; preds = %for.body1913
  br label %do.body1917

do.body1917:                                      ; preds = %if.then1916
  %905 = load i32* %num_bits, align 4
  %cmp1918 = icmp ult i32 %905, 8
  br i1 %cmp1918, label %if.then1920, label %if.end1960

if.then1920:                                      ; preds = %do.body1917
  br label %do.body1921

do.body1921:                                      ; preds = %do.cond1956, %if.then1920
  br label %do.body1923

do.body1923:                                      ; preds = %do.body1921
  %906 = load i8** %pIn_buf_cur, align 8
  %907 = load i8** %pIn_buf_end, align 8
  %cmp1924 = icmp uge i8* %906, %907
  br i1 %cmp1924, label %if.then1926, label %if.else1945

if.then1926:                                      ; preds = %do.body1923
  br label %for.cond1927

for.cond1927:                                     ; preds = %if.end1943, %if.then1926
  %908 = load i32* %decomp_flags.addr, align 4
  %and1928 = and i32 %908, 2
  %tobool1929 = icmp ne i32 %and1928, 0
  br i1 %tobool1929, label %if.then1930, label %if.else1942

if.then1930:                                      ; preds = %for.cond1927
  br label %do.body1931

do.body1931:                                      ; preds = %if.then1930
  store i32 1, i32* %status, align 4
  %909 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1932 = getelementptr inbounds %struct.tinfl_decompressor_tag* %909, i32 0, i32 0
  store i32 41, i32* %m_state1932, align 4
  br label %common_exit

sw.bb1933:                                        ; preds = %if.end
  br label %do.end1935

do.end1935:                                       ; preds = %sw.bb1933
  %910 = load i8** %pIn_buf_cur, align 8
  %911 = load i8** %pIn_buf_end, align 8
  %cmp1936 = icmp ult i8* %910, %911
  br i1 %cmp1936, label %if.then1938, label %if.end1941

if.then1938:                                      ; preds = %do.end1935
  %912 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1939 = getelementptr inbounds i8* %912, i32 1
  store i8* %incdec.ptr1939, i8** %pIn_buf_cur, align 8
  %913 = load i8* %912, align 1
  %conv1940 = zext i8 %913 to i32
  store i32 %conv1940, i32* %c1922, align 4
  br label %for.end1944

if.end1941:                                       ; preds = %do.end1935
  br label %if.end1943

if.else1942:                                      ; preds = %for.cond1927
  store i32 0, i32* %c1922, align 4
  br label %for.end1944

if.end1943:                                       ; preds = %if.end1941
  br label %for.cond1927

for.end1944:                                      ; preds = %if.else1942, %if.then1938
  br label %if.end1948

if.else1945:                                      ; preds = %do.body1923
  %914 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1946 = getelementptr inbounds i8* %914, i32 1
  store i8* %incdec.ptr1946, i8** %pIn_buf_cur, align 8
  %915 = load i8* %914, align 1
  %conv1947 = zext i8 %915 to i32
  store i32 %conv1947, i32* %c1922, align 4
  br label %if.end1948

if.end1948:                                       ; preds = %if.else1945, %for.end1944
  br label %do.end1950

do.end1950:                                       ; preds = %if.end1948
  %916 = load i32* %c1922, align 4
  %conv1951 = zext i32 %916 to i64
  %917 = load i32* %num_bits, align 4
  %sh_prom1952 = zext i32 %917 to i64
  %shl1953 = shl i64 %conv1951, %sh_prom1952
  %918 = load i64* %bit_buf, align 8
  %or1954 = or i64 %918, %shl1953
  store i64 %or1954, i64* %bit_buf, align 8
  %919 = load i32* %num_bits, align 4
  %add1955 = add i32 %919, 8
  store i32 %add1955, i32* %num_bits, align 4
  br label %do.cond1956

do.cond1956:                                      ; preds = %do.end1950
  %920 = load i32* %num_bits, align 4
  %cmp1957 = icmp ult i32 %920, 8
  br i1 %cmp1957, label %do.body1921, label %do.end1959

do.end1959:                                       ; preds = %do.cond1956
  br label %if.end1960

if.end1960:                                       ; preds = %do.end1959, %do.body1917
  %921 = load i64* %bit_buf, align 8
  %and1961 = and i64 %921, 255
  %conv1962 = trunc i64 %and1961 to i32
  store i32 %conv1962, i32* %s1914, align 4
  %922 = load i64* %bit_buf, align 8
  %shr1963 = lshr i64 %922, 8
  store i64 %shr1963, i64* %bit_buf, align 8
  %923 = load i32* %num_bits, align 4
  %sub1964 = sub i32 %923, 8
  store i32 %sub1964, i32* %num_bits, align 4
  br label %do.end1966

do.end1966:                                       ; preds = %if.end1960
  br label %if.end1996

if.else1967:                                      ; preds = %for.body1913
  br label %do.body1968

do.body1968:                                      ; preds = %if.else1967
  %924 = load i8** %pIn_buf_cur, align 8
  %925 = load i8** %pIn_buf_end, align 8
  %cmp1969 = icmp uge i8* %924, %925
  br i1 %cmp1969, label %if.then1971, label %if.else1990

if.then1971:                                      ; preds = %do.body1968
  br label %for.cond1972

for.cond1972:                                     ; preds = %if.end1988, %if.then1971
  %926 = load i32* %decomp_flags.addr, align 4
  %and1973 = and i32 %926, 2
  %tobool1974 = icmp ne i32 %and1973, 0
  br i1 %tobool1974, label %if.then1975, label %if.else1987

if.then1975:                                      ; preds = %for.cond1972
  br label %do.body1976

do.body1976:                                      ; preds = %if.then1975
  store i32 1, i32* %status, align 4
  %927 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1977 = getelementptr inbounds %struct.tinfl_decompressor_tag* %927, i32 0, i32 0
  store i32 42, i32* %m_state1977, align 4
  br label %common_exit

sw.bb1978:                                        ; preds = %if.end
  br label %do.end1980

do.end1980:                                       ; preds = %sw.bb1978
  %928 = load i8** %pIn_buf_cur, align 8
  %929 = load i8** %pIn_buf_end, align 8
  %cmp1981 = icmp ult i8* %928, %929
  br i1 %cmp1981, label %if.then1983, label %if.end1986

if.then1983:                                      ; preds = %do.end1980
  %930 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1984 = getelementptr inbounds i8* %930, i32 1
  store i8* %incdec.ptr1984, i8** %pIn_buf_cur, align 8
  %931 = load i8* %930, align 1
  %conv1985 = zext i8 %931 to i32
  store i32 %conv1985, i32* %s1914, align 4
  br label %for.end1989

if.end1986:                                       ; preds = %do.end1980
  br label %if.end1988

if.else1987:                                      ; preds = %for.cond1972
  store i32 0, i32* %s1914, align 4
  br label %for.end1989

if.end1988:                                       ; preds = %if.end1986
  br label %for.cond1972

for.end1989:                                      ; preds = %if.else1987, %if.then1983
  br label %if.end1993

if.else1990:                                      ; preds = %do.body1968
  %932 = load i8** %pIn_buf_cur, align 8
  %incdec.ptr1991 = getelementptr inbounds i8* %932, i32 1
  store i8* %incdec.ptr1991, i8** %pIn_buf_cur, align 8
  %933 = load i8* %932, align 1
  %conv1992 = zext i8 %933 to i32
  store i32 %conv1992, i32* %s1914, align 4
  br label %if.end1993

if.end1993:                                       ; preds = %if.else1990, %for.end1989
  br label %do.end1995

do.end1995:                                       ; preds = %if.end1993
  br label %if.end1996

if.end1996:                                       ; preds = %do.end1995, %do.end1966
  %934 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_z_adler321997 = getelementptr inbounds %struct.tinfl_decompressor_tag* %934, i32 0, i32 4
  %935 = load i32* %m_z_adler321997, align 4
  %shl1998 = shl i32 %935, 8
  %936 = load i32* %s1914, align 4
  %or1999 = or i32 %shl1998, %936
  %937 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_z_adler322000 = getelementptr inbounds %struct.tinfl_decompressor_tag* %937, i32 0, i32 4
  store i32 %or1999, i32* %m_z_adler322000, align 4
  br label %for.inc2001

for.inc2001:                                      ; preds = %if.end1996
  %938 = load i32* %counter, align 4
  %inc2002 = add i32 %938, 1
  store i32 %inc2002, i32* %counter, align 4
  br label %for.cond1910

for.end2003:                                      ; preds = %for.cond1910
  br label %if.end2004

if.end2004:                                       ; preds = %for.end2003, %do.end1853
  br label %do.body2005

do.body2005:                                      ; preds = %if.end2004
  br label %for.cond2006

for.cond2006:                                     ; preds = %do.end2011, %do.body2005
  br label %do.body2007

do.body2007:                                      ; preds = %for.cond2006
  store i32 0, i32* %status, align 4
  %939 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state2008 = getelementptr inbounds %struct.tinfl_decompressor_tag* %939, i32 0, i32 0
  store i32 34, i32* %m_state2008, align 4
  br label %common_exit

sw.bb2009:                                        ; preds = %if.end
  br label %do.end2011

do.end2011:                                       ; preds = %sw.bb2009
  br label %for.cond2006

do.end2013:                                       ; No predecessors!
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end2013, %if.end
  br label %common_exit

common_exit:                                      ; preds = %sw.epilog, %do.body2007, %do.body1976, %do.body1931, %do.body1872, %do.body1764, %do.body1733, %do.body1679, %do.body1578, %do.body1466, %do.body1339, %do.body1251, %do.body1135, %do.body1063, %do.body1037, %do.body942, %do.body747, %do.body644, %do.body557, %do.body484, %do.body419, %do.body411, %do.body398, %do.body383, %do.body343, %do.body319, %do.body269, %do.body224, %do.body167, %do.body114, %do.body93, %do.body36, %do.body13
  %940 = load i32* %num_bits, align 4
  %941 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_num_bits2014 = getelementptr inbounds %struct.tinfl_decompressor_tag* %941, i32 0, i32 1
  store i32 %940, i32* %m_num_bits2014, align 4
  %942 = load i64* %bit_buf, align 8
  %943 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_bit_buf2015 = getelementptr inbounds %struct.tinfl_decompressor_tag* %943, i32 0, i32 12
  store i64 %942, i64* %m_bit_buf2015, align 8
  %944 = load i32* %dist, align 4
  %945 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_dist2016 = getelementptr inbounds %struct.tinfl_decompressor_tag* %945, i32 0, i32 8
  store i32 %944, i32* %m_dist2016, align 4
  %946 = load i32* %counter, align 4
  %947 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_counter2017 = getelementptr inbounds %struct.tinfl_decompressor_tag* %947, i32 0, i32 9
  store i32 %946, i32* %m_counter2017, align 4
  %948 = load i32* %num_extra, align 4
  %949 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_num_extra2018 = getelementptr inbounds %struct.tinfl_decompressor_tag* %949, i32 0, i32 10
  store i32 %948, i32* %m_num_extra2018, align 4
  %950 = load i64* %dist_from_out_buf_start, align 8
  %951 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_dist_from_out_buf_start2019 = getelementptr inbounds %struct.tinfl_decompressor_tag* %951, i32 0, i32 13
  store i64 %950, i64* %m_dist_from_out_buf_start2019, align 8
  %952 = load i8** %pIn_buf_cur, align 8
  %953 = load i8** %pIn_buf_next.addr, align 8
  %sub.ptr.lhs.cast2020 = ptrtoint i8* %952 to i64
  %sub.ptr.rhs.cast2021 = ptrtoint i8* %953 to i64
  %sub.ptr.sub2022 = sub i64 %sub.ptr.lhs.cast2020, %sub.ptr.rhs.cast2021
  %954 = load i64** %pIn_buf_size.addr, align 8
  store i64 %sub.ptr.sub2022, i64* %954, align 8
  %955 = load i8** %pOut_buf_cur, align 8
  %956 = load i8** %pOut_buf_next.addr, align 8
  %sub.ptr.lhs.cast2023 = ptrtoint i8* %955 to i64
  %sub.ptr.rhs.cast2024 = ptrtoint i8* %956 to i64
  %sub.ptr.sub2025 = sub i64 %sub.ptr.lhs.cast2023, %sub.ptr.rhs.cast2024
  %957 = load i64** %pOut_buf_size.addr, align 8
  store i64 %sub.ptr.sub2025, i64* %957, align 8
  %958 = load i32* %decomp_flags.addr, align 4
  %and2026 = and i32 %958, 9
  %tobool2027 = icmp ne i32 %and2026, 0
  br i1 %tobool2027, label %land.lhs.true2028, label %if.end2114

land.lhs.true2028:                                ; preds = %common_exit
  %959 = load i32* %status, align 4
  %cmp2029 = icmp sge i32 %959, 0
  br i1 %cmp2029, label %if.then2031, label %if.end2114

if.then2031:                                      ; preds = %land.lhs.true2028
  %960 = load i8** %pOut_buf_next.addr, align 8
  store i8* %960, i8** %ptr, align 8
  %961 = load i64** %pOut_buf_size.addr, align 8
  %962 = load i64* %961, align 8
  store i64 %962, i64* %buf_len, align 8
  %963 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_check_adler322033 = getelementptr inbounds %struct.tinfl_decompressor_tag* %963, i32 0, i32 7
  %964 = load i32* %m_check_adler322033, align 4
  %and2034 = and i32 %964, 65535
  store i32 %and2034, i32* %s1, align 4
  %965 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_check_adler322035 = getelementptr inbounds %struct.tinfl_decompressor_tag* %965, i32 0, i32 7
  %966 = load i32* %m_check_adler322035, align 4
  %shr2036 = lshr i32 %966, 16
  store i32 %shr2036, i32* %s2, align 4
  %967 = load i64* %buf_len, align 8
  %rem2037 = urem i64 %967, 5552
  store i64 %rem2037, i64* %block_len, align 8
  br label %while.cond2038

while.cond2038:                                   ; preds = %for.end2094, %if.then2031
  %968 = load i64* %buf_len, align 8
  %tobool2039 = icmp ne i64 %968, 0
  br i1 %tobool2039, label %while.body2040, label %while.end2098

while.body2040:                                   ; preds = %while.cond2038
  store i32 0, i32* %i2032, align 4
  br label %for.cond2041

for.cond2041:                                     ; preds = %for.inc2079, %while.body2040
  %969 = load i32* %i2032, align 4
  %add2042 = add i32 %969, 7
  %conv2043 = zext i32 %add2042 to i64
  %970 = load i64* %block_len, align 8
  %cmp2044 = icmp ult i64 %conv2043, %970
  br i1 %cmp2044, label %for.body2046, label %for.end2082

for.body2046:                                     ; preds = %for.cond2041
  %971 = load i8** %ptr, align 8
  %arrayidx2047 = getelementptr inbounds i8* %971, i64 0
  %972 = load i8* %arrayidx2047, align 1
  %conv2048 = zext i8 %972 to i32
  %973 = load i32* %s1, align 4
  %add2049 = add i32 %973, %conv2048
  store i32 %add2049, i32* %s1, align 4
  %974 = load i32* %s1, align 4
  %975 = load i32* %s2, align 4
  %add2050 = add i32 %975, %974
  store i32 %add2050, i32* %s2, align 4
  %976 = load i8** %ptr, align 8
  %arrayidx2051 = getelementptr inbounds i8* %976, i64 1
  %977 = load i8* %arrayidx2051, align 1
  %conv2052 = zext i8 %977 to i32
  %978 = load i32* %s1, align 4
  %add2053 = add i32 %978, %conv2052
  store i32 %add2053, i32* %s1, align 4
  %979 = load i32* %s1, align 4
  %980 = load i32* %s2, align 4
  %add2054 = add i32 %980, %979
  store i32 %add2054, i32* %s2, align 4
  %981 = load i8** %ptr, align 8
  %arrayidx2055 = getelementptr inbounds i8* %981, i64 2
  %982 = load i8* %arrayidx2055, align 1
  %conv2056 = zext i8 %982 to i32
  %983 = load i32* %s1, align 4
  %add2057 = add i32 %983, %conv2056
  store i32 %add2057, i32* %s1, align 4
  %984 = load i32* %s1, align 4
  %985 = load i32* %s2, align 4
  %add2058 = add i32 %985, %984
  store i32 %add2058, i32* %s2, align 4
  %986 = load i8** %ptr, align 8
  %arrayidx2059 = getelementptr inbounds i8* %986, i64 3
  %987 = load i8* %arrayidx2059, align 1
  %conv2060 = zext i8 %987 to i32
  %988 = load i32* %s1, align 4
  %add2061 = add i32 %988, %conv2060
  store i32 %add2061, i32* %s1, align 4
  %989 = load i32* %s1, align 4
  %990 = load i32* %s2, align 4
  %add2062 = add i32 %990, %989
  store i32 %add2062, i32* %s2, align 4
  %991 = load i8** %ptr, align 8
  %arrayidx2063 = getelementptr inbounds i8* %991, i64 4
  %992 = load i8* %arrayidx2063, align 1
  %conv2064 = zext i8 %992 to i32
  %993 = load i32* %s1, align 4
  %add2065 = add i32 %993, %conv2064
  store i32 %add2065, i32* %s1, align 4
  %994 = load i32* %s1, align 4
  %995 = load i32* %s2, align 4
  %add2066 = add i32 %995, %994
  store i32 %add2066, i32* %s2, align 4
  %996 = load i8** %ptr, align 8
  %arrayidx2067 = getelementptr inbounds i8* %996, i64 5
  %997 = load i8* %arrayidx2067, align 1
  %conv2068 = zext i8 %997 to i32
  %998 = load i32* %s1, align 4
  %add2069 = add i32 %998, %conv2068
  store i32 %add2069, i32* %s1, align 4
  %999 = load i32* %s1, align 4
  %1000 = load i32* %s2, align 4
  %add2070 = add i32 %1000, %999
  store i32 %add2070, i32* %s2, align 4
  %1001 = load i8** %ptr, align 8
  %arrayidx2071 = getelementptr inbounds i8* %1001, i64 6
  %1002 = load i8* %arrayidx2071, align 1
  %conv2072 = zext i8 %1002 to i32
  %1003 = load i32* %s1, align 4
  %add2073 = add i32 %1003, %conv2072
  store i32 %add2073, i32* %s1, align 4
  %1004 = load i32* %s1, align 4
  %1005 = load i32* %s2, align 4
  %add2074 = add i32 %1005, %1004
  store i32 %add2074, i32* %s2, align 4
  %1006 = load i8** %ptr, align 8
  %arrayidx2075 = getelementptr inbounds i8* %1006, i64 7
  %1007 = load i8* %arrayidx2075, align 1
  %conv2076 = zext i8 %1007 to i32
  %1008 = load i32* %s1, align 4
  %add2077 = add i32 %1008, %conv2076
  store i32 %add2077, i32* %s1, align 4
  %1009 = load i32* %s1, align 4
  %1010 = load i32* %s2, align 4
  %add2078 = add i32 %1010, %1009
  store i32 %add2078, i32* %s2, align 4
  br label %for.inc2079

for.inc2079:                                      ; preds = %for.body2046
  %1011 = load i32* %i2032, align 4
  %add2080 = add i32 %1011, 8
  store i32 %add2080, i32* %i2032, align 4
  %1012 = load i8** %ptr, align 8
  %add.ptr2081 = getelementptr inbounds i8* %1012, i64 8
  store i8* %add.ptr2081, i8** %ptr, align 8
  br label %for.cond2041

for.end2082:                                      ; preds = %for.cond2041
  br label %for.cond2083

for.cond2083:                                     ; preds = %for.inc2092, %for.end2082
  %1013 = load i32* %i2032, align 4
  %conv2084 = zext i32 %1013 to i64
  %1014 = load i64* %block_len, align 8
  %cmp2085 = icmp ult i64 %conv2084, %1014
  br i1 %cmp2085, label %for.body2087, label %for.end2094

for.body2087:                                     ; preds = %for.cond2083
  %1015 = load i8** %ptr, align 8
  %incdec.ptr2088 = getelementptr inbounds i8* %1015, i32 1
  store i8* %incdec.ptr2088, i8** %ptr, align 8
  %1016 = load i8* %1015, align 1
  %conv2089 = zext i8 %1016 to i32
  %1017 = load i32* %s1, align 4
  %add2090 = add i32 %1017, %conv2089
  store i32 %add2090, i32* %s1, align 4
  %1018 = load i32* %s1, align 4
  %1019 = load i32* %s2, align 4
  %add2091 = add i32 %1019, %1018
  store i32 %add2091, i32* %s2, align 4
  br label %for.inc2092

for.inc2092:                                      ; preds = %for.body2087
  %1020 = load i32* %i2032, align 4
  %inc2093 = add i32 %1020, 1
  store i32 %inc2093, i32* %i2032, align 4
  br label %for.cond2083

for.end2094:                                      ; preds = %for.cond2083
  %1021 = load i32* %s1, align 4
  %rem2095 = urem i32 %1021, 65521
  store i32 %rem2095, i32* %s1, align 4
  %1022 = load i32* %s2, align 4
  %rem2096 = urem i32 %1022, 65521
  store i32 %rem2096, i32* %s2, align 4
  %1023 = load i64* %block_len, align 8
  %1024 = load i64* %buf_len, align 8
  %sub2097 = sub i64 %1024, %1023
  store i64 %sub2097, i64* %buf_len, align 8
  store i64 5552, i64* %block_len, align 8
  br label %while.cond2038

while.end2098:                                    ; preds = %while.cond2038
  %1025 = load i32* %s2, align 4
  %shl2099 = shl i32 %1025, 16
  %1026 = load i32* %s1, align 4
  %add2100 = add i32 %shl2099, %1026
  %1027 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_check_adler322101 = getelementptr inbounds %struct.tinfl_decompressor_tag* %1027, i32 0, i32 7
  store i32 %add2100, i32* %m_check_adler322101, align 4
  %1028 = load i32* %status, align 4
  %cmp2102 = icmp eq i32 %1028, 0
  br i1 %cmp2102, label %land.lhs.true2104, label %if.end2113

land.lhs.true2104:                                ; preds = %while.end2098
  %1029 = load i32* %decomp_flags.addr, align 4
  %and2105 = and i32 %1029, 1
  %tobool2106 = icmp ne i32 %and2105, 0
  br i1 %tobool2106, label %land.lhs.true2107, label %if.end2113

land.lhs.true2107:                                ; preds = %land.lhs.true2104
  %1030 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_check_adler322108 = getelementptr inbounds %struct.tinfl_decompressor_tag* %1030, i32 0, i32 7
  %1031 = load i32* %m_check_adler322108, align 4
  %1032 = load %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_z_adler322109 = getelementptr inbounds %struct.tinfl_decompressor_tag* %1032, i32 0, i32 4
  %1033 = load i32* %m_z_adler322109, align 4
  %cmp2110 = icmp ne i32 %1031, %1033
  br i1 %cmp2110, label %if.then2112, label %if.end2113

if.then2112:                                      ; preds = %land.lhs.true2107
  store i32 -2, i32* %status, align 4
  br label %if.end2113

if.end2113:                                       ; preds = %if.then2112, %land.lhs.true2107, %land.lhs.true2104, %while.end2098
  br label %if.end2114

if.end2114:                                       ; preds = %if.end2113, %land.lhs.true2028, %common_exit
  %1034 = load i32* %status, align 4
  store i32 %1034, i32* %retval
  br label %return

return:                                           ; preds = %if.end2114, %if.then
  %1035 = load i32* %retval
  ret i32 %1035
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define i32 @mz_inflateEnd(%struct.mz_stream_s* %pStream) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  %0 = load %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s* %1, i32 0, i32 7
  %2 = load %struct.mz_internal_state** %state, align 8
  %tobool1 = icmp ne %struct.mz_internal_state* %2, null
  br i1 %tobool1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %3 = load %struct.mz_stream_s** %pStream.addr, align 8
  %zfree = getelementptr inbounds %struct.mz_stream_s* %3, i32 0, i32 9
  %4 = load void (i8*, i8*)** %zfree, align 8
  %5 = load %struct.mz_stream_s** %pStream.addr, align 8
  %opaque = getelementptr inbounds %struct.mz_stream_s* %5, i32 0, i32 10
  %6 = load i8** %opaque, align 8
  %7 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state3 = getelementptr inbounds %struct.mz_stream_s* %7, i32 0, i32 7
  %8 = load %struct.mz_internal_state** %state3, align 8
  %9 = bitcast %struct.mz_internal_state* %8 to i8*
  call void %4(i8* %6, i8* %9)
  %10 = load %struct.mz_stream_s** %pStream.addr, align 8
  %state4 = getelementptr inbounds %struct.mz_stream_s* %10, i32 0, i32 7
  store %struct.mz_internal_state* null, %struct.mz_internal_state** %state4, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end5, %if.then
  %11 = load i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define i32 @mz_uncompress(i8* %pDest, i64* %pDest_len, i8* %pSource, i64 %source_len) #0 {
entry:
  %retval = alloca i32, align 4
  %pDest.addr = alloca i8*, align 8
  %pDest_len.addr = alloca i64*, align 8
  %pSource.addr = alloca i8*, align 8
  %source_len.addr = alloca i64, align 8
  %stream = alloca %struct.mz_stream_s, align 8
  %status = alloca i32, align 4
  store i8* %pDest, i8** %pDest.addr, align 8
  store i64* %pDest_len, i64** %pDest_len.addr, align 8
  store i8* %pSource, i8** %pSource.addr, align 8
  store i64 %source_len, i64* %source_len.addr, align 8
  %0 = bitcast %struct.mz_stream_s* %stream to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 112, i32 8, i1 false)
  %1 = load i64* %source_len.addr, align 8
  %2 = load i64** %pDest_len.addr, align 8
  %3 = load i64* %2, align 8
  %or = or i64 %1, %3
  %cmp = icmp ugt i64 %or, 4294967295
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -10000, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8** %pSource.addr, align 8
  %next_in = getelementptr inbounds %struct.mz_stream_s* %stream, i32 0, i32 0
  store i8* %4, i8** %next_in, align 8
  %5 = load i64* %source_len.addr, align 8
  %conv = trunc i64 %5 to i32
  %avail_in = getelementptr inbounds %struct.mz_stream_s* %stream, i32 0, i32 1
  store i32 %conv, i32* %avail_in, align 4
  %6 = load i8** %pDest.addr, align 8
  %next_out = getelementptr inbounds %struct.mz_stream_s* %stream, i32 0, i32 3
  store i8* %6, i8** %next_out, align 8
  %7 = load i64** %pDest_len.addr, align 8
  %8 = load i64* %7, align 8
  %conv1 = trunc i64 %8 to i32
  %avail_out = getelementptr inbounds %struct.mz_stream_s* %stream, i32 0, i32 4
  store i32 %conv1, i32* %avail_out, align 4
  %call = call i32 @mz_inflateInit(%struct.mz_stream_s* %stream)
  store i32 %call, i32* %status, align 4
  %9 = load i32* %status, align 4
  %cmp2 = icmp ne i32 %9, 0
  br i1 %cmp2, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load i32* %status, align 4
  store i32 %10, i32* %retval
  br label %return

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @mz_inflate(%struct.mz_stream_s* %stream, i32 4)
  store i32 %call6, i32* %status, align 4
  %11 = load i32* %status, align 4
  %cmp7 = icmp ne i32 %11, 1
  br i1 %cmp7, label %if.then9, label %if.end14

if.then9:                                         ; preds = %if.end5
  %call10 = call i32 @mz_inflateEnd(%struct.mz_stream_s* %stream)
  %12 = load i32* %status, align 4
  %cmp11 = icmp eq i32 %12, -5
  br i1 %cmp11, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then9
  %avail_in13 = getelementptr inbounds %struct.mz_stream_s* %stream, i32 0, i32 1
  %13 = load i32* %avail_in13, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then9
  %14 = load i32* %status, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -3, %cond.true ], [ %14, %cond.false ]
  store i32 %cond, i32* %retval
  br label %return

if.end14:                                         ; preds = %if.end5
  %total_out = getelementptr inbounds %struct.mz_stream_s* %stream, i32 0, i32 5
  %15 = load i64* %total_out, align 8
  %16 = load i64** %pDest_len.addr, align 8
  store i64 %15, i64* %16, align 8
  %call15 = call i32 @mz_inflateEnd(%struct.mz_stream_s* %stream)
  store i32 %call15, i32* %retval
  br label %return

return:                                           ; preds = %if.end14, %cond.end, %if.then4, %if.then
  %17 = load i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define i8* @mz_error(i32 %err) #0 {
entry:
  %retval = alloca i8*, align 8
  %err.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %err, i32* %err.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %conv = zext i32 %0 to i64
  %cmp = icmp ult i64 %conv, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32* %i, align 4
  %idxprom = zext i32 %1 to i64
  %arrayidx = getelementptr inbounds [10 x %struct.anon]* @mz_error.s_error_descs, i32 0, i64 %idxprom
  %m_err = getelementptr inbounds %struct.anon* %arrayidx, i32 0, i32 0
  %2 = load i32* %m_err, align 4
  %3 = load i32* %err.addr, align 4
  %cmp2 = icmp eq i32 %2, %3
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32* %i, align 4
  %idxprom4 = zext i32 %4 to i64
  %arrayidx5 = getelementptr inbounds [10 x %struct.anon]* @mz_error.s_error_descs, i32 0, i64 %idxprom4
  %m_pDesc = getelementptr inbounds %struct.anon* %arrayidx5, i32 0, i32 1
  %5 = load i8** %m_pDesc, align 8
  store i8* %5, i8** %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32* %i, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %7 = load i8** %retval
  ret i8* %7
}

; Function Attrs: nounwind uwtable
define i8* @tinfl_decompress_mem_to_heap(i8* %pSrc_buf, i64 %src_buf_len, i64* %pOut_len, i32 %flags) #0 {
entry:
  %retval = alloca i8*, align 8
  %pSrc_buf.addr = alloca i8*, align 8
  %src_buf_len.addr = alloca i64, align 8
  %pOut_len.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %decomp = alloca %struct.tinfl_decompressor_tag, align 8
  %pBuf = alloca i8*, align 8
  %pNew_buf = alloca i8*, align 8
  %src_buf_ofs = alloca i64, align 8
  %out_buf_capacity = alloca i64, align 8
  %src_buf_size = alloca i64, align 8
  %dst_buf_size = alloca i64, align 8
  %new_out_buf_capacity = alloca i64, align 8
  %status = alloca i32, align 4
  store i8* %pSrc_buf, i8** %pSrc_buf.addr, align 8
  store i64 %src_buf_len, i64* %src_buf_len.addr, align 8
  store i64* %pOut_len, i64** %pOut_len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i8* null, i8** %pBuf, align 8
  store i64 0, i64* %src_buf_ofs, align 8
  store i64 0, i64* %out_buf_capacity, align 8
  %0 = load i64** %pOut_len.addr, align 8
  store i64 0, i64* %0, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag* %decomp, i32 0, i32 0
  store i32 0, i32* %m_state, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %for.cond

for.cond:                                         ; preds = %if.end14, %do.end
  %1 = load i64* %src_buf_len.addr, align 8
  %2 = load i64* %src_buf_ofs, align 8
  %sub = sub i64 %1, %2
  store i64 %sub, i64* %src_buf_size, align 8
  %3 = load i64* %out_buf_capacity, align 8
  %4 = load i64** %pOut_len.addr, align 8
  %5 = load i64* %4, align 8
  %sub1 = sub i64 %3, %5
  store i64 %sub1, i64* %dst_buf_size, align 8
  %6 = load i8** %pSrc_buf.addr, align 8
  %7 = load i64* %src_buf_ofs, align 8
  %add.ptr = getelementptr inbounds i8* %6, i64 %7
  %8 = load i8** %pBuf, align 8
  %9 = load i8** %pBuf, align 8
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  %10 = load i8** %pBuf, align 8
  %11 = load i64** %pOut_len.addr, align 8
  %12 = load i64* %11, align 8
  %add.ptr2 = getelementptr inbounds i8* %10, i64 %12
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr2, %cond.true ], [ null, %cond.false ]
  %13 = load i32* %flags.addr, align 4
  %and = and i32 %13, -3
  %or = or i32 %and, 4
  %call = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %decomp, i8* %add.ptr, i64* %src_buf_size, i8* %8, i8* %cond, i64* %dst_buf_size, i32 %or)
  store i32 %call, i32* %status, align 4
  %14 = load i32* %status, align 4
  %cmp = icmp slt i32 %14, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %15 = load i32* %status, align 4
  %cmp3 = icmp eq i32 %15, 1
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  %16 = load i8** %pBuf, align 8
  call void @free(i8* %16) #2
  %17 = load i64** %pOut_len.addr, align 8
  store i64 0, i64* %17, align 8
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %18 = load i64* %src_buf_size, align 8
  %19 = load i64* %src_buf_ofs, align 8
  %add = add i64 %19, %18
  store i64 %add, i64* %src_buf_ofs, align 8
  %20 = load i64* %dst_buf_size, align 8
  %21 = load i64** %pOut_len.addr, align 8
  %22 = load i64* %21, align 8
  %add4 = add i64 %22, %20
  store i64 %add4, i64* %21, align 8
  %23 = load i32* %status, align 4
  %cmp5 = icmp eq i32 %23, 0
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  br label %for.end

if.end7:                                          ; preds = %if.end
  %24 = load i64* %out_buf_capacity, align 8
  %mul = mul i64 %24, 2
  store i64 %mul, i64* %new_out_buf_capacity, align 8
  %25 = load i64* %new_out_buf_capacity, align 8
  %cmp8 = icmp ult i64 %25, 128
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end7
  store i64 128, i64* %new_out_buf_capacity, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end7
  %26 = load i8** %pBuf, align 8
  %27 = load i64* %new_out_buf_capacity, align 8
  %call11 = call i8* @realloc(i8* %26, i64 %27) #2
  store i8* %call11, i8** %pNew_buf, align 8
  %28 = load i8** %pNew_buf, align 8
  %tobool12 = icmp ne i8* %28, null
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end10
  %29 = load i8** %pBuf, align 8
  call void @free(i8* %29) #2
  %30 = load i64** %pOut_len.addr, align 8
  store i64 0, i64* %30, align 8
  store i8* null, i8** %retval
  br label %return

if.end14:                                         ; preds = %if.end10
  %31 = load i8** %pNew_buf, align 8
  store i8* %31, i8** %pBuf, align 8
  %32 = load i64* %new_out_buf_capacity, align 8
  store i64 %32, i64* %out_buf_capacity, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then6
  %33 = load i8** %pBuf, align 8
  store i8* %33, i8** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then13, %if.then
  %34 = load i8** %retval
  ret i8* %34
}

; Function Attrs: nounwind
declare i8* @realloc(i8*, i64) #1

; Function Attrs: nounwind uwtable
define i64 @tinfl_decompress_mem_to_mem(i8* %pOut_buf, i64 %out_buf_len, i8* %pSrc_buf, i64 %src_buf_len, i32 %flags) #0 {
entry:
  %pOut_buf.addr = alloca i8*, align 8
  %out_buf_len.addr = alloca i64, align 8
  %pSrc_buf.addr = alloca i8*, align 8
  %src_buf_len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %decomp = alloca %struct.tinfl_decompressor_tag, align 8
  %status = alloca i32, align 4
  store i8* %pOut_buf, i8** %pOut_buf.addr, align 8
  store i64 %out_buf_len, i64* %out_buf_len.addr, align 8
  store i8* %pSrc_buf, i8** %pSrc_buf.addr, align 8
  store i64 %src_buf_len, i64* %src_buf_len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag* %decomp, i32 0, i32 0
  store i32 0, i32* %m_state, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %0 = load i8** %pSrc_buf.addr, align 8
  %1 = load i8** %pOut_buf.addr, align 8
  %2 = load i8** %pOut_buf.addr, align 8
  %3 = load i32* %flags.addr, align 4
  %and = and i32 %3, -3
  %or = or i32 %and, 4
  %call = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %decomp, i8* %0, i64* %src_buf_len.addr, i8* %1, i8* %2, i64* %out_buf_len.addr, i32 %or)
  store i32 %call, i32* %status, align 4
  %4 = load i32* %status, align 4
  %cmp = icmp ne i32 %4, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %5 = load i64* %out_buf_len.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ -1, %cond.true ], [ %5, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i32 @tinfl_decompress_mem_to_callback(i8* %pIn_buf, i64* %pIn_buf_size, i32 (i8*, i32, i8*)* %pPut_buf_func, i8* %pPut_buf_user, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pIn_buf.addr = alloca i8*, align 8
  %pIn_buf_size.addr = alloca i64*, align 8
  %pPut_buf_func.addr = alloca i32 (i8*, i32, i8*)*, align 8
  %pPut_buf_user.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %result = alloca i32, align 4
  %decomp = alloca %struct.tinfl_decompressor_tag, align 8
  %pDict = alloca i8*, align 8
  %in_buf_ofs = alloca i64, align 8
  %dict_ofs = alloca i64, align 8
  %in_buf_size = alloca i64, align 8
  %dst_buf_size = alloca i64, align 8
  %status = alloca i32, align 4
  store i8* %pIn_buf, i8** %pIn_buf.addr, align 8
  store i64* %pIn_buf_size, i64** %pIn_buf_size.addr, align 8
  store i32 (i8*, i32, i8*)* %pPut_buf_func, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8
  store i8* %pPut_buf_user, i8** %pPut_buf_user.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 0, i32* %result, align 4
  %call = call noalias i8* @malloc(i64 32768) #2
  store i8* %call, i8** %pDict, align 8
  store i64 0, i64* %in_buf_ofs, align 8
  store i64 0, i64* %dict_ofs, align 8
  %0 = load i8** %pDict, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag* %decomp, i32 0, i32 0
  store i32 0, i32* %m_state, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %for.cond

for.cond:                                         ; preds = %if.end14, %do.end
  %1 = load i64** %pIn_buf_size.addr, align 8
  %2 = load i64* %1, align 8
  %3 = load i64* %in_buf_ofs, align 8
  %sub = sub i64 %2, %3
  store i64 %sub, i64* %in_buf_size, align 8
  %4 = load i64* %dict_ofs, align 8
  %sub1 = sub i64 32768, %4
  store i64 %sub1, i64* %dst_buf_size, align 8
  %5 = load i8** %pIn_buf.addr, align 8
  %6 = load i64* %in_buf_ofs, align 8
  %add.ptr = getelementptr inbounds i8* %5, i64 %6
  %7 = load i8** %pDict, align 8
  %8 = load i8** %pDict, align 8
  %9 = load i64* %dict_ofs, align 8
  %add.ptr2 = getelementptr inbounds i8* %8, i64 %9
  %10 = load i32* %flags.addr, align 4
  %and = and i32 %10, -7
  %call3 = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %decomp, i8* %add.ptr, i64* %in_buf_size, i8* %7, i8* %add.ptr2, i64* %dst_buf_size, i32 %and)
  store i32 %call3, i32* %status, align 4
  %11 = load i64* %in_buf_size, align 8
  %12 = load i64* %in_buf_ofs, align 8
  %add = add i64 %12, %11
  store i64 %add, i64* %in_buf_ofs, align 8
  %13 = load i64* %dst_buf_size, align 8
  %tobool4 = icmp ne i64 %13, 0
  br i1 %tobool4, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %for.cond
  %14 = load i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8
  %15 = load i8** %pDict, align 8
  %16 = load i64* %dict_ofs, align 8
  %add.ptr5 = getelementptr inbounds i8* %15, i64 %16
  %17 = load i64* %dst_buf_size, align 8
  %conv = trunc i64 %17 to i32
  %18 = load i8** %pPut_buf_user.addr, align 8
  %call6 = call i32 %14(i8* %add.ptr5, i32 %conv, i8* %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %land.lhs.true
  br label %for.end

if.end9:                                          ; preds = %land.lhs.true, %for.cond
  %19 = load i32* %status, align 4
  %cmp = icmp ne i32 %19, 2
  br i1 %cmp, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.end9
  %20 = load i32* %status, align 4
  %cmp12 = icmp eq i32 %20, 0
  %conv13 = zext i1 %cmp12 to i32
  store i32 %conv13, i32* %result, align 4
  br label %for.end

if.end14:                                         ; preds = %if.end9
  %21 = load i64* %dict_ofs, align 8
  %22 = load i64* %dst_buf_size, align 8
  %add15 = add i64 %21, %22
  %and16 = and i64 %add15, 32767
  store i64 %and16, i64* %dict_ofs, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then11, %if.then8
  %23 = load i8** %pDict, align 8
  call void @free(i8* %23) #2
  %24 = load i64* %in_buf_ofs, align 8
  %25 = load i64** %pIn_buf_size.addr, align 8
  store i64 %24, i64* %25, align 8
  %26 = load i32* %result, align 4
  store i32 %26, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %27 = load i32* %retval
  ret i32 %27
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @tdefl_flush_output_buffer(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %n = alloca i64, align 8
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  %0 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf_size = getelementptr inbounds %struct.tdefl_compressor* %0, i32 0, i32 29
  %1 = load i64** %m_pIn_buf_size, align 8
  %tobool = icmp ne i64* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor* %2, i32 0, i32 32
  %3 = load i8** %m_pSrc, align 8
  %4 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf = getelementptr inbounds %struct.tdefl_compressor* %4, i32 0, i32 27
  %5 = load i8** %m_pIn_buf, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %6 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf_size1 = getelementptr inbounds %struct.tdefl_compressor* %6, i32 0, i32 29
  %7 = load i64** %m_pIn_buf_size1, align 8
  store i64 %sub.ptr.sub, i64* %7, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size = getelementptr inbounds %struct.tdefl_compressor* %8, i32 0, i32 30
  %9 = load i64** %m_pOut_buf_size, align 8
  %tobool2 = icmp ne i64* %9, null
  br i1 %tobool2, label %if.then3, label %if.end22

if.then3:                                         ; preds = %if.end
  %10 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size4 = getelementptr inbounds %struct.tdefl_compressor* %10, i32 0, i32 30
  %11 = load i64** %m_pOut_buf_size4, align 8
  %12 = load i64* %11, align 8
  %13 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs = getelementptr inbounds %struct.tdefl_compressor* %13, i32 0, i32 34
  %14 = load i64* %m_out_buf_ofs, align 8
  %sub = sub i64 %12, %14
  %15 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining = getelementptr inbounds %struct.tdefl_compressor* %15, i32 0, i32 22
  %16 = load i32* %m_output_flush_remaining, align 4
  %conv = zext i32 %16 to i64
  %cmp = icmp ult i64 %sub, %conv
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then3
  %17 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size6 = getelementptr inbounds %struct.tdefl_compressor* %17, i32 0, i32 30
  %18 = load i64** %m_pOut_buf_size6, align 8
  %19 = load i64* %18, align 8
  %20 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs7 = getelementptr inbounds %struct.tdefl_compressor* %20, i32 0, i32 34
  %21 = load i64* %m_out_buf_ofs7, align 8
  %sub8 = sub i64 %19, %21
  br label %cond.end

cond.false:                                       ; preds = %if.then3
  %22 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining9 = getelementptr inbounds %struct.tdefl_compressor* %22, i32 0, i32 22
  %23 = load i32* %m_output_flush_remaining9, align 4
  %conv10 = zext i32 %23 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub8, %cond.true ], [ %conv10, %cond.false ]
  store i64 %cond, i64* %n, align 8
  %24 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf = getelementptr inbounds %struct.tdefl_compressor* %24, i32 0, i32 28
  %25 = load i8** %m_pOut_buf, align 8
  %26 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs11 = getelementptr inbounds %struct.tdefl_compressor* %26, i32 0, i32 34
  %27 = load i64* %m_out_buf_ofs11, align 8
  %add.ptr = getelementptr inbounds i8* %25, i64 %27
  %28 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_buf = getelementptr inbounds %struct.tdefl_compressor* %28, i32 0, i32 42
  %arraydecay = getelementptr inbounds [85196 x i8]* %m_output_buf, i32 0, i32 0
  %29 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_ofs = getelementptr inbounds %struct.tdefl_compressor* %29, i32 0, i32 21
  %30 = load i32* %m_output_flush_ofs, align 4
  %idx.ext = zext i32 %30 to i64
  %add.ptr12 = getelementptr inbounds i8* %arraydecay, i64 %idx.ext
  %31 = load i64* %n, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %add.ptr12, i64 %31, i32 1, i1 false)
  %32 = load i64* %n, align 8
  %conv13 = trunc i64 %32 to i32
  %33 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_ofs14 = getelementptr inbounds %struct.tdefl_compressor* %33, i32 0, i32 21
  %34 = load i32* %m_output_flush_ofs14, align 4
  %add = add i32 %34, %conv13
  store i32 %add, i32* %m_output_flush_ofs14, align 4
  %35 = load i64* %n, align 8
  %conv15 = trunc i64 %35 to i32
  %36 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining16 = getelementptr inbounds %struct.tdefl_compressor* %36, i32 0, i32 22
  %37 = load i32* %m_output_flush_remaining16, align 4
  %sub17 = sub i32 %37, %conv15
  store i32 %sub17, i32* %m_output_flush_remaining16, align 4
  %38 = load i64* %n, align 8
  %39 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs18 = getelementptr inbounds %struct.tdefl_compressor* %39, i32 0, i32 34
  %40 = load i64* %m_out_buf_ofs18, align 8
  %add19 = add i64 %40, %38
  store i64 %add19, i64* %m_out_buf_ofs18, align 8
  %41 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs20 = getelementptr inbounds %struct.tdefl_compressor* %41, i32 0, i32 34
  %42 = load i64* %m_out_buf_ofs20, align 8
  %43 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size21 = getelementptr inbounds %struct.tdefl_compressor* %43, i32 0, i32 30
  %44 = load i64** %m_pOut_buf_size21, align 8
  store i64 %42, i64* %44, align 8
  br label %if.end22

if.end22:                                         ; preds = %cond.end, %if.end
  %45 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_finished = getelementptr inbounds %struct.tdefl_compressor* %45, i32 0, i32 23
  %46 = load i32* %m_finished, align 4
  %tobool23 = icmp ne i32 %46, 0
  br i1 %tobool23, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end22
  %47 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining24 = getelementptr inbounds %struct.tdefl_compressor* %47, i32 0, i32 22
  %48 = load i32* %m_output_flush_remaining24, align 4
  %tobool25 = icmp ne i32 %48, 0
  %lnot = xor i1 %tobool25, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end22
  %49 = phi i1 [ false, %if.end22 ], [ %lnot, %land.rhs ]
  %cond26 = select i1 %49, i32 1, i32 0
  ret i32 %cond26
}

; Function Attrs: nounwind uwtable
define internal i32 @tdefl_compress_fast(%struct.tdefl_compressor* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %lookahead_pos = alloca i32, align 4
  %lookahead_size = alloca i32, align 4
  %dict_size = alloca i32, align 4
  %total_lz_bytes = alloca i32, align 4
  %num_flags_left = alloca i32, align 4
  %pLZ_code_buf = alloca i8*, align 8
  %pLZ_flags = alloca i8*, align 8
  %cur_pos = alloca i32, align 4
  %TDEFL_COMP_FAST_LOOKAHEAD_SIZE = alloca i32, align 4
  %dst_pos = alloca i32, align 4
  %num_bytes_to_process = alloca i32, align 4
  %n = alloca i32, align 4
  %cur_match_dist = alloca i32, align 4
  %cur_match_len = alloca i32, align 4
  %pCur_dict = alloca i8*, align 8
  %first_trigram = alloca i32, align 4
  %hash = alloca i32, align 4
  %probe_pos = alloca i32, align 4
  %p = alloca i16*, align 8
  %q = alloca i16*, align 8
  %probe_len = alloca i32, align 4
  %s0 = alloca i32, align 4
  %s1 = alloca i32, align 4
  %n251 = alloca i32, align 4
  %lit = alloca i8, align 1
  %n311 = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  %0 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos = getelementptr inbounds %struct.tdefl_compressor* %0, i32 0, i32 6
  %1 = load i32* %m_lookahead_pos, align 4
  store i32 %1, i32* %lookahead_pos, align 4
  %2 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size = getelementptr inbounds %struct.tdefl_compressor* %2, i32 0, i32 7
  %3 = load i32* %m_lookahead_size, align 4
  store i32 %3, i32* %lookahead_size, align 4
  %4 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor* %4, i32 0, i32 8
  %5 = load i32* %m_dict_size, align 4
  store i32 %5, i32* %dict_size, align 4
  %6 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes = getelementptr inbounds %struct.tdefl_compressor* %6, i32 0, i32 14
  %7 = load i32* %m_total_lz_bytes, align 4
  store i32 %7, i32* %total_lz_bytes, align 4
  %8 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left = getelementptr inbounds %struct.tdefl_compressor* %8, i32 0, i32 13
  %9 = load i32* %m_num_flags_left, align 4
  store i32 %9, i32* %num_flags_left, align 4
  %10 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor* %10, i32 0, i32 9
  %11 = load i8** %m_pLZ_code_buf, align 8
  store i8* %11, i8** %pLZ_code_buf, align 8
  %12 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags = getelementptr inbounds %struct.tdefl_compressor* %12, i32 0, i32 10
  %13 = load i8** %m_pLZ_flags, align 8
  store i8* %13, i8** %pLZ_flags, align 8
  %14 = load i32* %lookahead_pos, align 4
  %and = and i32 %14, 32767
  store i32 %and, i32* %cur_pos, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end332, %entry
  %15 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left = getelementptr inbounds %struct.tdefl_compressor* %15, i32 0, i32 33
  %16 = load i64* %m_src_buf_left, align 8
  %tobool = icmp ne i64 %16, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %17 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flush = getelementptr inbounds %struct.tdefl_compressor* %17, i32 0, i32 31
  %18 = load i32* %m_flush, align 4
  %tobool1 = icmp ne i32 %18, 0
  br i1 %tobool1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %19 = load i32* %lookahead_size, align 4
  %tobool2 = icmp ne i32 %19, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %20 = phi i1 [ false, %lor.rhs ], [ %tobool2, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %while.cond
  %21 = phi i1 [ true, %while.cond ], [ %20, %land.end ]
  br i1 %21, label %while.body, label %while.end333

while.body:                                       ; preds = %lor.end
  store i32 4096, i32* %TDEFL_COMP_FAST_LOOKAHEAD_SIZE, align 4
  %22 = load i32* %lookahead_pos, align 4
  %23 = load i32* %lookahead_size, align 4
  %add = add i32 %22, %23
  %and3 = and i32 %add, 32767
  store i32 %and3, i32* %dst_pos, align 4
  %24 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left4 = getelementptr inbounds %struct.tdefl_compressor* %24, i32 0, i32 33
  %25 = load i64* %m_src_buf_left4, align 8
  %26 = load i32* %lookahead_size, align 4
  %sub = sub i32 4096, %26
  %conv = zext i32 %sub to i64
  %cmp = icmp ult i64 %25, %conv
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %27 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left6 = getelementptr inbounds %struct.tdefl_compressor* %27, i32 0, i32 33
  %28 = load i64* %m_src_buf_left6, align 8
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %29 = load i32* %lookahead_size, align 4
  %sub7 = sub i32 4096, %29
  %conv8 = zext i32 %sub7 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %28, %cond.true ], [ %conv8, %cond.false ]
  %conv9 = trunc i64 %cond to i32
  store i32 %conv9, i32* %num_bytes_to_process, align 4
  %30 = load i32* %num_bytes_to_process, align 4
  %conv10 = zext i32 %30 to i64
  %31 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left11 = getelementptr inbounds %struct.tdefl_compressor* %31, i32 0, i32 33
  %32 = load i64* %m_src_buf_left11, align 8
  %sub12 = sub i64 %32, %conv10
  store i64 %sub12, i64* %m_src_buf_left11, align 8
  %33 = load i32* %num_bytes_to_process, align 4
  %34 = load i32* %lookahead_size, align 4
  %add13 = add i32 %34, %33
  store i32 %add13, i32* %lookahead_size, align 4
  br label %while.cond14

while.cond14:                                     ; preds = %if.end, %cond.end
  %35 = load i32* %num_bytes_to_process, align 4
  %tobool15 = icmp ne i32 %35, 0
  br i1 %tobool15, label %while.body16, label %while.end

while.body16:                                     ; preds = %while.cond14
  %36 = load i32* %dst_pos, align 4
  %sub17 = sub i32 32768, %36
  %37 = load i32* %num_bytes_to_process, align 4
  %cmp18 = icmp ult i32 %sub17, %37
  br i1 %cmp18, label %cond.true20, label %cond.false22

cond.true20:                                      ; preds = %while.body16
  %38 = load i32* %dst_pos, align 4
  %sub21 = sub i32 32768, %38
  br label %cond.end23

cond.false22:                                     ; preds = %while.body16
  %39 = load i32* %num_bytes_to_process, align 4
  br label %cond.end23

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi i32 [ %sub21, %cond.true20 ], [ %39, %cond.false22 ]
  store i32 %cond24, i32* %n, align 4
  %40 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict = getelementptr inbounds %struct.tdefl_compressor* %40, i32 0, i32 35
  %arraydecay = getelementptr inbounds [33025 x i8]* %m_dict, i32 0, i32 0
  %41 = load i32* %dst_pos, align 4
  %idx.ext = zext i32 %41 to i64
  %add.ptr = getelementptr inbounds i8* %arraydecay, i64 %idx.ext
  %42 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor* %42, i32 0, i32 32
  %43 = load i8** %m_pSrc, align 8
  %44 = load i32* %n, align 4
  %conv25 = zext i32 %44 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %43, i64 %conv25, i32 1, i1 false)
  %45 = load i32* %dst_pos, align 4
  %cmp26 = icmp ult i32 %45, 257
  br i1 %cmp26, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end23
  %46 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict28 = getelementptr inbounds %struct.tdefl_compressor* %46, i32 0, i32 35
  %arraydecay29 = getelementptr inbounds [33025 x i8]* %m_dict28, i32 0, i32 0
  %add.ptr30 = getelementptr inbounds i8* %arraydecay29, i64 32768
  %47 = load i32* %dst_pos, align 4
  %idx.ext31 = zext i32 %47 to i64
  %add.ptr32 = getelementptr inbounds i8* %add.ptr30, i64 %idx.ext31
  %48 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc33 = getelementptr inbounds %struct.tdefl_compressor* %48, i32 0, i32 32
  %49 = load i8** %m_pSrc33, align 8
  %50 = load i32* %n, align 4
  %51 = load i32* %dst_pos, align 4
  %sub34 = sub i32 257, %51
  %cmp35 = icmp ult i32 %50, %sub34
  br i1 %cmp35, label %cond.true37, label %cond.false38

cond.true37:                                      ; preds = %if.then
  %52 = load i32* %n, align 4
  br label %cond.end40

cond.false38:                                     ; preds = %if.then
  %53 = load i32* %dst_pos, align 4
  %sub39 = sub i32 257, %53
  br label %cond.end40

cond.end40:                                       ; preds = %cond.false38, %cond.true37
  %cond41 = phi i32 [ %52, %cond.true37 ], [ %sub39, %cond.false38 ]
  %conv42 = zext i32 %cond41 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr32, i8* %49, i64 %conv42, i32 1, i1 false)
  br label %if.end

if.end:                                           ; preds = %cond.end40, %cond.end23
  %54 = load i32* %n, align 4
  %55 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc43 = getelementptr inbounds %struct.tdefl_compressor* %55, i32 0, i32 32
  %56 = load i8** %m_pSrc43, align 8
  %idx.ext44 = zext i32 %54 to i64
  %add.ptr45 = getelementptr inbounds i8* %56, i64 %idx.ext44
  store i8* %add.ptr45, i8** %m_pSrc43, align 8
  %57 = load i32* %dst_pos, align 4
  %58 = load i32* %n, align 4
  %add46 = add i32 %57, %58
  %and47 = and i32 %add46, 32767
  store i32 %and47, i32* %dst_pos, align 4
  %59 = load i32* %n, align 4
  %60 = load i32* %num_bytes_to_process, align 4
  %sub48 = sub i32 %60, %59
  store i32 %sub48, i32* %num_bytes_to_process, align 4
  br label %while.cond14

while.end:                                        ; preds = %while.cond14
  %61 = load i32* %lookahead_size, align 4
  %sub49 = sub i32 32768, %61
  %62 = load i32* %dict_size, align 4
  %cmp50 = icmp ult i32 %sub49, %62
  br i1 %cmp50, label %cond.true52, label %cond.false54

cond.true52:                                      ; preds = %while.end
  %63 = load i32* %lookahead_size, align 4
  %sub53 = sub i32 32768, %63
  br label %cond.end55

cond.false54:                                     ; preds = %while.end
  %64 = load i32* %dict_size, align 4
  br label %cond.end55

cond.end55:                                       ; preds = %cond.false54, %cond.true52
  %cond56 = phi i32 [ %sub53, %cond.true52 ], [ %64, %cond.false54 ]
  store i32 %cond56, i32* %dict_size, align 4
  %65 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flush57 = getelementptr inbounds %struct.tdefl_compressor* %65, i32 0, i32 31
  %66 = load i32* %m_flush57, align 4
  %tobool58 = icmp ne i32 %66, 0
  br i1 %tobool58, label %if.end62, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end55
  %67 = load i32* %lookahead_size, align 4
  %cmp59 = icmp ult i32 %67, 4096
  br i1 %cmp59, label %if.then61, label %if.end62

if.then61:                                        ; preds = %land.lhs.true
  br label %while.end333

if.end62:                                         ; preds = %land.lhs.true, %cond.end55
  br label %while.cond63

while.cond63:                                     ; preds = %if.end270, %if.end62
  %68 = load i32* %lookahead_size, align 4
  %cmp64 = icmp uge i32 %68, 4
  br i1 %cmp64, label %while.body66, label %while.end271

while.body66:                                     ; preds = %while.cond63
  store i32 1, i32* %cur_match_len, align 4
  %69 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict67 = getelementptr inbounds %struct.tdefl_compressor* %69, i32 0, i32 35
  %arraydecay68 = getelementptr inbounds [33025 x i8]* %m_dict67, i32 0, i32 0
  %70 = load i32* %cur_pos, align 4
  %idx.ext69 = zext i32 %70 to i64
  %add.ptr70 = getelementptr inbounds i8* %arraydecay68, i64 %idx.ext69
  store i8* %add.ptr70, i8** %pCur_dict, align 8
  %71 = load i8** %pCur_dict, align 8
  %72 = bitcast i8* %71 to i32*
  %73 = load i32* %72, align 4
  %and71 = and i32 %73, 16777215
  store i32 %and71, i32* %first_trigram, align 4
  %74 = load i32* %first_trigram, align 4
  %75 = load i32* %first_trigram, align 4
  %shr = lshr i32 %75, 17
  %xor = xor i32 %74, %shr
  %and72 = and i32 %xor, 4095
  store i32 %and72, i32* %hash, align 4
  %76 = load i32* %hash, align 4
  %idxprom = zext i32 %76 to i64
  %77 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_hash = getelementptr inbounds %struct.tdefl_compressor* %77, i32 0, i32 41
  %arrayidx = getelementptr inbounds [32768 x i16]* %m_hash, i32 0, i64 %idxprom
  %78 = load i16* %arrayidx, align 2
  %conv73 = zext i16 %78 to i32
  store i32 %conv73, i32* %probe_pos, align 4
  %79 = load i32* %lookahead_pos, align 4
  %conv74 = trunc i32 %79 to i16
  %80 = load i32* %hash, align 4
  %idxprom75 = zext i32 %80 to i64
  %81 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_hash76 = getelementptr inbounds %struct.tdefl_compressor* %81, i32 0, i32 41
  %arrayidx77 = getelementptr inbounds [32768 x i16]* %m_hash76, i32 0, i64 %idxprom75
  store i16 %conv74, i16* %arrayidx77, align 2
  %82 = load i32* %lookahead_pos, align 4
  %83 = load i32* %probe_pos, align 4
  %sub78 = sub i32 %82, %83
  %conv79 = trunc i32 %sub78 to i16
  %conv80 = zext i16 %conv79 to i32
  store i32 %conv80, i32* %cur_match_dist, align 4
  %84 = load i32* %dict_size, align 4
  %cmp81 = icmp ule i32 %conv80, %84
  br i1 %cmp81, label %land.lhs.true83, label %if.else210

land.lhs.true83:                                  ; preds = %while.body66
  %85 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict84 = getelementptr inbounds %struct.tdefl_compressor* %85, i32 0, i32 35
  %arraydecay85 = getelementptr inbounds [33025 x i8]* %m_dict84, i32 0, i32 0
  %86 = load i32* %probe_pos, align 4
  %and86 = and i32 %86, 32767
  store i32 %and86, i32* %probe_pos, align 4
  %idx.ext87 = zext i32 %and86 to i64
  %add.ptr88 = getelementptr inbounds i8* %arraydecay85, i64 %idx.ext87
  %87 = bitcast i8* %add.ptr88 to i32*
  %88 = load i32* %87, align 4
  %and89 = and i32 %88, 16777215
  %89 = load i32* %first_trigram, align 4
  %cmp90 = icmp eq i32 %and89, %89
  br i1 %cmp90, label %if.then92, label %if.else210

if.then92:                                        ; preds = %land.lhs.true83
  %90 = load i8** %pCur_dict, align 8
  %91 = bitcast i8* %90 to i16*
  store i16* %91, i16** %p, align 8
  %92 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict93 = getelementptr inbounds %struct.tdefl_compressor* %92, i32 0, i32 35
  %arraydecay94 = getelementptr inbounds [33025 x i8]* %m_dict93, i32 0, i32 0
  %93 = load i32* %probe_pos, align 4
  %idx.ext95 = zext i32 %93 to i64
  %add.ptr96 = getelementptr inbounds i8* %arraydecay94, i64 %idx.ext95
  %94 = bitcast i8* %add.ptr96 to i16*
  store i16* %94, i16** %q, align 8
  store i32 32, i32* %probe_len, align 4
  br label %do.body

do.body:                                          ; preds = %land.end126, %if.then92
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %95 = load i16** %p, align 8
  %incdec.ptr = getelementptr inbounds i16* %95, i32 1
  store i16* %incdec.ptr, i16** %p, align 8
  %96 = load i16* %incdec.ptr, align 2
  %conv97 = zext i16 %96 to i32
  %97 = load i16** %q, align 8
  %incdec.ptr98 = getelementptr inbounds i16* %97, i32 1
  store i16* %incdec.ptr98, i16** %q, align 8
  %98 = load i16* %incdec.ptr98, align 2
  %conv99 = zext i16 %98 to i32
  %cmp100 = icmp eq i32 %conv97, %conv99
  br i1 %cmp100, label %land.lhs.true102, label %land.end126

land.lhs.true102:                                 ; preds = %do.cond
  %99 = load i16** %p, align 8
  %incdec.ptr103 = getelementptr inbounds i16* %99, i32 1
  store i16* %incdec.ptr103, i16** %p, align 8
  %100 = load i16* %incdec.ptr103, align 2
  %conv104 = zext i16 %100 to i32
  %101 = load i16** %q, align 8
  %incdec.ptr105 = getelementptr inbounds i16* %101, i32 1
  store i16* %incdec.ptr105, i16** %q, align 8
  %102 = load i16* %incdec.ptr105, align 2
  %conv106 = zext i16 %102 to i32
  %cmp107 = icmp eq i32 %conv104, %conv106
  br i1 %cmp107, label %land.lhs.true109, label %land.end126

land.lhs.true109:                                 ; preds = %land.lhs.true102
  %103 = load i16** %p, align 8
  %incdec.ptr110 = getelementptr inbounds i16* %103, i32 1
  store i16* %incdec.ptr110, i16** %p, align 8
  %104 = load i16* %incdec.ptr110, align 2
  %conv111 = zext i16 %104 to i32
  %105 = load i16** %q, align 8
  %incdec.ptr112 = getelementptr inbounds i16* %105, i32 1
  store i16* %incdec.ptr112, i16** %q, align 8
  %106 = load i16* %incdec.ptr112, align 2
  %conv113 = zext i16 %106 to i32
  %cmp114 = icmp eq i32 %conv111, %conv113
  br i1 %cmp114, label %land.lhs.true116, label %land.end126

land.lhs.true116:                                 ; preds = %land.lhs.true109
  %107 = load i16** %p, align 8
  %incdec.ptr117 = getelementptr inbounds i16* %107, i32 1
  store i16* %incdec.ptr117, i16** %p, align 8
  %108 = load i16* %incdec.ptr117, align 2
  %conv118 = zext i16 %108 to i32
  %109 = load i16** %q, align 8
  %incdec.ptr119 = getelementptr inbounds i16* %109, i32 1
  store i16* %incdec.ptr119, i16** %q, align 8
  %110 = load i16* %incdec.ptr119, align 2
  %conv120 = zext i16 %110 to i32
  %cmp121 = icmp eq i32 %conv118, %conv120
  br i1 %cmp121, label %land.rhs123, label %land.end126

land.rhs123:                                      ; preds = %land.lhs.true116
  %111 = load i32* %probe_len, align 4
  %dec = add i32 %111, -1
  store i32 %dec, i32* %probe_len, align 4
  %cmp124 = icmp ugt i32 %dec, 0
  br label %land.end126

land.end126:                                      ; preds = %land.rhs123, %land.lhs.true116, %land.lhs.true109, %land.lhs.true102, %do.cond
  %112 = phi i1 [ false, %land.lhs.true116 ], [ false, %land.lhs.true109 ], [ false, %land.lhs.true102 ], [ false, %do.cond ], [ %cmp124, %land.rhs123 ]
  br i1 %112, label %do.body, label %do.end

do.end:                                           ; preds = %land.end126
  %113 = load i16** %p, align 8
  %114 = load i8** %pCur_dict, align 8
  %115 = bitcast i8* %114 to i16*
  %sub.ptr.lhs.cast = ptrtoint i16* %113 to i64
  %sub.ptr.rhs.cast = ptrtoint i16* %115 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 2
  %conv127 = trunc i64 %sub.ptr.div to i32
  %mul = mul i32 %conv127, 2
  %116 = load i16** %p, align 8
  %117 = bitcast i16* %116 to i8*
  %118 = load i8* %117, align 1
  %conv128 = zext i8 %118 to i32
  %119 = load i16** %q, align 8
  %120 = bitcast i16* %119 to i8*
  %121 = load i8* %120, align 1
  %conv129 = zext i8 %121 to i32
  %cmp130 = icmp eq i32 %conv128, %conv129
  %conv131 = zext i1 %cmp130 to i32
  %add132 = add i32 %mul, %conv131
  store i32 %add132, i32* %cur_match_len, align 4
  %122 = load i32* %probe_len, align 4
  %tobool133 = icmp ne i32 %122, 0
  br i1 %tobool133, label %if.end137, label %if.then134

if.then134:                                       ; preds = %do.end
  %123 = load i32* %cur_match_dist, align 4
  %tobool135 = icmp ne i32 %123, 0
  %cond136 = select i1 %tobool135, i32 258, i32 0
  store i32 %cond136, i32* %cur_match_len, align 4
  br label %if.end137

if.end137:                                        ; preds = %if.then134, %do.end
  %124 = load i32* %cur_match_len, align 4
  %cmp138 = icmp ult i32 %124, 3
  br i1 %cmp138, label %if.then145, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end137
  %125 = load i32* %cur_match_len, align 4
  %cmp140 = icmp eq i32 %125, 3
  br i1 %cmp140, label %land.lhs.true142, label %if.else

land.lhs.true142:                                 ; preds = %lor.lhs.false
  %126 = load i32* %cur_match_dist, align 4
  %cmp143 = icmp uge i32 %126, 8192
  br i1 %cmp143, label %if.then145, label %if.else

if.then145:                                       ; preds = %land.lhs.true142, %if.end137
  store i32 1, i32* %cur_match_len, align 4
  %127 = load i32* %first_trigram, align 4
  %conv146 = trunc i32 %127 to i8
  %128 = load i8** %pLZ_code_buf, align 8
  %incdec.ptr147 = getelementptr inbounds i8* %128, i32 1
  store i8* %incdec.ptr147, i8** %pLZ_code_buf, align 8
  store i8 %conv146, i8* %128, align 1
  %129 = load i8** %pLZ_flags, align 8
  %130 = load i8* %129, align 1
  %conv148 = zext i8 %130 to i32
  %shr149 = ashr i32 %conv148, 1
  %conv150 = trunc i32 %shr149 to i8
  %131 = load i8** %pLZ_flags, align 8
  store i8 %conv150, i8* %131, align 1
  %132 = load i32* %first_trigram, align 4
  %conv151 = trunc i32 %132 to i8
  %idxprom152 = zext i8 %conv151 to i64
  %133 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor* %133, i32 0, i32 36
  %arrayidx153 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count, i32 0, i64 0
  %arrayidx154 = getelementptr inbounds [288 x i16]* %arrayidx153, i32 0, i64 %idxprom152
  %134 = load i16* %arrayidx154, align 2
  %inc = add i16 %134, 1
  store i16 %inc, i16* %arrayidx154, align 2
  br label %if.end209

if.else:                                          ; preds = %land.lhs.true142, %lor.lhs.false
  %135 = load i32* %cur_match_len, align 4
  %136 = load i32* %lookahead_size, align 4
  %cmp155 = icmp ult i32 %135, %136
  br i1 %cmp155, label %cond.true157, label %cond.false158

cond.true157:                                     ; preds = %if.else
  %137 = load i32* %cur_match_len, align 4
  br label %cond.end159

cond.false158:                                    ; preds = %if.else
  %138 = load i32* %lookahead_size, align 4
  br label %cond.end159

cond.end159:                                      ; preds = %cond.false158, %cond.true157
  %cond160 = phi i32 [ %137, %cond.true157 ], [ %138, %cond.false158 ]
  store i32 %cond160, i32* %cur_match_len, align 4
  %139 = load i32* %cur_match_len, align 4
  %cmp161 = icmp uge i32 %139, 3
  br i1 %cmp161, label %land.lhs.true163, label %cond.false170

land.lhs.true163:                                 ; preds = %cond.end159
  %140 = load i32* %cur_match_dist, align 4
  %cmp164 = icmp uge i32 %140, 1
  br i1 %cmp164, label %land.lhs.true166, label %cond.false170

land.lhs.true166:                                 ; preds = %land.lhs.true163
  %141 = load i32* %cur_match_dist, align 4
  %cmp167 = icmp ule i32 %141, 32768
  br i1 %cmp167, label %cond.true169, label %cond.false170

cond.true169:                                     ; preds = %land.lhs.true166
  br label %cond.end171

cond.false170:                                    ; preds = %land.lhs.true166, %land.lhs.true163, %cond.end159
  call void @__assert_fail(i8* getelementptr inbounds ([106 x i8]* @.str42, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2390, i8* getelementptr inbounds ([48 x i8]* @__PRETTY_FUNCTION__.tdefl_compress_fast, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end171

cond.end171:                                      ; preds = %142, %cond.true169
  %143 = load i32* %cur_match_dist, align 4
  %dec172 = add i32 %143, -1
  store i32 %dec172, i32* %cur_match_dist, align 4
  %144 = load i32* %cur_match_len, align 4
  %sub173 = sub i32 %144, 3
  %conv174 = trunc i32 %sub173 to i8
  %145 = load i8** %pLZ_code_buf, align 8
  %arrayidx175 = getelementptr inbounds i8* %145, i64 0
  store i8 %conv174, i8* %arrayidx175, align 1
  %146 = load i32* %cur_match_dist, align 4
  %conv176 = trunc i32 %146 to i16
  %147 = load i8** %pLZ_code_buf, align 8
  %arrayidx177 = getelementptr inbounds i8* %147, i64 1
  %148 = bitcast i8* %arrayidx177 to i16*
  store i16 %conv176, i16* %148, align 2
  %149 = load i8** %pLZ_code_buf, align 8
  %add.ptr178 = getelementptr inbounds i8* %149, i64 3
  store i8* %add.ptr178, i8** %pLZ_code_buf, align 8
  %150 = load i8** %pLZ_flags, align 8
  %151 = load i8* %150, align 1
  %conv179 = zext i8 %151 to i32
  %shr180 = ashr i32 %conv179, 1
  %or = or i32 %shr180, 128
  %conv181 = trunc i32 %or to i8
  %152 = load i8** %pLZ_flags, align 8
  store i8 %conv181, i8* %152, align 1
  %153 = load i32* %cur_match_dist, align 4
  %and182 = and i32 %153, 511
  %idxprom183 = zext i32 %and182 to i64
  %arrayidx184 = getelementptr inbounds [512 x i8]* @s_tdefl_small_dist_sym, i32 0, i64 %idxprom183
  %154 = load i8* %arrayidx184, align 1
  %conv185 = zext i8 %154 to i32
  store i32 %conv185, i32* %s0, align 4
  %155 = load i32* %cur_match_dist, align 4
  %shr186 = lshr i32 %155, 8
  %idxprom187 = zext i32 %shr186 to i64
  %arrayidx188 = getelementptr inbounds [128 x i8]* @s_tdefl_large_dist_sym, i32 0, i64 %idxprom187
  %156 = load i8* %arrayidx188, align 1
  %conv189 = zext i8 %156 to i32
  store i32 %conv189, i32* %s1, align 4
  %157 = load i32* %cur_match_dist, align 4
  %cmp190 = icmp ult i32 %157, 512
  br i1 %cmp190, label %cond.true192, label %cond.false193

cond.true192:                                     ; preds = %cond.end171
  %158 = load i32* %s0, align 4
  br label %cond.end194

cond.false193:                                    ; preds = %cond.end171
  %159 = load i32* %s1, align 4
  br label %cond.end194

cond.end194:                                      ; preds = %cond.false193, %cond.true192
  %cond195 = phi i32 [ %158, %cond.true192 ], [ %159, %cond.false193 ]
  %idxprom196 = zext i32 %cond195 to i64
  %160 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count197 = getelementptr inbounds %struct.tdefl_compressor* %160, i32 0, i32 36
  %arrayidx198 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count197, i32 0, i64 1
  %arrayidx199 = getelementptr inbounds [288 x i16]* %arrayidx198, i32 0, i64 %idxprom196
  %161 = load i16* %arrayidx199, align 2
  %inc200 = add i16 %161, 1
  store i16 %inc200, i16* %arrayidx199, align 2
  %162 = load i32* %cur_match_len, align 4
  %sub201 = sub i32 %162, 3
  %idxprom202 = zext i32 %sub201 to i64
  %arrayidx203 = getelementptr inbounds [256 x i16]* @s_tdefl_len_sym, i32 0, i64 %idxprom202
  %163 = load i16* %arrayidx203, align 2
  %idxprom204 = zext i16 %163 to i64
  %164 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count205 = getelementptr inbounds %struct.tdefl_compressor* %164, i32 0, i32 36
  %arrayidx206 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count205, i32 0, i64 0
  %arrayidx207 = getelementptr inbounds [288 x i16]* %arrayidx206, i32 0, i64 %idxprom204
  %165 = load i16* %arrayidx207, align 2
  %inc208 = add i16 %165, 1
  store i16 %inc208, i16* %arrayidx207, align 2
  br label %if.end209

if.end209:                                        ; preds = %cond.end194, %if.then145
  br label %if.end222

if.else210:                                       ; preds = %land.lhs.true83, %while.body66
  %166 = load i32* %first_trigram, align 4
  %conv211 = trunc i32 %166 to i8
  %167 = load i8** %pLZ_code_buf, align 8
  %incdec.ptr212 = getelementptr inbounds i8* %167, i32 1
  store i8* %incdec.ptr212, i8** %pLZ_code_buf, align 8
  store i8 %conv211, i8* %167, align 1
  %168 = load i8** %pLZ_flags, align 8
  %169 = load i8* %168, align 1
  %conv213 = zext i8 %169 to i32
  %shr214 = ashr i32 %conv213, 1
  %conv215 = trunc i32 %shr214 to i8
  %170 = load i8** %pLZ_flags, align 8
  store i8 %conv215, i8* %170, align 1
  %171 = load i32* %first_trigram, align 4
  %conv216 = trunc i32 %171 to i8
  %idxprom217 = zext i8 %conv216 to i64
  %172 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count218 = getelementptr inbounds %struct.tdefl_compressor* %172, i32 0, i32 36
  %arrayidx219 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count218, i32 0, i64 0
  %arrayidx220 = getelementptr inbounds [288 x i16]* %arrayidx219, i32 0, i64 %idxprom217
  %173 = load i16* %arrayidx220, align 2
  %inc221 = add i16 %173, 1
  store i16 %inc221, i16* %arrayidx220, align 2
  br label %if.end222

if.end222:                                        ; preds = %if.else210, %if.end209
  %174 = load i32* %num_flags_left, align 4
  %dec223 = add i32 %174, -1
  store i32 %dec223, i32* %num_flags_left, align 4
  %cmp224 = icmp eq i32 %dec223, 0
  br i1 %cmp224, label %if.then226, label %if.end228

if.then226:                                       ; preds = %if.end222
  store i32 8, i32* %num_flags_left, align 4
  %175 = load i8** %pLZ_code_buf, align 8
  %incdec.ptr227 = getelementptr inbounds i8* %175, i32 1
  store i8* %incdec.ptr227, i8** %pLZ_code_buf, align 8
  store i8* %175, i8** %pLZ_flags, align 8
  br label %if.end228

if.end228:                                        ; preds = %if.then226, %if.end222
  %176 = load i32* %cur_match_len, align 4
  %177 = load i32* %total_lz_bytes, align 4
  %add229 = add i32 %177, %176
  store i32 %add229, i32* %total_lz_bytes, align 4
  %178 = load i32* %cur_match_len, align 4
  %179 = load i32* %lookahead_pos, align 4
  %add230 = add i32 %179, %178
  store i32 %add230, i32* %lookahead_pos, align 4
  %180 = load i32* %dict_size, align 4
  %181 = load i32* %cur_match_len, align 4
  %add231 = add i32 %180, %181
  %cmp232 = icmp ult i32 %add231, 32768
  br i1 %cmp232, label %cond.true234, label %cond.false236

cond.true234:                                     ; preds = %if.end228
  %182 = load i32* %dict_size, align 4
  %183 = load i32* %cur_match_len, align 4
  %add235 = add i32 %182, %183
  br label %cond.end237

cond.false236:                                    ; preds = %if.end228
  br label %cond.end237

cond.end237:                                      ; preds = %cond.false236, %cond.true234
  %cond238 = phi i32 [ %add235, %cond.true234 ], [ 32768, %cond.false236 ]
  store i32 %cond238, i32* %dict_size, align 4
  %184 = load i32* %cur_pos, align 4
  %185 = load i32* %cur_match_len, align 4
  %add239 = add i32 %184, %185
  %and240 = and i32 %add239, 32767
  store i32 %and240, i32* %cur_pos, align 4
  %186 = load i32* %lookahead_size, align 4
  %187 = load i32* %cur_match_len, align 4
  %cmp241 = icmp uge i32 %186, %187
  br i1 %cmp241, label %cond.true243, label %cond.false244

cond.true243:                                     ; preds = %cond.end237
  br label %cond.end245

cond.false244:                                    ; preds = %cond.end237
  call void @__assert_fail(i8* getelementptr inbounds ([32 x i8]* @.str43, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2419, i8* getelementptr inbounds ([48 x i8]* @__PRETTY_FUNCTION__.tdefl_compress_fast, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end245

cond.end245:                                      ; preds = %188, %cond.true243
  %189 = load i32* %cur_match_len, align 4
  %190 = load i32* %lookahead_size, align 4
  %sub246 = sub i32 %190, %189
  store i32 %sub246, i32* %lookahead_size, align 4
  %191 = load i8** %pLZ_code_buf, align 8
  %192 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor* %192, i32 0, i32 39
  %arrayidx247 = getelementptr inbounds [65536 x i8]* %m_lz_code_buf, i32 0, i64 65528
  %cmp248 = icmp ugt i8* %191, %arrayidx247
  br i1 %cmp248, label %if.then250, label %if.end270

if.then250:                                       ; preds = %cond.end245
  %193 = load i32* %lookahead_pos, align 4
  %194 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos252 = getelementptr inbounds %struct.tdefl_compressor* %194, i32 0, i32 6
  store i32 %193, i32* %m_lookahead_pos252, align 4
  %195 = load i32* %lookahead_size, align 4
  %196 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size253 = getelementptr inbounds %struct.tdefl_compressor* %196, i32 0, i32 7
  store i32 %195, i32* %m_lookahead_size253, align 4
  %197 = load i32* %dict_size, align 4
  %198 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size254 = getelementptr inbounds %struct.tdefl_compressor* %198, i32 0, i32 8
  store i32 %197, i32* %m_dict_size254, align 4
  %199 = load i32* %total_lz_bytes, align 4
  %200 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes255 = getelementptr inbounds %struct.tdefl_compressor* %200, i32 0, i32 14
  store i32 %199, i32* %m_total_lz_bytes255, align 4
  %201 = load i8** %pLZ_code_buf, align 8
  %202 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf256 = getelementptr inbounds %struct.tdefl_compressor* %202, i32 0, i32 9
  store i8* %201, i8** %m_pLZ_code_buf256, align 8
  %203 = load i8** %pLZ_flags, align 8
  %204 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags257 = getelementptr inbounds %struct.tdefl_compressor* %204, i32 0, i32 10
  store i8* %203, i8** %m_pLZ_flags257, align 8
  %205 = load i32* %num_flags_left, align 4
  %206 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left258 = getelementptr inbounds %struct.tdefl_compressor* %206, i32 0, i32 13
  store i32 %205, i32* %m_num_flags_left258, align 4
  %207 = load %struct.tdefl_compressor** %d.addr, align 8
  %call = call i32 @tdefl_flush_block(%struct.tdefl_compressor* %207, i32 0)
  store i32 %call, i32* %n251, align 4
  %cmp259 = icmp ne i32 %call, 0
  br i1 %cmp259, label %if.then261, label %if.end265

if.then261:                                       ; preds = %if.then250
  %208 = load i32* %n251, align 4
  %cmp262 = icmp slt i32 %208, 0
  %cond264 = select i1 %cmp262, i32 0, i32 1
  store i32 %cond264, i32* %retval
  br label %return

if.end265:                                        ; preds = %if.then250
  %209 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes266 = getelementptr inbounds %struct.tdefl_compressor* %209, i32 0, i32 14
  %210 = load i32* %m_total_lz_bytes266, align 4
  store i32 %210, i32* %total_lz_bytes, align 4
  %211 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf267 = getelementptr inbounds %struct.tdefl_compressor* %211, i32 0, i32 9
  %212 = load i8** %m_pLZ_code_buf267, align 8
  store i8* %212, i8** %pLZ_code_buf, align 8
  %213 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags268 = getelementptr inbounds %struct.tdefl_compressor* %213, i32 0, i32 10
  %214 = load i8** %m_pLZ_flags268, align 8
  store i8* %214, i8** %pLZ_flags, align 8
  %215 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left269 = getelementptr inbounds %struct.tdefl_compressor* %215, i32 0, i32 13
  %216 = load i32* %m_num_flags_left269, align 4
  store i32 %216, i32* %num_flags_left, align 4
  br label %if.end270

if.end270:                                        ; preds = %if.end265, %cond.end245
  br label %while.cond63

while.end271:                                     ; preds = %while.cond63
  br label %while.cond272

while.cond272:                                    ; preds = %if.end331, %while.end271
  %217 = load i32* %lookahead_size, align 4
  %tobool273 = icmp ne i32 %217, 0
  br i1 %tobool273, label %while.body274, label %while.end332

while.body274:                                    ; preds = %while.cond272
  %218 = load i32* %cur_pos, align 4
  %idxprom275 = zext i32 %218 to i64
  %219 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict276 = getelementptr inbounds %struct.tdefl_compressor* %219, i32 0, i32 35
  %arrayidx277 = getelementptr inbounds [33025 x i8]* %m_dict276, i32 0, i64 %idxprom275
  %220 = load i8* %arrayidx277, align 1
  store i8 %220, i8* %lit, align 1
  %221 = load i32* %total_lz_bytes, align 4
  %inc278 = add i32 %221, 1
  store i32 %inc278, i32* %total_lz_bytes, align 4
  %222 = load i8* %lit, align 1
  %223 = load i8** %pLZ_code_buf, align 8
  %incdec.ptr279 = getelementptr inbounds i8* %223, i32 1
  store i8* %incdec.ptr279, i8** %pLZ_code_buf, align 8
  store i8 %222, i8* %223, align 1
  %224 = load i8** %pLZ_flags, align 8
  %225 = load i8* %224, align 1
  %conv280 = zext i8 %225 to i32
  %shr281 = ashr i32 %conv280, 1
  %conv282 = trunc i32 %shr281 to i8
  %226 = load i8** %pLZ_flags, align 8
  store i8 %conv282, i8* %226, align 1
  %227 = load i32* %num_flags_left, align 4
  %dec283 = add i32 %227, -1
  store i32 %dec283, i32* %num_flags_left, align 4
  %cmp284 = icmp eq i32 %dec283, 0
  br i1 %cmp284, label %if.then286, label %if.end288

if.then286:                                       ; preds = %while.body274
  store i32 8, i32* %num_flags_left, align 4
  %228 = load i8** %pLZ_code_buf, align 8
  %incdec.ptr287 = getelementptr inbounds i8* %228, i32 1
  store i8* %incdec.ptr287, i8** %pLZ_code_buf, align 8
  store i8* %228, i8** %pLZ_flags, align 8
  br label %if.end288

if.end288:                                        ; preds = %if.then286, %while.body274
  %229 = load i8* %lit, align 1
  %idxprom289 = zext i8 %229 to i64
  %230 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count290 = getelementptr inbounds %struct.tdefl_compressor* %230, i32 0, i32 36
  %arrayidx291 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count290, i32 0, i64 0
  %arrayidx292 = getelementptr inbounds [288 x i16]* %arrayidx291, i32 0, i64 %idxprom289
  %231 = load i16* %arrayidx292, align 2
  %inc293 = add i16 %231, 1
  store i16 %inc293, i16* %arrayidx292, align 2
  %232 = load i32* %lookahead_pos, align 4
  %inc294 = add i32 %232, 1
  store i32 %inc294, i32* %lookahead_pos, align 4
  %233 = load i32* %dict_size, align 4
  %add295 = add i32 %233, 1
  %cmp296 = icmp ult i32 %add295, 32768
  br i1 %cmp296, label %cond.true298, label %cond.false300

cond.true298:                                     ; preds = %if.end288
  %234 = load i32* %dict_size, align 4
  %add299 = add i32 %234, 1
  br label %cond.end301

cond.false300:                                    ; preds = %if.end288
  br label %cond.end301

cond.end301:                                      ; preds = %cond.false300, %cond.true298
  %cond302 = phi i32 [ %add299, %cond.true298 ], [ 32768, %cond.false300 ]
  store i32 %cond302, i32* %dict_size, align 4
  %235 = load i32* %cur_pos, align 4
  %add303 = add i32 %235, 1
  %and304 = and i32 %add303, 32767
  store i32 %and304, i32* %cur_pos, align 4
  %236 = load i32* %lookahead_size, align 4
  %dec305 = add i32 %236, -1
  store i32 %dec305, i32* %lookahead_size, align 4
  %237 = load i8** %pLZ_code_buf, align 8
  %238 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf306 = getelementptr inbounds %struct.tdefl_compressor* %238, i32 0, i32 39
  %arrayidx307 = getelementptr inbounds [65536 x i8]* %m_lz_code_buf306, i32 0, i64 65528
  %cmp308 = icmp ugt i8* %237, %arrayidx307
  br i1 %cmp308, label %if.then310, label %if.end331

if.then310:                                       ; preds = %cond.end301
  %239 = load i32* %lookahead_pos, align 4
  %240 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos312 = getelementptr inbounds %struct.tdefl_compressor* %240, i32 0, i32 6
  store i32 %239, i32* %m_lookahead_pos312, align 4
  %241 = load i32* %lookahead_size, align 4
  %242 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size313 = getelementptr inbounds %struct.tdefl_compressor* %242, i32 0, i32 7
  store i32 %241, i32* %m_lookahead_size313, align 4
  %243 = load i32* %dict_size, align 4
  %244 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size314 = getelementptr inbounds %struct.tdefl_compressor* %244, i32 0, i32 8
  store i32 %243, i32* %m_dict_size314, align 4
  %245 = load i32* %total_lz_bytes, align 4
  %246 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes315 = getelementptr inbounds %struct.tdefl_compressor* %246, i32 0, i32 14
  store i32 %245, i32* %m_total_lz_bytes315, align 4
  %247 = load i8** %pLZ_code_buf, align 8
  %248 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf316 = getelementptr inbounds %struct.tdefl_compressor* %248, i32 0, i32 9
  store i8* %247, i8** %m_pLZ_code_buf316, align 8
  %249 = load i8** %pLZ_flags, align 8
  %250 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags317 = getelementptr inbounds %struct.tdefl_compressor* %250, i32 0, i32 10
  store i8* %249, i8** %m_pLZ_flags317, align 8
  %251 = load i32* %num_flags_left, align 4
  %252 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left318 = getelementptr inbounds %struct.tdefl_compressor* %252, i32 0, i32 13
  store i32 %251, i32* %m_num_flags_left318, align 4
  %253 = load %struct.tdefl_compressor** %d.addr, align 8
  %call319 = call i32 @tdefl_flush_block(%struct.tdefl_compressor* %253, i32 0)
  store i32 %call319, i32* %n311, align 4
  %cmp320 = icmp ne i32 %call319, 0
  br i1 %cmp320, label %if.then322, label %if.end326

if.then322:                                       ; preds = %if.then310
  %254 = load i32* %n311, align 4
  %cmp323 = icmp slt i32 %254, 0
  %cond325 = select i1 %cmp323, i32 0, i32 1
  store i32 %cond325, i32* %retval
  br label %return

if.end326:                                        ; preds = %if.then310
  %255 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes327 = getelementptr inbounds %struct.tdefl_compressor* %255, i32 0, i32 14
  %256 = load i32* %m_total_lz_bytes327, align 4
  store i32 %256, i32* %total_lz_bytes, align 4
  %257 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf328 = getelementptr inbounds %struct.tdefl_compressor* %257, i32 0, i32 9
  %258 = load i8** %m_pLZ_code_buf328, align 8
  store i8* %258, i8** %pLZ_code_buf, align 8
  %259 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags329 = getelementptr inbounds %struct.tdefl_compressor* %259, i32 0, i32 10
  %260 = load i8** %m_pLZ_flags329, align 8
  store i8* %260, i8** %pLZ_flags, align 8
  %261 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left330 = getelementptr inbounds %struct.tdefl_compressor* %261, i32 0, i32 13
  %262 = load i32* %m_num_flags_left330, align 4
  store i32 %262, i32* %num_flags_left, align 4
  br label %if.end331

if.end331:                                        ; preds = %if.end326, %cond.end301
  br label %while.cond272

while.end332:                                     ; preds = %while.cond272
  br label %while.cond

while.end333:                                     ; preds = %if.then61, %lor.end
  %263 = load i32* %lookahead_pos, align 4
  %264 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos334 = getelementptr inbounds %struct.tdefl_compressor* %264, i32 0, i32 6
  store i32 %263, i32* %m_lookahead_pos334, align 4
  %265 = load i32* %lookahead_size, align 4
  %266 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size335 = getelementptr inbounds %struct.tdefl_compressor* %266, i32 0, i32 7
  store i32 %265, i32* %m_lookahead_size335, align 4
  %267 = load i32* %dict_size, align 4
  %268 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size336 = getelementptr inbounds %struct.tdefl_compressor* %268, i32 0, i32 8
  store i32 %267, i32* %m_dict_size336, align 4
  %269 = load i32* %total_lz_bytes, align 4
  %270 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes337 = getelementptr inbounds %struct.tdefl_compressor* %270, i32 0, i32 14
  store i32 %269, i32* %m_total_lz_bytes337, align 4
  %271 = load i8** %pLZ_code_buf, align 8
  %272 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf338 = getelementptr inbounds %struct.tdefl_compressor* %272, i32 0, i32 9
  store i8* %271, i8** %m_pLZ_code_buf338, align 8
  %273 = load i8** %pLZ_flags, align 8
  %274 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags339 = getelementptr inbounds %struct.tdefl_compressor* %274, i32 0, i32 10
  store i8* %273, i8** %m_pLZ_flags339, align 8
  %275 = load i32* %num_flags_left, align 4
  %276 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left340 = getelementptr inbounds %struct.tdefl_compressor* %276, i32 0, i32 13
  store i32 %275, i32* %m_num_flags_left340, align 4
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %while.end333, %if.then322, %if.then261
  %277 = load i32* %retval
  ret i32 %277
}

; Function Attrs: nounwind uwtable
define internal i32 @tdefl_compress_normal(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr.i468 = alloca %struct.tdefl_compressor*, align 8
  %match_len.addr.i469 = alloca i32, align 4
  %match_dist.addr.i470 = alloca i32, align 4
  %s0.i471 = alloca i32, align 4
  %s1.i472 = alloca i32, align 4
  %d.addr.i442 = alloca %struct.tdefl_compressor*, align 8
  %lit.addr.i443 = alloca i8, align 1
  %d.addr.i369 = alloca %struct.tdefl_compressor*, align 8
  %match_len.addr.i370 = alloca i32, align 4
  %match_dist.addr.i371 = alloca i32, align 4
  %s0.i372 = alloca i32, align 4
  %s1.i373 = alloca i32, align 4
  %d.addr.i345 = alloca %struct.tdefl_compressor*, align 8
  %match_len.addr.i = alloca i32, align 4
  %match_dist.addr.i = alloca i32, align 4
  %s0.i = alloca i32, align 4
  %s1.i = alloca i32, align 4
  %d.addr.i336 = alloca %struct.tdefl_compressor*, align 8
  %lit.addr.i = alloca i8, align 1
  %d.addr.i = alloca %struct.tdefl_compressor*, align 8
  %lookahead_pos.addr.i = alloca i32, align 4
  %max_dist.addr.i = alloca i32, align 4
  %max_match_len.addr.i = alloca i32, align 4
  %pMatch_dist.addr.i = alloca i32*, align 8
  %pMatch_len.addr.i = alloca i32*, align 8
  %dist.i = alloca i32, align 4
  %pos.i = alloca i32, align 4
  %match_len.i = alloca i32, align 4
  %probe_pos.i = alloca i32, align 4
  %next_probe_pos.i = alloca i32, align 4
  %probe_len.i = alloca i32, align 4
  %num_probes_left.i = alloca i32, align 4
  %s.i = alloca i16*, align 8
  %p.i = alloca i16*, align 8
  %q.i = alloca i16*, align 8
  %c01.i = alloca i16, align 2
  %s01.i = alloca i16, align 2
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %pSrc = alloca i8*, align 8
  %src_buf_left = alloca i64, align 8
  %flush = alloca i32, align 4
  %len_to_move = alloca i32, align 4
  %cur_match_dist = alloca i32, align 4
  %cur_match_len = alloca i32, align 4
  %cur_pos = alloca i32, align 4
  %dst_pos = alloca i32, align 4
  %ins_pos = alloca i32, align 4
  %hash = alloca i32, align 4
  %num_bytes_to_process = alloca i32, align 4
  %pSrc_end = alloca i8*, align 8
  %c = alloca i8, align 1
  %c66 = alloca i8, align 1
  %dst_pos68 = alloca i32, align 4
  %ins_pos91 = alloca i32, align 4
  %hash97 = alloca i32, align 4
  %c166 = alloca i8, align 1
  %n = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  %0 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor* %0, i32 0, i32 32
  %1 = load i8** %m_pSrc, align 8
  store i8* %1, i8** %pSrc, align 8
  %2 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left = getelementptr inbounds %struct.tdefl_compressor* %2, i32 0, i32 33
  %3 = load i64* %m_src_buf_left, align 8
  store i64 %3, i64* %src_buf_left, align 8
  %4 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flush = getelementptr inbounds %struct.tdefl_compressor* %4, i32 0, i32 31
  %5 = load i32* %m_flush, align 4
  store i32 %5, i32* %flush, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end332, %entry
  %6 = load i64* %src_buf_left, align 8
  %tobool = icmp ne i64 %6, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %7 = load i32* %flush, align 4
  %tobool1 = icmp ne i32 %7, 0
  br i1 %tobool1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %8 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size = getelementptr inbounds %struct.tdefl_compressor* %8, i32 0, i32 7
  %9 = load i32* %m_lookahead_size, align 4
  %tobool2 = icmp ne i32 %9, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %10 = phi i1 [ false, %lor.rhs ], [ %tobool2, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %while.cond
  %11 = phi i1 [ true, %while.cond ], [ %10, %land.end ]
  br i1 %11, label %while.body, label %while.end333

while.body:                                       ; preds = %lor.end
  %12 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size3 = getelementptr inbounds %struct.tdefl_compressor* %12, i32 0, i32 7
  %13 = load i32* %m_lookahead_size3, align 4
  %14 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor* %14, i32 0, i32 8
  %15 = load i32* %m_dict_size, align 4
  %add = add i32 %13, %15
  %cmp = icmp uge i32 %add, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %16 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos = getelementptr inbounds %struct.tdefl_compressor* %16, i32 0, i32 6
  %17 = load i32* %m_lookahead_pos, align 4
  %18 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size4 = getelementptr inbounds %struct.tdefl_compressor* %18, i32 0, i32 7
  %19 = load i32* %m_lookahead_size4, align 4
  %add5 = add i32 %17, %19
  %and = and i32 %add5, 32767
  store i32 %and, i32* %dst_pos, align 4
  %20 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos6 = getelementptr inbounds %struct.tdefl_compressor* %20, i32 0, i32 6
  %21 = load i32* %m_lookahead_pos6, align 4
  %22 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size7 = getelementptr inbounds %struct.tdefl_compressor* %22, i32 0, i32 7
  %23 = load i32* %m_lookahead_size7, align 4
  %add8 = add i32 %21, %23
  %sub = sub i32 %add8, 2
  store i32 %sub, i32* %ins_pos, align 4
  %24 = load i32* %ins_pos, align 4
  %and9 = and i32 %24, 32767
  %idxprom = zext i32 %and9 to i64
  %25 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict = getelementptr inbounds %struct.tdefl_compressor* %25, i32 0, i32 35
  %arrayidx = getelementptr inbounds [33025 x i8]* %m_dict, i32 0, i64 %idxprom
  %26 = load i8* %arrayidx, align 1
  %conv = zext i8 %26 to i32
  %shl = shl i32 %conv, 5
  %27 = load i32* %ins_pos, align 4
  %add10 = add i32 %27, 1
  %and11 = and i32 %add10, 32767
  %idxprom12 = zext i32 %and11 to i64
  %28 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict13 = getelementptr inbounds %struct.tdefl_compressor* %28, i32 0, i32 35
  %arrayidx14 = getelementptr inbounds [33025 x i8]* %m_dict13, i32 0, i64 %idxprom12
  %29 = load i8* %arrayidx14, align 1
  %conv15 = zext i8 %29 to i32
  %xor = xor i32 %shl, %conv15
  store i32 %xor, i32* %hash, align 4
  %30 = load i64* %src_buf_left, align 8
  %31 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size16 = getelementptr inbounds %struct.tdefl_compressor* %31, i32 0, i32 7
  %32 = load i32* %m_lookahead_size16, align 4
  %sub17 = sub i32 258, %32
  %conv18 = zext i32 %sub17 to i64
  %cmp19 = icmp ult i64 %30, %conv18
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %33 = load i64* %src_buf_left, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %34 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size21 = getelementptr inbounds %struct.tdefl_compressor* %34, i32 0, i32 7
  %35 = load i32* %m_lookahead_size21, align 4
  %sub22 = sub i32 258, %35
  %conv23 = zext i32 %sub22 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %33, %cond.true ], [ %conv23, %cond.false ]
  %conv24 = trunc i64 %cond to i32
  store i32 %conv24, i32* %num_bytes_to_process, align 4
  %36 = load i8** %pSrc, align 8
  %37 = load i32* %num_bytes_to_process, align 4
  %idx.ext = zext i32 %37 to i64
  %add.ptr = getelementptr inbounds i8* %36, i64 %idx.ext
  store i8* %add.ptr, i8** %pSrc_end, align 8
  %38 = load i32* %num_bytes_to_process, align 4
  %conv25 = zext i32 %38 to i64
  %39 = load i64* %src_buf_left, align 8
  %sub26 = sub i64 %39, %conv25
  store i64 %sub26, i64* %src_buf_left, align 8
  %40 = load i32* %num_bytes_to_process, align 4
  %41 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size27 = getelementptr inbounds %struct.tdefl_compressor* %41, i32 0, i32 7
  %42 = load i32* %m_lookahead_size27, align 4
  %add28 = add i32 %42, %40
  store i32 %add28, i32* %m_lookahead_size27, align 4
  br label %while.cond29

while.cond29:                                     ; preds = %if.end, %cond.end
  %43 = load i8** %pSrc, align 8
  %44 = load i8** %pSrc_end, align 8
  %cmp30 = icmp ne i8* %43, %44
  br i1 %cmp30, label %while.body32, label %while.end

while.body32:                                     ; preds = %while.cond29
  %45 = load i8** %pSrc, align 8
  %incdec.ptr = getelementptr inbounds i8* %45, i32 1
  store i8* %incdec.ptr, i8** %pSrc, align 8
  %46 = load i8* %45, align 1
  store i8 %46, i8* %c, align 1
  %47 = load i8* %c, align 1
  %48 = load i32* %dst_pos, align 4
  %idxprom33 = zext i32 %48 to i64
  %49 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict34 = getelementptr inbounds %struct.tdefl_compressor* %49, i32 0, i32 35
  %arrayidx35 = getelementptr inbounds [33025 x i8]* %m_dict34, i32 0, i64 %idxprom33
  store i8 %47, i8* %arrayidx35, align 1
  %50 = load i32* %dst_pos, align 4
  %cmp36 = icmp ult i32 %50, 257
  br i1 %cmp36, label %if.then38, label %if.end

if.then38:                                        ; preds = %while.body32
  %51 = load i8* %c, align 1
  %52 = load i32* %dst_pos, align 4
  %add39 = add i32 32768, %52
  %idxprom40 = zext i32 %add39 to i64
  %53 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict41 = getelementptr inbounds %struct.tdefl_compressor* %53, i32 0, i32 35
  %arrayidx42 = getelementptr inbounds [33025 x i8]* %m_dict41, i32 0, i64 %idxprom40
  store i8 %51, i8* %arrayidx42, align 1
  br label %if.end

if.end:                                           ; preds = %if.then38, %while.body32
  %54 = load i32* %hash, align 4
  %shl43 = shl i32 %54, 5
  %55 = load i8* %c, align 1
  %conv44 = zext i8 %55 to i32
  %xor45 = xor i32 %shl43, %conv44
  %and46 = and i32 %xor45, 32767
  store i32 %and46, i32* %hash, align 4
  %56 = load i32* %hash, align 4
  %idxprom47 = zext i32 %56 to i64
  %57 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_hash = getelementptr inbounds %struct.tdefl_compressor* %57, i32 0, i32 41
  %arrayidx48 = getelementptr inbounds [32768 x i16]* %m_hash, i32 0, i64 %idxprom47
  %58 = load i16* %arrayidx48, align 2
  %59 = load i32* %ins_pos, align 4
  %and49 = and i32 %59, 32767
  %idxprom50 = zext i32 %and49 to i64
  %60 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_next = getelementptr inbounds %struct.tdefl_compressor* %60, i32 0, i32 40
  %arrayidx51 = getelementptr inbounds [32768 x i16]* %m_next, i32 0, i64 %idxprom50
  store i16 %58, i16* %arrayidx51, align 2
  %61 = load i32* %ins_pos, align 4
  %conv52 = trunc i32 %61 to i16
  %62 = load i32* %hash, align 4
  %idxprom53 = zext i32 %62 to i64
  %63 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_hash54 = getelementptr inbounds %struct.tdefl_compressor* %63, i32 0, i32 41
  %arrayidx55 = getelementptr inbounds [32768 x i16]* %m_hash54, i32 0, i64 %idxprom53
  store i16 %conv52, i16* %arrayidx55, align 2
  %64 = load i32* %dst_pos, align 4
  %add56 = add i32 %64, 1
  %and57 = and i32 %add56, 32767
  store i32 %and57, i32* %dst_pos, align 4
  %65 = load i32* %ins_pos, align 4
  %inc = add i32 %65, 1
  store i32 %inc, i32* %ins_pos, align 4
  br label %while.cond29

while.end:                                        ; preds = %while.cond29
  br label %if.end128

if.else:                                          ; preds = %while.body
  br label %while.cond58

while.cond58:                                     ; preds = %if.end126, %if.else
  %66 = load i64* %src_buf_left, align 8
  %tobool59 = icmp ne i64 %66, 0
  br i1 %tobool59, label %land.rhs60, label %land.end64

land.rhs60:                                       ; preds = %while.cond58
  %67 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size61 = getelementptr inbounds %struct.tdefl_compressor* %67, i32 0, i32 7
  %68 = load i32* %m_lookahead_size61, align 4
  %cmp62 = icmp ult i32 %68, 258
  br label %land.end64

land.end64:                                       ; preds = %land.rhs60, %while.cond58
  %69 = phi i1 [ false, %while.cond58 ], [ %cmp62, %land.rhs60 ]
  br i1 %69, label %while.body65, label %while.end127

while.body65:                                     ; preds = %land.end64
  %70 = load i8** %pSrc, align 8
  %incdec.ptr67 = getelementptr inbounds i8* %70, i32 1
  store i8* %incdec.ptr67, i8** %pSrc, align 8
  %71 = load i8* %70, align 1
  store i8 %71, i8* %c66, align 1
  %72 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos69 = getelementptr inbounds %struct.tdefl_compressor* %72, i32 0, i32 6
  %73 = load i32* %m_lookahead_pos69, align 4
  %74 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size70 = getelementptr inbounds %struct.tdefl_compressor* %74, i32 0, i32 7
  %75 = load i32* %m_lookahead_size70, align 4
  %add71 = add i32 %73, %75
  %and72 = and i32 %add71, 32767
  store i32 %and72, i32* %dst_pos68, align 4
  %76 = load i64* %src_buf_left, align 8
  %dec = add i64 %76, -1
  store i64 %dec, i64* %src_buf_left, align 8
  %77 = load i8* %c66, align 1
  %78 = load i32* %dst_pos68, align 4
  %idxprom73 = zext i32 %78 to i64
  %79 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict74 = getelementptr inbounds %struct.tdefl_compressor* %79, i32 0, i32 35
  %arrayidx75 = getelementptr inbounds [33025 x i8]* %m_dict74, i32 0, i64 %idxprom73
  store i8 %77, i8* %arrayidx75, align 1
  %80 = load i32* %dst_pos68, align 4
  %cmp76 = icmp ult i32 %80, 257
  br i1 %cmp76, label %if.then78, label %if.end83

if.then78:                                        ; preds = %while.body65
  %81 = load i8* %c66, align 1
  %82 = load i32* %dst_pos68, align 4
  %add79 = add i32 32768, %82
  %idxprom80 = zext i32 %add79 to i64
  %83 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict81 = getelementptr inbounds %struct.tdefl_compressor* %83, i32 0, i32 35
  %arrayidx82 = getelementptr inbounds [33025 x i8]* %m_dict81, i32 0, i64 %idxprom80
  store i8 %81, i8* %arrayidx82, align 1
  br label %if.end83

if.end83:                                         ; preds = %if.then78, %while.body65
  %84 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size84 = getelementptr inbounds %struct.tdefl_compressor* %84, i32 0, i32 7
  %85 = load i32* %m_lookahead_size84, align 4
  %inc85 = add i32 %85, 1
  store i32 %inc85, i32* %m_lookahead_size84, align 4
  %86 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size86 = getelementptr inbounds %struct.tdefl_compressor* %86, i32 0, i32 8
  %87 = load i32* %m_dict_size86, align 4
  %add87 = add i32 %inc85, %87
  %cmp88 = icmp uge i32 %add87, 3
  br i1 %cmp88, label %if.then90, label %if.end126

if.then90:                                        ; preds = %if.end83
  %88 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos92 = getelementptr inbounds %struct.tdefl_compressor* %88, i32 0, i32 6
  %89 = load i32* %m_lookahead_pos92, align 4
  %90 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size93 = getelementptr inbounds %struct.tdefl_compressor* %90, i32 0, i32 7
  %91 = load i32* %m_lookahead_size93, align 4
  %sub94 = sub i32 %91, 1
  %add95 = add i32 %89, %sub94
  %sub96 = sub i32 %add95, 2
  store i32 %sub96, i32* %ins_pos91, align 4
  %92 = load i32* %ins_pos91, align 4
  %and98 = and i32 %92, 32767
  %idxprom99 = zext i32 %and98 to i64
  %93 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict100 = getelementptr inbounds %struct.tdefl_compressor* %93, i32 0, i32 35
  %arrayidx101 = getelementptr inbounds [33025 x i8]* %m_dict100, i32 0, i64 %idxprom99
  %94 = load i8* %arrayidx101, align 1
  %conv102 = zext i8 %94 to i32
  %shl103 = shl i32 %conv102, 10
  %95 = load i32* %ins_pos91, align 4
  %add104 = add i32 %95, 1
  %and105 = and i32 %add104, 32767
  %idxprom106 = zext i32 %and105 to i64
  %96 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict107 = getelementptr inbounds %struct.tdefl_compressor* %96, i32 0, i32 35
  %arrayidx108 = getelementptr inbounds [33025 x i8]* %m_dict107, i32 0, i64 %idxprom106
  %97 = load i8* %arrayidx108, align 1
  %conv109 = zext i8 %97 to i32
  %shl110 = shl i32 %conv109, 5
  %xor111 = xor i32 %shl103, %shl110
  %98 = load i8* %c66, align 1
  %conv112 = zext i8 %98 to i32
  %xor113 = xor i32 %xor111, %conv112
  %and114 = and i32 %xor113, 32767
  store i32 %and114, i32* %hash97, align 4
  %99 = load i32* %hash97, align 4
  %idxprom115 = zext i32 %99 to i64
  %100 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_hash116 = getelementptr inbounds %struct.tdefl_compressor* %100, i32 0, i32 41
  %arrayidx117 = getelementptr inbounds [32768 x i16]* %m_hash116, i32 0, i64 %idxprom115
  %101 = load i16* %arrayidx117, align 2
  %102 = load i32* %ins_pos91, align 4
  %and118 = and i32 %102, 32767
  %idxprom119 = zext i32 %and118 to i64
  %103 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_next120 = getelementptr inbounds %struct.tdefl_compressor* %103, i32 0, i32 40
  %arrayidx121 = getelementptr inbounds [32768 x i16]* %m_next120, i32 0, i64 %idxprom119
  store i16 %101, i16* %arrayidx121, align 2
  %104 = load i32* %ins_pos91, align 4
  %conv122 = trunc i32 %104 to i16
  %105 = load i32* %hash97, align 4
  %idxprom123 = zext i32 %105 to i64
  %106 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_hash124 = getelementptr inbounds %struct.tdefl_compressor* %106, i32 0, i32 41
  %arrayidx125 = getelementptr inbounds [32768 x i16]* %m_hash124, i32 0, i64 %idxprom123
  store i16 %conv122, i16* %arrayidx125, align 2
  br label %if.end126

if.end126:                                        ; preds = %if.then90, %if.end83
  br label %while.cond58

while.end127:                                     ; preds = %land.end64
  br label %if.end128

if.end128:                                        ; preds = %while.end127, %while.end
  %107 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size129 = getelementptr inbounds %struct.tdefl_compressor* %107, i32 0, i32 7
  %108 = load i32* %m_lookahead_size129, align 4
  %sub130 = sub i32 32768, %108
  %109 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size131 = getelementptr inbounds %struct.tdefl_compressor* %109, i32 0, i32 8
  %110 = load i32* %m_dict_size131, align 4
  %cmp132 = icmp ult i32 %sub130, %110
  br i1 %cmp132, label %cond.true134, label %cond.false137

cond.true134:                                     ; preds = %if.end128
  %111 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size135 = getelementptr inbounds %struct.tdefl_compressor* %111, i32 0, i32 7
  %112 = load i32* %m_lookahead_size135, align 4
  %sub136 = sub i32 32768, %112
  br label %cond.end139

cond.false137:                                    ; preds = %if.end128
  %113 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size138 = getelementptr inbounds %struct.tdefl_compressor* %113, i32 0, i32 8
  %114 = load i32* %m_dict_size138, align 4
  br label %cond.end139

cond.end139:                                      ; preds = %cond.false137, %cond.true134
  %cond140 = phi i32 [ %sub136, %cond.true134 ], [ %114, %cond.false137 ]
  %115 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size141 = getelementptr inbounds %struct.tdefl_compressor* %115, i32 0, i32 8
  store i32 %cond140, i32* %m_dict_size141, align 4
  %116 = load i32* %flush, align 4
  %tobool142 = icmp ne i32 %116, 0
  br i1 %tobool142, label %if.end147, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end139
  %117 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size143 = getelementptr inbounds %struct.tdefl_compressor* %117, i32 0, i32 7
  %118 = load i32* %m_lookahead_size143, align 4
  %cmp144 = icmp ult i32 %118, 258
  br i1 %cmp144, label %if.then146, label %if.end147

if.then146:                                       ; preds = %land.lhs.true
  br label %while.end333

if.end147:                                        ; preds = %land.lhs.true, %cond.end139
  store i32 1, i32* %len_to_move, align 4
  store i32 0, i32* %cur_match_dist, align 4
  %119 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len = getelementptr inbounds %struct.tdefl_compressor* %119, i32 0, i32 19
  %120 = load i32* %m_saved_match_len, align 4
  %tobool148 = icmp ne i32 %120, 0
  br i1 %tobool148, label %cond.true149, label %cond.false151

cond.true149:                                     ; preds = %if.end147
  %121 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len150 = getelementptr inbounds %struct.tdefl_compressor* %121, i32 0, i32 19
  %122 = load i32* %m_saved_match_len150, align 4
  br label %cond.end152

cond.false151:                                    ; preds = %if.end147
  br label %cond.end152

cond.end152:                                      ; preds = %cond.false151, %cond.true149
  %cond153 = phi i32 [ %122, %cond.true149 ], [ 2, %cond.false151 ]
  store i32 %cond153, i32* %cur_match_len, align 4
  %123 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos154 = getelementptr inbounds %struct.tdefl_compressor* %123, i32 0, i32 6
  %124 = load i32* %m_lookahead_pos154, align 4
  %and155 = and i32 %124, 32767
  store i32 %and155, i32* %cur_pos, align 4
  %125 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flags = getelementptr inbounds %struct.tdefl_compressor* %125, i32 0, i32 2
  %126 = load i32* %m_flags, align 4
  %and156 = and i32 %126, 589824
  %tobool157 = icmp ne i32 %and156, 0
  br i1 %tobool157, label %if.then158, label %if.else195

if.then158:                                       ; preds = %cond.end152
  %127 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size159 = getelementptr inbounds %struct.tdefl_compressor* %127, i32 0, i32 8
  %128 = load i32* %m_dict_size159, align 4
  %tobool160 = icmp ne i32 %128, 0
  br i1 %tobool160, label %land.lhs.true161, label %if.end194

land.lhs.true161:                                 ; preds = %if.then158
  %129 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flags162 = getelementptr inbounds %struct.tdefl_compressor* %129, i32 0, i32 2
  %130 = load i32* %m_flags162, align 4
  %and163 = and i32 %130, 524288
  %tobool164 = icmp ne i32 %and163, 0
  br i1 %tobool164, label %if.end194, label %if.then165

if.then165:                                       ; preds = %land.lhs.true161
  %131 = load i32* %cur_pos, align 4
  %sub167 = sub i32 %131, 1
  %and168 = and i32 %sub167, 32767
  %idxprom169 = zext i32 %and168 to i64
  %132 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict170 = getelementptr inbounds %struct.tdefl_compressor* %132, i32 0, i32 35
  %arrayidx171 = getelementptr inbounds [33025 x i8]* %m_dict170, i32 0, i64 %idxprom169
  %133 = load i8* %arrayidx171, align 1
  store i8 %133, i8* %c166, align 1
  store i32 0, i32* %cur_match_len, align 4
  br label %while.cond172

while.cond172:                                    ; preds = %if.end186, %if.then165
  %134 = load i32* %cur_match_len, align 4
  %135 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size173 = getelementptr inbounds %struct.tdefl_compressor* %135, i32 0, i32 7
  %136 = load i32* %m_lookahead_size173, align 4
  %cmp174 = icmp ult i32 %134, %136
  br i1 %cmp174, label %while.body176, label %while.end188

while.body176:                                    ; preds = %while.cond172
  %137 = load i32* %cur_pos, align 4
  %138 = load i32* %cur_match_len, align 4
  %add177 = add i32 %137, %138
  %idxprom178 = zext i32 %add177 to i64
  %139 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict179 = getelementptr inbounds %struct.tdefl_compressor* %139, i32 0, i32 35
  %arrayidx180 = getelementptr inbounds [33025 x i8]* %m_dict179, i32 0, i64 %idxprom178
  %140 = load i8* %arrayidx180, align 1
  %conv181 = zext i8 %140 to i32
  %141 = load i8* %c166, align 1
  %conv182 = zext i8 %141 to i32
  %cmp183 = icmp ne i32 %conv181, %conv182
  br i1 %cmp183, label %if.then185, label %if.end186

if.then185:                                       ; preds = %while.body176
  br label %while.end188

if.end186:                                        ; preds = %while.body176
  %142 = load i32* %cur_match_len, align 4
  %inc187 = add i32 %142, 1
  store i32 %inc187, i32* %cur_match_len, align 4
  br label %while.cond172

while.end188:                                     ; preds = %if.then185, %while.cond172
  %143 = load i32* %cur_match_len, align 4
  %cmp189 = icmp ult i32 %143, 3
  br i1 %cmp189, label %if.then191, label %if.else192

if.then191:                                       ; preds = %while.end188
  store i32 0, i32* %cur_match_len, align 4
  br label %if.end193

if.else192:                                       ; preds = %while.end188
  store i32 1, i32* %cur_match_dist, align 4
  br label %if.end193

if.end193:                                        ; preds = %if.else192, %if.then191
  br label %if.end194

if.end194:                                        ; preds = %if.end193, %land.lhs.true161, %if.then158
  br label %if.end199

if.else195:                                       ; preds = %cond.end152
  %144 = load %struct.tdefl_compressor** %d.addr, align 8
  %145 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos196 = getelementptr inbounds %struct.tdefl_compressor* %145, i32 0, i32 6
  %146 = load i32* %m_lookahead_pos196, align 4
  %147 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size197 = getelementptr inbounds %struct.tdefl_compressor* %147, i32 0, i32 8
  %148 = load i32* %m_dict_size197, align 4
  %149 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size198 = getelementptr inbounds %struct.tdefl_compressor* %149, i32 0, i32 7
  %150 = load i32* %m_lookahead_size198, align 4
  store %struct.tdefl_compressor* %144, %struct.tdefl_compressor** %d.addr.i, align 8
  store i32 %146, i32* %lookahead_pos.addr.i, align 4
  store i32 %148, i32* %max_dist.addr.i, align 4
  store i32 %150, i32* %max_match_len.addr.i, align 4
  store i32* %cur_match_dist, i32** %pMatch_dist.addr.i, align 8
  store i32* %cur_match_len, i32** %pMatch_len.addr.i, align 8
  %151 = load i32* %lookahead_pos.addr.i, align 4
  %and.i = and i32 %151, 32767
  store i32 %and.i, i32* %pos.i, align 4
  %152 = load i32** %pMatch_len.addr.i, align 8
  %153 = load i32* %152, align 4
  store i32 %153, i32* %match_len.i, align 4
  %154 = load i32* %pos.i, align 4
  store i32 %154, i32* %probe_pos.i, align 4
  %155 = load i32* %match_len.i, align 4
  %cmp.i = icmp uge i32 %155, 32
  %conv.i = zext i1 %cmp.i to i32
  %idxprom.i = sext i32 %conv.i to i64
  %156 = load %struct.tdefl_compressor** %d.addr.i, align 8
  %m_max_probes.i = getelementptr inbounds %struct.tdefl_compressor* %156, i32 0, i32 3
  %arrayidx.i = getelementptr inbounds [2 x i32]* %m_max_probes.i, i32 0, i64 %idxprom.i
  %157 = load i32* %arrayidx.i, align 4
  store i32 %157, i32* %num_probes_left.i, align 4
  %158 = load %struct.tdefl_compressor** %d.addr.i, align 8
  %m_dict.i = getelementptr inbounds %struct.tdefl_compressor* %158, i32 0, i32 35
  %arraydecay.i = getelementptr inbounds [33025 x i8]* %m_dict.i, i32 0, i32 0
  %159 = load i32* %pos.i, align 4
  %idx.ext.i = zext i32 %159 to i64
  %add.ptr.i = getelementptr inbounds i8* %arraydecay.i, i64 %idx.ext.i
  %160 = bitcast i8* %add.ptr.i to i16*
  store i16* %160, i16** %s.i, align 8
  %161 = load i32* %pos.i, align 4
  %162 = load i32* %match_len.i, align 4
  %add.i = add i32 %161, %162
  %sub.i = sub i32 %add.i, 1
  %idxprom1.i = zext i32 %sub.i to i64
  %163 = load %struct.tdefl_compressor** %d.addr.i, align 8
  %m_dict2.i = getelementptr inbounds %struct.tdefl_compressor* %163, i32 0, i32 35
  %arrayidx3.i = getelementptr inbounds [33025 x i8]* %m_dict2.i, i32 0, i64 %idxprom1.i
  %164 = bitcast i8* %arrayidx3.i to i16*
  %165 = load i16* %164, align 2
  store i16 %165, i16* %c01.i, align 2
  %166 = load i16** %s.i, align 8
  %167 = load i16* %166, align 2
  store i16 %167, i16* %s01.i, align 2
  %168 = load i32* %max_match_len.addr.i, align 4
  %cmp4.i = icmp ule i32 %168, 258
  br i1 %cmp4.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %if.else195
  %169 = load i32* %max_match_len.addr.i, align 4
  %170 = load i32* %match_len.i, align 4
  %cmp6.i = icmp ule i32 %169, %170
  br i1 %cmp6.i, label %if.then.i, label %if.end.i

cond.false.i:                                     ; preds = %if.else195
  call void @__assert_fail(i8* getelementptr inbounds ([37 x i8]* @.str41, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2271, i8* getelementptr inbounds ([91 x i8]* @__PRETTY_FUNCTION__.tdefl_find_match, i32 0, i32 0)) #6
  unreachable

if.then.i:                                        ; preds = %cond.true.i
  br label %tdefl_find_match.exit

if.end.i:                                         ; preds = %cond.true.i
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.end157.i, %if.then96.i, %if.end.i
  br label %for.cond8.i

for.cond8.i:                                      ; preds = %if.end84.i, %for.cond.i
  %171 = load i32* %num_probes_left.i, align 4
  %dec.i = add i32 %171, -1
  store i32 %dec.i, i32* %num_probes_left.i, align 4
  %cmp9.i = icmp eq i32 %dec.i, 0
  br i1 %cmp9.i, label %if.then11.i, label %if.end12.i

if.then11.i:                                      ; preds = %for.cond8.i
  br label %tdefl_find_match.exit

if.end12.i:                                       ; preds = %for.cond8.i
  %172 = load i32* %probe_pos.i, align 4
  %idxprom13.i = zext i32 %172 to i64
  %173 = load %struct.tdefl_compressor** %d.addr.i, align 8
  %m_next.i = getelementptr inbounds %struct.tdefl_compressor* %173, i32 0, i32 40
  %arrayidx14.i = getelementptr inbounds [32768 x i16]* %m_next.i, i32 0, i64 %idxprom13.i
  %174 = load i16* %arrayidx14.i, align 2
  %conv15.i = zext i16 %174 to i32
  store i32 %conv15.i, i32* %next_probe_pos.i, align 4
  %175 = load i32* %next_probe_pos.i, align 4
  %tobool.i = icmp ne i32 %175, 0
  br i1 %tobool.i, label %lor.lhs.false.i, label %if.then21.i

lor.lhs.false.i:                                  ; preds = %if.end12.i
  %176 = load i32* %lookahead_pos.addr.i, align 4
  %177 = load i32* %next_probe_pos.i, align 4
  %sub16.i = sub i32 %176, %177
  %conv17.i = trunc i32 %sub16.i to i16
  %conv18.i = zext i16 %conv17.i to i32
  store i32 %conv18.i, i32* %dist.i, align 4
  %178 = load i32* %max_dist.addr.i, align 4
  %cmp19.i = icmp ugt i32 %conv18.i, %178
  br i1 %cmp19.i, label %if.then21.i, label %if.end22.i

if.then21.i:                                      ; preds = %lor.lhs.false.i, %if.end12.i
  br label %tdefl_find_match.exit

if.end22.i:                                       ; preds = %lor.lhs.false.i
  %179 = load i32* %next_probe_pos.i, align 4
  %and23.i = and i32 %179, 32767
  store i32 %and23.i, i32* %probe_pos.i, align 4
  %180 = load i32* %probe_pos.i, align 4
  %181 = load i32* %match_len.i, align 4
  %add24.i = add i32 %180, %181
  %sub25.i = sub i32 %add24.i, 1
  %idxprom26.i = zext i32 %sub25.i to i64
  %182 = load %struct.tdefl_compressor** %d.addr.i, align 8
  %m_dict27.i = getelementptr inbounds %struct.tdefl_compressor* %182, i32 0, i32 35
  %arrayidx28.i = getelementptr inbounds [33025 x i8]* %m_dict27.i, i32 0, i64 %idxprom26.i
  %183 = bitcast i8* %arrayidx28.i to i16*
  %184 = load i16* %183, align 2
  %conv29.i = zext i16 %184 to i32
  %185 = load i16* %c01.i, align 2
  %conv30.i = zext i16 %185 to i32
  %cmp31.i = icmp eq i32 %conv29.i, %conv30.i
  br i1 %cmp31.i, label %if.then33.i, label %if.end34.i

if.then33.i:                                      ; preds = %if.end22.i
  br label %for.end.i

if.end34.i:                                       ; preds = %if.end22.i
  %186 = load i32* %probe_pos.i, align 4
  %idxprom35.i = zext i32 %186 to i64
  %187 = load %struct.tdefl_compressor** %d.addr.i, align 8
  %m_next36.i = getelementptr inbounds %struct.tdefl_compressor* %187, i32 0, i32 40
  %arrayidx37.i = getelementptr inbounds [32768 x i16]* %m_next36.i, i32 0, i64 %idxprom35.i
  %188 = load i16* %arrayidx37.i, align 2
  %conv38.i = zext i16 %188 to i32
  store i32 %conv38.i, i32* %next_probe_pos.i, align 4
  %189 = load i32* %next_probe_pos.i, align 4
  %tobool39.i = icmp ne i32 %189, 0
  br i1 %tobool39.i, label %lor.lhs.false40.i, label %if.then46.i

lor.lhs.false40.i:                                ; preds = %if.end34.i
  %190 = load i32* %lookahead_pos.addr.i, align 4
  %191 = load i32* %next_probe_pos.i, align 4
  %sub41.i = sub i32 %190, %191
  %conv42.i = trunc i32 %sub41.i to i16
  %conv43.i = zext i16 %conv42.i to i32
  store i32 %conv43.i, i32* %dist.i, align 4
  %192 = load i32* %max_dist.addr.i, align 4
  %cmp44.i = icmp ugt i32 %conv43.i, %192
  br i1 %cmp44.i, label %if.then46.i, label %if.end47.i

if.then46.i:                                      ; preds = %lor.lhs.false40.i, %if.end34.i
  br label %tdefl_find_match.exit

if.end47.i:                                       ; preds = %lor.lhs.false40.i
  %193 = load i32* %next_probe_pos.i, align 4
  %and48.i = and i32 %193, 32767
  store i32 %and48.i, i32* %probe_pos.i, align 4
  %194 = load i32* %probe_pos.i, align 4
  %195 = load i32* %match_len.i, align 4
  %add49.i = add i32 %194, %195
  %sub50.i = sub i32 %add49.i, 1
  %idxprom51.i = zext i32 %sub50.i to i64
  %196 = load %struct.tdefl_compressor** %d.addr.i, align 8
  %m_dict52.i = getelementptr inbounds %struct.tdefl_compressor* %196, i32 0, i32 35
  %arrayidx53.i = getelementptr inbounds [33025 x i8]* %m_dict52.i, i32 0, i64 %idxprom51.i
  %197 = bitcast i8* %arrayidx53.i to i16*
  %198 = load i16* %197, align 2
  %conv54.i = zext i16 %198 to i32
  %199 = load i16* %c01.i, align 2
  %conv55.i = zext i16 %199 to i32
  %cmp56.i = icmp eq i32 %conv54.i, %conv55.i
  br i1 %cmp56.i, label %if.then58.i, label %if.end59.i

if.then58.i:                                      ; preds = %if.end47.i
  br label %for.end.i

if.end59.i:                                       ; preds = %if.end47.i
  %200 = load i32* %probe_pos.i, align 4
  %idxprom60.i = zext i32 %200 to i64
  %201 = load %struct.tdefl_compressor** %d.addr.i, align 8
  %m_next61.i = getelementptr inbounds %struct.tdefl_compressor* %201, i32 0, i32 40
  %arrayidx62.i = getelementptr inbounds [32768 x i16]* %m_next61.i, i32 0, i64 %idxprom60.i
  %202 = load i16* %arrayidx62.i, align 2
  %conv63.i = zext i16 %202 to i32
  store i32 %conv63.i, i32* %next_probe_pos.i, align 4
  %203 = load i32* %next_probe_pos.i, align 4
  %tobool64.i = icmp ne i32 %203, 0
  br i1 %tobool64.i, label %lor.lhs.false65.i, label %if.then71.i

lor.lhs.false65.i:                                ; preds = %if.end59.i
  %204 = load i32* %lookahead_pos.addr.i, align 4
  %205 = load i32* %next_probe_pos.i, align 4
  %sub66.i = sub i32 %204, %205
  %conv67.i = trunc i32 %sub66.i to i16
  %conv68.i = zext i16 %conv67.i to i32
  store i32 %conv68.i, i32* %dist.i, align 4
  %206 = load i32* %max_dist.addr.i, align 4
  %cmp69.i = icmp ugt i32 %conv68.i, %206
  br i1 %cmp69.i, label %if.then71.i, label %if.end72.i

if.then71.i:                                      ; preds = %lor.lhs.false65.i, %if.end59.i
  br label %tdefl_find_match.exit

if.end72.i:                                       ; preds = %lor.lhs.false65.i
  %207 = load i32* %next_probe_pos.i, align 4
  %and73.i = and i32 %207, 32767
  store i32 %and73.i, i32* %probe_pos.i, align 4
  %208 = load i32* %probe_pos.i, align 4
  %209 = load i32* %match_len.i, align 4
  %add74.i = add i32 %208, %209
  %sub75.i = sub i32 %add74.i, 1
  %idxprom76.i = zext i32 %sub75.i to i64
  %210 = load %struct.tdefl_compressor** %d.addr.i, align 8
  %m_dict77.i = getelementptr inbounds %struct.tdefl_compressor* %210, i32 0, i32 35
  %arrayidx78.i = getelementptr inbounds [33025 x i8]* %m_dict77.i, i32 0, i64 %idxprom76.i
  %211 = bitcast i8* %arrayidx78.i to i16*
  %212 = load i16* %211, align 2
  %conv79.i = zext i16 %212 to i32
  %213 = load i16* %c01.i, align 2
  %conv80.i = zext i16 %213 to i32
  %cmp81.i = icmp eq i32 %conv79.i, %conv80.i
  br i1 %cmp81.i, label %if.then83.i, label %if.end84.i

if.then83.i:                                      ; preds = %if.end72.i
  br label %for.end.i

if.end84.i:                                       ; preds = %if.end72.i
  br label %for.cond8.i

for.end.i:                                        ; preds = %if.then83.i, %if.then58.i, %if.then33.i
  %214 = load i32* %dist.i, align 4
  %tobool85.i = icmp ne i32 %214, 0
  br i1 %tobool85.i, label %if.end87.i, label %if.then86.i

if.then86.i:                                      ; preds = %for.end.i
  br label %tdefl_find_match.exit

if.end87.i:                                       ; preds = %for.end.i
  %215 = load %struct.tdefl_compressor** %d.addr.i, align 8
  %m_dict88.i = getelementptr inbounds %struct.tdefl_compressor* %215, i32 0, i32 35
  %arraydecay89.i = getelementptr inbounds [33025 x i8]* %m_dict88.i, i32 0, i32 0
  %216 = load i32* %probe_pos.i, align 4
  %idx.ext90.i = zext i32 %216 to i64
  %add.ptr91.i = getelementptr inbounds i8* %arraydecay89.i, i64 %idx.ext90.i
  %217 = bitcast i8* %add.ptr91.i to i16*
  store i16* %217, i16** %q.i, align 8
  %218 = load i16** %q.i, align 8
  %219 = load i16* %218, align 2
  %conv92.i = zext i16 %219 to i32
  %220 = load i16* %s01.i, align 2
  %conv93.i = zext i16 %220 to i32
  %cmp94.i = icmp ne i32 %conv92.i, %conv93.i
  br i1 %cmp94.i, label %if.then96.i, label %if.end97.i

if.then96.i:                                      ; preds = %if.end87.i
  br label %for.cond.i

if.end97.i:                                       ; preds = %if.end87.i
  %221 = load i16** %s.i, align 8
  store i16* %221, i16** %p.i, align 8
  store i32 32, i32* %probe_len.i, align 4
  br label %do.body.i

do.body.i:                                        ; preds = %land.end.i, %if.end97.i
  %222 = load i16** %p.i, align 8
  %incdec.ptr.i = getelementptr inbounds i16* %222, i32 1
  store i16* %incdec.ptr.i, i16** %p.i, align 8
  %223 = load i16* %incdec.ptr.i, align 2
  %conv98.i = zext i16 %223 to i32
  %224 = load i16** %q.i, align 8
  %incdec.ptr99.i = getelementptr inbounds i16* %224, i32 1
  store i16* %incdec.ptr99.i, i16** %q.i, align 8
  %225 = load i16* %incdec.ptr99.i, align 2
  %conv100.i = zext i16 %225 to i32
  %cmp101.i = icmp eq i32 %conv98.i, %conv100.i
  br i1 %cmp101.i, label %land.lhs.true.i, label %land.end.i

land.lhs.true.i:                                  ; preds = %do.body.i
  %226 = load i16** %p.i, align 8
  %incdec.ptr103.i = getelementptr inbounds i16* %226, i32 1
  store i16* %incdec.ptr103.i, i16** %p.i, align 8
  %227 = load i16* %incdec.ptr103.i, align 2
  %conv104.i = zext i16 %227 to i32
  %228 = load i16** %q.i, align 8
  %incdec.ptr105.i = getelementptr inbounds i16* %228, i32 1
  store i16* %incdec.ptr105.i, i16** %q.i, align 8
  %229 = load i16* %incdec.ptr105.i, align 2
  %conv106.i = zext i16 %229 to i32
  %cmp107.i = icmp eq i32 %conv104.i, %conv106.i
  br i1 %cmp107.i, label %land.lhs.true109.i, label %land.end.i

land.lhs.true109.i:                               ; preds = %land.lhs.true.i
  %230 = load i16** %p.i, align 8
  %incdec.ptr110.i = getelementptr inbounds i16* %230, i32 1
  store i16* %incdec.ptr110.i, i16** %p.i, align 8
  %231 = load i16* %incdec.ptr110.i, align 2
  %conv111.i = zext i16 %231 to i32
  %232 = load i16** %q.i, align 8
  %incdec.ptr112.i = getelementptr inbounds i16* %232, i32 1
  store i16* %incdec.ptr112.i, i16** %q.i, align 8
  %233 = load i16* %incdec.ptr112.i, align 2
  %conv113.i = zext i16 %233 to i32
  %cmp114.i = icmp eq i32 %conv111.i, %conv113.i
  br i1 %cmp114.i, label %land.lhs.true116.i, label %land.end.i

land.lhs.true116.i:                               ; preds = %land.lhs.true109.i
  %234 = load i16** %p.i, align 8
  %incdec.ptr117.i = getelementptr inbounds i16* %234, i32 1
  store i16* %incdec.ptr117.i, i16** %p.i, align 8
  %235 = load i16* %incdec.ptr117.i, align 2
  %conv118.i = zext i16 %235 to i32
  %236 = load i16** %q.i, align 8
  %incdec.ptr119.i = getelementptr inbounds i16* %236, i32 1
  store i16* %incdec.ptr119.i, i16** %q.i, align 8
  %237 = load i16* %incdec.ptr119.i, align 2
  %conv120.i = zext i16 %237 to i32
  %cmp121.i = icmp eq i32 %conv118.i, %conv120.i
  br i1 %cmp121.i, label %land.rhs.i, label %land.end.i

land.rhs.i:                                       ; preds = %land.lhs.true116.i
  %238 = load i32* %probe_len.i, align 4
  %dec123.i = add i32 %238, -1
  store i32 %dec123.i, i32* %probe_len.i, align 4
  %cmp124.i = icmp ugt i32 %dec123.i, 0
  br label %land.end.i

land.end.i:                                       ; preds = %land.rhs.i, %land.lhs.true116.i, %land.lhs.true109.i, %land.lhs.true.i, %do.body.i
  %239 = phi i1 [ false, %land.lhs.true116.i ], [ false, %land.lhs.true109.i ], [ false, %land.lhs.true.i ], [ false, %do.body.i ], [ %cmp124.i, %land.rhs.i ]
  br i1 %239, label %do.body.i, label %do.end.i

do.end.i:                                         ; preds = %land.end.i
  %240 = load i32* %probe_len.i, align 4
  %tobool126.i = icmp ne i32 %240, 0
  br i1 %tobool126.i, label %if.else.i, label %if.then127.i

if.then127.i:                                     ; preds = %do.end.i
  %241 = load i32* %dist.i, align 4
  %242 = load i32** %pMatch_dist.addr.i, align 8
  store i32 %241, i32* %242, align 4
  %243 = load i32* %max_match_len.addr.i, align 4
  %cmp128.i = icmp ult i32 %243, 258
  br i1 %cmp128.i, label %cond.true130.i, label %cond.false131.i

cond.true130.i:                                   ; preds = %if.then127.i
  %244 = load i32* %max_match_len.addr.i, align 4
  br label %cond.end132.i

cond.false131.i:                                  ; preds = %if.then127.i
  br label %cond.end132.i

cond.end132.i:                                    ; preds = %cond.false131.i, %cond.true130.i
  %cond.i = phi i32 [ %244, %cond.true130.i ], [ 258, %cond.false131.i ]
  %245 = load i32** %pMatch_len.addr.i, align 8
  store i32 %cond.i, i32* %245, align 4
  br label %tdefl_find_match.exit

if.else.i:                                        ; preds = %do.end.i
  %246 = load i16** %p.i, align 8
  %247 = load i16** %s.i, align 8
  %sub.ptr.lhs.cast.i = ptrtoint i16* %246 to i64
  %sub.ptr.rhs.cast.i = ptrtoint i16* %247 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div.i = sdiv exact i64 %sub.ptr.sub.i, 2
  %conv133.i = trunc i64 %sub.ptr.div.i to i32
  %mul.i = mul i32 %conv133.i, 2
  %248 = load i16** %p.i, align 8
  %249 = bitcast i16* %248 to i8*
  %250 = load i8* %249, align 1
  %conv134.i = zext i8 %250 to i32
  %251 = load i16** %q.i, align 8
  %252 = bitcast i16* %251 to i8*
  %253 = load i8* %252, align 1
  %conv135.i = zext i8 %253 to i32
  %cmp136.i = icmp eq i32 %conv134.i, %conv135.i
  %conv137.i = zext i1 %cmp136.i to i32
  %add138.i = add i32 %mul.i, %conv137.i
  store i32 %add138.i, i32* %probe_len.i, align 4
  %254 = load i32* %match_len.i, align 4
  %cmp139.i = icmp ugt i32 %add138.i, %254
  br i1 %cmp139.i, label %if.then141.i, label %if.end157.i

if.then141.i:                                     ; preds = %if.else.i
  %255 = load i32* %dist.i, align 4
  %256 = load i32** %pMatch_dist.addr.i, align 8
  store i32 %255, i32* %256, align 4
  %257 = load i32* %max_match_len.addr.i, align 4
  %258 = load i32* %probe_len.i, align 4
  %cmp142.i = icmp ult i32 %257, %258
  br i1 %cmp142.i, label %cond.true144.i, label %cond.false145.i

cond.true144.i:                                   ; preds = %if.then141.i
  %259 = load i32* %max_match_len.addr.i, align 4
  br label %cond.end146.i

cond.false145.i:                                  ; preds = %if.then141.i
  %260 = load i32* %probe_len.i, align 4
  br label %cond.end146.i

cond.end146.i:                                    ; preds = %cond.false145.i, %cond.true144.i
  %cond147.i = phi i32 [ %259, %cond.true144.i ], [ %260, %cond.false145.i ]
  store i32 %cond147.i, i32* %match_len.i, align 4
  %261 = load i32** %pMatch_len.addr.i, align 8
  store i32 %cond147.i, i32* %261, align 4
  %262 = load i32* %max_match_len.addr.i, align 4
  %cmp148.i = icmp eq i32 %cond147.i, %262
  br i1 %cmp148.i, label %if.then150.i, label %if.end151.i

if.then150.i:                                     ; preds = %cond.end146.i
  br label %tdefl_find_match.exit

if.end151.i:                                      ; preds = %cond.end146.i
  %263 = load i32* %pos.i, align 4
  %264 = load i32* %match_len.i, align 4
  %add152.i = add i32 %263, %264
  %sub153.i = sub i32 %add152.i, 1
  %idxprom154.i = zext i32 %sub153.i to i64
  %265 = load %struct.tdefl_compressor** %d.addr.i, align 8
  %m_dict155.i = getelementptr inbounds %struct.tdefl_compressor* %265, i32 0, i32 35
  %arrayidx156.i = getelementptr inbounds [33025 x i8]* %m_dict155.i, i32 0, i64 %idxprom154.i
  %266 = bitcast i8* %arrayidx156.i to i16*
  %267 = load i16* %266, align 2
  store i16 %267, i16* %c01.i, align 2
  br label %if.end157.i

if.end157.i:                                      ; preds = %if.end151.i, %if.else.i
  br label %for.cond.i

tdefl_find_match.exit:                            ; preds = %if.then150.i, %cond.end132.i, %if.then86.i, %if.then71.i, %if.then46.i, %if.then21.i, %if.then11.i, %if.then.i
  br label %if.end199

if.end199:                                        ; preds = %tdefl_find_match.exit, %if.end194
  %268 = load i32* %cur_match_len, align 4
  %cmp200 = icmp eq i32 %268, 3
  br i1 %cmp200, label %land.lhs.true202, label %lor.lhs.false

land.lhs.true202:                                 ; preds = %if.end199
  %269 = load i32* %cur_match_dist, align 4
  %cmp203 = icmp uge i32 %269, 8192
  br i1 %cmp203, label %if.then214, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true202, %if.end199
  %270 = load i32* %cur_pos, align 4
  %271 = load i32* %cur_match_dist, align 4
  %cmp205 = icmp eq i32 %270, %271
  br i1 %cmp205, label %if.then214, label %lor.lhs.false207

lor.lhs.false207:                                 ; preds = %lor.lhs.false
  %272 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flags208 = getelementptr inbounds %struct.tdefl_compressor* %272, i32 0, i32 2
  %273 = load i32* %m_flags208, align 4
  %and209 = and i32 %273, 131072
  %tobool210 = icmp ne i32 %and209, 0
  br i1 %tobool210, label %land.lhs.true211, label %if.end215

land.lhs.true211:                                 ; preds = %lor.lhs.false207
  %274 = load i32* %cur_match_len, align 4
  %cmp212 = icmp ule i32 %274, 5
  br i1 %cmp212, label %if.then214, label %if.end215

if.then214:                                       ; preds = %land.lhs.true211, %lor.lhs.false, %land.lhs.true202
  store i32 0, i32* %cur_match_len, align 4
  store i32 0, i32* %cur_match_dist, align 4
  br label %if.end215

if.end215:                                        ; preds = %if.then214, %land.lhs.true211, %lor.lhs.false207
  %275 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len216 = getelementptr inbounds %struct.tdefl_compressor* %275, i32 0, i32 19
  %276 = load i32* %m_saved_match_len216, align 4
  %tobool217 = icmp ne i32 %276, 0
  br i1 %tobool217, label %if.then218, label %if.else243

if.then218:                                       ; preds = %if.end215
  %277 = load i32* %cur_match_len, align 4
  %278 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len219 = getelementptr inbounds %struct.tdefl_compressor* %278, i32 0, i32 19
  %279 = load i32* %m_saved_match_len219, align 4
  %cmp220 = icmp ugt i32 %277, %279
  br i1 %cmp220, label %if.then222, label %if.else236

if.then222:                                       ; preds = %if.then218
  %280 = load %struct.tdefl_compressor** %d.addr, align 8
  %281 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_lit = getelementptr inbounds %struct.tdefl_compressor* %281, i32 0, i32 20
  %282 = load i32* %m_saved_lit, align 4
  %conv223 = trunc i32 %282 to i8
  store %struct.tdefl_compressor* %280, %struct.tdefl_compressor** %d.addr.i336, align 8
  store i8 %conv223, i8* %lit.addr.i, align 1
  %283 = load %struct.tdefl_compressor** %d.addr.i336, align 8
  %m_total_lz_bytes.i = getelementptr inbounds %struct.tdefl_compressor* %283, i32 0, i32 14
  %284 = load i32* %m_total_lz_bytes.i, align 4
  %inc.i = add i32 %284, 1
  store i32 %inc.i, i32* %m_total_lz_bytes.i, align 4
  %285 = load i8* %lit.addr.i, align 1
  %286 = load %struct.tdefl_compressor** %d.addr.i336, align 8
  %m_pLZ_code_buf.i = getelementptr inbounds %struct.tdefl_compressor* %286, i32 0, i32 9
  %287 = load i8** %m_pLZ_code_buf.i, align 8
  %incdec.ptr.i337 = getelementptr inbounds i8* %287, i32 1
  store i8* %incdec.ptr.i337, i8** %m_pLZ_code_buf.i, align 8
  store i8 %285, i8* %287, align 1
  %288 = load %struct.tdefl_compressor** %d.addr.i336, align 8
  %m_pLZ_flags.i = getelementptr inbounds %struct.tdefl_compressor* %288, i32 0, i32 10
  %289 = load i8** %m_pLZ_flags.i, align 8
  %290 = load i8* %289, align 1
  %conv.i338 = zext i8 %290 to i32
  %shr.i = ashr i32 %conv.i338, 1
  %conv1.i = trunc i32 %shr.i to i8
  %291 = load %struct.tdefl_compressor** %d.addr.i336, align 8
  %m_pLZ_flags2.i = getelementptr inbounds %struct.tdefl_compressor* %291, i32 0, i32 10
  %292 = load i8** %m_pLZ_flags2.i, align 8
  store i8 %conv1.i, i8* %292, align 1
  %293 = load %struct.tdefl_compressor** %d.addr.i336, align 8
  %m_num_flags_left.i = getelementptr inbounds %struct.tdefl_compressor* %293, i32 0, i32 13
  %294 = load i32* %m_num_flags_left.i, align 4
  %dec.i339 = add i32 %294, -1
  store i32 %dec.i339, i32* %m_num_flags_left.i, align 4
  %cmp.i340 = icmp eq i32 %dec.i339, 0
  br i1 %cmp.i340, label %if.then.i341, label %tdefl_record_literal.exit

if.then.i341:                                     ; preds = %if.then222
  %295 = load %struct.tdefl_compressor** %d.addr.i336, align 8
  %m_num_flags_left4.i = getelementptr inbounds %struct.tdefl_compressor* %295, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left4.i, align 4
  %296 = load %struct.tdefl_compressor** %d.addr.i336, align 8
  %m_pLZ_code_buf5.i = getelementptr inbounds %struct.tdefl_compressor* %296, i32 0, i32 9
  %297 = load i8** %m_pLZ_code_buf5.i, align 8
  %incdec.ptr6.i = getelementptr inbounds i8* %297, i32 1
  store i8* %incdec.ptr6.i, i8** %m_pLZ_code_buf5.i, align 8
  %298 = load %struct.tdefl_compressor** %d.addr.i336, align 8
  %m_pLZ_flags7.i = getelementptr inbounds %struct.tdefl_compressor* %298, i32 0, i32 10
  store i8* %297, i8** %m_pLZ_flags7.i, align 8
  br label %tdefl_record_literal.exit

tdefl_record_literal.exit:                        ; preds = %if.then.i341, %if.then222
  %299 = load i8* %lit.addr.i, align 1
  %idxprom.i342 = zext i8 %299 to i64
  %300 = load %struct.tdefl_compressor** %d.addr.i336, align 8
  %m_huff_count.i = getelementptr inbounds %struct.tdefl_compressor* %300, i32 0, i32 36
  %arrayidx.i343 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count.i, i32 0, i64 0
  %arrayidx8.i = getelementptr inbounds [288 x i16]* %arrayidx.i343, i32 0, i64 %idxprom.i342
  %301 = load i16* %arrayidx8.i, align 2
  %inc9.i = add i16 %301, 1
  store i16 %inc9.i, i16* %arrayidx8.i, align 2
  %302 = load i32* %cur_match_len, align 4
  %cmp224 = icmp uge i32 %302, 128
  br i1 %cmp224, label %if.then226, label %if.else228

if.then226:                                       ; preds = %tdefl_record_literal.exit
  %303 = load %struct.tdefl_compressor** %d.addr, align 8
  %304 = load i32* %cur_match_len, align 4
  %305 = load i32* %cur_match_dist, align 4
  store %struct.tdefl_compressor* %303, %struct.tdefl_compressor** %d.addr.i345, align 8
  store i32 %304, i32* %match_len.addr.i, align 4
  store i32 %305, i32* %match_dist.addr.i, align 4
  %306 = load i32* %match_len.addr.i, align 4
  %cmp.i346 = icmp uge i32 %306, 3
  br i1 %cmp.i346, label %land.lhs.true.i347, label %cond.false.i349

land.lhs.true.i347:                               ; preds = %if.then226
  %307 = load i32* %match_dist.addr.i, align 4
  %cmp1.i = icmp uge i32 %307, 1
  br i1 %cmp1.i, label %land.lhs.true2.i, label %cond.false.i349

land.lhs.true2.i:                                 ; preds = %land.lhs.true.i347
  %308 = load i32* %match_dist.addr.i, align 4
  %cmp3.i = icmp ule i32 %308, 32768
  br i1 %cmp3.i, label %cond.true.i348, label %cond.false.i349

cond.true.i348:                                   ; preds = %land.lhs.true2.i
  %309 = load i32* %match_len.addr.i, align 4
  %310 = load %struct.tdefl_compressor** %d.addr.i345, align 8
  %m_total_lz_bytes.i350 = getelementptr inbounds %struct.tdefl_compressor* %310, i32 0, i32 14
  %311 = load i32* %m_total_lz_bytes.i350, align 4
  %add.i351 = add i32 %311, %309
  store i32 %add.i351, i32* %m_total_lz_bytes.i350, align 4
  %312 = load i32* %match_len.addr.i, align 4
  %sub.i352 = sub i32 %312, 3
  %conv.i353 = trunc i32 %sub.i352 to i8
  %313 = load %struct.tdefl_compressor** %d.addr.i345, align 8
  %m_pLZ_code_buf.i354 = getelementptr inbounds %struct.tdefl_compressor* %313, i32 0, i32 9
  %314 = load i8** %m_pLZ_code_buf.i354, align 8
  store i8 %conv.i353, i8* %314, align 1
  %315 = load i32* %match_dist.addr.i, align 4
  %sub4.i = sub i32 %315, 1
  store i32 %sub4.i, i32* %match_dist.addr.i, align 4
  %316 = load i32* %match_dist.addr.i, align 4
  %and.i355 = and i32 %316, 255
  %conv5.i = trunc i32 %and.i355 to i8
  %317 = load %struct.tdefl_compressor** %d.addr.i345, align 8
  %m_pLZ_code_buf6.i = getelementptr inbounds %struct.tdefl_compressor* %317, i32 0, i32 9
  %318 = load i8** %m_pLZ_code_buf6.i, align 8
  %arrayidx7.i = getelementptr inbounds i8* %318, i64 1
  store i8 %conv5.i, i8* %arrayidx7.i, align 1
  %319 = load i32* %match_dist.addr.i, align 4
  %shr.i356 = lshr i32 %319, 8
  %conv8.i = trunc i32 %shr.i356 to i8
  %320 = load %struct.tdefl_compressor** %d.addr.i345, align 8
  %m_pLZ_code_buf9.i = getelementptr inbounds %struct.tdefl_compressor* %320, i32 0, i32 9
  %321 = load i8** %m_pLZ_code_buf9.i, align 8
  %arrayidx10.i = getelementptr inbounds i8* %321, i64 2
  store i8 %conv8.i, i8* %arrayidx10.i, align 1
  %322 = load %struct.tdefl_compressor** %d.addr.i345, align 8
  %m_pLZ_code_buf11.i = getelementptr inbounds %struct.tdefl_compressor* %322, i32 0, i32 9
  %323 = load i8** %m_pLZ_code_buf11.i, align 8
  %add.ptr.i357 = getelementptr inbounds i8* %323, i64 3
  store i8* %add.ptr.i357, i8** %m_pLZ_code_buf11.i, align 8
  %324 = load %struct.tdefl_compressor** %d.addr.i345, align 8
  %m_pLZ_flags.i358 = getelementptr inbounds %struct.tdefl_compressor* %324, i32 0, i32 10
  %325 = load i8** %m_pLZ_flags.i358, align 8
  %326 = load i8* %325, align 1
  %conv12.i = zext i8 %326 to i32
  %shr13.i = ashr i32 %conv12.i, 1
  %or.i = or i32 %shr13.i, 128
  %conv14.i = trunc i32 %or.i to i8
  %327 = load %struct.tdefl_compressor** %d.addr.i345, align 8
  %m_pLZ_flags15.i = getelementptr inbounds %struct.tdefl_compressor* %327, i32 0, i32 10
  %328 = load i8** %m_pLZ_flags15.i, align 8
  store i8 %conv14.i, i8* %328, align 1
  %329 = load %struct.tdefl_compressor** %d.addr.i345, align 8
  %m_num_flags_left.i359 = getelementptr inbounds %struct.tdefl_compressor* %329, i32 0, i32 13
  %330 = load i32* %m_num_flags_left.i359, align 4
  %dec.i360 = add i32 %330, -1
  store i32 %dec.i360, i32* %m_num_flags_left.i359, align 4
  %cmp16.i = icmp eq i32 %dec.i360, 0
  br i1 %cmp16.i, label %if.then.i362, label %if.end.i365

cond.false.i349:                                  ; preds = %land.lhs.true2.i, %land.lhs.true.i347, %if.then226
  call void @__assert_fail(i8* getelementptr inbounds ([94 x i8]* @.str40, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2479, i8* getelementptr inbounds ([62 x i8]* @__PRETTY_FUNCTION__.tdefl_record_match, i32 0, i32 0)) #6
  unreachable

if.then.i362:                                     ; preds = %cond.true.i348
  %331 = load %struct.tdefl_compressor** %d.addr.i345, align 8
  %m_num_flags_left18.i = getelementptr inbounds %struct.tdefl_compressor* %331, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left18.i, align 4
  %332 = load %struct.tdefl_compressor** %d.addr.i345, align 8
  %m_pLZ_code_buf19.i = getelementptr inbounds %struct.tdefl_compressor* %332, i32 0, i32 9
  %333 = load i8** %m_pLZ_code_buf19.i, align 8
  %incdec.ptr.i361 = getelementptr inbounds i8* %333, i32 1
  store i8* %incdec.ptr.i361, i8** %m_pLZ_code_buf19.i, align 8
  %334 = load %struct.tdefl_compressor** %d.addr.i345, align 8
  %m_pLZ_flags20.i = getelementptr inbounds %struct.tdefl_compressor* %334, i32 0, i32 10
  store i8* %333, i8** %m_pLZ_flags20.i, align 8
  br label %if.end.i365

if.end.i365:                                      ; preds = %if.then.i362, %cond.true.i348
  %335 = load i32* %match_dist.addr.i, align 4
  %and21.i = and i32 %335, 511
  %idxprom.i363 = zext i32 %and21.i to i64
  %arrayidx22.i = getelementptr inbounds [512 x i8]* @s_tdefl_small_dist_sym, i32 0, i64 %idxprom.i363
  %336 = load i8* %arrayidx22.i, align 1
  %conv23.i = zext i8 %336 to i32
  store i32 %conv23.i, i32* %s0.i, align 4
  %337 = load i32* %match_dist.addr.i, align 4
  %shr24.i = lshr i32 %337, 8
  %and25.i = and i32 %shr24.i, 127
  %idxprom26.i364 = zext i32 %and25.i to i64
  %arrayidx27.i = getelementptr inbounds [128 x i8]* @s_tdefl_large_dist_sym, i32 0, i64 %idxprom26.i364
  %338 = load i8* %arrayidx27.i, align 1
  %conv28.i = zext i8 %338 to i32
  store i32 %conv28.i, i32* %s1.i, align 4
  %339 = load i32* %match_dist.addr.i, align 4
  %cmp29.i = icmp ult i32 %339, 512
  br i1 %cmp29.i, label %cond.true31.i, label %cond.false32.i

cond.true31.i:                                    ; preds = %if.end.i365
  %340 = load i32* %s0.i, align 4
  br label %cond.end33.i

cond.false32.i:                                   ; preds = %if.end.i365
  %341 = load i32* %s1.i, align 4
  br label %cond.end33.i

cond.end33.i:                                     ; preds = %cond.false32.i, %cond.true31.i
  %cond.i366 = phi i32 [ %340, %cond.true31.i ], [ %341, %cond.false32.i ]
  %idxprom34.i = zext i32 %cond.i366 to i64
  %342 = load %struct.tdefl_compressor** %d.addr.i345, align 8
  %m_huff_count.i367 = getelementptr inbounds %struct.tdefl_compressor* %342, i32 0, i32 36
  %arrayidx35.i = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count.i367, i32 0, i64 1
  %arrayidx36.i = getelementptr inbounds [288 x i16]* %arrayidx35.i, i32 0, i64 %idxprom34.i
  %343 = load i16* %arrayidx36.i, align 2
  %inc.i368 = add i16 %343, 1
  store i16 %inc.i368, i16* %arrayidx36.i, align 2
  %344 = load i32* %match_len.addr.i, align 4
  %cmp37.i = icmp uge i32 %344, 3
  br i1 %cmp37.i, label %if.then39.i, label %tdefl_record_match.exit

if.then39.i:                                      ; preds = %cond.end33.i
  %345 = load i32* %match_len.addr.i, align 4
  %sub40.i = sub i32 %345, 3
  %idxprom41.i = zext i32 %sub40.i to i64
  %arrayidx42.i = getelementptr inbounds [256 x i16]* @s_tdefl_len_sym, i32 0, i64 %idxprom41.i
  %346 = load i16* %arrayidx42.i, align 2
  %idxprom43.i = zext i16 %346 to i64
  %347 = load %struct.tdefl_compressor** %d.addr.i345, align 8
  %m_huff_count44.i = getelementptr inbounds %struct.tdefl_compressor* %347, i32 0, i32 36
  %arrayidx45.i = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count44.i, i32 0, i64 0
  %arrayidx46.i = getelementptr inbounds [288 x i16]* %arrayidx45.i, i32 0, i64 %idxprom43.i
  %348 = load i16* %arrayidx46.i, align 2
  %inc47.i = add i16 %348, 1
  store i16 %inc47.i, i16* %arrayidx46.i, align 2
  br label %tdefl_record_match.exit

tdefl_record_match.exit:                          ; preds = %if.then39.i, %cond.end33.i
  %349 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len227 = getelementptr inbounds %struct.tdefl_compressor* %349, i32 0, i32 19
  store i32 0, i32* %m_saved_match_len227, align 4
  %350 = load i32* %cur_match_len, align 4
  store i32 %350, i32* %len_to_move, align 4
  br label %if.end235

if.else228:                                       ; preds = %tdefl_record_literal.exit
  %351 = load i32* %cur_pos, align 4
  %idxprom229 = zext i32 %351 to i64
  %352 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict230 = getelementptr inbounds %struct.tdefl_compressor* %352, i32 0, i32 35
  %arrayidx231 = getelementptr inbounds [33025 x i8]* %m_dict230, i32 0, i64 %idxprom229
  %353 = load i8* %arrayidx231, align 1
  %conv232 = zext i8 %353 to i32
  %354 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_lit233 = getelementptr inbounds %struct.tdefl_compressor* %354, i32 0, i32 20
  store i32 %conv232, i32* %m_saved_lit233, align 4
  %355 = load i32* %cur_match_dist, align 4
  %356 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_dist = getelementptr inbounds %struct.tdefl_compressor* %356, i32 0, i32 18
  store i32 %355, i32* %m_saved_match_dist, align 4
  %357 = load i32* %cur_match_len, align 4
  %358 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len234 = getelementptr inbounds %struct.tdefl_compressor* %358, i32 0, i32 19
  store i32 %357, i32* %m_saved_match_len234, align 4
  br label %if.end235

if.end235:                                        ; preds = %if.else228, %tdefl_record_match.exit
  br label %if.end242

if.else236:                                       ; preds = %if.then218
  %359 = load %struct.tdefl_compressor** %d.addr, align 8
  %360 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len237 = getelementptr inbounds %struct.tdefl_compressor* %360, i32 0, i32 19
  %361 = load i32* %m_saved_match_len237, align 4
  %362 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_dist238 = getelementptr inbounds %struct.tdefl_compressor* %362, i32 0, i32 18
  %363 = load i32* %m_saved_match_dist238, align 4
  store %struct.tdefl_compressor* %359, %struct.tdefl_compressor** %d.addr.i369, align 8
  store i32 %361, i32* %match_len.addr.i370, align 4
  store i32 %363, i32* %match_dist.addr.i371, align 4
  %364 = load i32* %match_len.addr.i370, align 4
  %cmp.i374 = icmp uge i32 %364, 3
  br i1 %cmp.i374, label %land.lhs.true.i376, label %cond.false.i380

land.lhs.true.i376:                               ; preds = %if.else236
  %365 = load i32* %match_dist.addr.i371, align 4
  %cmp1.i375 = icmp uge i32 %365, 1
  br i1 %cmp1.i375, label %land.lhs.true2.i378, label %cond.false.i380

land.lhs.true2.i378:                              ; preds = %land.lhs.true.i376
  %366 = load i32* %match_dist.addr.i371, align 4
  %cmp3.i377 = icmp ule i32 %366, 32768
  br i1 %cmp3.i377, label %cond.true.i379, label %cond.false.i380

cond.true.i379:                                   ; preds = %land.lhs.true2.i378
  %367 = load i32* %match_len.addr.i370, align 4
  %368 = load %struct.tdefl_compressor** %d.addr.i369, align 8
  %m_total_lz_bytes.i381 = getelementptr inbounds %struct.tdefl_compressor* %368, i32 0, i32 14
  %369 = load i32* %m_total_lz_bytes.i381, align 4
  %add.i382 = add i32 %369, %367
  store i32 %add.i382, i32* %m_total_lz_bytes.i381, align 4
  %370 = load i32* %match_len.addr.i370, align 4
  %sub.i383 = sub i32 %370, 3
  %conv.i384 = trunc i32 %sub.i383 to i8
  %371 = load %struct.tdefl_compressor** %d.addr.i369, align 8
  %m_pLZ_code_buf.i385 = getelementptr inbounds %struct.tdefl_compressor* %371, i32 0, i32 9
  %372 = load i8** %m_pLZ_code_buf.i385, align 8
  store i8 %conv.i384, i8* %372, align 1
  %373 = load i32* %match_dist.addr.i371, align 4
  %sub4.i386 = sub i32 %373, 1
  store i32 %sub4.i386, i32* %match_dist.addr.i371, align 4
  %374 = load i32* %match_dist.addr.i371, align 4
  %and.i387 = and i32 %374, 255
  %conv5.i388 = trunc i32 %and.i387 to i8
  %375 = load %struct.tdefl_compressor** %d.addr.i369, align 8
  %m_pLZ_code_buf6.i389 = getelementptr inbounds %struct.tdefl_compressor* %375, i32 0, i32 9
  %376 = load i8** %m_pLZ_code_buf6.i389, align 8
  %arrayidx7.i390 = getelementptr inbounds i8* %376, i64 1
  store i8 %conv5.i388, i8* %arrayidx7.i390, align 1
  %377 = load i32* %match_dist.addr.i371, align 4
  %shr.i391 = lshr i32 %377, 8
  %conv8.i392 = trunc i32 %shr.i391 to i8
  %378 = load %struct.tdefl_compressor** %d.addr.i369, align 8
  %m_pLZ_code_buf9.i393 = getelementptr inbounds %struct.tdefl_compressor* %378, i32 0, i32 9
  %379 = load i8** %m_pLZ_code_buf9.i393, align 8
  %arrayidx10.i394 = getelementptr inbounds i8* %379, i64 2
  store i8 %conv8.i392, i8* %arrayidx10.i394, align 1
  %380 = load %struct.tdefl_compressor** %d.addr.i369, align 8
  %m_pLZ_code_buf11.i395 = getelementptr inbounds %struct.tdefl_compressor* %380, i32 0, i32 9
  %381 = load i8** %m_pLZ_code_buf11.i395, align 8
  %add.ptr.i396 = getelementptr inbounds i8* %381, i64 3
  store i8* %add.ptr.i396, i8** %m_pLZ_code_buf11.i395, align 8
  %382 = load %struct.tdefl_compressor** %d.addr.i369, align 8
  %m_pLZ_flags.i397 = getelementptr inbounds %struct.tdefl_compressor* %382, i32 0, i32 10
  %383 = load i8** %m_pLZ_flags.i397, align 8
  %384 = load i8* %383, align 1
  %conv12.i398 = zext i8 %384 to i32
  %shr13.i399 = ashr i32 %conv12.i398, 1
  %or.i400 = or i32 %shr13.i399, 128
  %conv14.i401 = trunc i32 %or.i400 to i8
  %385 = load %struct.tdefl_compressor** %d.addr.i369, align 8
  %m_pLZ_flags15.i402 = getelementptr inbounds %struct.tdefl_compressor* %385, i32 0, i32 10
  %386 = load i8** %m_pLZ_flags15.i402, align 8
  store i8 %conv14.i401, i8* %386, align 1
  %387 = load %struct.tdefl_compressor** %d.addr.i369, align 8
  %m_num_flags_left.i403 = getelementptr inbounds %struct.tdefl_compressor* %387, i32 0, i32 13
  %388 = load i32* %m_num_flags_left.i403, align 4
  %dec.i404 = add i32 %388, -1
  store i32 %dec.i404, i32* %m_num_flags_left.i403, align 4
  %cmp16.i405 = icmp eq i32 %dec.i404, 0
  br i1 %cmp16.i405, label %if.then.i410, label %if.end.i421

cond.false.i380:                                  ; preds = %land.lhs.true2.i378, %land.lhs.true.i376, %if.else236
  call void @__assert_fail(i8* getelementptr inbounds ([94 x i8]* @.str40, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2479, i8* getelementptr inbounds ([62 x i8]* @__PRETTY_FUNCTION__.tdefl_record_match, i32 0, i32 0)) #6
  unreachable

if.then.i410:                                     ; preds = %cond.true.i379
  %389 = load %struct.tdefl_compressor** %d.addr.i369, align 8
  %m_num_flags_left18.i406 = getelementptr inbounds %struct.tdefl_compressor* %389, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left18.i406, align 4
  %390 = load %struct.tdefl_compressor** %d.addr.i369, align 8
  %m_pLZ_code_buf19.i407 = getelementptr inbounds %struct.tdefl_compressor* %390, i32 0, i32 9
  %391 = load i8** %m_pLZ_code_buf19.i407, align 8
  %incdec.ptr.i408 = getelementptr inbounds i8* %391, i32 1
  store i8* %incdec.ptr.i408, i8** %m_pLZ_code_buf19.i407, align 8
  %392 = load %struct.tdefl_compressor** %d.addr.i369, align 8
  %m_pLZ_flags20.i409 = getelementptr inbounds %struct.tdefl_compressor* %392, i32 0, i32 10
  store i8* %391, i8** %m_pLZ_flags20.i409, align 8
  br label %if.end.i421

if.end.i421:                                      ; preds = %if.then.i410, %cond.true.i379
  %393 = load i32* %match_dist.addr.i371, align 4
  %and21.i411 = and i32 %393, 511
  %idxprom.i412 = zext i32 %and21.i411 to i64
  %arrayidx22.i413 = getelementptr inbounds [512 x i8]* @s_tdefl_small_dist_sym, i32 0, i64 %idxprom.i412
  %394 = load i8* %arrayidx22.i413, align 1
  %conv23.i414 = zext i8 %394 to i32
  store i32 %conv23.i414, i32* %s0.i372, align 4
  %395 = load i32* %match_dist.addr.i371, align 4
  %shr24.i415 = lshr i32 %395, 8
  %and25.i416 = and i32 %shr24.i415, 127
  %idxprom26.i417 = zext i32 %and25.i416 to i64
  %arrayidx27.i418 = getelementptr inbounds [128 x i8]* @s_tdefl_large_dist_sym, i32 0, i64 %idxprom26.i417
  %396 = load i8* %arrayidx27.i418, align 1
  %conv28.i419 = zext i8 %396 to i32
  store i32 %conv28.i419, i32* %s1.i373, align 4
  %397 = load i32* %match_dist.addr.i371, align 4
  %cmp29.i420 = icmp ult i32 %397, 512
  br i1 %cmp29.i420, label %cond.true31.i422, label %cond.false32.i423

cond.true31.i422:                                 ; preds = %if.end.i421
  %398 = load i32* %s0.i372, align 4
  br label %cond.end33.i431

cond.false32.i423:                                ; preds = %if.end.i421
  %399 = load i32* %s1.i373, align 4
  br label %cond.end33.i431

cond.end33.i431:                                  ; preds = %cond.false32.i423, %cond.true31.i422
  %cond.i424 = phi i32 [ %398, %cond.true31.i422 ], [ %399, %cond.false32.i423 ]
  %idxprom34.i425 = zext i32 %cond.i424 to i64
  %400 = load %struct.tdefl_compressor** %d.addr.i369, align 8
  %m_huff_count.i426 = getelementptr inbounds %struct.tdefl_compressor* %400, i32 0, i32 36
  %arrayidx35.i427 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count.i426, i32 0, i64 1
  %arrayidx36.i428 = getelementptr inbounds [288 x i16]* %arrayidx35.i427, i32 0, i64 %idxprom34.i425
  %401 = load i16* %arrayidx36.i428, align 2
  %inc.i429 = add i16 %401, 1
  store i16 %inc.i429, i16* %arrayidx36.i428, align 2
  %402 = load i32* %match_len.addr.i370, align 4
  %cmp37.i430 = icmp uge i32 %402, 3
  br i1 %cmp37.i430, label %if.then39.i440, label %tdefl_record_match.exit441

if.then39.i440:                                   ; preds = %cond.end33.i431
  %403 = load i32* %match_len.addr.i370, align 4
  %sub40.i432 = sub i32 %403, 3
  %idxprom41.i433 = zext i32 %sub40.i432 to i64
  %arrayidx42.i434 = getelementptr inbounds [256 x i16]* @s_tdefl_len_sym, i32 0, i64 %idxprom41.i433
  %404 = load i16* %arrayidx42.i434, align 2
  %idxprom43.i435 = zext i16 %404 to i64
  %405 = load %struct.tdefl_compressor** %d.addr.i369, align 8
  %m_huff_count44.i436 = getelementptr inbounds %struct.tdefl_compressor* %405, i32 0, i32 36
  %arrayidx45.i437 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count44.i436, i32 0, i64 0
  %arrayidx46.i438 = getelementptr inbounds [288 x i16]* %arrayidx45.i437, i32 0, i64 %idxprom43.i435
  %406 = load i16* %arrayidx46.i438, align 2
  %inc47.i439 = add i16 %406, 1
  store i16 %inc47.i439, i16* %arrayidx46.i438, align 2
  br label %tdefl_record_match.exit441

tdefl_record_match.exit441:                       ; preds = %if.then39.i440, %cond.end33.i431
  %407 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len239 = getelementptr inbounds %struct.tdefl_compressor* %407, i32 0, i32 19
  %408 = load i32* %m_saved_match_len239, align 4
  %sub240 = sub i32 %408, 1
  store i32 %sub240, i32* %len_to_move, align 4
  %409 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len241 = getelementptr inbounds %struct.tdefl_compressor* %409, i32 0, i32 19
  store i32 0, i32* %m_saved_match_len241, align 4
  br label %if.end242

if.end242:                                        ; preds = %tdefl_record_match.exit441, %if.end235
  br label %if.end283

if.else243:                                       ; preds = %if.end215
  %410 = load i32* %cur_match_dist, align 4
  %tobool244 = icmp ne i32 %410, 0
  br i1 %tobool244, label %if.else256, label %if.then245

if.then245:                                       ; preds = %if.else243
  %411 = load %struct.tdefl_compressor** %d.addr, align 8
  %412 = load i32* %cur_pos, align 4
  %conv246 = zext i32 %412 to i64
  %cmp247 = icmp ult i64 %conv246, 33024
  br i1 %cmp247, label %cond.true249, label %cond.false251

cond.true249:                                     ; preds = %if.then245
  %413 = load i32* %cur_pos, align 4
  %conv250 = zext i32 %413 to i64
  br label %cond.end252

cond.false251:                                    ; preds = %if.then245
  br label %cond.end252

cond.end252:                                      ; preds = %cond.false251, %cond.true249
  %cond253 = phi i64 [ %conv250, %cond.true249 ], [ 33024, %cond.false251 ]
  %414 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict254 = getelementptr inbounds %struct.tdefl_compressor* %414, i32 0, i32 35
  %arrayidx255 = getelementptr inbounds [33025 x i8]* %m_dict254, i32 0, i64 %cond253
  %415 = load i8* %arrayidx255, align 1
  store %struct.tdefl_compressor* %411, %struct.tdefl_compressor** %d.addr.i442, align 8
  store i8 %415, i8* %lit.addr.i443, align 1
  %416 = load %struct.tdefl_compressor** %d.addr.i442, align 8
  %m_total_lz_bytes.i444 = getelementptr inbounds %struct.tdefl_compressor* %416, i32 0, i32 14
  %417 = load i32* %m_total_lz_bytes.i444, align 4
  %inc.i445 = add i32 %417, 1
  store i32 %inc.i445, i32* %m_total_lz_bytes.i444, align 4
  %418 = load i8* %lit.addr.i443, align 1
  %419 = load %struct.tdefl_compressor** %d.addr.i442, align 8
  %m_pLZ_code_buf.i446 = getelementptr inbounds %struct.tdefl_compressor* %419, i32 0, i32 9
  %420 = load i8** %m_pLZ_code_buf.i446, align 8
  %incdec.ptr.i447 = getelementptr inbounds i8* %420, i32 1
  store i8* %incdec.ptr.i447, i8** %m_pLZ_code_buf.i446, align 8
  store i8 %418, i8* %420, align 1
  %421 = load %struct.tdefl_compressor** %d.addr.i442, align 8
  %m_pLZ_flags.i448 = getelementptr inbounds %struct.tdefl_compressor* %421, i32 0, i32 10
  %422 = load i8** %m_pLZ_flags.i448, align 8
  %423 = load i8* %422, align 1
  %conv.i449 = zext i8 %423 to i32
  %shr.i450 = ashr i32 %conv.i449, 1
  %conv1.i451 = trunc i32 %shr.i450 to i8
  %424 = load %struct.tdefl_compressor** %d.addr.i442, align 8
  %m_pLZ_flags2.i452 = getelementptr inbounds %struct.tdefl_compressor* %424, i32 0, i32 10
  %425 = load i8** %m_pLZ_flags2.i452, align 8
  store i8 %conv1.i451, i8* %425, align 1
  %426 = load %struct.tdefl_compressor** %d.addr.i442, align 8
  %m_num_flags_left.i453 = getelementptr inbounds %struct.tdefl_compressor* %426, i32 0, i32 13
  %427 = load i32* %m_num_flags_left.i453, align 4
  %dec.i454 = add i32 %427, -1
  store i32 %dec.i454, i32* %m_num_flags_left.i453, align 4
  %cmp.i455 = icmp eq i32 %dec.i454, 0
  br i1 %cmp.i455, label %if.then.i460, label %tdefl_record_literal.exit467

if.then.i460:                                     ; preds = %cond.end252
  %428 = load %struct.tdefl_compressor** %d.addr.i442, align 8
  %m_num_flags_left4.i456 = getelementptr inbounds %struct.tdefl_compressor* %428, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left4.i456, align 4
  %429 = load %struct.tdefl_compressor** %d.addr.i442, align 8
  %m_pLZ_code_buf5.i457 = getelementptr inbounds %struct.tdefl_compressor* %429, i32 0, i32 9
  %430 = load i8** %m_pLZ_code_buf5.i457, align 8
  %incdec.ptr6.i458 = getelementptr inbounds i8* %430, i32 1
  store i8* %incdec.ptr6.i458, i8** %m_pLZ_code_buf5.i457, align 8
  %431 = load %struct.tdefl_compressor** %d.addr.i442, align 8
  %m_pLZ_flags7.i459 = getelementptr inbounds %struct.tdefl_compressor* %431, i32 0, i32 10
  store i8* %430, i8** %m_pLZ_flags7.i459, align 8
  br label %tdefl_record_literal.exit467

tdefl_record_literal.exit467:                     ; preds = %if.then.i460, %cond.end252
  %432 = load i8* %lit.addr.i443, align 1
  %idxprom.i461 = zext i8 %432 to i64
  %433 = load %struct.tdefl_compressor** %d.addr.i442, align 8
  %m_huff_count.i462 = getelementptr inbounds %struct.tdefl_compressor* %433, i32 0, i32 36
  %arrayidx.i463 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count.i462, i32 0, i64 0
  %arrayidx8.i464 = getelementptr inbounds [288 x i16]* %arrayidx.i463, i32 0, i64 %idxprom.i461
  %434 = load i16* %arrayidx8.i464, align 2
  %inc9.i465 = add i16 %434, 1
  store i16 %inc9.i465, i16* %arrayidx8.i464, align 2
  br label %if.end282

if.else256:                                       ; preds = %if.else243
  %435 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_greedy_parsing = getelementptr inbounds %struct.tdefl_compressor* %435, i32 0, i32 4
  %436 = load i32* %m_greedy_parsing, align 4
  %tobool257 = icmp ne i32 %436, 0
  br i1 %tobool257, label %if.then265, label %lor.lhs.false258

lor.lhs.false258:                                 ; preds = %if.else256
  %437 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flags259 = getelementptr inbounds %struct.tdefl_compressor* %437, i32 0, i32 2
  %438 = load i32* %m_flags259, align 4
  %and260 = and i32 %438, 65536
  %tobool261 = icmp ne i32 %and260, 0
  br i1 %tobool261, label %if.then265, label %lor.lhs.false262

lor.lhs.false262:                                 ; preds = %lor.lhs.false258
  %439 = load i32* %cur_match_len, align 4
  %cmp263 = icmp uge i32 %439, 128
  br i1 %cmp263, label %if.then265, label %if.else266

if.then265:                                       ; preds = %lor.lhs.false262, %lor.lhs.false258, %if.else256
  %440 = load %struct.tdefl_compressor** %d.addr, align 8
  %441 = load i32* %cur_match_len, align 4
  %442 = load i32* %cur_match_dist, align 4
  store %struct.tdefl_compressor* %440, %struct.tdefl_compressor** %d.addr.i468, align 8
  store i32 %441, i32* %match_len.addr.i469, align 4
  store i32 %442, i32* %match_dist.addr.i470, align 4
  %443 = load i32* %match_len.addr.i469, align 4
  %cmp.i473 = icmp uge i32 %443, 3
  br i1 %cmp.i473, label %land.lhs.true.i475, label %cond.false.i479

land.lhs.true.i475:                               ; preds = %if.then265
  %444 = load i32* %match_dist.addr.i470, align 4
  %cmp1.i474 = icmp uge i32 %444, 1
  br i1 %cmp1.i474, label %land.lhs.true2.i477, label %cond.false.i479

land.lhs.true2.i477:                              ; preds = %land.lhs.true.i475
  %445 = load i32* %match_dist.addr.i470, align 4
  %cmp3.i476 = icmp ule i32 %445, 32768
  br i1 %cmp3.i476, label %cond.true.i478, label %cond.false.i479

cond.true.i478:                                   ; preds = %land.lhs.true2.i477
  %446 = load i32* %match_len.addr.i469, align 4
  %447 = load %struct.tdefl_compressor** %d.addr.i468, align 8
  %m_total_lz_bytes.i480 = getelementptr inbounds %struct.tdefl_compressor* %447, i32 0, i32 14
  %448 = load i32* %m_total_lz_bytes.i480, align 4
  %add.i481 = add i32 %448, %446
  store i32 %add.i481, i32* %m_total_lz_bytes.i480, align 4
  %449 = load i32* %match_len.addr.i469, align 4
  %sub.i482 = sub i32 %449, 3
  %conv.i483 = trunc i32 %sub.i482 to i8
  %450 = load %struct.tdefl_compressor** %d.addr.i468, align 8
  %m_pLZ_code_buf.i484 = getelementptr inbounds %struct.tdefl_compressor* %450, i32 0, i32 9
  %451 = load i8** %m_pLZ_code_buf.i484, align 8
  store i8 %conv.i483, i8* %451, align 1
  %452 = load i32* %match_dist.addr.i470, align 4
  %sub4.i485 = sub i32 %452, 1
  store i32 %sub4.i485, i32* %match_dist.addr.i470, align 4
  %453 = load i32* %match_dist.addr.i470, align 4
  %and.i486 = and i32 %453, 255
  %conv5.i487 = trunc i32 %and.i486 to i8
  %454 = load %struct.tdefl_compressor** %d.addr.i468, align 8
  %m_pLZ_code_buf6.i488 = getelementptr inbounds %struct.tdefl_compressor* %454, i32 0, i32 9
  %455 = load i8** %m_pLZ_code_buf6.i488, align 8
  %arrayidx7.i489 = getelementptr inbounds i8* %455, i64 1
  store i8 %conv5.i487, i8* %arrayidx7.i489, align 1
  %456 = load i32* %match_dist.addr.i470, align 4
  %shr.i490 = lshr i32 %456, 8
  %conv8.i491 = trunc i32 %shr.i490 to i8
  %457 = load %struct.tdefl_compressor** %d.addr.i468, align 8
  %m_pLZ_code_buf9.i492 = getelementptr inbounds %struct.tdefl_compressor* %457, i32 0, i32 9
  %458 = load i8** %m_pLZ_code_buf9.i492, align 8
  %arrayidx10.i493 = getelementptr inbounds i8* %458, i64 2
  store i8 %conv8.i491, i8* %arrayidx10.i493, align 1
  %459 = load %struct.tdefl_compressor** %d.addr.i468, align 8
  %m_pLZ_code_buf11.i494 = getelementptr inbounds %struct.tdefl_compressor* %459, i32 0, i32 9
  %460 = load i8** %m_pLZ_code_buf11.i494, align 8
  %add.ptr.i495 = getelementptr inbounds i8* %460, i64 3
  store i8* %add.ptr.i495, i8** %m_pLZ_code_buf11.i494, align 8
  %461 = load %struct.tdefl_compressor** %d.addr.i468, align 8
  %m_pLZ_flags.i496 = getelementptr inbounds %struct.tdefl_compressor* %461, i32 0, i32 10
  %462 = load i8** %m_pLZ_flags.i496, align 8
  %463 = load i8* %462, align 1
  %conv12.i497 = zext i8 %463 to i32
  %shr13.i498 = ashr i32 %conv12.i497, 1
  %or.i499 = or i32 %shr13.i498, 128
  %conv14.i500 = trunc i32 %or.i499 to i8
  %464 = load %struct.tdefl_compressor** %d.addr.i468, align 8
  %m_pLZ_flags15.i501 = getelementptr inbounds %struct.tdefl_compressor* %464, i32 0, i32 10
  %465 = load i8** %m_pLZ_flags15.i501, align 8
  store i8 %conv14.i500, i8* %465, align 1
  %466 = load %struct.tdefl_compressor** %d.addr.i468, align 8
  %m_num_flags_left.i502 = getelementptr inbounds %struct.tdefl_compressor* %466, i32 0, i32 13
  %467 = load i32* %m_num_flags_left.i502, align 4
  %dec.i503 = add i32 %467, -1
  store i32 %dec.i503, i32* %m_num_flags_left.i502, align 4
  %cmp16.i504 = icmp eq i32 %dec.i503, 0
  br i1 %cmp16.i504, label %if.then.i509, label %if.end.i520

cond.false.i479:                                  ; preds = %land.lhs.true2.i477, %land.lhs.true.i475, %if.then265
  call void @__assert_fail(i8* getelementptr inbounds ([94 x i8]* @.str40, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2479, i8* getelementptr inbounds ([62 x i8]* @__PRETTY_FUNCTION__.tdefl_record_match, i32 0, i32 0)) #6
  unreachable

if.then.i509:                                     ; preds = %cond.true.i478
  %468 = load %struct.tdefl_compressor** %d.addr.i468, align 8
  %m_num_flags_left18.i505 = getelementptr inbounds %struct.tdefl_compressor* %468, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left18.i505, align 4
  %469 = load %struct.tdefl_compressor** %d.addr.i468, align 8
  %m_pLZ_code_buf19.i506 = getelementptr inbounds %struct.tdefl_compressor* %469, i32 0, i32 9
  %470 = load i8** %m_pLZ_code_buf19.i506, align 8
  %incdec.ptr.i507 = getelementptr inbounds i8* %470, i32 1
  store i8* %incdec.ptr.i507, i8** %m_pLZ_code_buf19.i506, align 8
  %471 = load %struct.tdefl_compressor** %d.addr.i468, align 8
  %m_pLZ_flags20.i508 = getelementptr inbounds %struct.tdefl_compressor* %471, i32 0, i32 10
  store i8* %470, i8** %m_pLZ_flags20.i508, align 8
  br label %if.end.i520

if.end.i520:                                      ; preds = %if.then.i509, %cond.true.i478
  %472 = load i32* %match_dist.addr.i470, align 4
  %and21.i510 = and i32 %472, 511
  %idxprom.i511 = zext i32 %and21.i510 to i64
  %arrayidx22.i512 = getelementptr inbounds [512 x i8]* @s_tdefl_small_dist_sym, i32 0, i64 %idxprom.i511
  %473 = load i8* %arrayidx22.i512, align 1
  %conv23.i513 = zext i8 %473 to i32
  store i32 %conv23.i513, i32* %s0.i471, align 4
  %474 = load i32* %match_dist.addr.i470, align 4
  %shr24.i514 = lshr i32 %474, 8
  %and25.i515 = and i32 %shr24.i514, 127
  %idxprom26.i516 = zext i32 %and25.i515 to i64
  %arrayidx27.i517 = getelementptr inbounds [128 x i8]* @s_tdefl_large_dist_sym, i32 0, i64 %idxprom26.i516
  %475 = load i8* %arrayidx27.i517, align 1
  %conv28.i518 = zext i8 %475 to i32
  store i32 %conv28.i518, i32* %s1.i472, align 4
  %476 = load i32* %match_dist.addr.i470, align 4
  %cmp29.i519 = icmp ult i32 %476, 512
  br i1 %cmp29.i519, label %cond.true31.i521, label %cond.false32.i522

cond.true31.i521:                                 ; preds = %if.end.i520
  %477 = load i32* %s0.i471, align 4
  br label %cond.end33.i530

cond.false32.i522:                                ; preds = %if.end.i520
  %478 = load i32* %s1.i472, align 4
  br label %cond.end33.i530

cond.end33.i530:                                  ; preds = %cond.false32.i522, %cond.true31.i521
  %cond.i523 = phi i32 [ %477, %cond.true31.i521 ], [ %478, %cond.false32.i522 ]
  %idxprom34.i524 = zext i32 %cond.i523 to i64
  %479 = load %struct.tdefl_compressor** %d.addr.i468, align 8
  %m_huff_count.i525 = getelementptr inbounds %struct.tdefl_compressor* %479, i32 0, i32 36
  %arrayidx35.i526 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count.i525, i32 0, i64 1
  %arrayidx36.i527 = getelementptr inbounds [288 x i16]* %arrayidx35.i526, i32 0, i64 %idxprom34.i524
  %480 = load i16* %arrayidx36.i527, align 2
  %inc.i528 = add i16 %480, 1
  store i16 %inc.i528, i16* %arrayidx36.i527, align 2
  %481 = load i32* %match_len.addr.i469, align 4
  %cmp37.i529 = icmp uge i32 %481, 3
  br i1 %cmp37.i529, label %if.then39.i539, label %tdefl_record_match.exit540

if.then39.i539:                                   ; preds = %cond.end33.i530
  %482 = load i32* %match_len.addr.i469, align 4
  %sub40.i531 = sub i32 %482, 3
  %idxprom41.i532 = zext i32 %sub40.i531 to i64
  %arrayidx42.i533 = getelementptr inbounds [256 x i16]* @s_tdefl_len_sym, i32 0, i64 %idxprom41.i532
  %483 = load i16* %arrayidx42.i533, align 2
  %idxprom43.i534 = zext i16 %483 to i64
  %484 = load %struct.tdefl_compressor** %d.addr.i468, align 8
  %m_huff_count44.i535 = getelementptr inbounds %struct.tdefl_compressor* %484, i32 0, i32 36
  %arrayidx45.i536 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count44.i535, i32 0, i64 0
  %arrayidx46.i537 = getelementptr inbounds [288 x i16]* %arrayidx45.i536, i32 0, i64 %idxprom43.i534
  %485 = load i16* %arrayidx46.i537, align 2
  %inc47.i538 = add i16 %485, 1
  store i16 %inc47.i538, i16* %arrayidx46.i537, align 2
  br label %tdefl_record_match.exit540

tdefl_record_match.exit540:                       ; preds = %if.then39.i539, %cond.end33.i530
  %486 = load i32* %cur_match_len, align 4
  store i32 %486, i32* %len_to_move, align 4
  br label %if.end281

if.else266:                                       ; preds = %lor.lhs.false262
  %487 = load i32* %cur_pos, align 4
  %conv267 = zext i32 %487 to i64
  %cmp268 = icmp ult i64 %conv267, 33024
  br i1 %cmp268, label %cond.true270, label %cond.false272

cond.true270:                                     ; preds = %if.else266
  %488 = load i32* %cur_pos, align 4
  %conv271 = zext i32 %488 to i64
  br label %cond.end273

cond.false272:                                    ; preds = %if.else266
  br label %cond.end273

cond.end273:                                      ; preds = %cond.false272, %cond.true270
  %cond274 = phi i64 [ %conv271, %cond.true270 ], [ 33024, %cond.false272 ]
  %489 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict275 = getelementptr inbounds %struct.tdefl_compressor* %489, i32 0, i32 35
  %arrayidx276 = getelementptr inbounds [33025 x i8]* %m_dict275, i32 0, i64 %cond274
  %490 = load i8* %arrayidx276, align 1
  %conv277 = zext i8 %490 to i32
  %491 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_lit278 = getelementptr inbounds %struct.tdefl_compressor* %491, i32 0, i32 20
  store i32 %conv277, i32* %m_saved_lit278, align 4
  %492 = load i32* %cur_match_dist, align 4
  %493 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_dist279 = getelementptr inbounds %struct.tdefl_compressor* %493, i32 0, i32 18
  store i32 %492, i32* %m_saved_match_dist279, align 4
  %494 = load i32* %cur_match_len, align 4
  %495 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len280 = getelementptr inbounds %struct.tdefl_compressor* %495, i32 0, i32 19
  store i32 %494, i32* %m_saved_match_len280, align 4
  br label %if.end281

if.end281:                                        ; preds = %cond.end273, %tdefl_record_match.exit540
  br label %if.end282

if.end282:                                        ; preds = %if.end281, %tdefl_record_literal.exit467
  br label %if.end283

if.end283:                                        ; preds = %if.end282, %if.end242
  %496 = load i32* %len_to_move, align 4
  %497 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos284 = getelementptr inbounds %struct.tdefl_compressor* %497, i32 0, i32 6
  %498 = load i32* %m_lookahead_pos284, align 4
  %add285 = add i32 %498, %496
  store i32 %add285, i32* %m_lookahead_pos284, align 4
  %499 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size286 = getelementptr inbounds %struct.tdefl_compressor* %499, i32 0, i32 7
  %500 = load i32* %m_lookahead_size286, align 4
  %501 = load i32* %len_to_move, align 4
  %cmp287 = icmp uge i32 %500, %501
  br i1 %cmp287, label %cond.true289, label %cond.false290

cond.true289:                                     ; preds = %if.end283
  br label %cond.end291

cond.false290:                                    ; preds = %if.end283
  call void @__assert_fail(i8* getelementptr inbounds ([35 x i8]* @.str39, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2597, i8* getelementptr inbounds ([50 x i8]* @__PRETTY_FUNCTION__.tdefl_compress_normal, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end291

cond.end291:                                      ; preds = %502, %cond.true289
  %503 = load i32* %len_to_move, align 4
  %504 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size292 = getelementptr inbounds %struct.tdefl_compressor* %504, i32 0, i32 7
  %505 = load i32* %m_lookahead_size292, align 4
  %sub293 = sub i32 %505, %503
  store i32 %sub293, i32* %m_lookahead_size292, align 4
  %506 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size294 = getelementptr inbounds %struct.tdefl_compressor* %506, i32 0, i32 8
  %507 = load i32* %m_dict_size294, align 4
  %508 = load i32* %len_to_move, align 4
  %add295 = add i32 %507, %508
  %cmp296 = icmp ult i32 %add295, 32768
  br i1 %cmp296, label %cond.true298, label %cond.false301

cond.true298:                                     ; preds = %cond.end291
  %509 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size299 = getelementptr inbounds %struct.tdefl_compressor* %509, i32 0, i32 8
  %510 = load i32* %m_dict_size299, align 4
  %511 = load i32* %len_to_move, align 4
  %add300 = add i32 %510, %511
  br label %cond.end302

cond.false301:                                    ; preds = %cond.end291
  br label %cond.end302

cond.end302:                                      ; preds = %cond.false301, %cond.true298
  %cond303 = phi i32 [ %add300, %cond.true298 ], [ 32768, %cond.false301 ]
  %512 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size304 = getelementptr inbounds %struct.tdefl_compressor* %512, i32 0, i32 8
  store i32 %cond303, i32* %m_dict_size304, align 4
  %513 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor* %513, i32 0, i32 9
  %514 = load i8** %m_pLZ_code_buf, align 8
  %515 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor* %515, i32 0, i32 39
  %arrayidx305 = getelementptr inbounds [65536 x i8]* %m_lz_code_buf, i32 0, i64 65528
  %cmp306 = icmp ugt i8* %514, %arrayidx305
  br i1 %cmp306, label %if.then322, label %lor.lhs.false308

lor.lhs.false308:                                 ; preds = %cond.end302
  %516 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes = getelementptr inbounds %struct.tdefl_compressor* %516, i32 0, i32 14
  %517 = load i32* %m_total_lz_bytes, align 4
  %cmp309 = icmp ugt i32 %517, 31744
  br i1 %cmp309, label %land.lhs.true311, label %if.end332

land.lhs.true311:                                 ; preds = %lor.lhs.false308
  %518 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf312 = getelementptr inbounds %struct.tdefl_compressor* %518, i32 0, i32 9
  %519 = load i8** %m_pLZ_code_buf312, align 8
  %520 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf313 = getelementptr inbounds %struct.tdefl_compressor* %520, i32 0, i32 39
  %arraydecay = getelementptr inbounds [65536 x i8]* %m_lz_code_buf313, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint i8* %519 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv314 = trunc i64 %sub.ptr.sub to i32
  %mul = mul i32 %conv314, 115
  %shr = lshr i32 %mul, 7
  %521 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes315 = getelementptr inbounds %struct.tdefl_compressor* %521, i32 0, i32 14
  %522 = load i32* %m_total_lz_bytes315, align 4
  %cmp316 = icmp uge i32 %shr, %522
  br i1 %cmp316, label %if.then322, label %lor.lhs.false318

lor.lhs.false318:                                 ; preds = %land.lhs.true311
  %523 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flags319 = getelementptr inbounds %struct.tdefl_compressor* %523, i32 0, i32 2
  %524 = load i32* %m_flags319, align 4
  %and320 = and i32 %524, 524288
  %tobool321 = icmp ne i32 %and320, 0
  br i1 %tobool321, label %if.then322, label %if.end332

if.then322:                                       ; preds = %lor.lhs.false318, %land.lhs.true311, %cond.end302
  %525 = load i8** %pSrc, align 8
  %526 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc323 = getelementptr inbounds %struct.tdefl_compressor* %526, i32 0, i32 32
  store i8* %525, i8** %m_pSrc323, align 8
  %527 = load i64* %src_buf_left, align 8
  %528 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left324 = getelementptr inbounds %struct.tdefl_compressor* %528, i32 0, i32 33
  store i64 %527, i64* %m_src_buf_left324, align 8
  %529 = load %struct.tdefl_compressor** %d.addr, align 8
  %call = call i32 @tdefl_flush_block(%struct.tdefl_compressor* %529, i32 0)
  store i32 %call, i32* %n, align 4
  %cmp325 = icmp ne i32 %call, 0
  br i1 %cmp325, label %if.then327, label %if.end331

if.then327:                                       ; preds = %if.then322
  %530 = load i32* %n, align 4
  %cmp328 = icmp slt i32 %530, 0
  %cond330 = select i1 %cmp328, i32 0, i32 1
  store i32 %cond330, i32* %retval
  br label %return

if.end331:                                        ; preds = %if.then322
  br label %if.end332

if.end332:                                        ; preds = %if.end331, %lor.lhs.false318, %lor.lhs.false308
  br label %while.cond

while.end333:                                     ; preds = %if.then146, %lor.end
  %531 = load i8** %pSrc, align 8
  %532 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc334 = getelementptr inbounds %struct.tdefl_compressor* %532, i32 0, i32 32
  store i8* %531, i8** %m_pSrc334, align 8
  %533 = load i64* %src_buf_left, align 8
  %534 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left335 = getelementptr inbounds %struct.tdefl_compressor* %534, i32 0, i32 33
  store i64 %533, i64* %m_src_buf_left335, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %while.end333, %if.then327
  %535 = load i32* %retval
  ret i32 %535
}

; Function Attrs: nounwind uwtable
define internal i32 @tdefl_flush_block(%struct.tdefl_compressor* %d, i32 %flush) #0 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %flush.addr = alloca i32, align 4
  %saved_bit_buf = alloca i32, align 4
  %saved_bits_in = alloca i32, align 4
  %pSaved_output_buf = alloca i8*, align 8
  %comp_block_succeeded = alloca i32, align 4
  %n = alloca i32, align 4
  %use_raw_block = alloca i32, align 4
  %pOutput_buf_start = alloca i8*, align 8
  %bits = alloca i32, align 4
  %len = alloca i32, align 4
  %bits48 = alloca i32, align 4
  %len49 = alloca i32, align 4
  %bits86 = alloca i32, align 4
  %len89 = alloca i32, align 4
  %i = alloca i32, align 4
  %bits157 = alloca i32, align 4
  %len158 = alloca i32, align 4
  %bits197 = alloca i32, align 4
  %len198 = alloca i32, align 4
  %bits238 = alloca i32, align 4
  %len241 = alloca i32, align 4
  %bits283 = alloca i32, align 4
  %len288 = alloca i32, align 4
  %bits342 = alloca i32, align 4
  %len343 = alloca i32, align 4
  %i385 = alloca i32, align 4
  %a = alloca i32, align 4
  %bits391 = alloca i32, align 4
  %len394 = alloca i32, align 4
  %i435 = alloca i32, align 4
  %z = alloca i32, align 4
  %bits437 = alloca i32, align 4
  %len438 = alloca i32, align 4
  %bits477 = alloca i32, align 4
  %len478 = alloca i32, align 4
  %bits520 = alloca i32, align 4
  %len522 = alloca i32, align 4
  %bytes_to_copy = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  store i32 %flush, i32* %flush.addr, align 4
  store i32 0, i32* %comp_block_succeeded, align 4
  %0 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flags = getelementptr inbounds %struct.tdefl_compressor* %0, i32 0, i32 2
  %1 = load i32* %m_flags, align 4
  %and = and i32 %1, 524288
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos = getelementptr inbounds %struct.tdefl_compressor* %2, i32 0, i32 6
  %3 = load i32* %m_lookahead_pos, align 4
  %4 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf_dict_pos = getelementptr inbounds %struct.tdefl_compressor* %4, i32 0, i32 15
  %5 = load i32* %m_lz_code_buf_dict_pos, align 4
  %sub = sub i32 %3, %5
  %6 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor* %6, i32 0, i32 8
  %7 = load i32* %m_dict_size, align 4
  %cmp1 = icmp ule i32 %sub, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  %land.ext = zext i1 %8 to i32
  store i32 %land.ext, i32* %use_raw_block, align 4
  %9 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_func = getelementptr inbounds %struct.tdefl_compressor* %9, i32 0, i32 0
  %10 = load i32 (i8*, i32, i8*)** %m_pPut_buf_func, align 8
  %cmp2 = icmp eq i32 (i8*, i32, i8*)* %10, null
  br i1 %cmp2, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %land.end
  %11 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size = getelementptr inbounds %struct.tdefl_compressor* %11, i32 0, i32 30
  %12 = load i64** %m_pOut_buf_size, align 8
  %13 = load i64* %12, align 8
  %14 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs = getelementptr inbounds %struct.tdefl_compressor* %14, i32 0, i32 34
  %15 = load i64* %m_out_buf_ofs, align 8
  %sub3 = sub i64 %13, %15
  %cmp4 = icmp uge i64 %sub3, 85196
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %16 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf = getelementptr inbounds %struct.tdefl_compressor* %16, i32 0, i32 28
  %17 = load i8** %m_pOut_buf, align 8
  %18 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs5 = getelementptr inbounds %struct.tdefl_compressor* %18, i32 0, i32 34
  %19 = load i64* %m_out_buf_ofs5, align 8
  %add.ptr = getelementptr inbounds i8* %17, i64 %19
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %land.end
  %20 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_buf = getelementptr inbounds %struct.tdefl_compressor* %20, i32 0, i32 42
  %arraydecay = getelementptr inbounds [85196 x i8]* %m_output_buf, i32 0, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %arraydecay, %cond.false ]
  store i8* %cond, i8** %pOutput_buf_start, align 8
  %21 = load i8** %pOutput_buf_start, align 8
  %22 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor* %22, i32 0, i32 11
  store i8* %21, i8** %m_pOutput_buf, align 8
  %23 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf6 = getelementptr inbounds %struct.tdefl_compressor* %23, i32 0, i32 11
  %24 = load i8** %m_pOutput_buf6, align 8
  %add.ptr7 = getelementptr inbounds i8* %24, i64 85196
  %add.ptr8 = getelementptr inbounds i8* %add.ptr7, i64 -16
  %25 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor* %25, i32 0, i32 12
  store i8* %add.ptr8, i8** %m_pOutput_buf_end, align 8
  %26 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining = getelementptr inbounds %struct.tdefl_compressor* %26, i32 0, i32 22
  %27 = load i32* %m_output_flush_remaining, align 4
  %tobool = icmp ne i32 %27, 0
  br i1 %tobool, label %cond.false10, label %cond.true9

cond.true9:                                       ; preds = %cond.end
  br label %cond.end11

cond.false10:                                     ; preds = %cond.end
  call void @__assert_fail(i8* getelementptr inbounds ([29 x i8]* @.str32, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2173, i8* getelementptr inbounds ([47 x i8]* @__PRETTY_FUNCTION__.tdefl_flush_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end11

cond.end11:                                       ; preds = %28, %cond.true9
  %29 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_ofs = getelementptr inbounds %struct.tdefl_compressor* %29, i32 0, i32 21
  store i32 0, i32* %m_output_flush_ofs, align 4
  %30 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining12 = getelementptr inbounds %struct.tdefl_compressor* %30, i32 0, i32 22
  store i32 0, i32* %m_output_flush_remaining12, align 4
  %31 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags = getelementptr inbounds %struct.tdefl_compressor* %31, i32 0, i32 10
  %32 = load i8** %m_pLZ_flags, align 8
  %33 = load i8* %32, align 1
  %conv = zext i8 %33 to i32
  %34 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left = getelementptr inbounds %struct.tdefl_compressor* %34, i32 0, i32 13
  %35 = load i32* %m_num_flags_left, align 4
  %shr = ashr i32 %conv, %35
  %conv13 = trunc i32 %shr to i8
  %36 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags14 = getelementptr inbounds %struct.tdefl_compressor* %36, i32 0, i32 10
  %37 = load i8** %m_pLZ_flags14, align 8
  store i8 %conv13, i8* %37, align 1
  %38 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left15 = getelementptr inbounds %struct.tdefl_compressor* %38, i32 0, i32 13
  %39 = load i32* %m_num_flags_left15, align 4
  %cmp16 = icmp eq i32 %39, 8
  %conv17 = zext i1 %cmp16 to i32
  %40 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor* %40, i32 0, i32 9
  %41 = load i8** %m_pLZ_code_buf, align 8
  %idx.ext = sext i32 %conv17 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr18 = getelementptr inbounds i8* %41, i64 %idx.neg
  store i8* %add.ptr18, i8** %m_pLZ_code_buf, align 8
  %42 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flags19 = getelementptr inbounds %struct.tdefl_compressor* %42, i32 0, i32 2
  %43 = load i32* %m_flags19, align 4
  %and20 = and i32 %43, 4096
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %land.lhs.true22, label %if.end84

land.lhs.true22:                                  ; preds = %cond.end11
  %44 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_block_index = getelementptr inbounds %struct.tdefl_compressor* %44, i32 0, i32 24
  %45 = load i32* %m_block_index, align 4
  %tobool23 = icmp ne i32 %45, 0
  br i1 %tobool23, label %if.end84, label %if.then

if.then:                                          ; preds = %land.lhs.true22
  br label %do.body

do.body:                                          ; preds = %if.then
  store i32 120, i32* %bits, align 4
  store i32 8, i32* %len, align 4
  %46 = load i32* %bits, align 4
  %47 = load i32* %len, align 4
  %shl = shl i32 1, %47
  %sub24 = sub i32 %shl, 1
  %cmp25 = icmp ule i32 %46, %sub24
  br i1 %cmp25, label %cond.true27, label %cond.false28

cond.true27:                                      ; preds = %do.body
  br label %cond.end29

cond.false28:                                     ; preds = %do.body
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2182, i8* getelementptr inbounds ([47 x i8]* @__PRETTY_FUNCTION__.tdefl_flush_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end29

cond.end29:                                       ; preds = %48, %cond.true27
  %49 = load i32* %bits, align 4
  %50 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor* %50, i32 0, i32 16
  %51 = load i32* %m_bits_in, align 4
  %shl30 = shl i32 %49, %51
  %52 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor* %52, i32 0, i32 17
  %53 = load i32* %m_bit_buffer, align 4
  %or = or i32 %53, %shl30
  store i32 %or, i32* %m_bit_buffer, align 4
  %54 = load i32* %len, align 4
  %55 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in31 = getelementptr inbounds %struct.tdefl_compressor* %55, i32 0, i32 16
  %56 = load i32* %m_bits_in31, align 4
  %add = add i32 %56, %54
  store i32 %add, i32* %m_bits_in31, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end29
  %57 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in32 = getelementptr inbounds %struct.tdefl_compressor* %57, i32 0, i32 16
  %58 = load i32* %m_bits_in32, align 4
  %cmp33 = icmp uge i32 %58, 8
  br i1 %cmp33, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %59 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf35 = getelementptr inbounds %struct.tdefl_compressor* %59, i32 0, i32 11
  %60 = load i8** %m_pOutput_buf35, align 8
  %61 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end36 = getelementptr inbounds %struct.tdefl_compressor* %61, i32 0, i32 12
  %62 = load i8** %m_pOutput_buf_end36, align 8
  %cmp37 = icmp ult i8* %60, %62
  br i1 %cmp37, label %if.then39, label %if.end

if.then39:                                        ; preds = %while.body
  %63 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer40 = getelementptr inbounds %struct.tdefl_compressor* %63, i32 0, i32 17
  %64 = load i32* %m_bit_buffer40, align 4
  %conv41 = trunc i32 %64 to i8
  %65 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf42 = getelementptr inbounds %struct.tdefl_compressor* %65, i32 0, i32 11
  %66 = load i8** %m_pOutput_buf42, align 8
  %incdec.ptr = getelementptr inbounds i8* %66, i32 1
  store i8* %incdec.ptr, i8** %m_pOutput_buf42, align 8
  store i8 %conv41, i8* %66, align 1
  br label %if.end

if.end:                                           ; preds = %if.then39, %while.body
  %67 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer43 = getelementptr inbounds %struct.tdefl_compressor* %67, i32 0, i32 17
  %68 = load i32* %m_bit_buffer43, align 4
  %shr44 = lshr i32 %68, 8
  store i32 %shr44, i32* %m_bit_buffer43, align 4
  %69 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in45 = getelementptr inbounds %struct.tdefl_compressor* %69, i32 0, i32 16
  %70 = load i32* %m_bits_in45, align 4
  %sub46 = sub i32 %70, 8
  store i32 %sub46, i32* %m_bits_in45, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.end

do.end:                                           ; preds = %while.end
  br label %do.body47

do.body47:                                        ; preds = %do.end
  store i32 1, i32* %bits48, align 4
  store i32 8, i32* %len49, align 4
  %71 = load i32* %bits48, align 4
  %72 = load i32* %len49, align 4
  %shl50 = shl i32 1, %72
  %sub51 = sub i32 %shl50, 1
  %cmp52 = icmp ule i32 %71, %sub51
  br i1 %cmp52, label %cond.true54, label %cond.false55

cond.true54:                                      ; preds = %do.body47
  br label %cond.end56

cond.false55:                                     ; preds = %do.body47
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2182, i8* getelementptr inbounds ([47 x i8]* @__PRETTY_FUNCTION__.tdefl_flush_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end56

cond.end56:                                       ; preds = %73, %cond.true54
  %74 = load i32* %bits48, align 4
  %75 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in57 = getelementptr inbounds %struct.tdefl_compressor* %75, i32 0, i32 16
  %76 = load i32* %m_bits_in57, align 4
  %shl58 = shl i32 %74, %76
  %77 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer59 = getelementptr inbounds %struct.tdefl_compressor* %77, i32 0, i32 17
  %78 = load i32* %m_bit_buffer59, align 4
  %or60 = or i32 %78, %shl58
  store i32 %or60, i32* %m_bit_buffer59, align 4
  %79 = load i32* %len49, align 4
  %80 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in61 = getelementptr inbounds %struct.tdefl_compressor* %80, i32 0, i32 16
  %81 = load i32* %m_bits_in61, align 4
  %add62 = add i32 %81, %79
  store i32 %add62, i32* %m_bits_in61, align 4
  br label %while.cond63

while.cond63:                                     ; preds = %if.end77, %cond.end56
  %82 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in64 = getelementptr inbounds %struct.tdefl_compressor* %82, i32 0, i32 16
  %83 = load i32* %m_bits_in64, align 4
  %cmp65 = icmp uge i32 %83, 8
  br i1 %cmp65, label %while.body67, label %while.end82

while.body67:                                     ; preds = %while.cond63
  %84 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf68 = getelementptr inbounds %struct.tdefl_compressor* %84, i32 0, i32 11
  %85 = load i8** %m_pOutput_buf68, align 8
  %86 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end69 = getelementptr inbounds %struct.tdefl_compressor* %86, i32 0, i32 12
  %87 = load i8** %m_pOutput_buf_end69, align 8
  %cmp70 = icmp ult i8* %85, %87
  br i1 %cmp70, label %if.then72, label %if.end77

if.then72:                                        ; preds = %while.body67
  %88 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer73 = getelementptr inbounds %struct.tdefl_compressor* %88, i32 0, i32 17
  %89 = load i32* %m_bit_buffer73, align 4
  %conv74 = trunc i32 %89 to i8
  %90 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf75 = getelementptr inbounds %struct.tdefl_compressor* %90, i32 0, i32 11
  %91 = load i8** %m_pOutput_buf75, align 8
  %incdec.ptr76 = getelementptr inbounds i8* %91, i32 1
  store i8* %incdec.ptr76, i8** %m_pOutput_buf75, align 8
  store i8 %conv74, i8* %91, align 1
  br label %if.end77

if.end77:                                         ; preds = %if.then72, %while.body67
  %92 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer78 = getelementptr inbounds %struct.tdefl_compressor* %92, i32 0, i32 17
  %93 = load i32* %m_bit_buffer78, align 4
  %shr79 = lshr i32 %93, 8
  store i32 %shr79, i32* %m_bit_buffer78, align 4
  %94 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in80 = getelementptr inbounds %struct.tdefl_compressor* %94, i32 0, i32 16
  %95 = load i32* %m_bits_in80, align 4
  %sub81 = sub i32 %95, 8
  store i32 %sub81, i32* %m_bits_in80, align 4
  br label %while.cond63

while.end82:                                      ; preds = %while.cond63
  br label %do.end83

do.end83:                                         ; preds = %while.end82
  br label %if.end84

if.end84:                                         ; preds = %do.end83, %land.lhs.true22, %cond.end11
  br label %do.body85

do.body85:                                        ; preds = %if.end84
  %96 = load i32* %flush.addr, align 4
  %cmp87 = icmp eq i32 %96, 4
  %conv88 = zext i1 %cmp87 to i32
  store i32 %conv88, i32* %bits86, align 4
  store i32 1, i32* %len89, align 4
  %97 = load i32* %bits86, align 4
  %98 = load i32* %len89, align 4
  %shl90 = shl i32 1, %98
  %sub91 = sub i32 %shl90, 1
  %cmp92 = icmp ule i32 %97, %sub91
  br i1 %cmp92, label %cond.true94, label %cond.false95

cond.true94:                                      ; preds = %do.body85
  br label %cond.end96

cond.false95:                                     ; preds = %do.body85
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2185, i8* getelementptr inbounds ([47 x i8]* @__PRETTY_FUNCTION__.tdefl_flush_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end96

cond.end96:                                       ; preds = %99, %cond.true94
  %100 = load i32* %bits86, align 4
  %101 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in97 = getelementptr inbounds %struct.tdefl_compressor* %101, i32 0, i32 16
  %102 = load i32* %m_bits_in97, align 4
  %shl98 = shl i32 %100, %102
  %103 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer99 = getelementptr inbounds %struct.tdefl_compressor* %103, i32 0, i32 17
  %104 = load i32* %m_bit_buffer99, align 4
  %or100 = or i32 %104, %shl98
  store i32 %or100, i32* %m_bit_buffer99, align 4
  %105 = load i32* %len89, align 4
  %106 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in101 = getelementptr inbounds %struct.tdefl_compressor* %106, i32 0, i32 16
  %107 = load i32* %m_bits_in101, align 4
  %add102 = add i32 %107, %105
  store i32 %add102, i32* %m_bits_in101, align 4
  br label %while.cond103

while.cond103:                                    ; preds = %if.end117, %cond.end96
  %108 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in104 = getelementptr inbounds %struct.tdefl_compressor* %108, i32 0, i32 16
  %109 = load i32* %m_bits_in104, align 4
  %cmp105 = icmp uge i32 %109, 8
  br i1 %cmp105, label %while.body107, label %while.end122

while.body107:                                    ; preds = %while.cond103
  %110 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf108 = getelementptr inbounds %struct.tdefl_compressor* %110, i32 0, i32 11
  %111 = load i8** %m_pOutput_buf108, align 8
  %112 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end109 = getelementptr inbounds %struct.tdefl_compressor* %112, i32 0, i32 12
  %113 = load i8** %m_pOutput_buf_end109, align 8
  %cmp110 = icmp ult i8* %111, %113
  br i1 %cmp110, label %if.then112, label %if.end117

if.then112:                                       ; preds = %while.body107
  %114 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer113 = getelementptr inbounds %struct.tdefl_compressor* %114, i32 0, i32 17
  %115 = load i32* %m_bit_buffer113, align 4
  %conv114 = trunc i32 %115 to i8
  %116 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf115 = getelementptr inbounds %struct.tdefl_compressor* %116, i32 0, i32 11
  %117 = load i8** %m_pOutput_buf115, align 8
  %incdec.ptr116 = getelementptr inbounds i8* %117, i32 1
  store i8* %incdec.ptr116, i8** %m_pOutput_buf115, align 8
  store i8 %conv114, i8* %117, align 1
  br label %if.end117

if.end117:                                        ; preds = %if.then112, %while.body107
  %118 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer118 = getelementptr inbounds %struct.tdefl_compressor* %118, i32 0, i32 17
  %119 = load i32* %m_bit_buffer118, align 4
  %shr119 = lshr i32 %119, 8
  store i32 %shr119, i32* %m_bit_buffer118, align 4
  %120 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in120 = getelementptr inbounds %struct.tdefl_compressor* %120, i32 0, i32 16
  %121 = load i32* %m_bits_in120, align 4
  %sub121 = sub i32 %121, 8
  store i32 %sub121, i32* %m_bits_in120, align 4
  br label %while.cond103

while.end122:                                     ; preds = %while.cond103
  br label %do.end123

do.end123:                                        ; preds = %while.end122
  %122 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf124 = getelementptr inbounds %struct.tdefl_compressor* %122, i32 0, i32 11
  %123 = load i8** %m_pOutput_buf124, align 8
  store i8* %123, i8** %pSaved_output_buf, align 8
  %124 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer125 = getelementptr inbounds %struct.tdefl_compressor* %124, i32 0, i32 17
  %125 = load i32* %m_bit_buffer125, align 4
  store i32 %125, i32* %saved_bit_buf, align 4
  %126 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in126 = getelementptr inbounds %struct.tdefl_compressor* %126, i32 0, i32 16
  %127 = load i32* %m_bits_in126, align 4
  store i32 %127, i32* %saved_bits_in, align 4
  %128 = load i32* %use_raw_block, align 4
  %tobool127 = icmp ne i32 %128, 0
  br i1 %tobool127, label %if.end134, label %if.then128

if.then128:                                       ; preds = %do.end123
  %129 = load %struct.tdefl_compressor** %d.addr, align 8
  %130 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flags129 = getelementptr inbounds %struct.tdefl_compressor* %130, i32 0, i32 2
  %131 = load i32* %m_flags129, align 4
  %and130 = and i32 %131, 262144
  %tobool131 = icmp ne i32 %and130, 0
  br i1 %tobool131, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then128
  %132 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes = getelementptr inbounds %struct.tdefl_compressor* %132, i32 0, i32 14
  %133 = load i32* %m_total_lz_bytes, align 4
  %cmp132 = icmp ult i32 %133, 48
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then128
  %134 = phi i1 [ true, %if.then128 ], [ %cmp132, %lor.rhs ]
  %lor.ext = zext i1 %134 to i32
  %call = call i32 @tdefl_compress_block(%struct.tdefl_compressor* %129, i32 %lor.ext)
  store i32 %call, i32* %comp_block_succeeded, align 4
  br label %if.end134

if.end134:                                        ; preds = %lor.end, %do.end123
  %135 = load i32* %use_raw_block, align 4
  %tobool135 = icmp ne i32 %135, 0
  br i1 %tobool135, label %land.lhs.true145, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end134
  %136 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes136 = getelementptr inbounds %struct.tdefl_compressor* %136, i32 0, i32 14
  %137 = load i32* %m_total_lz_bytes136, align 4
  %tobool137 = icmp ne i32 %137, 0
  br i1 %tobool137, label %land.lhs.true138, label %if.else

land.lhs.true138:                                 ; preds = %lor.lhs.false
  %138 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf139 = getelementptr inbounds %struct.tdefl_compressor* %138, i32 0, i32 11
  %139 = load i8** %m_pOutput_buf139, align 8
  %140 = load i8** %pSaved_output_buf, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %139 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %140 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add140 = add nsw i64 %sub.ptr.sub, 1
  %141 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes141 = getelementptr inbounds %struct.tdefl_compressor* %141, i32 0, i32 14
  %142 = load i32* %m_total_lz_bytes141, align 4
  %conv142 = zext i32 %142 to i64
  %cmp143 = icmp sge i64 %add140, %conv142
  br i1 %cmp143, label %land.lhs.true145, label %if.else

land.lhs.true145:                                 ; preds = %land.lhs.true138, %if.end134
  %143 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos146 = getelementptr inbounds %struct.tdefl_compressor* %143, i32 0, i32 6
  %144 = load i32* %m_lookahead_pos146, align 4
  %145 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf_dict_pos147 = getelementptr inbounds %struct.tdefl_compressor* %145, i32 0, i32 15
  %146 = load i32* %m_lz_code_buf_dict_pos147, align 4
  %sub148 = sub i32 %144, %146
  %147 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size149 = getelementptr inbounds %struct.tdefl_compressor* %147, i32 0, i32 8
  %148 = load i32* %m_dict_size149, align 4
  %cmp150 = icmp ule i32 %sub148, %148
  br i1 %cmp150, label %if.then152, label %if.else

if.then152:                                       ; preds = %land.lhs.true145
  %149 = load i8** %pSaved_output_buf, align 8
  %150 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf153 = getelementptr inbounds %struct.tdefl_compressor* %150, i32 0, i32 11
  store i8* %149, i8** %m_pOutput_buf153, align 8
  %151 = load i32* %saved_bit_buf, align 4
  %152 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer154 = getelementptr inbounds %struct.tdefl_compressor* %152, i32 0, i32 17
  store i32 %151, i32* %m_bit_buffer154, align 4
  %153 = load i32* %saved_bits_in, align 4
  %154 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in155 = getelementptr inbounds %struct.tdefl_compressor* %154, i32 0, i32 16
  store i32 %153, i32* %m_bits_in155, align 4
  br label %do.body156

do.body156:                                       ; preds = %if.then152
  store i32 0, i32* %bits157, align 4
  store i32 2, i32* %len158, align 4
  %155 = load i32* %bits157, align 4
  %156 = load i32* %len158, align 4
  %shl159 = shl i32 1, %156
  %sub160 = sub i32 %shl159, 1
  %cmp161 = icmp ule i32 %155, %sub160
  br i1 %cmp161, label %cond.true163, label %cond.false164

cond.true163:                                     ; preds = %do.body156
  br label %cond.end165

cond.false164:                                    ; preds = %do.body156
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2197, i8* getelementptr inbounds ([47 x i8]* @__PRETTY_FUNCTION__.tdefl_flush_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end165

cond.end165:                                      ; preds = %157, %cond.true163
  %158 = load i32* %bits157, align 4
  %159 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in166 = getelementptr inbounds %struct.tdefl_compressor* %159, i32 0, i32 16
  %160 = load i32* %m_bits_in166, align 4
  %shl167 = shl i32 %158, %160
  %161 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer168 = getelementptr inbounds %struct.tdefl_compressor* %161, i32 0, i32 17
  %162 = load i32* %m_bit_buffer168, align 4
  %or169 = or i32 %162, %shl167
  store i32 %or169, i32* %m_bit_buffer168, align 4
  %163 = load i32* %len158, align 4
  %164 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in170 = getelementptr inbounds %struct.tdefl_compressor* %164, i32 0, i32 16
  %165 = load i32* %m_bits_in170, align 4
  %add171 = add i32 %165, %163
  store i32 %add171, i32* %m_bits_in170, align 4
  br label %while.cond172

while.cond172:                                    ; preds = %if.end186, %cond.end165
  %166 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in173 = getelementptr inbounds %struct.tdefl_compressor* %166, i32 0, i32 16
  %167 = load i32* %m_bits_in173, align 4
  %cmp174 = icmp uge i32 %167, 8
  br i1 %cmp174, label %while.body176, label %while.end191

while.body176:                                    ; preds = %while.cond172
  %168 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf177 = getelementptr inbounds %struct.tdefl_compressor* %168, i32 0, i32 11
  %169 = load i8** %m_pOutput_buf177, align 8
  %170 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end178 = getelementptr inbounds %struct.tdefl_compressor* %170, i32 0, i32 12
  %171 = load i8** %m_pOutput_buf_end178, align 8
  %cmp179 = icmp ult i8* %169, %171
  br i1 %cmp179, label %if.then181, label %if.end186

if.then181:                                       ; preds = %while.body176
  %172 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer182 = getelementptr inbounds %struct.tdefl_compressor* %172, i32 0, i32 17
  %173 = load i32* %m_bit_buffer182, align 4
  %conv183 = trunc i32 %173 to i8
  %174 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf184 = getelementptr inbounds %struct.tdefl_compressor* %174, i32 0, i32 11
  %175 = load i8** %m_pOutput_buf184, align 8
  %incdec.ptr185 = getelementptr inbounds i8* %175, i32 1
  store i8* %incdec.ptr185, i8** %m_pOutput_buf184, align 8
  store i8 %conv183, i8* %175, align 1
  br label %if.end186

if.end186:                                        ; preds = %if.then181, %while.body176
  %176 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer187 = getelementptr inbounds %struct.tdefl_compressor* %176, i32 0, i32 17
  %177 = load i32* %m_bit_buffer187, align 4
  %shr188 = lshr i32 %177, 8
  store i32 %shr188, i32* %m_bit_buffer187, align 4
  %178 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in189 = getelementptr inbounds %struct.tdefl_compressor* %178, i32 0, i32 16
  %179 = load i32* %m_bits_in189, align 4
  %sub190 = sub i32 %179, 8
  store i32 %sub190, i32* %m_bits_in189, align 4
  br label %while.cond172

while.end191:                                     ; preds = %while.cond172
  br label %do.end192

do.end192:                                        ; preds = %while.end191
  %180 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in193 = getelementptr inbounds %struct.tdefl_compressor* %180, i32 0, i32 16
  %181 = load i32* %m_bits_in193, align 4
  %tobool194 = icmp ne i32 %181, 0
  br i1 %tobool194, label %if.then195, label %if.end235

if.then195:                                       ; preds = %do.end192
  br label %do.body196

do.body196:                                       ; preds = %if.then195
  store i32 0, i32* %bits197, align 4
  %182 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in199 = getelementptr inbounds %struct.tdefl_compressor* %182, i32 0, i32 16
  %183 = load i32* %m_bits_in199, align 4
  %sub200 = sub i32 8, %183
  store i32 %sub200, i32* %len198, align 4
  %184 = load i32* %bits197, align 4
  %185 = load i32* %len198, align 4
  %shl201 = shl i32 1, %185
  %sub202 = sub i32 %shl201, 1
  %cmp203 = icmp ule i32 %184, %sub202
  br i1 %cmp203, label %cond.true205, label %cond.false206

cond.true205:                                     ; preds = %do.body196
  br label %cond.end207

cond.false206:                                    ; preds = %do.body196
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2198, i8* getelementptr inbounds ([47 x i8]* @__PRETTY_FUNCTION__.tdefl_flush_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end207

cond.end207:                                      ; preds = %186, %cond.true205
  %187 = load i32* %bits197, align 4
  %188 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in208 = getelementptr inbounds %struct.tdefl_compressor* %188, i32 0, i32 16
  %189 = load i32* %m_bits_in208, align 4
  %shl209 = shl i32 %187, %189
  %190 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer210 = getelementptr inbounds %struct.tdefl_compressor* %190, i32 0, i32 17
  %191 = load i32* %m_bit_buffer210, align 4
  %or211 = or i32 %191, %shl209
  store i32 %or211, i32* %m_bit_buffer210, align 4
  %192 = load i32* %len198, align 4
  %193 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in212 = getelementptr inbounds %struct.tdefl_compressor* %193, i32 0, i32 16
  %194 = load i32* %m_bits_in212, align 4
  %add213 = add i32 %194, %192
  store i32 %add213, i32* %m_bits_in212, align 4
  br label %while.cond214

while.cond214:                                    ; preds = %if.end228, %cond.end207
  %195 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in215 = getelementptr inbounds %struct.tdefl_compressor* %195, i32 0, i32 16
  %196 = load i32* %m_bits_in215, align 4
  %cmp216 = icmp uge i32 %196, 8
  br i1 %cmp216, label %while.body218, label %while.end233

while.body218:                                    ; preds = %while.cond214
  %197 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf219 = getelementptr inbounds %struct.tdefl_compressor* %197, i32 0, i32 11
  %198 = load i8** %m_pOutput_buf219, align 8
  %199 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end220 = getelementptr inbounds %struct.tdefl_compressor* %199, i32 0, i32 12
  %200 = load i8** %m_pOutput_buf_end220, align 8
  %cmp221 = icmp ult i8* %198, %200
  br i1 %cmp221, label %if.then223, label %if.end228

if.then223:                                       ; preds = %while.body218
  %201 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer224 = getelementptr inbounds %struct.tdefl_compressor* %201, i32 0, i32 17
  %202 = load i32* %m_bit_buffer224, align 4
  %conv225 = trunc i32 %202 to i8
  %203 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf226 = getelementptr inbounds %struct.tdefl_compressor* %203, i32 0, i32 11
  %204 = load i8** %m_pOutput_buf226, align 8
  %incdec.ptr227 = getelementptr inbounds i8* %204, i32 1
  store i8* %incdec.ptr227, i8** %m_pOutput_buf226, align 8
  store i8 %conv225, i8* %204, align 1
  br label %if.end228

if.end228:                                        ; preds = %if.then223, %while.body218
  %205 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer229 = getelementptr inbounds %struct.tdefl_compressor* %205, i32 0, i32 17
  %206 = load i32* %m_bit_buffer229, align 4
  %shr230 = lshr i32 %206, 8
  store i32 %shr230, i32* %m_bit_buffer229, align 4
  %207 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in231 = getelementptr inbounds %struct.tdefl_compressor* %207, i32 0, i32 16
  %208 = load i32* %m_bits_in231, align 4
  %sub232 = sub i32 %208, 8
  store i32 %sub232, i32* %m_bits_in231, align 4
  br label %while.cond214

while.end233:                                     ; preds = %while.cond214
  br label %do.end234

do.end234:                                        ; preds = %while.end233
  br label %if.end235

if.end235:                                        ; preds = %do.end234, %do.end192
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end235
  %209 = load i32* %i, align 4
  %tobool236 = icmp ne i32 %209, 0
  br i1 %tobool236, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body237

do.body237:                                       ; preds = %for.body
  %210 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes239 = getelementptr inbounds %struct.tdefl_compressor* %210, i32 0, i32 14
  %211 = load i32* %m_total_lz_bytes239, align 4
  %and240 = and i32 %211, 65535
  store i32 %and240, i32* %bits238, align 4
  store i32 16, i32* %len241, align 4
  %212 = load i32* %bits238, align 4
  %213 = load i32* %len241, align 4
  %shl242 = shl i32 1, %213
  %sub243 = sub i32 %shl242, 1
  %cmp244 = icmp ule i32 %212, %sub243
  br i1 %cmp244, label %cond.true246, label %cond.false247

cond.true246:                                     ; preds = %do.body237
  br label %cond.end248

cond.false247:                                    ; preds = %do.body237
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2201, i8* getelementptr inbounds ([47 x i8]* @__PRETTY_FUNCTION__.tdefl_flush_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end248

cond.end248:                                      ; preds = %214, %cond.true246
  %215 = load i32* %bits238, align 4
  %216 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in249 = getelementptr inbounds %struct.tdefl_compressor* %216, i32 0, i32 16
  %217 = load i32* %m_bits_in249, align 4
  %shl250 = shl i32 %215, %217
  %218 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer251 = getelementptr inbounds %struct.tdefl_compressor* %218, i32 0, i32 17
  %219 = load i32* %m_bit_buffer251, align 4
  %or252 = or i32 %219, %shl250
  store i32 %or252, i32* %m_bit_buffer251, align 4
  %220 = load i32* %len241, align 4
  %221 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in253 = getelementptr inbounds %struct.tdefl_compressor* %221, i32 0, i32 16
  %222 = load i32* %m_bits_in253, align 4
  %add254 = add i32 %222, %220
  store i32 %add254, i32* %m_bits_in253, align 4
  br label %while.cond255

while.cond255:                                    ; preds = %if.end269, %cond.end248
  %223 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in256 = getelementptr inbounds %struct.tdefl_compressor* %223, i32 0, i32 16
  %224 = load i32* %m_bits_in256, align 4
  %cmp257 = icmp uge i32 %224, 8
  br i1 %cmp257, label %while.body259, label %while.end274

while.body259:                                    ; preds = %while.cond255
  %225 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf260 = getelementptr inbounds %struct.tdefl_compressor* %225, i32 0, i32 11
  %226 = load i8** %m_pOutput_buf260, align 8
  %227 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end261 = getelementptr inbounds %struct.tdefl_compressor* %227, i32 0, i32 12
  %228 = load i8** %m_pOutput_buf_end261, align 8
  %cmp262 = icmp ult i8* %226, %228
  br i1 %cmp262, label %if.then264, label %if.end269

if.then264:                                       ; preds = %while.body259
  %229 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer265 = getelementptr inbounds %struct.tdefl_compressor* %229, i32 0, i32 17
  %230 = load i32* %m_bit_buffer265, align 4
  %conv266 = trunc i32 %230 to i8
  %231 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf267 = getelementptr inbounds %struct.tdefl_compressor* %231, i32 0, i32 11
  %232 = load i8** %m_pOutput_buf267, align 8
  %incdec.ptr268 = getelementptr inbounds i8* %232, i32 1
  store i8* %incdec.ptr268, i8** %m_pOutput_buf267, align 8
  store i8 %conv266, i8* %232, align 1
  br label %if.end269

if.end269:                                        ; preds = %if.then264, %while.body259
  %233 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer270 = getelementptr inbounds %struct.tdefl_compressor* %233, i32 0, i32 17
  %234 = load i32* %m_bit_buffer270, align 4
  %shr271 = lshr i32 %234, 8
  store i32 %shr271, i32* %m_bit_buffer270, align 4
  %235 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in272 = getelementptr inbounds %struct.tdefl_compressor* %235, i32 0, i32 16
  %236 = load i32* %m_bits_in272, align 4
  %sub273 = sub i32 %236, 8
  store i32 %sub273, i32* %m_bits_in272, align 4
  br label %while.cond255

while.end274:                                     ; preds = %while.cond255
  br label %do.end275

do.end275:                                        ; preds = %while.end274
  br label %for.inc

for.inc:                                          ; preds = %do.end275
  %237 = load i32* %i, align 4
  %dec = add i32 %237, -1
  store i32 %dec, i32* %i, align 4
  %238 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes276 = getelementptr inbounds %struct.tdefl_compressor* %238, i32 0, i32 14
  %239 = load i32* %m_total_lz_bytes276, align 4
  %xor = xor i32 %239, 65535
  store i32 %xor, i32* %m_total_lz_bytes276, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond277

for.cond277:                                      ; preds = %for.inc323, %for.end
  %240 = load i32* %i, align 4
  %241 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes278 = getelementptr inbounds %struct.tdefl_compressor* %241, i32 0, i32 14
  %242 = load i32* %m_total_lz_bytes278, align 4
  %cmp279 = icmp ult i32 %240, %242
  br i1 %cmp279, label %for.body281, label %for.end324

for.body281:                                      ; preds = %for.cond277
  br label %do.body282

do.body282:                                       ; preds = %for.body281
  %243 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf_dict_pos284 = getelementptr inbounds %struct.tdefl_compressor* %243, i32 0, i32 15
  %244 = load i32* %m_lz_code_buf_dict_pos284, align 4
  %245 = load i32* %i, align 4
  %add285 = add i32 %244, %245
  %and286 = and i32 %add285, 32767
  %idxprom = zext i32 %and286 to i64
  %246 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_dict = getelementptr inbounds %struct.tdefl_compressor* %246, i32 0, i32 35
  %arrayidx = getelementptr inbounds [33025 x i8]* %m_dict, i32 0, i64 %idxprom
  %247 = load i8* %arrayidx, align 1
  %conv287 = zext i8 %247 to i32
  store i32 %conv287, i32* %bits283, align 4
  store i32 8, i32* %len288, align 4
  %248 = load i32* %bits283, align 4
  %249 = load i32* %len288, align 4
  %shl289 = shl i32 1, %249
  %sub290 = sub i32 %shl289, 1
  %cmp291 = icmp ule i32 %248, %sub290
  br i1 %cmp291, label %cond.true293, label %cond.false294

cond.true293:                                     ; preds = %do.body282
  br label %cond.end295

cond.false294:                                    ; preds = %do.body282
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2205, i8* getelementptr inbounds ([47 x i8]* @__PRETTY_FUNCTION__.tdefl_flush_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end295

cond.end295:                                      ; preds = %250, %cond.true293
  %251 = load i32* %bits283, align 4
  %252 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in296 = getelementptr inbounds %struct.tdefl_compressor* %252, i32 0, i32 16
  %253 = load i32* %m_bits_in296, align 4
  %shl297 = shl i32 %251, %253
  %254 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer298 = getelementptr inbounds %struct.tdefl_compressor* %254, i32 0, i32 17
  %255 = load i32* %m_bit_buffer298, align 4
  %or299 = or i32 %255, %shl297
  store i32 %or299, i32* %m_bit_buffer298, align 4
  %256 = load i32* %len288, align 4
  %257 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in300 = getelementptr inbounds %struct.tdefl_compressor* %257, i32 0, i32 16
  %258 = load i32* %m_bits_in300, align 4
  %add301 = add i32 %258, %256
  store i32 %add301, i32* %m_bits_in300, align 4
  br label %while.cond302

while.cond302:                                    ; preds = %if.end316, %cond.end295
  %259 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in303 = getelementptr inbounds %struct.tdefl_compressor* %259, i32 0, i32 16
  %260 = load i32* %m_bits_in303, align 4
  %cmp304 = icmp uge i32 %260, 8
  br i1 %cmp304, label %while.body306, label %while.end321

while.body306:                                    ; preds = %while.cond302
  %261 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf307 = getelementptr inbounds %struct.tdefl_compressor* %261, i32 0, i32 11
  %262 = load i8** %m_pOutput_buf307, align 8
  %263 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end308 = getelementptr inbounds %struct.tdefl_compressor* %263, i32 0, i32 12
  %264 = load i8** %m_pOutput_buf_end308, align 8
  %cmp309 = icmp ult i8* %262, %264
  br i1 %cmp309, label %if.then311, label %if.end316

if.then311:                                       ; preds = %while.body306
  %265 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer312 = getelementptr inbounds %struct.tdefl_compressor* %265, i32 0, i32 17
  %266 = load i32* %m_bit_buffer312, align 4
  %conv313 = trunc i32 %266 to i8
  %267 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf314 = getelementptr inbounds %struct.tdefl_compressor* %267, i32 0, i32 11
  %268 = load i8** %m_pOutput_buf314, align 8
  %incdec.ptr315 = getelementptr inbounds i8* %268, i32 1
  store i8* %incdec.ptr315, i8** %m_pOutput_buf314, align 8
  store i8 %conv313, i8* %268, align 1
  br label %if.end316

if.end316:                                        ; preds = %if.then311, %while.body306
  %269 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer317 = getelementptr inbounds %struct.tdefl_compressor* %269, i32 0, i32 17
  %270 = load i32* %m_bit_buffer317, align 4
  %shr318 = lshr i32 %270, 8
  store i32 %shr318, i32* %m_bit_buffer317, align 4
  %271 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in319 = getelementptr inbounds %struct.tdefl_compressor* %271, i32 0, i32 16
  %272 = load i32* %m_bits_in319, align 4
  %sub320 = sub i32 %272, 8
  store i32 %sub320, i32* %m_bits_in319, align 4
  br label %while.cond302

while.end321:                                     ; preds = %while.cond302
  br label %do.end322

do.end322:                                        ; preds = %while.end321
  br label %for.inc323

for.inc323:                                       ; preds = %do.end322
  %273 = load i32* %i, align 4
  %inc = add i32 %273, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond277

for.end324:                                       ; preds = %for.cond277
  br label %if.end332

if.else:                                          ; preds = %land.lhs.true145, %land.lhs.true138, %lor.lhs.false
  %274 = load i32* %comp_block_succeeded, align 4
  %tobool325 = icmp ne i32 %274, 0
  br i1 %tobool325, label %if.end331, label %if.then326

if.then326:                                       ; preds = %if.else
  %275 = load i8** %pSaved_output_buf, align 8
  %276 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf327 = getelementptr inbounds %struct.tdefl_compressor* %276, i32 0, i32 11
  store i8* %275, i8** %m_pOutput_buf327, align 8
  %277 = load i32* %saved_bit_buf, align 4
  %278 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer328 = getelementptr inbounds %struct.tdefl_compressor* %278, i32 0, i32 17
  store i32 %277, i32* %m_bit_buffer328, align 4
  %279 = load i32* %saved_bits_in, align 4
  %280 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in329 = getelementptr inbounds %struct.tdefl_compressor* %280, i32 0, i32 16
  store i32 %279, i32* %m_bits_in329, align 4
  %281 = load %struct.tdefl_compressor** %d.addr, align 8
  %call330 = call i32 @tdefl_compress_block(%struct.tdefl_compressor* %281, i32 1)
  br label %if.end331

if.end331:                                        ; preds = %if.then326, %if.else
  br label %if.end332

if.end332:                                        ; preds = %if.end331, %for.end324
  %282 = load i32* %flush.addr, align 4
  %tobool333 = icmp ne i32 %282, 0
  br i1 %tobool333, label %if.then334, label %if.end562

if.then334:                                       ; preds = %if.end332
  %283 = load i32* %flush.addr, align 4
  %cmp335 = icmp eq i32 %283, 4
  br i1 %cmp335, label %if.then337, label %if.else434

if.then337:                                       ; preds = %if.then334
  %284 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in338 = getelementptr inbounds %struct.tdefl_compressor* %284, i32 0, i32 16
  %285 = load i32* %m_bits_in338, align 4
  %tobool339 = icmp ne i32 %285, 0
  br i1 %tobool339, label %if.then340, label %if.end380

if.then340:                                       ; preds = %if.then337
  br label %do.body341

do.body341:                                       ; preds = %if.then340
  store i32 0, i32* %bits342, align 4
  %286 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in344 = getelementptr inbounds %struct.tdefl_compressor* %286, i32 0, i32 16
  %287 = load i32* %m_bits_in344, align 4
  %sub345 = sub i32 8, %287
  store i32 %sub345, i32* %len343, align 4
  %288 = load i32* %bits342, align 4
  %289 = load i32* %len343, align 4
  %shl346 = shl i32 1, %289
  %sub347 = sub i32 %shl346, 1
  %cmp348 = icmp ule i32 %288, %sub347
  br i1 %cmp348, label %cond.true350, label %cond.false351

cond.true350:                                     ; preds = %do.body341
  br label %cond.end352

cond.false351:                                    ; preds = %do.body341
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2219, i8* getelementptr inbounds ([47 x i8]* @__PRETTY_FUNCTION__.tdefl_flush_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end352

cond.end352:                                      ; preds = %290, %cond.true350
  %291 = load i32* %bits342, align 4
  %292 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in353 = getelementptr inbounds %struct.tdefl_compressor* %292, i32 0, i32 16
  %293 = load i32* %m_bits_in353, align 4
  %shl354 = shl i32 %291, %293
  %294 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer355 = getelementptr inbounds %struct.tdefl_compressor* %294, i32 0, i32 17
  %295 = load i32* %m_bit_buffer355, align 4
  %or356 = or i32 %295, %shl354
  store i32 %or356, i32* %m_bit_buffer355, align 4
  %296 = load i32* %len343, align 4
  %297 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in357 = getelementptr inbounds %struct.tdefl_compressor* %297, i32 0, i32 16
  %298 = load i32* %m_bits_in357, align 4
  %add358 = add i32 %298, %296
  store i32 %add358, i32* %m_bits_in357, align 4
  br label %while.cond359

while.cond359:                                    ; preds = %if.end373, %cond.end352
  %299 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in360 = getelementptr inbounds %struct.tdefl_compressor* %299, i32 0, i32 16
  %300 = load i32* %m_bits_in360, align 4
  %cmp361 = icmp uge i32 %300, 8
  br i1 %cmp361, label %while.body363, label %while.end378

while.body363:                                    ; preds = %while.cond359
  %301 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf364 = getelementptr inbounds %struct.tdefl_compressor* %301, i32 0, i32 11
  %302 = load i8** %m_pOutput_buf364, align 8
  %303 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end365 = getelementptr inbounds %struct.tdefl_compressor* %303, i32 0, i32 12
  %304 = load i8** %m_pOutput_buf_end365, align 8
  %cmp366 = icmp ult i8* %302, %304
  br i1 %cmp366, label %if.then368, label %if.end373

if.then368:                                       ; preds = %while.body363
  %305 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer369 = getelementptr inbounds %struct.tdefl_compressor* %305, i32 0, i32 17
  %306 = load i32* %m_bit_buffer369, align 4
  %conv370 = trunc i32 %306 to i8
  %307 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf371 = getelementptr inbounds %struct.tdefl_compressor* %307, i32 0, i32 11
  %308 = load i8** %m_pOutput_buf371, align 8
  %incdec.ptr372 = getelementptr inbounds i8* %308, i32 1
  store i8* %incdec.ptr372, i8** %m_pOutput_buf371, align 8
  store i8 %conv370, i8* %308, align 1
  br label %if.end373

if.end373:                                        ; preds = %if.then368, %while.body363
  %309 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer374 = getelementptr inbounds %struct.tdefl_compressor* %309, i32 0, i32 17
  %310 = load i32* %m_bit_buffer374, align 4
  %shr375 = lshr i32 %310, 8
  store i32 %shr375, i32* %m_bit_buffer374, align 4
  %311 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in376 = getelementptr inbounds %struct.tdefl_compressor* %311, i32 0, i32 16
  %312 = load i32* %m_bits_in376, align 4
  %sub377 = sub i32 %312, 8
  store i32 %sub377, i32* %m_bits_in376, align 4
  br label %while.cond359

while.end378:                                     ; preds = %while.cond359
  br label %do.end379

do.end379:                                        ; preds = %while.end378
  br label %if.end380

if.end380:                                        ; preds = %do.end379, %if.then337
  %313 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_flags381 = getelementptr inbounds %struct.tdefl_compressor* %313, i32 0, i32 2
  %314 = load i32* %m_flags381, align 4
  %and382 = and i32 %314, 4096
  %tobool383 = icmp ne i32 %and382, 0
  br i1 %tobool383, label %if.then384, label %if.end433

if.then384:                                       ; preds = %if.end380
  %315 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_adler32 = getelementptr inbounds %struct.tdefl_compressor* %315, i32 0, i32 5
  %316 = load i32* %m_adler32, align 4
  store i32 %316, i32* %a, align 4
  store i32 0, i32* %i385, align 4
  br label %for.cond386

for.cond386:                                      ; preds = %for.inc430, %if.then384
  %317 = load i32* %i385, align 4
  %cmp387 = icmp ult i32 %317, 4
  br i1 %cmp387, label %for.body389, label %for.end432

for.body389:                                      ; preds = %for.cond386
  br label %do.body390

do.body390:                                       ; preds = %for.body389
  %318 = load i32* %a, align 4
  %shr392 = lshr i32 %318, 24
  %and393 = and i32 %shr392, 255
  store i32 %and393, i32* %bits391, align 4
  store i32 8, i32* %len394, align 4
  %319 = load i32* %bits391, align 4
  %320 = load i32* %len394, align 4
  %shl395 = shl i32 1, %320
  %sub396 = sub i32 %shl395, 1
  %cmp397 = icmp ule i32 %319, %sub396
  br i1 %cmp397, label %cond.true399, label %cond.false400

cond.true399:                                     ; preds = %do.body390
  br label %cond.end401

cond.false400:                                    ; preds = %do.body390
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2220, i8* getelementptr inbounds ([47 x i8]* @__PRETTY_FUNCTION__.tdefl_flush_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end401

cond.end401:                                      ; preds = %321, %cond.true399
  %322 = load i32* %bits391, align 4
  %323 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in402 = getelementptr inbounds %struct.tdefl_compressor* %323, i32 0, i32 16
  %324 = load i32* %m_bits_in402, align 4
  %shl403 = shl i32 %322, %324
  %325 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer404 = getelementptr inbounds %struct.tdefl_compressor* %325, i32 0, i32 17
  %326 = load i32* %m_bit_buffer404, align 4
  %or405 = or i32 %326, %shl403
  store i32 %or405, i32* %m_bit_buffer404, align 4
  %327 = load i32* %len394, align 4
  %328 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in406 = getelementptr inbounds %struct.tdefl_compressor* %328, i32 0, i32 16
  %329 = load i32* %m_bits_in406, align 4
  %add407 = add i32 %329, %327
  store i32 %add407, i32* %m_bits_in406, align 4
  br label %while.cond408

while.cond408:                                    ; preds = %if.end422, %cond.end401
  %330 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in409 = getelementptr inbounds %struct.tdefl_compressor* %330, i32 0, i32 16
  %331 = load i32* %m_bits_in409, align 4
  %cmp410 = icmp uge i32 %331, 8
  br i1 %cmp410, label %while.body412, label %while.end427

while.body412:                                    ; preds = %while.cond408
  %332 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf413 = getelementptr inbounds %struct.tdefl_compressor* %332, i32 0, i32 11
  %333 = load i8** %m_pOutput_buf413, align 8
  %334 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end414 = getelementptr inbounds %struct.tdefl_compressor* %334, i32 0, i32 12
  %335 = load i8** %m_pOutput_buf_end414, align 8
  %cmp415 = icmp ult i8* %333, %335
  br i1 %cmp415, label %if.then417, label %if.end422

if.then417:                                       ; preds = %while.body412
  %336 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer418 = getelementptr inbounds %struct.tdefl_compressor* %336, i32 0, i32 17
  %337 = load i32* %m_bit_buffer418, align 4
  %conv419 = trunc i32 %337 to i8
  %338 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf420 = getelementptr inbounds %struct.tdefl_compressor* %338, i32 0, i32 11
  %339 = load i8** %m_pOutput_buf420, align 8
  %incdec.ptr421 = getelementptr inbounds i8* %339, i32 1
  store i8* %incdec.ptr421, i8** %m_pOutput_buf420, align 8
  store i8 %conv419, i8* %339, align 1
  br label %if.end422

if.end422:                                        ; preds = %if.then417, %while.body412
  %340 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer423 = getelementptr inbounds %struct.tdefl_compressor* %340, i32 0, i32 17
  %341 = load i32* %m_bit_buffer423, align 4
  %shr424 = lshr i32 %341, 8
  store i32 %shr424, i32* %m_bit_buffer423, align 4
  %342 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in425 = getelementptr inbounds %struct.tdefl_compressor* %342, i32 0, i32 16
  %343 = load i32* %m_bits_in425, align 4
  %sub426 = sub i32 %343, 8
  store i32 %sub426, i32* %m_bits_in425, align 4
  br label %while.cond408

while.end427:                                     ; preds = %while.cond408
  br label %do.end428

do.end428:                                        ; preds = %while.end427
  %344 = load i32* %a, align 4
  %shl429 = shl i32 %344, 8
  store i32 %shl429, i32* %a, align 4
  br label %for.inc430

for.inc430:                                       ; preds = %do.end428
  %345 = load i32* %i385, align 4
  %inc431 = add i32 %345, 1
  store i32 %inc431, i32* %i385, align 4
  br label %for.cond386

for.end432:                                       ; preds = %for.cond386
  br label %if.end433

if.end433:                                        ; preds = %for.end432, %if.end380
  br label %if.end561

if.else434:                                       ; preds = %if.then334
  store i32 0, i32* %z, align 4
  br label %do.body436

do.body436:                                       ; preds = %if.else434
  store i32 0, i32* %bits437, align 4
  store i32 3, i32* %len438, align 4
  %346 = load i32* %bits437, align 4
  %347 = load i32* %len438, align 4
  %shl439 = shl i32 1, %347
  %sub440 = sub i32 %shl439, 1
  %cmp441 = icmp ule i32 %346, %sub440
  br i1 %cmp441, label %cond.true443, label %cond.false444

cond.true443:                                     ; preds = %do.body436
  br label %cond.end445

cond.false444:                                    ; preds = %do.body436
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2224, i8* getelementptr inbounds ([47 x i8]* @__PRETTY_FUNCTION__.tdefl_flush_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end445

cond.end445:                                      ; preds = %348, %cond.true443
  %349 = load i32* %bits437, align 4
  %350 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in446 = getelementptr inbounds %struct.tdefl_compressor* %350, i32 0, i32 16
  %351 = load i32* %m_bits_in446, align 4
  %shl447 = shl i32 %349, %351
  %352 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer448 = getelementptr inbounds %struct.tdefl_compressor* %352, i32 0, i32 17
  %353 = load i32* %m_bit_buffer448, align 4
  %or449 = or i32 %353, %shl447
  store i32 %or449, i32* %m_bit_buffer448, align 4
  %354 = load i32* %len438, align 4
  %355 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in450 = getelementptr inbounds %struct.tdefl_compressor* %355, i32 0, i32 16
  %356 = load i32* %m_bits_in450, align 4
  %add451 = add i32 %356, %354
  store i32 %add451, i32* %m_bits_in450, align 4
  br label %while.cond452

while.cond452:                                    ; preds = %if.end466, %cond.end445
  %357 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in453 = getelementptr inbounds %struct.tdefl_compressor* %357, i32 0, i32 16
  %358 = load i32* %m_bits_in453, align 4
  %cmp454 = icmp uge i32 %358, 8
  br i1 %cmp454, label %while.body456, label %while.end471

while.body456:                                    ; preds = %while.cond452
  %359 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf457 = getelementptr inbounds %struct.tdefl_compressor* %359, i32 0, i32 11
  %360 = load i8** %m_pOutput_buf457, align 8
  %361 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end458 = getelementptr inbounds %struct.tdefl_compressor* %361, i32 0, i32 12
  %362 = load i8** %m_pOutput_buf_end458, align 8
  %cmp459 = icmp ult i8* %360, %362
  br i1 %cmp459, label %if.then461, label %if.end466

if.then461:                                       ; preds = %while.body456
  %363 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer462 = getelementptr inbounds %struct.tdefl_compressor* %363, i32 0, i32 17
  %364 = load i32* %m_bit_buffer462, align 4
  %conv463 = trunc i32 %364 to i8
  %365 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf464 = getelementptr inbounds %struct.tdefl_compressor* %365, i32 0, i32 11
  %366 = load i8** %m_pOutput_buf464, align 8
  %incdec.ptr465 = getelementptr inbounds i8* %366, i32 1
  store i8* %incdec.ptr465, i8** %m_pOutput_buf464, align 8
  store i8 %conv463, i8* %366, align 1
  br label %if.end466

if.end466:                                        ; preds = %if.then461, %while.body456
  %367 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer467 = getelementptr inbounds %struct.tdefl_compressor* %367, i32 0, i32 17
  %368 = load i32* %m_bit_buffer467, align 4
  %shr468 = lshr i32 %368, 8
  store i32 %shr468, i32* %m_bit_buffer467, align 4
  %369 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in469 = getelementptr inbounds %struct.tdefl_compressor* %369, i32 0, i32 16
  %370 = load i32* %m_bits_in469, align 4
  %sub470 = sub i32 %370, 8
  store i32 %sub470, i32* %m_bits_in469, align 4
  br label %while.cond452

while.end471:                                     ; preds = %while.cond452
  br label %do.end472

do.end472:                                        ; preds = %while.end471
  %371 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in473 = getelementptr inbounds %struct.tdefl_compressor* %371, i32 0, i32 16
  %372 = load i32* %m_bits_in473, align 4
  %tobool474 = icmp ne i32 %372, 0
  br i1 %tobool474, label %if.then475, label %if.end515

if.then475:                                       ; preds = %do.end472
  br label %do.body476

do.body476:                                       ; preds = %if.then475
  store i32 0, i32* %bits477, align 4
  %373 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in479 = getelementptr inbounds %struct.tdefl_compressor* %373, i32 0, i32 16
  %374 = load i32* %m_bits_in479, align 4
  %sub480 = sub i32 8, %374
  store i32 %sub480, i32* %len478, align 4
  %375 = load i32* %bits477, align 4
  %376 = load i32* %len478, align 4
  %shl481 = shl i32 1, %376
  %sub482 = sub i32 %shl481, 1
  %cmp483 = icmp ule i32 %375, %sub482
  br i1 %cmp483, label %cond.true485, label %cond.false486

cond.true485:                                     ; preds = %do.body476
  br label %cond.end487

cond.false486:                                    ; preds = %do.body476
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2224, i8* getelementptr inbounds ([47 x i8]* @__PRETTY_FUNCTION__.tdefl_flush_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end487

cond.end487:                                      ; preds = %377, %cond.true485
  %378 = load i32* %bits477, align 4
  %379 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in488 = getelementptr inbounds %struct.tdefl_compressor* %379, i32 0, i32 16
  %380 = load i32* %m_bits_in488, align 4
  %shl489 = shl i32 %378, %380
  %381 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer490 = getelementptr inbounds %struct.tdefl_compressor* %381, i32 0, i32 17
  %382 = load i32* %m_bit_buffer490, align 4
  %or491 = or i32 %382, %shl489
  store i32 %or491, i32* %m_bit_buffer490, align 4
  %383 = load i32* %len478, align 4
  %384 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in492 = getelementptr inbounds %struct.tdefl_compressor* %384, i32 0, i32 16
  %385 = load i32* %m_bits_in492, align 4
  %add493 = add i32 %385, %383
  store i32 %add493, i32* %m_bits_in492, align 4
  br label %while.cond494

while.cond494:                                    ; preds = %if.end508, %cond.end487
  %386 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in495 = getelementptr inbounds %struct.tdefl_compressor* %386, i32 0, i32 16
  %387 = load i32* %m_bits_in495, align 4
  %cmp496 = icmp uge i32 %387, 8
  br i1 %cmp496, label %while.body498, label %while.end513

while.body498:                                    ; preds = %while.cond494
  %388 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf499 = getelementptr inbounds %struct.tdefl_compressor* %388, i32 0, i32 11
  %389 = load i8** %m_pOutput_buf499, align 8
  %390 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end500 = getelementptr inbounds %struct.tdefl_compressor* %390, i32 0, i32 12
  %391 = load i8** %m_pOutput_buf_end500, align 8
  %cmp501 = icmp ult i8* %389, %391
  br i1 %cmp501, label %if.then503, label %if.end508

if.then503:                                       ; preds = %while.body498
  %392 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer504 = getelementptr inbounds %struct.tdefl_compressor* %392, i32 0, i32 17
  %393 = load i32* %m_bit_buffer504, align 4
  %conv505 = trunc i32 %393 to i8
  %394 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf506 = getelementptr inbounds %struct.tdefl_compressor* %394, i32 0, i32 11
  %395 = load i8** %m_pOutput_buf506, align 8
  %incdec.ptr507 = getelementptr inbounds i8* %395, i32 1
  store i8* %incdec.ptr507, i8** %m_pOutput_buf506, align 8
  store i8 %conv505, i8* %395, align 1
  br label %if.end508

if.end508:                                        ; preds = %if.then503, %while.body498
  %396 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer509 = getelementptr inbounds %struct.tdefl_compressor* %396, i32 0, i32 17
  %397 = load i32* %m_bit_buffer509, align 4
  %shr510 = lshr i32 %397, 8
  store i32 %shr510, i32* %m_bit_buffer509, align 4
  %398 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in511 = getelementptr inbounds %struct.tdefl_compressor* %398, i32 0, i32 16
  %399 = load i32* %m_bits_in511, align 4
  %sub512 = sub i32 %399, 8
  store i32 %sub512, i32* %m_bits_in511, align 4
  br label %while.cond494

while.end513:                                     ; preds = %while.cond494
  br label %do.end514

do.end514:                                        ; preds = %while.end513
  br label %if.end515

if.end515:                                        ; preds = %do.end514, %do.end472
  store i32 2, i32* %i435, align 4
  br label %for.cond516

for.cond516:                                      ; preds = %for.inc557, %if.end515
  %400 = load i32* %i435, align 4
  %tobool517 = icmp ne i32 %400, 0
  br i1 %tobool517, label %for.body518, label %for.end560

for.body518:                                      ; preds = %for.cond516
  br label %do.body519

do.body519:                                       ; preds = %for.body518
  %401 = load i32* %z, align 4
  %and521 = and i32 %401, 65535
  store i32 %and521, i32* %bits520, align 4
  store i32 16, i32* %len522, align 4
  %402 = load i32* %bits520, align 4
  %403 = load i32* %len522, align 4
  %shl523 = shl i32 1, %403
  %sub524 = sub i32 %shl523, 1
  %cmp525 = icmp ule i32 %402, %sub524
  br i1 %cmp525, label %cond.true527, label %cond.false528

cond.true527:                                     ; preds = %do.body519
  br label %cond.end529

cond.false528:                                    ; preds = %do.body519
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2224, i8* getelementptr inbounds ([47 x i8]* @__PRETTY_FUNCTION__.tdefl_flush_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end529

cond.end529:                                      ; preds = %404, %cond.true527
  %405 = load i32* %bits520, align 4
  %406 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in530 = getelementptr inbounds %struct.tdefl_compressor* %406, i32 0, i32 16
  %407 = load i32* %m_bits_in530, align 4
  %shl531 = shl i32 %405, %407
  %408 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer532 = getelementptr inbounds %struct.tdefl_compressor* %408, i32 0, i32 17
  %409 = load i32* %m_bit_buffer532, align 4
  %or533 = or i32 %409, %shl531
  store i32 %or533, i32* %m_bit_buffer532, align 4
  %410 = load i32* %len522, align 4
  %411 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in534 = getelementptr inbounds %struct.tdefl_compressor* %411, i32 0, i32 16
  %412 = load i32* %m_bits_in534, align 4
  %add535 = add i32 %412, %410
  store i32 %add535, i32* %m_bits_in534, align 4
  br label %while.cond536

while.cond536:                                    ; preds = %if.end550, %cond.end529
  %413 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in537 = getelementptr inbounds %struct.tdefl_compressor* %413, i32 0, i32 16
  %414 = load i32* %m_bits_in537, align 4
  %cmp538 = icmp uge i32 %414, 8
  br i1 %cmp538, label %while.body540, label %while.end555

while.body540:                                    ; preds = %while.cond536
  %415 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf541 = getelementptr inbounds %struct.tdefl_compressor* %415, i32 0, i32 11
  %416 = load i8** %m_pOutput_buf541, align 8
  %417 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end542 = getelementptr inbounds %struct.tdefl_compressor* %417, i32 0, i32 12
  %418 = load i8** %m_pOutput_buf_end542, align 8
  %cmp543 = icmp ult i8* %416, %418
  br i1 %cmp543, label %if.then545, label %if.end550

if.then545:                                       ; preds = %while.body540
  %419 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer546 = getelementptr inbounds %struct.tdefl_compressor* %419, i32 0, i32 17
  %420 = load i32* %m_bit_buffer546, align 4
  %conv547 = trunc i32 %420 to i8
  %421 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf548 = getelementptr inbounds %struct.tdefl_compressor* %421, i32 0, i32 11
  %422 = load i8** %m_pOutput_buf548, align 8
  %incdec.ptr549 = getelementptr inbounds i8* %422, i32 1
  store i8* %incdec.ptr549, i8** %m_pOutput_buf548, align 8
  store i8 %conv547, i8* %422, align 1
  br label %if.end550

if.end550:                                        ; preds = %if.then545, %while.body540
  %423 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer551 = getelementptr inbounds %struct.tdefl_compressor* %423, i32 0, i32 17
  %424 = load i32* %m_bit_buffer551, align 4
  %shr552 = lshr i32 %424, 8
  store i32 %shr552, i32* %m_bit_buffer551, align 4
  %425 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in553 = getelementptr inbounds %struct.tdefl_compressor* %425, i32 0, i32 16
  %426 = load i32* %m_bits_in553, align 4
  %sub554 = sub i32 %426, 8
  store i32 %sub554, i32* %m_bits_in553, align 4
  br label %while.cond536

while.end555:                                     ; preds = %while.cond536
  br label %do.end556

do.end556:                                        ; preds = %while.end555
  br label %for.inc557

for.inc557:                                       ; preds = %do.end556
  %427 = load i32* %i435, align 4
  %dec558 = add i32 %427, -1
  store i32 %dec558, i32* %i435, align 4
  %428 = load i32* %z, align 4
  %xor559 = xor i32 %428, 65535
  store i32 %xor559, i32* %z, align 4
  br label %for.cond516

for.end560:                                       ; preds = %for.cond516
  br label %if.end561

if.end561:                                        ; preds = %for.end560, %if.end433
  br label %if.end562

if.end562:                                        ; preds = %if.end561, %if.end332
  %429 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf563 = getelementptr inbounds %struct.tdefl_compressor* %429, i32 0, i32 11
  %430 = load i8** %m_pOutput_buf563, align 8
  %431 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end564 = getelementptr inbounds %struct.tdefl_compressor* %431, i32 0, i32 12
  %432 = load i8** %m_pOutput_buf_end564, align 8
  %cmp565 = icmp ult i8* %430, %432
  br i1 %cmp565, label %cond.true567, label %cond.false568

cond.true567:                                     ; preds = %if.end562
  br label %cond.end569

cond.false568:                                    ; preds = %if.end562
  call void @__assert_fail(i8* getelementptr inbounds ([40 x i8]* @.str34, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2228, i8* getelementptr inbounds ([47 x i8]* @__PRETTY_FUNCTION__.tdefl_flush_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end569

cond.end569:                                      ; preds = %433, %cond.true567
  %434 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor* %434, i32 0, i32 36
  %arrayidx570 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count, i32 0, i64 0
  %arrayidx571 = getelementptr inbounds [288 x i16]* %arrayidx570, i32 0, i64 0
  %435 = bitcast i16* %arrayidx571 to i8*
  call void @llvm.memset.p0i8.i64(i8* %435, i8 0, i64 576, i32 2, i1 false)
  %436 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count572 = getelementptr inbounds %struct.tdefl_compressor* %436, i32 0, i32 36
  %arrayidx573 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count572, i32 0, i64 1
  %arrayidx574 = getelementptr inbounds [288 x i16]* %arrayidx573, i32 0, i64 0
  %437 = bitcast i16* %arrayidx574 to i8*
  call void @llvm.memset.p0i8.i64(i8* %437, i8 0, i64 64, i32 2, i1 false)
  %438 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor* %438, i32 0, i32 39
  %arraydecay575 = getelementptr inbounds [65536 x i8]* %m_lz_code_buf, i32 0, i32 0
  %add.ptr576 = getelementptr inbounds i8* %arraydecay575, i64 1
  %439 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf577 = getelementptr inbounds %struct.tdefl_compressor* %439, i32 0, i32 9
  store i8* %add.ptr576, i8** %m_pLZ_code_buf577, align 8
  %440 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf578 = getelementptr inbounds %struct.tdefl_compressor* %440, i32 0, i32 39
  %arraydecay579 = getelementptr inbounds [65536 x i8]* %m_lz_code_buf578, i32 0, i32 0
  %441 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags580 = getelementptr inbounds %struct.tdefl_compressor* %441, i32 0, i32 10
  store i8* %arraydecay579, i8** %m_pLZ_flags580, align 8
  %442 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left581 = getelementptr inbounds %struct.tdefl_compressor* %442, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left581, align 4
  %443 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes582 = getelementptr inbounds %struct.tdefl_compressor* %443, i32 0, i32 14
  %444 = load i32* %m_total_lz_bytes582, align 4
  %445 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf_dict_pos583 = getelementptr inbounds %struct.tdefl_compressor* %445, i32 0, i32 15
  %446 = load i32* %m_lz_code_buf_dict_pos583, align 4
  %add584 = add i32 %446, %444
  store i32 %add584, i32* %m_lz_code_buf_dict_pos583, align 4
  %447 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes585 = getelementptr inbounds %struct.tdefl_compressor* %447, i32 0, i32 14
  store i32 0, i32* %m_total_lz_bytes585, align 4
  %448 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_block_index586 = getelementptr inbounds %struct.tdefl_compressor* %448, i32 0, i32 24
  %449 = load i32* %m_block_index586, align 4
  %inc587 = add i32 %449, 1
  store i32 %inc587, i32* %m_block_index586, align 4
  %450 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf588 = getelementptr inbounds %struct.tdefl_compressor* %450, i32 0, i32 11
  %451 = load i8** %m_pOutput_buf588, align 8
  %452 = load i8** %pOutput_buf_start, align 8
  %sub.ptr.lhs.cast589 = ptrtoint i8* %451 to i64
  %sub.ptr.rhs.cast590 = ptrtoint i8* %452 to i64
  %sub.ptr.sub591 = sub i64 %sub.ptr.lhs.cast589, %sub.ptr.rhs.cast590
  %conv592 = trunc i64 %sub.ptr.sub591 to i32
  store i32 %conv592, i32* %n, align 4
  %cmp593 = icmp ne i32 %conv592, 0
  br i1 %cmp593, label %if.then595, label %if.end651

if.then595:                                       ; preds = %cond.end569
  %453 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_func596 = getelementptr inbounds %struct.tdefl_compressor* %453, i32 0, i32 0
  %454 = load i32 (i8*, i32, i8*)** %m_pPut_buf_func596, align 8
  %tobool597 = icmp ne i32 (i8*, i32, i8*)* %454, null
  br i1 %tobool597, label %if.then598, label %if.else609

if.then598:                                       ; preds = %if.then595
  %455 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor* %455, i32 0, i32 32
  %456 = load i8** %m_pSrc, align 8
  %457 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf = getelementptr inbounds %struct.tdefl_compressor* %457, i32 0, i32 27
  %458 = load i8** %m_pIn_buf, align 8
  %sub.ptr.lhs.cast599 = ptrtoint i8* %456 to i64
  %sub.ptr.rhs.cast600 = ptrtoint i8* %458 to i64
  %sub.ptr.sub601 = sub i64 %sub.ptr.lhs.cast599, %sub.ptr.rhs.cast600
  %459 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf_size = getelementptr inbounds %struct.tdefl_compressor* %459, i32 0, i32 29
  %460 = load i64** %m_pIn_buf_size, align 8
  store i64 %sub.ptr.sub601, i64* %460, align 8
  %461 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_func602 = getelementptr inbounds %struct.tdefl_compressor* %461, i32 0, i32 0
  %462 = load i32 (i8*, i32, i8*)** %m_pPut_buf_func602, align 8
  %463 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_buf603 = getelementptr inbounds %struct.tdefl_compressor* %463, i32 0, i32 42
  %arraydecay604 = getelementptr inbounds [85196 x i8]* %m_output_buf603, i32 0, i32 0
  %464 = load i32* %n, align 4
  %465 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_user = getelementptr inbounds %struct.tdefl_compressor* %465, i32 0, i32 1
  %466 = load i8** %m_pPut_buf_user, align 8
  %call605 = call i32 %462(i8* %arraydecay604, i32 %464, i8* %466)
  %tobool606 = icmp ne i32 %call605, 0
  br i1 %tobool606, label %if.end608, label %if.then607

if.then607:                                       ; preds = %if.then598
  %467 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor* %467, i32 0, i32 26
  store i32 -1, i32* %m_prev_return_status, align 4
  store i32 -1, i32* %retval
  br label %return

if.end608:                                        ; preds = %if.then598
  br label %if.end650

if.else609:                                       ; preds = %if.then595
  %468 = load i8** %pOutput_buf_start, align 8
  %469 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_buf610 = getelementptr inbounds %struct.tdefl_compressor* %469, i32 0, i32 42
  %arraydecay611 = getelementptr inbounds [85196 x i8]* %m_output_buf610, i32 0, i32 0
  %cmp612 = icmp eq i8* %468, %arraydecay611
  br i1 %cmp612, label %if.then614, label %if.else645

if.then614:                                       ; preds = %if.else609
  %470 = load i32* %n, align 4
  %conv615 = sext i32 %470 to i64
  %471 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size616 = getelementptr inbounds %struct.tdefl_compressor* %471, i32 0, i32 30
  %472 = load i64** %m_pOut_buf_size616, align 8
  %473 = load i64* %472, align 8
  %474 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs617 = getelementptr inbounds %struct.tdefl_compressor* %474, i32 0, i32 34
  %475 = load i64* %m_out_buf_ofs617, align 8
  %sub618 = sub i64 %473, %475
  %cmp619 = icmp ult i64 %conv615, %sub618
  br i1 %cmp619, label %cond.true621, label %cond.false623

cond.true621:                                     ; preds = %if.then614
  %476 = load i32* %n, align 4
  %conv622 = sext i32 %476 to i64
  br label %cond.end627

cond.false623:                                    ; preds = %if.then614
  %477 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size624 = getelementptr inbounds %struct.tdefl_compressor* %477, i32 0, i32 30
  %478 = load i64** %m_pOut_buf_size624, align 8
  %479 = load i64* %478, align 8
  %480 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs625 = getelementptr inbounds %struct.tdefl_compressor* %480, i32 0, i32 34
  %481 = load i64* %m_out_buf_ofs625, align 8
  %sub626 = sub i64 %479, %481
  br label %cond.end627

cond.end627:                                      ; preds = %cond.false623, %cond.true621
  %cond628 = phi i64 [ %conv622, %cond.true621 ], [ %sub626, %cond.false623 ]
  %conv629 = trunc i64 %cond628 to i32
  store i32 %conv629, i32* %bytes_to_copy, align 4
  %482 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf630 = getelementptr inbounds %struct.tdefl_compressor* %482, i32 0, i32 28
  %483 = load i8** %m_pOut_buf630, align 8
  %484 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs631 = getelementptr inbounds %struct.tdefl_compressor* %484, i32 0, i32 34
  %485 = load i64* %m_out_buf_ofs631, align 8
  %add.ptr632 = getelementptr inbounds i8* %483, i64 %485
  %486 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_buf633 = getelementptr inbounds %struct.tdefl_compressor* %486, i32 0, i32 42
  %487 = bitcast [85196 x i8]* %m_output_buf633 to i8*
  %488 = load i32* %bytes_to_copy, align 4
  %conv634 = sext i32 %488 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr632, i8* %487, i64 %conv634, i32 1, i1 false)
  %489 = load i32* %bytes_to_copy, align 4
  %conv635 = sext i32 %489 to i64
  %490 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs636 = getelementptr inbounds %struct.tdefl_compressor* %490, i32 0, i32 34
  %491 = load i64* %m_out_buf_ofs636, align 8
  %add637 = add i64 %491, %conv635
  store i64 %add637, i64* %m_out_buf_ofs636, align 8
  %492 = load i32* %bytes_to_copy, align 4
  %493 = load i32* %n, align 4
  %sub638 = sub nsw i32 %493, %492
  store i32 %sub638, i32* %n, align 4
  %cmp639 = icmp ne i32 %sub638, 0
  br i1 %cmp639, label %if.then641, label %if.end644

if.then641:                                       ; preds = %cond.end627
  %494 = load i32* %bytes_to_copy, align 4
  %495 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_ofs642 = getelementptr inbounds %struct.tdefl_compressor* %495, i32 0, i32 21
  store i32 %494, i32* %m_output_flush_ofs642, align 4
  %496 = load i32* %n, align 4
  %497 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining643 = getelementptr inbounds %struct.tdefl_compressor* %497, i32 0, i32 22
  store i32 %496, i32* %m_output_flush_remaining643, align 4
  br label %if.end644

if.end644:                                        ; preds = %if.then641, %cond.end627
  br label %if.end649

if.else645:                                       ; preds = %if.else609
  %498 = load i32* %n, align 4
  %conv646 = sext i32 %498 to i64
  %499 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs647 = getelementptr inbounds %struct.tdefl_compressor* %499, i32 0, i32 34
  %500 = load i64* %m_out_buf_ofs647, align 8
  %add648 = add i64 %500, %conv646
  store i64 %add648, i64* %m_out_buf_ofs647, align 8
  br label %if.end649

if.end649:                                        ; preds = %if.else645, %if.end644
  br label %if.end650

if.end650:                                        ; preds = %if.end649, %if.end608
  br label %if.end651

if.end651:                                        ; preds = %if.end650, %cond.end569
  %501 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining652 = getelementptr inbounds %struct.tdefl_compressor* %501, i32 0, i32 22
  %502 = load i32* %m_output_flush_remaining652, align 4
  store i32 %502, i32* %retval
  br label %return

return:                                           ; preds = %if.end651, %if.then607
  %503 = load i32* %retval
  ret i32 %503
}

; Function Attrs: nounwind uwtable
define i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %d, i8* %pIn_buf, i64 %in_buf_size, i32 %flush) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %pIn_buf.addr = alloca i8*, align 8
  %in_buf_size.addr = alloca i64, align 8
  %flush.addr = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  store i8* %pIn_buf, i8** %pIn_buf.addr, align 8
  store i64 %in_buf_size, i64* %in_buf_size.addr, align 8
  store i32 %flush, i32* %flush.addr, align 4
  %0 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_func = getelementptr inbounds %struct.tdefl_compressor* %0, i32 0, i32 0
  %1 = load i32 (i8*, i32, i8*)** %m_pPut_buf_func, align 8
  %tobool = icmp ne i32 (i8*, i32, i8*)* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([19 x i8]* @.str14, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2694, i8* getelementptr inbounds ([90 x i8]* @__PRETTY_FUNCTION__.tdefl_compress_buffer, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %2, %cond.true
  %3 = load %struct.tdefl_compressor** %d.addr, align 8
  %4 = load i8** %pIn_buf.addr, align 8
  %5 = load i32* %flush.addr, align 4
  %call = call i32 @tdefl_compress(%struct.tdefl_compressor* %3, i8* %4, i64* %in_buf_size.addr, i8* null, i64* null, i32 %5)
  ret i32 %call
}

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) #3

; Function Attrs: nounwind uwtable
define i32 @tdefl_get_prev_return_status(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  %0 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor* %0, i32 0, i32 26
  %1 = load i32* %m_prev_return_status, align 4
  ret i32 %1
}

; Function Attrs: nounwind uwtable
define i32 @tdefl_compress_mem_to_output(i8* %pBuf, i64 %buf_len, i32 (i8*, i32, i8*)* %pPut_buf_func, i8* %pPut_buf_user, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %pPut_buf_func.addr = alloca i32 (i8*, i32, i8*)*, align 8
  %pPut_buf_user.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %succeeded = alloca i32, align 4
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_len, i64* %buf_len.addr, align 8
  store i32 (i8*, i32, i8*)* %pPut_buf_func, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8
  store i8* %pPut_buf_user, i8** %pPut_buf_user.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i64* %buf_len.addr, align 8
  %tobool = icmp ne i64 %0, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i8** %pBuf.addr, align 8
  %tobool1 = icmp ne i8* %1, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8
  %tobool2 = icmp ne i32 (i8*, i32, i8*)* %2, null
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %call = call noalias i8* @malloc(i64 319352) #2
  %3 = bitcast i8* %call to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %3, %struct.tdefl_compressor** %pComp, align 8
  %4 = load %struct.tdefl_compressor** %pComp, align 8
  %tobool3 = icmp ne %struct.tdefl_compressor* %4, null
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end5:                                          ; preds = %if.end
  %5 = load %struct.tdefl_compressor** %pComp, align 8
  %6 = load i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8
  %7 = load i8** %pPut_buf_user.addr, align 8
  %8 = load i32* %flags.addr, align 4
  %call6 = call i32 @tdefl_init(%struct.tdefl_compressor* %5, i32 (i8*, i32, i8*)* %6, i8* %7, i32 %8)
  %cmp = icmp eq i32 %call6, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %succeeded, align 4
  %9 = load i32* %succeeded, align 4
  %tobool7 = icmp ne i32 %9, 0
  br i1 %tobool7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end5
  %10 = load %struct.tdefl_compressor** %pComp, align 8
  %11 = load i8** %pBuf.addr, align 8
  %12 = load i64* %buf_len.addr, align 8
  %call8 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %10, i8* %11, i64 %12, i32 4)
  %cmp9 = icmp eq i32 %call8, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end5
  %13 = phi i1 [ false, %if.end5 ], [ %cmp9, %land.rhs ]
  %land.ext = zext i1 %13 to i32
  store i32 %land.ext, i32* %succeeded, align 4
  %14 = load %struct.tdefl_compressor** %pComp, align 8
  %15 = bitcast %struct.tdefl_compressor* %14 to i8*
  call void @free(i8* %15) #2
  %16 = load i32* %succeeded, align 4
  store i32 %16, i32* %retval
  br label %return

return:                                           ; preds = %land.end, %if.then4, %if.then
  %17 = load i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define i8* @tdefl_compress_mem_to_heap(i8* %pSrc_buf, i64 %src_buf_len, i64* %pOut_len, i32 %flags) #0 {
entry:
  %retval = alloca i8*, align 8
  %pSrc_buf.addr = alloca i8*, align 8
  %src_buf_len.addr = alloca i64, align 8
  %pOut_len.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %out_buf = alloca %struct.tdefl_output_buffer, align 8
  store i8* %pSrc_buf, i8** %pSrc_buf.addr, align 8
  store i64 %src_buf_len, i64* %src_buf_len.addr, align 8
  store i64* %pOut_len, i64** %pOut_len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 32, i32 8, i1 false)
  %1 = load i64** %pOut_len.addr, align 8
  %tobool = icmp ne i64* %1, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval
  br label %return

if.else:                                          ; preds = %entry
  %2 = load i64** %pOut_len.addr, align 8
  store i64 0, i64* %2, align 8
  br label %if.end

if.end:                                           ; preds = %if.else
  %m_expandable = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 3
  store i32 1, i32* %m_expandable, align 4
  %3 = load i8** %pSrc_buf.addr, align 8
  %4 = load i64* %src_buf_len.addr, align 8
  %5 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %6 = load i32* %flags.addr, align 4
  %call = call i32 @tdefl_compress_mem_to_output(i8* %3, i64 %4, i32 (i8*, i32, i8*)* @tdefl_output_buffer_putter, i8* %5, i32 %6)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i8* null, i8** %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %m_size = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 0
  %7 = load i64* %m_size, align 8
  %8 = load i64** %pOut_len.addr, align 8
  store i64 %7, i64* %8, align 8
  %m_pBuf = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %9 = load i8** %m_pBuf, align 8
  store i8* %9, i8** %retval
  br label %return

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %10 = load i8** %retval
  ret i8* %10
}

; Function Attrs: nounwind uwtable
define internal i32 @tdefl_output_buffer_putter(i8* %pBuf, i32 %len, i8* %pUser) #0 {
entry:
  %retval = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %pUser.addr = alloca i8*, align 8
  %p = alloca %struct.tdefl_output_buffer*, align 8
  %new_size = alloca i64, align 8
  %new_capacity = alloca i64, align 8
  %pNew_buf = alloca i8*, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %pUser, i8** %pUser.addr, align 8
  %0 = load i8** %pUser.addr, align 8
  %1 = bitcast i8* %0 to %struct.tdefl_output_buffer*
  store %struct.tdefl_output_buffer* %1, %struct.tdefl_output_buffer** %p, align 8
  %2 = load %struct.tdefl_output_buffer** %p, align 8
  %m_size = getelementptr inbounds %struct.tdefl_output_buffer* %2, i32 0, i32 0
  %3 = load i64* %m_size, align 8
  %4 = load i32* %len.addr, align 4
  %conv = sext i32 %4 to i64
  %add = add i64 %3, %conv
  store i64 %add, i64* %new_size, align 8
  %5 = load i64* %new_size, align 8
  %6 = load %struct.tdefl_output_buffer** %p, align 8
  %m_capacity = getelementptr inbounds %struct.tdefl_output_buffer* %6, i32 0, i32 1
  %7 = load i64* %m_capacity, align 8
  %cmp = icmp ugt i64 %5, %7
  br i1 %cmp, label %if.then, label %if.end14

if.then:                                          ; preds = %entry
  %8 = load %struct.tdefl_output_buffer** %p, align 8
  %m_capacity2 = getelementptr inbounds %struct.tdefl_output_buffer* %8, i32 0, i32 1
  %9 = load i64* %m_capacity2, align 8
  store i64 %9, i64* %new_capacity, align 8
  %10 = load %struct.tdefl_output_buffer** %p, align 8
  %m_expandable = getelementptr inbounds %struct.tdefl_output_buffer* %10, i32 0, i32 3
  %11 = load i32* %m_expandable, align 4
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %if.end, label %if.then3

if.then3:                                         ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %12 = load i64* %new_capacity, align 8
  %shl = shl i64 %12, 1
  %cmp4 = icmp ugt i64 128, %shl
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %13 = load i64* %new_capacity, align 8
  %shl6 = shl i64 %13, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 128, %cond.true ], [ %shl6, %cond.false ]
  store i64 %cond, i64* %new_capacity, align 8
  br label %do.cond

do.cond:                                          ; preds = %cond.end
  %14 = load i64* %new_size, align 8
  %15 = load i64* %new_capacity, align 8
  %cmp7 = icmp ugt i64 %14, %15
  br i1 %cmp7, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %16 = load %struct.tdefl_output_buffer** %p, align 8
  %m_pBuf = getelementptr inbounds %struct.tdefl_output_buffer* %16, i32 0, i32 2
  %17 = load i8** %m_pBuf, align 8
  %18 = load i64* %new_capacity, align 8
  %call = call i8* @realloc(i8* %17, i64 %18) #2
  store i8* %call, i8** %pNew_buf, align 8
  %19 = load i8** %pNew_buf, align 8
  %tobool9 = icmp ne i8* %19, null
  br i1 %tobool9, label %if.end11, label %if.then10

if.then10:                                        ; preds = %do.end
  store i32 0, i32* %retval
  br label %return

if.end11:                                         ; preds = %do.end
  %20 = load i8** %pNew_buf, align 8
  %21 = load %struct.tdefl_output_buffer** %p, align 8
  %m_pBuf12 = getelementptr inbounds %struct.tdefl_output_buffer* %21, i32 0, i32 2
  store i8* %20, i8** %m_pBuf12, align 8
  %22 = load i64* %new_capacity, align 8
  %23 = load %struct.tdefl_output_buffer** %p, align 8
  %m_capacity13 = getelementptr inbounds %struct.tdefl_output_buffer* %23, i32 0, i32 1
  store i64 %22, i64* %m_capacity13, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.end11, %entry
  %24 = load %struct.tdefl_output_buffer** %p, align 8
  %m_pBuf15 = getelementptr inbounds %struct.tdefl_output_buffer* %24, i32 0, i32 2
  %25 = load i8** %m_pBuf15, align 8
  %26 = load %struct.tdefl_output_buffer** %p, align 8
  %m_size16 = getelementptr inbounds %struct.tdefl_output_buffer* %26, i32 0, i32 0
  %27 = load i64* %m_size16, align 8
  %add.ptr = getelementptr inbounds i8* %25, i64 %27
  %28 = load i8** %pBuf.addr, align 8
  %29 = load i32* %len.addr, align 4
  %conv17 = sext i32 %29 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %28, i64 %conv17, i32 1, i1 false)
  %30 = load i64* %new_size, align 8
  %31 = load %struct.tdefl_output_buffer** %p, align 8
  %m_size18 = getelementptr inbounds %struct.tdefl_output_buffer* %31, i32 0, i32 0
  store i64 %30, i64* %m_size18, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end14, %if.then10, %if.then3
  %32 = load i32* %retval
  ret i32 %32
}

; Function Attrs: nounwind uwtable
define i64 @tdefl_compress_mem_to_mem(i8* %pOut_buf, i64 %out_buf_len, i8* %pSrc_buf, i64 %src_buf_len, i32 %flags) #0 {
entry:
  %retval = alloca i64, align 8
  %pOut_buf.addr = alloca i8*, align 8
  %out_buf_len.addr = alloca i64, align 8
  %pSrc_buf.addr = alloca i8*, align 8
  %src_buf_len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %out_buf = alloca %struct.tdefl_output_buffer, align 8
  store i8* %pOut_buf, i8** %pOut_buf.addr, align 8
  store i64 %out_buf_len, i64* %out_buf_len.addr, align 8
  store i8* %pSrc_buf, i8** %pSrc_buf.addr, align 8
  store i64 %src_buf_len, i64* %src_buf_len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 32, i32 8, i1 false)
  %1 = load i8** %pOut_buf.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8** %pOut_buf.addr, align 8
  %m_pBuf = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  store i8* %2, i8** %m_pBuf, align 8
  %3 = load i64* %out_buf_len.addr, align 8
  %m_capacity = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 1
  store i64 %3, i64* %m_capacity, align 8
  %4 = load i8** %pSrc_buf.addr, align 8
  %5 = load i64* %src_buf_len.addr, align 8
  %6 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %7 = load i32* %flags.addr, align 4
  %call = call i32 @tdefl_compress_mem_to_output(i8* %4, i64 %5, i32 (i8*, i32, i8*)* @tdefl_output_buffer_putter, i8* %6, i32 %7)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i64 0, i64* %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %m_size = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 0
  %8 = load i64* %m_size, align 8
  store i64 %8, i64* %retval
  br label %return

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %9 = load i64* %retval
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define i8* @tdefl_write_image_to_png_file_in_memory_ex(i8* %pImage, i32 %w, i32 %h, i32 %num_chans, i64* %pLen_out, i32 %level, i32 %flip) #0 {
entry:
  %retval = alloca i8*, align 8
  %pImage.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %num_chans.addr = alloca i32, align 4
  %pLen_out.addr = alloca i64*, align 8
  %level.addr = alloca i32, align 4
  %flip.addr = alloca i32, align 4
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %out_buf = alloca %struct.tdefl_output_buffer, align 8
  %i = alloca i32, align 4
  %bpl = alloca i32, align 4
  %y = alloca i32, align 4
  %z = alloca i32, align 4
  %c = alloca i32, align 4
  %pnghdr = alloca [41 x i8], align 16
  store i8* %pImage, i8** %pImage.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 %num_chans, i32* %num_chans.addr, align 4
  store i64* %pLen_out, i64** %pLen_out.addr, align 8
  store i32 %level, i32* %level.addr, align 4
  store i32 %flip, i32* %flip.addr, align 4
  %call = call noalias i8* @malloc(i64 319352) #2
  %0 = bitcast i8* %call to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %0, %struct.tdefl_compressor** %pComp, align 8
  %1 = load i32* %w.addr, align 4
  %2 = load i32* %num_chans.addr, align 4
  %mul = mul nsw i32 %1, %2
  store i32 %mul, i32* %bpl, align 4
  %3 = load i64** %pLen_out.addr, align 8
  store i64 0, i64* %3, align 8
  %4 = load %struct.tdefl_compressor** %pComp, align 8
  %tobool = icmp ne %struct.tdefl_compressor* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 32, i32 8, i1 false)
  %m_expandable = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 3
  store i32 1, i32* %m_expandable, align 4
  %6 = load i32* %bpl, align 4
  %add = add nsw i32 1, %6
  %7 = load i32* %h.addr, align 4
  %mul1 = mul nsw i32 %add, %7
  %cmp = icmp sgt i32 64, %mul1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %8 = load i32* %bpl, align 4
  %add2 = add nsw i32 1, %8
  %9 = load i32* %h.addr, align 4
  %mul3 = mul nsw i32 %add2, %9
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 64, %cond.true ], [ %mul3, %cond.false ]
  %add4 = add nsw i32 57, %cond
  %conv = sext i32 %add4 to i64
  %m_capacity = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 1
  store i64 %conv, i64* %m_capacity, align 8
  %m_capacity5 = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 1
  %10 = load i64* %m_capacity5, align 8
  %call6 = call noalias i8* @malloc(i64 %10) #2
  %m_pBuf = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  store i8* %call6, i8** %m_pBuf, align 8
  %cmp7 = icmp eq i8* null, %call6
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %cond.end
  %11 = load %struct.tdefl_compressor** %pComp, align 8
  %12 = bitcast %struct.tdefl_compressor* %11 to i8*
  call void @free(i8* %12) #2
  store i8* null, i8** %retval
  br label %return

if.end10:                                         ; preds = %cond.end
  store i32 41, i32* %z, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end10
  %13 = load i32* %z, align 4
  %tobool11 = icmp ne i32 %13, 0
  br i1 %tobool11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = bitcast i32* %z to i8*
  %15 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %call12 = call i32 @tdefl_output_buffer_putter(i8* %14, i32 1, i8* %15)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32* %z, align 4
  %dec = add nsw i32 %16, -1
  store i32 %dec, i32* %z, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.tdefl_compressor** %pComp, align 8
  %18 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %19 = load i32* %level.addr, align 4
  %cmp13 = icmp ult i32 10, %19
  br i1 %cmp13, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %for.end
  br label %cond.end17

cond.false16:                                     ; preds = %for.end
  %20 = load i32* %level.addr, align 4
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i32 [ 10, %cond.true15 ], [ %20, %cond.false16 ]
  %idxprom = zext i32 %cond18 to i64
  %arrayidx = getelementptr inbounds [11 x i32]* @tdefl_write_image_to_png_file_in_memory_ex.s_tdefl_png_num_probes, i32 0, i64 %idxprom
  %21 = load i32* %arrayidx, align 4
  %or = or i32 %21, 4096
  %call19 = call i32 @tdefl_init(%struct.tdefl_compressor* %17, i32 (i8*, i32, i8*)* @tdefl_output_buffer_putter, i8* %18, i32 %or)
  store i32 0, i32* %y, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc34, %cond.end17
  %22 = load i32* %y, align 4
  %23 = load i32* %h.addr, align 4
  %cmp21 = icmp slt i32 %22, %23
  br i1 %cmp21, label %for.body23, label %for.end35

for.body23:                                       ; preds = %for.cond20
  %24 = load %struct.tdefl_compressor** %pComp, align 8
  %25 = bitcast i32* %z to i8*
  %call24 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %24, i8* %25, i64 1, i32 0)
  %26 = load %struct.tdefl_compressor** %pComp, align 8
  %27 = load i8** %pImage.addr, align 8
  %28 = load i32* %flip.addr, align 4
  %tobool25 = icmp ne i32 %28, 0
  br i1 %tobool25, label %cond.true26, label %cond.false28

cond.true26:                                      ; preds = %for.body23
  %29 = load i32* %h.addr, align 4
  %sub = sub nsw i32 %29, 1
  %30 = load i32* %y, align 4
  %sub27 = sub nsw i32 %sub, %30
  br label %cond.end29

cond.false28:                                     ; preds = %for.body23
  %31 = load i32* %y, align 4
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false28, %cond.true26
  %cond30 = phi i32 [ %sub27, %cond.true26 ], [ %31, %cond.false28 ]
  %32 = load i32* %bpl, align 4
  %mul31 = mul nsw i32 %cond30, %32
  %idx.ext = sext i32 %mul31 to i64
  %add.ptr = getelementptr inbounds i8* %27, i64 %idx.ext
  %33 = load i32* %bpl, align 4
  %conv32 = sext i32 %33 to i64
  %call33 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %26, i8* %add.ptr, i64 %conv32, i32 0)
  br label %for.inc34

for.inc34:                                        ; preds = %cond.end29
  %34 = load i32* %y, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond20

for.end35:                                        ; preds = %for.cond20
  %35 = load %struct.tdefl_compressor** %pComp, align 8
  %call36 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %35, i8* null, i64 0, i32 4)
  %cmp37 = icmp ne i32 %call36, 1
  br i1 %cmp37, label %if.then39, label %if.end41

if.then39:                                        ; preds = %for.end35
  %36 = load %struct.tdefl_compressor** %pComp, align 8
  %37 = bitcast %struct.tdefl_compressor* %36 to i8*
  call void @free(i8* %37) #2
  %m_pBuf40 = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %38 = load i8** %m_pBuf40, align 8
  call void @free(i8* %38) #2
  store i8* null, i8** %retval
  br label %return

if.end41:                                         ; preds = %for.end35
  %m_size = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 0
  %39 = load i64* %m_size, align 8
  %sub42 = sub i64 %39, 41
  %40 = load i64** %pLen_out.addr, align 8
  store i64 %sub42, i64* %40, align 8
  %arrayinit.begin = getelementptr inbounds [41 x i8]* %pnghdr, i64 0, i64 0
  store i8 -119, i8* %arrayinit.begin
  %arrayinit.element = getelementptr inbounds i8* %arrayinit.begin, i64 1
  store i8 80, i8* %arrayinit.element
  %arrayinit.element43 = getelementptr inbounds i8* %arrayinit.element, i64 1
  store i8 78, i8* %arrayinit.element43
  %arrayinit.element44 = getelementptr inbounds i8* %arrayinit.element43, i64 1
  store i8 71, i8* %arrayinit.element44
  %arrayinit.element45 = getelementptr inbounds i8* %arrayinit.element44, i64 1
  store i8 13, i8* %arrayinit.element45
  %arrayinit.element46 = getelementptr inbounds i8* %arrayinit.element45, i64 1
  store i8 10, i8* %arrayinit.element46
  %arrayinit.element47 = getelementptr inbounds i8* %arrayinit.element46, i64 1
  store i8 26, i8* %arrayinit.element47
  %arrayinit.element48 = getelementptr inbounds i8* %arrayinit.element47, i64 1
  store i8 10, i8* %arrayinit.element48
  %arrayinit.element49 = getelementptr inbounds i8* %arrayinit.element48, i64 1
  store i8 0, i8* %arrayinit.element49
  %arrayinit.element50 = getelementptr inbounds i8* %arrayinit.element49, i64 1
  store i8 0, i8* %arrayinit.element50
  %arrayinit.element51 = getelementptr inbounds i8* %arrayinit.element50, i64 1
  store i8 0, i8* %arrayinit.element51
  %arrayinit.element52 = getelementptr inbounds i8* %arrayinit.element51, i64 1
  store i8 13, i8* %arrayinit.element52
  %arrayinit.element53 = getelementptr inbounds i8* %arrayinit.element52, i64 1
  store i8 73, i8* %arrayinit.element53
  %arrayinit.element54 = getelementptr inbounds i8* %arrayinit.element53, i64 1
  store i8 72, i8* %arrayinit.element54
  %arrayinit.element55 = getelementptr inbounds i8* %arrayinit.element54, i64 1
  store i8 68, i8* %arrayinit.element55
  %arrayinit.element56 = getelementptr inbounds i8* %arrayinit.element55, i64 1
  store i8 82, i8* %arrayinit.element56
  %arrayinit.element57 = getelementptr inbounds i8* %arrayinit.element56, i64 1
  store i8 0, i8* %arrayinit.element57
  %arrayinit.element58 = getelementptr inbounds i8* %arrayinit.element57, i64 1
  store i8 0, i8* %arrayinit.element58
  %arrayinit.element59 = getelementptr inbounds i8* %arrayinit.element58, i64 1
  %41 = load i32* %w.addr, align 4
  %shr = ashr i32 %41, 8
  %conv60 = trunc i32 %shr to i8
  store i8 %conv60, i8* %arrayinit.element59
  %arrayinit.element61 = getelementptr inbounds i8* %arrayinit.element59, i64 1
  %42 = load i32* %w.addr, align 4
  %conv62 = trunc i32 %42 to i8
  store i8 %conv62, i8* %arrayinit.element61
  %arrayinit.element63 = getelementptr inbounds i8* %arrayinit.element61, i64 1
  store i8 0, i8* %arrayinit.element63
  %arrayinit.element64 = getelementptr inbounds i8* %arrayinit.element63, i64 1
  store i8 0, i8* %arrayinit.element64
  %arrayinit.element65 = getelementptr inbounds i8* %arrayinit.element64, i64 1
  %43 = load i32* %h.addr, align 4
  %shr66 = ashr i32 %43, 8
  %conv67 = trunc i32 %shr66 to i8
  store i8 %conv67, i8* %arrayinit.element65
  %arrayinit.element68 = getelementptr inbounds i8* %arrayinit.element65, i64 1
  %44 = load i32* %h.addr, align 4
  %conv69 = trunc i32 %44 to i8
  store i8 %conv69, i8* %arrayinit.element68
  %arrayinit.element70 = getelementptr inbounds i8* %arrayinit.element68, i64 1
  store i8 8, i8* %arrayinit.element70
  %arrayinit.element71 = getelementptr inbounds i8* %arrayinit.element70, i64 1
  %45 = load i32* %num_chans.addr, align 4
  %idxprom72 = sext i32 %45 to i64
  %arrayidx73 = getelementptr inbounds [5 x i8]* @tdefl_write_image_to_png_file_in_memory_ex.chans, i32 0, i64 %idxprom72
  %46 = load i8* %arrayidx73, align 1
  store i8 %46, i8* %arrayinit.element71
  %arrayinit.element74 = getelementptr inbounds i8* %arrayinit.element71, i64 1
  store i8 0, i8* %arrayinit.element74
  %arrayinit.element75 = getelementptr inbounds i8* %arrayinit.element74, i64 1
  store i8 0, i8* %arrayinit.element75
  %arrayinit.element76 = getelementptr inbounds i8* %arrayinit.element75, i64 1
  store i8 0, i8* %arrayinit.element76
  %arrayinit.element77 = getelementptr inbounds i8* %arrayinit.element76, i64 1
  store i8 0, i8* %arrayinit.element77
  %arrayinit.element78 = getelementptr inbounds i8* %arrayinit.element77, i64 1
  store i8 0, i8* %arrayinit.element78
  %arrayinit.element79 = getelementptr inbounds i8* %arrayinit.element78, i64 1
  store i8 0, i8* %arrayinit.element79
  %arrayinit.element80 = getelementptr inbounds i8* %arrayinit.element79, i64 1
  store i8 0, i8* %arrayinit.element80
  %arrayinit.element81 = getelementptr inbounds i8* %arrayinit.element80, i64 1
  %47 = load i64** %pLen_out.addr, align 8
  %48 = load i64* %47, align 8
  %shr82 = lshr i64 %48, 24
  %conv83 = trunc i64 %shr82 to i8
  store i8 %conv83, i8* %arrayinit.element81
  %arrayinit.element84 = getelementptr inbounds i8* %arrayinit.element81, i64 1
  %49 = load i64** %pLen_out.addr, align 8
  %50 = load i64* %49, align 8
  %shr85 = lshr i64 %50, 16
  %conv86 = trunc i64 %shr85 to i8
  store i8 %conv86, i8* %arrayinit.element84
  %arrayinit.element87 = getelementptr inbounds i8* %arrayinit.element84, i64 1
  %51 = load i64** %pLen_out.addr, align 8
  %52 = load i64* %51, align 8
  %shr88 = lshr i64 %52, 8
  %conv89 = trunc i64 %shr88 to i8
  store i8 %conv89, i8* %arrayinit.element87
  %arrayinit.element90 = getelementptr inbounds i8* %arrayinit.element87, i64 1
  %53 = load i64** %pLen_out.addr, align 8
  %54 = load i64* %53, align 8
  %conv91 = trunc i64 %54 to i8
  store i8 %conv91, i8* %arrayinit.element90
  %arrayinit.element92 = getelementptr inbounds i8* %arrayinit.element90, i64 1
  store i8 73, i8* %arrayinit.element92
  %arrayinit.element93 = getelementptr inbounds i8* %arrayinit.element92, i64 1
  store i8 68, i8* %arrayinit.element93
  %arrayinit.element94 = getelementptr inbounds i8* %arrayinit.element93, i64 1
  store i8 65, i8* %arrayinit.element94
  %arrayinit.element95 = getelementptr inbounds i8* %arrayinit.element94, i64 1
  store i8 84, i8* %arrayinit.element95
  %arraydecay = getelementptr inbounds [41 x i8]* %pnghdr, i32 0, i32 0
  %add.ptr96 = getelementptr inbounds i8* %arraydecay, i64 12
  %call97 = call i64 @mz_crc32(i64 0, i8* %add.ptr96, i64 17)
  %conv98 = trunc i64 %call97 to i32
  store i32 %conv98, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond99

for.cond99:                                       ; preds = %for.inc109, %if.end41
  %55 = load i32* %i, align 4
  %cmp100 = icmp slt i32 %55, 4
  br i1 %cmp100, label %for.body102, label %for.end111

for.body102:                                      ; preds = %for.cond99
  %56 = load i32* %c, align 4
  %shr103 = lshr i32 %56, 24
  %conv104 = trunc i32 %shr103 to i8
  %57 = load i32* %i, align 4
  %idxprom105 = sext i32 %57 to i64
  %arraydecay106 = getelementptr inbounds [41 x i8]* %pnghdr, i32 0, i32 0
  %add.ptr107 = getelementptr inbounds i8* %arraydecay106, i64 29
  %arrayidx108 = getelementptr inbounds i8* %add.ptr107, i64 %idxprom105
  store i8 %conv104, i8* %arrayidx108, align 1
  br label %for.inc109

for.inc109:                                       ; preds = %for.body102
  %58 = load i32* %i, align 4
  %inc110 = add nsw i32 %58, 1
  store i32 %inc110, i32* %i, align 4
  %59 = load i32* %c, align 4
  %shl = shl i32 %59, 8
  store i32 %shl, i32* %c, align 4
  br label %for.cond99

for.end111:                                       ; preds = %for.cond99
  %m_pBuf112 = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %60 = load i8** %m_pBuf112, align 8
  %61 = bitcast [41 x i8]* %pnghdr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %60, i8* %61, i64 41, i32 1, i1 false)
  %62 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %call113 = call i32 @tdefl_output_buffer_putter(i8* getelementptr inbounds ([17 x i8]* @.str16, i32 0, i32 0), i32 16, i8* %62)
  %tobool114 = icmp ne i32 %call113, 0
  br i1 %tobool114, label %if.end117, label %if.then115

if.then115:                                       ; preds = %for.end111
  %63 = load i64** %pLen_out.addr, align 8
  store i64 0, i64* %63, align 8
  %64 = load %struct.tdefl_compressor** %pComp, align 8
  %65 = bitcast %struct.tdefl_compressor* %64 to i8*
  call void @free(i8* %65) #2
  %m_pBuf116 = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %66 = load i8** %m_pBuf116, align 8
  call void @free(i8* %66) #2
  store i8* null, i8** %retval
  br label %return

if.end117:                                        ; preds = %for.end111
  %m_pBuf118 = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %67 = load i8** %m_pBuf118, align 8
  %add.ptr119 = getelementptr inbounds i8* %67, i64 41
  %add.ptr120 = getelementptr inbounds i8* %add.ptr119, i64 -4
  %68 = load i64** %pLen_out.addr, align 8
  %69 = load i64* %68, align 8
  %add121 = add i64 %69, 4
  %call122 = call i64 @mz_crc32(i64 0, i8* %add.ptr120, i64 %add121)
  %conv123 = trunc i64 %call122 to i32
  store i32 %conv123, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond124

for.cond124:                                      ; preds = %for.inc136, %if.end117
  %70 = load i32* %i, align 4
  %cmp125 = icmp slt i32 %70, 4
  br i1 %cmp125, label %for.body127, label %for.end139

for.body127:                                      ; preds = %for.cond124
  %71 = load i32* %c, align 4
  %shr128 = lshr i32 %71, 24
  %conv129 = trunc i32 %shr128 to i8
  %72 = load i32* %i, align 4
  %idxprom130 = sext i32 %72 to i64
  %m_pBuf131 = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %73 = load i8** %m_pBuf131, align 8
  %m_size132 = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 0
  %74 = load i64* %m_size132, align 8
  %add.ptr133 = getelementptr inbounds i8* %73, i64 %74
  %add.ptr134 = getelementptr inbounds i8* %add.ptr133, i64 -16
  %arrayidx135 = getelementptr inbounds i8* %add.ptr134, i64 %idxprom130
  store i8 %conv129, i8* %arrayidx135, align 1
  br label %for.inc136

for.inc136:                                       ; preds = %for.body127
  %75 = load i32* %i, align 4
  %inc137 = add nsw i32 %75, 1
  store i32 %inc137, i32* %i, align 4
  %76 = load i32* %c, align 4
  %shl138 = shl i32 %76, 8
  store i32 %shl138, i32* %c, align 4
  br label %for.cond124

for.end139:                                       ; preds = %for.cond124
  %77 = load i64** %pLen_out.addr, align 8
  %78 = load i64* %77, align 8
  %add140 = add i64 %78, 57
  store i64 %add140, i64* %77, align 8
  %79 = load %struct.tdefl_compressor** %pComp, align 8
  %80 = bitcast %struct.tdefl_compressor* %79 to i8*
  call void @free(i8* %80) #2
  %m_pBuf141 = getelementptr inbounds %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %81 = load i8** %m_pBuf141, align 8
  store i8* %81, i8** %retval
  br label %return

return:                                           ; preds = %for.end139, %if.then115, %if.then39, %if.then9, %if.then
  %82 = load i8** %retval
  ret i8* %82
}

; Function Attrs: nounwind uwtable
define i8* @tdefl_write_image_to_png_file_in_memory(i8* %pImage, i32 %w, i32 %h, i32 %num_chans, i64* %pLen_out) #0 {
entry:
  %pImage.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %num_chans.addr = alloca i32, align 4
  %pLen_out.addr = alloca i64*, align 8
  store i8* %pImage, i8** %pImage.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 %num_chans, i32* %num_chans.addr, align 4
  store i64* %pLen_out, i64** %pLen_out.addr, align 8
  %0 = load i8** %pImage.addr, align 8
  %1 = load i32* %w.addr, align 4
  %2 = load i32* %h.addr, align 4
  %3 = load i32* %num_chans.addr, align 4
  %4 = load i64** %pLen_out.addr, align 8
  %call = call i8* @tdefl_write_image_to_png_file_in_memory_ex(i8* %0, i32 %1, i32 %2, i32 %3, i64* %4, i32 6, i32 0)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_init(%struct.mz_zip_archive_tag* %pZip, i64 %size, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive_tag* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive_tag* %1, i32 0, i32 9
  %2 = load i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %tobool1 = icmp ne i64 (i8*, i64, i8*, i64)* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %4 = load i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_init_internal(%struct.mz_zip_archive_tag* %3, i32 %4)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end4:                                          ; preds = %if.end
  %5 = load i64* %size.addr, align 8
  %6 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %6, i32 0, i32 0
  store i64 %5, i64* %m_archive_size, align 8
  %7 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %8 = load i32* %flags.addr, align 4
  %call5 = call i32 @mz_zip_reader_read_central_dir(%struct.mz_zip_archive_tag* %7, i32 %8)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end9, label %if.then7

if.then7:                                         ; preds = %if.end4
  %9 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %call8 = call i32 @mz_zip_reader_end(%struct.mz_zip_archive_tag* %9)
  store i32 0, i32* %retval
  br label %return

if.end9:                                          ; preds = %if.end4
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end9, %if.then7, %if.then3, %if.then
  %10 = load i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal i32 @mz_zip_reader_init_internal(%struct.mz_zip_archive_tag* %pZip, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32* %flags.addr, align 4
  %1 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive_tag* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %2, i32 0, i32 12
  %3 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %3, null
  br i1 %tobool1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive_tag* %4, i32 0, i32 3
  %5 = load i32* %m_zip_mode, align 4
  %cmp = icmp ne i32 %5, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %6 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive_tag* %6, i32 0, i32 5
  %7 = load i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %tobool3 = icmp ne i8* (i8*, i64, i64)* %7, null
  br i1 %tobool3, label %if.end6, label %if.then4

if.then4:                                         ; preds = %if.end
  %8 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc5 = getelementptr inbounds %struct.mz_zip_archive_tag* %8, i32 0, i32 5
  store i8* (i8*, i64, i64)* @def_alloc_func, i8* (i8*, i64, i64)** %m_pAlloc5, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.end
  %9 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive_tag* %9, i32 0, i32 6
  %10 = load void (i8*, i8*)** %m_pFree, align 8
  %tobool7 = icmp ne void (i8*, i8*)* %10, null
  br i1 %tobool7, label %if.end10, label %if.then8

if.then8:                                         ; preds = %if.end6
  %11 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree9 = getelementptr inbounds %struct.mz_zip_archive_tag* %11, i32 0, i32 6
  store void (i8*, i8*)* @def_free_func, void (i8*, i8*)** %m_pFree9, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %if.end6
  %12 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRealloc = getelementptr inbounds %struct.mz_zip_archive_tag* %12, i32 0, i32 7
  %13 = load i8* (i8*, i8*, i64, i64)** %m_pRealloc, align 8
  %tobool11 = icmp ne i8* (i8*, i8*, i64, i64)* %13, null
  br i1 %tobool11, label %if.end14, label %if.then12

if.then12:                                        ; preds = %if.end10
  %14 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRealloc13 = getelementptr inbounds %struct.mz_zip_archive_tag* %14, i32 0, i32 7
  store i8* (i8*, i8*, i64, i64)* @def_realloc_func, i8* (i8*, i8*, i64, i64)** %m_pRealloc13, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.end10
  %15 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode15 = getelementptr inbounds %struct.mz_zip_archive_tag* %15, i32 0, i32 3
  store i32 1, i32* %m_zip_mode15, align 4
  %16 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %16, i32 0, i32 0
  store i64 0, i64* %m_archive_size, align 8
  %17 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive_tag* %17, i32 0, i32 1
  store i64 0, i64* %m_central_directory_file_ofs, align 8
  %18 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive_tag* %18, i32 0, i32 2
  store i32 0, i32* %m_total_files, align 4
  %19 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc16 = getelementptr inbounds %struct.mz_zip_archive_tag* %19, i32 0, i32 5
  %20 = load i8* (i8*, i64, i64)** %m_pAlloc16, align 8
  %21 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %21, i32 0, i32 8
  %22 = load i8** %m_pAlloc_opaque, align 8
  %call = call i8* %20(i8* %22, i64 1, i64 128)
  %23 = bitcast i8* %call to %struct.mz_zip_internal_state_tag*
  %24 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState17 = getelementptr inbounds %struct.mz_zip_archive_tag* %24, i32 0, i32 12
  store %struct.mz_zip_internal_state_tag* %23, %struct.mz_zip_internal_state_tag** %m_pState17, align 8
  %cmp18 = icmp eq %struct.mz_zip_internal_state_tag* null, %23
  br i1 %cmp18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end14
  store i32 0, i32* %retval
  br label %return

if.end20:                                         ; preds = %if.end14
  %25 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState21 = getelementptr inbounds %struct.mz_zip_archive_tag* %25, i32 0, i32 12
  %26 = load %struct.mz_zip_internal_state_tag** %m_pState21, align 8
  %27 = bitcast %struct.mz_zip_internal_state_tag* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* %27, i8 0, i64 128, i32 8, i1 false)
  %28 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState22 = getelementptr inbounds %struct.mz_zip_archive_tag* %28, i32 0, i32 12
  %29 = load %struct.mz_zip_internal_state_tag** %m_pState22, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag* %29, i32 0, i32 0
  %m_element_size = getelementptr inbounds %struct.mz_zip_array* %m_central_dir, i32 0, i32 3
  store i32 1, i32* %m_element_size, align 4
  %30 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState23 = getelementptr inbounds %struct.mz_zip_archive_tag* %30, i32 0, i32 12
  %31 = load %struct.mz_zip_internal_state_tag** %m_pState23, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %31, i32 0, i32 1
  %m_element_size24 = getelementptr inbounds %struct.mz_zip_array* %m_central_dir_offsets, i32 0, i32 3
  store i32 4, i32* %m_element_size24, align 4
  %32 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState25 = getelementptr inbounds %struct.mz_zip_archive_tag* %32, i32 0, i32 12
  %33 = load %struct.mz_zip_internal_state_tag** %m_pState25, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %33, i32 0, i32 2
  %m_element_size26 = getelementptr inbounds %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 3
  store i32 4, i32* %m_element_size26, align 4
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end20, %if.then19, %if.then
  %34 = load i32* %retval
  ret i32 %34
}

; Function Attrs: nounwind uwtable
define internal i32 @mz_zip_reader_read_central_dir(%struct.mz_zip_archive_tag* %pZip, i32 %flags) #0 {
entry:
  %retval.i242 = alloca i32, align 4
  %pZip.addr.i243 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i244 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i245 = alloca i64, align 8
  %growing.addr.i246 = alloca i32, align 4
  %retval.i227 = alloca i32, align 4
  %pZip.addr.i228 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i229 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i230 = alloca i64, align 8
  %growing.addr.i231 = alloca i32, align 4
  %retval.i = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i = alloca i64, align 8
  %growing.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %flags.addr = alloca i32, align 4
  %cdir_size = alloca i32, align 4
  %num_this_disk = alloca i32, align 4
  %cdir_disk_index = alloca i32, align 4
  %cdir_ofs = alloca i64, align 8
  %cur_file_ofs = alloca i64, align 8
  %p = alloca i8*, align 8
  %buf_u32 = alloca [1024 x i32], align 16
  %pBuf = alloca i8*, align 8
  %sort_central_dir = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %i103 = alloca i32, align 4
  %n104 = alloca i32, align 4
  %total_header_size = alloca i32, align 4
  %comp_size = alloca i32, align 4
  %decomp_size = alloca i32, align 4
  %disk_index = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [1024 x i32]* %buf_u32, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  store i8* %0, i8** %pBuf, align 8
  %1 = load i32* %flags.addr, align 4
  %and = and i32 %1, 2048
  %cmp = icmp eq i32 %and, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %sort_central_dir, align 4
  %2 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %2, i32 0, i32 0
  %3 = load i64* %m_archive_size, align 8
  %cmp1 = icmp ult i64 %3, 22
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size3 = getelementptr inbounds %struct.mz_zip_archive_tag* %4, i32 0, i32 0
  %5 = load i64* %m_archive_size3, align 8
  %sub = sub nsw i64 %5, 4096
  %cmp4 = icmp sgt i64 %sub, 0
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %6 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size6 = getelementptr inbounds %struct.mz_zip_archive_tag* %6, i32 0, i32 0
  %7 = load i64* %m_archive_size6, align 8
  %sub7 = sub nsw i64 %7, 4096
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub7, %cond.true ], [ 0, %cond.false ]
  store i64 %cond, i64* %cur_file_ofs, align 8
  br label %for.cond

for.cond:                                         ; preds = %cond.end50, %cond.end
  %8 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size8 = getelementptr inbounds %struct.mz_zip_archive_tag* %8, i32 0, i32 0
  %9 = load i64* %m_archive_size8, align 8
  %10 = load i64* %cur_file_ofs, align 8
  %sub9 = sub i64 %9, %10
  %cmp10 = icmp ult i64 4096, %sub9
  br i1 %cmp10, label %cond.true12, label %cond.false13

cond.true12:                                      ; preds = %for.cond
  br label %cond.end16

cond.false13:                                     ; preds = %for.cond
  %11 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size14 = getelementptr inbounds %struct.mz_zip_archive_tag* %11, i32 0, i32 0
  %12 = load i64* %m_archive_size14, align 8
  %13 = load i64* %cur_file_ofs, align 8
  %sub15 = sub i64 %12, %13
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false13, %cond.true12
  %cond17 = phi i64 [ 4096, %cond.true12 ], [ %sub15, %cond.false13 ]
  %conv18 = trunc i64 %cond17 to i32
  store i32 %conv18, i32* %n, align 4
  %14 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive_tag* %14, i32 0, i32 9
  %15 = load i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %16 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %16, i32 0, i32 11
  %17 = load i8** %m_pIO_opaque, align 8
  %18 = load i64* %cur_file_ofs, align 8
  %19 = load i8** %pBuf, align 8
  %20 = load i32* %n, align 4
  %conv19 = sext i32 %20 to i64
  %call = call i64 %15(i8* %17, i64 %18, i8* %19, i64 %conv19)
  %21 = load i32* %n, align 4
  %conv20 = zext i32 %21 to i64
  %cmp21 = icmp ne i64 %call, %conv20
  br i1 %cmp21, label %if.then23, label %if.end24

if.then23:                                        ; preds = %cond.end16
  store i32 0, i32* %retval
  br label %return

if.end24:                                         ; preds = %cond.end16
  %22 = load i32* %n, align 4
  %sub25 = sub nsw i32 %22, 4
  store i32 %sub25, i32* %i, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc, %if.end24
  %23 = load i32* %i, align 4
  %cmp27 = icmp sge i32 %23, 0
  br i1 %cmp27, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond26
  %24 = load i8** %pBuf, align 8
  %25 = load i32* %i, align 4
  %idx.ext = sext i32 %25 to i64
  %add.ptr = getelementptr inbounds i8* %24, i64 %idx.ext
  %26 = bitcast i8* %add.ptr to i32*
  %27 = load i32* %26, align 4
  %cmp29 = icmp eq i32 %27, 101010256
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %for.body
  br label %for.end

if.end32:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end32
  %28 = load i32* %i, align 4
  %dec = add nsw i32 %28, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond26

for.end:                                          ; preds = %if.then31, %for.cond26
  %29 = load i32* %i, align 4
  %cmp33 = icmp sge i32 %29, 0
  br i1 %cmp33, label %if.then35, label %if.end37

if.then35:                                        ; preds = %for.end
  %30 = load i32* %i, align 4
  %conv36 = sext i32 %30 to i64
  %31 = load i64* %cur_file_ofs, align 8
  %add = add nsw i64 %31, %conv36
  store i64 %add, i64* %cur_file_ofs, align 8
  br label %for.end52

if.end37:                                         ; preds = %for.end
  %32 = load i64* %cur_file_ofs, align 8
  %tobool = icmp ne i64 %32, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then42

lor.lhs.false:                                    ; preds = %if.end37
  %33 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size38 = getelementptr inbounds %struct.mz_zip_archive_tag* %33, i32 0, i32 0
  %34 = load i64* %m_archive_size38, align 8
  %35 = load i64* %cur_file_ofs, align 8
  %sub39 = sub i64 %34, %35
  %cmp40 = icmp uge i64 %sub39, 65557
  br i1 %cmp40, label %if.then42, label %if.end43

if.then42:                                        ; preds = %lor.lhs.false, %if.end37
  store i32 0, i32* %retval
  br label %return

if.end43:                                         ; preds = %lor.lhs.false
  %36 = load i64* %cur_file_ofs, align 8
  %sub44 = sub i64 %36, 4093
  %cmp45 = icmp ugt i64 %sub44, 0
  br i1 %cmp45, label %cond.true47, label %cond.false49

cond.true47:                                      ; preds = %if.end43
  %37 = load i64* %cur_file_ofs, align 8
  %sub48 = sub i64 %37, 4093
  br label %cond.end50

cond.false49:                                     ; preds = %if.end43
  br label %cond.end50

cond.end50:                                       ; preds = %cond.false49, %cond.true47
  %cond51 = phi i64 [ %sub48, %cond.true47 ], [ 0, %cond.false49 ]
  store i64 %cond51, i64* %cur_file_ofs, align 8
  br label %for.cond

for.end52:                                        ; preds = %if.then35
  %38 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRead53 = getelementptr inbounds %struct.mz_zip_archive_tag* %38, i32 0, i32 9
  %39 = load i64 (i8*, i64, i8*, i64)** %m_pRead53, align 8
  %40 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque54 = getelementptr inbounds %struct.mz_zip_archive_tag* %40, i32 0, i32 11
  %41 = load i8** %m_pIO_opaque54, align 8
  %42 = load i64* %cur_file_ofs, align 8
  %43 = load i8** %pBuf, align 8
  %call55 = call i64 %39(i8* %41, i64 %42, i8* %43, i64 22)
  %cmp56 = icmp ne i64 %call55, 22
  br i1 %cmp56, label %if.then58, label %if.end59

if.then58:                                        ; preds = %for.end52
  store i32 0, i32* %retval
  br label %return

if.end59:                                         ; preds = %for.end52
  %44 = load i8** %pBuf, align 8
  %add.ptr60 = getelementptr inbounds i8* %44, i64 0
  %45 = bitcast i8* %add.ptr60 to i32*
  %46 = load i32* %45, align 4
  %cmp61 = icmp ne i32 %46, 101010256
  br i1 %cmp61, label %if.then70, label %lor.lhs.false63

lor.lhs.false63:                                  ; preds = %if.end59
  %47 = load i8** %pBuf, align 8
  %add.ptr64 = getelementptr inbounds i8* %47, i64 10
  %48 = bitcast i8* %add.ptr64 to i16*
  %49 = load i16* %48, align 2
  %conv65 = zext i16 %49 to i32
  %50 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive_tag* %50, i32 0, i32 2
  store i32 %conv65, i32* %m_total_files, align 4
  %51 = load i8** %pBuf, align 8
  %add.ptr66 = getelementptr inbounds i8* %51, i64 8
  %52 = bitcast i8* %add.ptr66 to i16*
  %53 = load i16* %52, align 2
  %conv67 = zext i16 %53 to i32
  %cmp68 = icmp ne i32 %conv65, %conv67
  br i1 %cmp68, label %if.then70, label %if.end71

if.then70:                                        ; preds = %lor.lhs.false63, %if.end59
  store i32 0, i32* %retval
  br label %return

if.end71:                                         ; preds = %lor.lhs.false63
  %54 = load i8** %pBuf, align 8
  %add.ptr72 = getelementptr inbounds i8* %54, i64 4
  %55 = bitcast i8* %add.ptr72 to i16*
  %56 = load i16* %55, align 2
  %conv73 = zext i16 %56 to i32
  store i32 %conv73, i32* %num_this_disk, align 4
  %57 = load i8** %pBuf, align 8
  %add.ptr74 = getelementptr inbounds i8* %57, i64 6
  %58 = bitcast i8* %add.ptr74 to i16*
  %59 = load i16* %58, align 2
  %conv75 = zext i16 %59 to i32
  store i32 %conv75, i32* %cdir_disk_index, align 4
  %60 = load i32* %num_this_disk, align 4
  %61 = load i32* %cdir_disk_index, align 4
  %or = or i32 %60, %61
  %cmp76 = icmp ne i32 %or, 0
  br i1 %cmp76, label %land.lhs.true, label %if.end84

land.lhs.true:                                    ; preds = %if.end71
  %62 = load i32* %num_this_disk, align 4
  %cmp78 = icmp ne i32 %62, 1
  br i1 %cmp78, label %if.then83, label %lor.lhs.false80

lor.lhs.false80:                                  ; preds = %land.lhs.true
  %63 = load i32* %cdir_disk_index, align 4
  %cmp81 = icmp ne i32 %63, 1
  br i1 %cmp81, label %if.then83, label %if.end84

if.then83:                                        ; preds = %lor.lhs.false80, %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end84:                                         ; preds = %lor.lhs.false80, %if.end71
  %64 = load i8** %pBuf, align 8
  %add.ptr85 = getelementptr inbounds i8* %64, i64 12
  %65 = bitcast i8* %add.ptr85 to i32*
  %66 = load i32* %65, align 4
  store i32 %66, i32* %cdir_size, align 4
  %67 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files86 = getelementptr inbounds %struct.mz_zip_archive_tag* %67, i32 0, i32 2
  %68 = load i32* %m_total_files86, align 4
  %mul = mul i32 %68, 46
  %cmp87 = icmp ult i32 %66, %mul
  br i1 %cmp87, label %if.then89, label %if.end90

if.then89:                                        ; preds = %if.end84
  store i32 0, i32* %retval
  br label %return

if.end90:                                         ; preds = %if.end84
  %69 = load i8** %pBuf, align 8
  %add.ptr91 = getelementptr inbounds i8* %69, i64 16
  %70 = bitcast i8* %add.ptr91 to i32*
  %71 = load i32* %70, align 4
  %conv92 = zext i32 %71 to i64
  store i64 %conv92, i64* %cdir_ofs, align 8
  %72 = load i64* %cdir_ofs, align 8
  %73 = load i32* %cdir_size, align 4
  %conv93 = zext i32 %73 to i64
  %add94 = add i64 %72, %conv93
  %74 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size95 = getelementptr inbounds %struct.mz_zip_archive_tag* %74, i32 0, i32 0
  %75 = load i64* %m_archive_size95, align 8
  %cmp96 = icmp ugt i64 %add94, %75
  br i1 %cmp96, label %if.then98, label %if.end99

if.then98:                                        ; preds = %if.end90
  store i32 0, i32* %retval
  br label %return

if.end99:                                         ; preds = %if.end90
  %76 = load i64* %cdir_ofs, align 8
  %77 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive_tag* %77, i32 0, i32 1
  store i64 %76, i64* %m_central_directory_file_ofs, align 8
  %78 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files100 = getelementptr inbounds %struct.mz_zip_archive_tag* %78, i32 0, i32 2
  %79 = load i32* %m_total_files100, align 4
  %tobool101 = icmp ne i32 %79, 0
  br i1 %tobool101, label %if.then102, label %if.end223

if.then102:                                       ; preds = %if.end99
  %80 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %81 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %81, i32 0, i32 12
  %82 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag* %82, i32 0, i32 0
  %83 = load i32* %cdir_size, align 4
  %conv105 = zext i32 %83 to i64
  store %struct.mz_zip_archive_tag* %80, %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  store %struct.mz_zip_array* %m_central_dir, %struct.mz_zip_array** %pArray.addr.i, align 8
  store i64 %conv105, i64* %new_size.addr.i, align 8
  store i32 0, i32* %growing.addr.i, align 4
  %84 = load i64* %new_size.addr.i, align 8
  %85 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_capacity.i = getelementptr inbounds %struct.mz_zip_array* %85, i32 0, i32 2
  %86 = load i64* %m_capacity.i, align 8
  %cmp.i = icmp ugt i64 %84, %86
  br i1 %cmp.i, label %if.then.i, label %if.end2.i

if.then.i:                                        ; preds = %if.then102
  %87 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %88 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %89 = load i64* %new_size.addr.i, align 8
  %90 = load i32* %growing.addr.i, align 4
  %call.i = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %87, %struct.mz_zip_array* %88, i64 %89, i32 %90) #2
  %tobool.i = icmp ne i32 %call.i, 0
  br i1 %tobool.i, label %if.end.i, label %if.then1.i

if.then1.i:                                       ; preds = %if.then.i
  store i32 0, i32* %retval.i
  br label %mz_zip_array_resize.exit

if.end.i:                                         ; preds = %if.then.i
  br label %if.end2.i

if.end2.i:                                        ; preds = %if.end.i, %if.then102
  %91 = load i64* %new_size.addr.i, align 8
  %92 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_size.i = getelementptr inbounds %struct.mz_zip_array* %92, i32 0, i32 1
  store i64 %91, i64* %m_size.i, align 8
  store i32 1, i32* %retval.i
  br label %mz_zip_array_resize.exit

mz_zip_array_resize.exit:                         ; preds = %if.end2.i, %if.then1.i
  %93 = load i32* %retval.i
  %tobool107 = icmp ne i32 %93, 0
  br i1 %tobool107, label %lor.lhs.false108, label %if.then114

lor.lhs.false108:                                 ; preds = %mz_zip_array_resize.exit
  %94 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %95 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState109 = getelementptr inbounds %struct.mz_zip_archive_tag* %95, i32 0, i32 12
  %96 = load %struct.mz_zip_internal_state_tag** %m_pState109, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %96, i32 0, i32 1
  %97 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files110 = getelementptr inbounds %struct.mz_zip_archive_tag* %97, i32 0, i32 2
  %98 = load i32* %m_total_files110, align 4
  %conv111 = zext i32 %98 to i64
  store %struct.mz_zip_archive_tag* %94, %struct.mz_zip_archive_tag** %pZip.addr.i228, align 8
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i229, align 8
  store i64 %conv111, i64* %new_size.addr.i230, align 8
  store i32 0, i32* %growing.addr.i231, align 4
  %99 = load i64* %new_size.addr.i230, align 8
  %100 = load %struct.mz_zip_array** %pArray.addr.i229, align 8
  %m_capacity.i232 = getelementptr inbounds %struct.mz_zip_array* %100, i32 0, i32 2
  %101 = load i64* %m_capacity.i232, align 8
  %cmp.i233 = icmp ugt i64 %99, %101
  br i1 %cmp.i233, label %if.then.i236, label %if.end2.i240

if.then.i236:                                     ; preds = %lor.lhs.false108
  %102 = load %struct.mz_zip_archive_tag** %pZip.addr.i228, align 8
  %103 = load %struct.mz_zip_array** %pArray.addr.i229, align 8
  %104 = load i64* %new_size.addr.i230, align 8
  %105 = load i32* %growing.addr.i231, align 4
  %call.i234 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %102, %struct.mz_zip_array* %103, i64 %104, i32 %105) #2
  %tobool.i235 = icmp ne i32 %call.i234, 0
  br i1 %tobool.i235, label %if.end.i238, label %if.then1.i237

if.then1.i237:                                    ; preds = %if.then.i236
  store i32 0, i32* %retval.i227
  br label %mz_zip_array_resize.exit241

if.end.i238:                                      ; preds = %if.then.i236
  br label %if.end2.i240

if.end2.i240:                                     ; preds = %if.end.i238, %lor.lhs.false108
  %106 = load i64* %new_size.addr.i230, align 8
  %107 = load %struct.mz_zip_array** %pArray.addr.i229, align 8
  %m_size.i239 = getelementptr inbounds %struct.mz_zip_array* %107, i32 0, i32 1
  store i64 %106, i64* %m_size.i239, align 8
  store i32 1, i32* %retval.i227
  br label %mz_zip_array_resize.exit241

mz_zip_array_resize.exit241:                      ; preds = %if.end2.i240, %if.then1.i237
  %108 = load i32* %retval.i227
  %tobool113 = icmp ne i32 %108, 0
  br i1 %tobool113, label %if.end115, label %if.then114

if.then114:                                       ; preds = %mz_zip_array_resize.exit241, %mz_zip_array_resize.exit
  store i32 0, i32* %retval
  br label %return

if.end115:                                        ; preds = %mz_zip_array_resize.exit241
  %109 = load i32* %sort_central_dir, align 4
  %tobool116 = icmp ne i32 %109, 0
  br i1 %tobool116, label %if.then117, label %if.end125

if.then117:                                       ; preds = %if.end115
  %110 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %111 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState118 = getelementptr inbounds %struct.mz_zip_archive_tag* %111, i32 0, i32 12
  %112 = load %struct.mz_zip_internal_state_tag** %m_pState118, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %112, i32 0, i32 2
  %113 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files119 = getelementptr inbounds %struct.mz_zip_archive_tag* %113, i32 0, i32 2
  %114 = load i32* %m_total_files119, align 4
  %conv120 = zext i32 %114 to i64
  store %struct.mz_zip_archive_tag* %110, %struct.mz_zip_archive_tag** %pZip.addr.i243, align 8
  store %struct.mz_zip_array* %m_sorted_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i244, align 8
  store i64 %conv120, i64* %new_size.addr.i245, align 8
  store i32 0, i32* %growing.addr.i246, align 4
  %115 = load i64* %new_size.addr.i245, align 8
  %116 = load %struct.mz_zip_array** %pArray.addr.i244, align 8
  %m_capacity.i247 = getelementptr inbounds %struct.mz_zip_array* %116, i32 0, i32 2
  %117 = load i64* %m_capacity.i247, align 8
  %cmp.i248 = icmp ugt i64 %115, %117
  br i1 %cmp.i248, label %if.then.i251, label %if.end2.i255

if.then.i251:                                     ; preds = %if.then117
  %118 = load %struct.mz_zip_archive_tag** %pZip.addr.i243, align 8
  %119 = load %struct.mz_zip_array** %pArray.addr.i244, align 8
  %120 = load i64* %new_size.addr.i245, align 8
  %121 = load i32* %growing.addr.i246, align 4
  %call.i249 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %118, %struct.mz_zip_array* %119, i64 %120, i32 %121) #2
  %tobool.i250 = icmp ne i32 %call.i249, 0
  br i1 %tobool.i250, label %if.end.i253, label %if.then1.i252

if.then1.i252:                                    ; preds = %if.then.i251
  store i32 0, i32* %retval.i242
  br label %mz_zip_array_resize.exit256

if.end.i253:                                      ; preds = %if.then.i251
  br label %if.end2.i255

if.end2.i255:                                     ; preds = %if.end.i253, %if.then117
  %122 = load i64* %new_size.addr.i245, align 8
  %123 = load %struct.mz_zip_array** %pArray.addr.i244, align 8
  %m_size.i254 = getelementptr inbounds %struct.mz_zip_array* %123, i32 0, i32 1
  store i64 %122, i64* %m_size.i254, align 8
  store i32 1, i32* %retval.i242
  br label %mz_zip_array_resize.exit256

mz_zip_array_resize.exit256:                      ; preds = %if.end2.i255, %if.then1.i252
  %124 = load i32* %retval.i242
  %tobool122 = icmp ne i32 %124, 0
  br i1 %tobool122, label %if.end124, label %if.then123

if.then123:                                       ; preds = %mz_zip_array_resize.exit256
  store i32 0, i32* %retval
  br label %return

if.end124:                                        ; preds = %mz_zip_array_resize.exit256
  br label %if.end125

if.end125:                                        ; preds = %if.end124, %if.end115
  %125 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRead126 = getelementptr inbounds %struct.mz_zip_archive_tag* %125, i32 0, i32 9
  %126 = load i64 (i8*, i64, i8*, i64)** %m_pRead126, align 8
  %127 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque127 = getelementptr inbounds %struct.mz_zip_archive_tag* %127, i32 0, i32 11
  %128 = load i8** %m_pIO_opaque127, align 8
  %129 = load i64* %cdir_ofs, align 8
  %130 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState128 = getelementptr inbounds %struct.mz_zip_archive_tag* %130, i32 0, i32 12
  %131 = load %struct.mz_zip_internal_state_tag** %m_pState128, align 8
  %m_central_dir129 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %131, i32 0, i32 0
  %m_p = getelementptr inbounds %struct.mz_zip_array* %m_central_dir129, i32 0, i32 0
  %132 = load i8** %m_p, align 8
  %133 = load i32* %cdir_size, align 4
  %conv130 = zext i32 %133 to i64
  %call131 = call i64 %126(i8* %128, i64 %129, i8* %132, i64 %conv130)
  %134 = load i32* %cdir_size, align 4
  %conv132 = zext i32 %134 to i64
  %cmp133 = icmp ne i64 %call131, %conv132
  br i1 %cmp133, label %if.then135, label %if.end136

if.then135:                                       ; preds = %if.end125
  store i32 0, i32* %retval
  br label %return

if.end136:                                        ; preds = %if.end125
  %135 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState137 = getelementptr inbounds %struct.mz_zip_archive_tag* %135, i32 0, i32 12
  %136 = load %struct.mz_zip_internal_state_tag** %m_pState137, align 8
  %m_central_dir138 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %136, i32 0, i32 0
  %m_p139 = getelementptr inbounds %struct.mz_zip_array* %m_central_dir138, i32 0, i32 0
  %137 = load i8** %m_p139, align 8
  store i8* %137, i8** %p, align 8
  %138 = load i32* %cdir_size, align 4
  store i32 %138, i32* %n104, align 4
  store i32 0, i32* %i103, align 4
  br label %for.cond140

for.cond140:                                      ; preds = %for.inc221, %if.end136
  %139 = load i32* %i103, align 4
  %140 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files141 = getelementptr inbounds %struct.mz_zip_archive_tag* %140, i32 0, i32 2
  %141 = load i32* %m_total_files141, align 4
  %cmp142 = icmp ult i32 %139, %141
  br i1 %cmp142, label %for.body144, label %for.end222

for.body144:                                      ; preds = %for.cond140
  %142 = load i32* %n104, align 4
  %cmp145 = icmp ult i32 %142, 46
  br i1 %cmp145, label %if.then150, label %lor.lhs.false147

lor.lhs.false147:                                 ; preds = %for.body144
  %143 = load i8** %p, align 8
  %144 = bitcast i8* %143 to i32*
  %145 = load i32* %144, align 4
  %cmp148 = icmp ne i32 %145, 33639248
  br i1 %cmp148, label %if.then150, label %if.end151

if.then150:                                       ; preds = %lor.lhs.false147, %for.body144
  store i32 0, i32* %retval
  br label %return

if.end151:                                        ; preds = %lor.lhs.false147
  %146 = load i8** %p, align 8
  %147 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState152 = getelementptr inbounds %struct.mz_zip_archive_tag* %147, i32 0, i32 12
  %148 = load %struct.mz_zip_internal_state_tag** %m_pState152, align 8
  %m_central_dir153 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %148, i32 0, i32 0
  %m_p154 = getelementptr inbounds %struct.mz_zip_array* %m_central_dir153, i32 0, i32 0
  %149 = load i8** %m_p154, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %146 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %149 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv155 = trunc i64 %sub.ptr.sub to i32
  %150 = load i32* %i103, align 4
  %idxprom = zext i32 %150 to i64
  %151 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState156 = getelementptr inbounds %struct.mz_zip_archive_tag* %151, i32 0, i32 12
  %152 = load %struct.mz_zip_internal_state_tag** %m_pState156, align 8
  %m_central_dir_offsets157 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %152, i32 0, i32 1
  %m_p158 = getelementptr inbounds %struct.mz_zip_array* %m_central_dir_offsets157, i32 0, i32 0
  %153 = load i8** %m_p158, align 8
  %154 = bitcast i8* %153 to i32*
  %arrayidx = getelementptr inbounds i32* %154, i64 %idxprom
  store i32 %conv155, i32* %arrayidx, align 4
  %155 = load i32* %sort_central_dir, align 4
  %tobool159 = icmp ne i32 %155, 0
  br i1 %tobool159, label %if.then160, label %if.end166

if.then160:                                       ; preds = %if.end151
  %156 = load i32* %i103, align 4
  %157 = load i32* %i103, align 4
  %idxprom161 = zext i32 %157 to i64
  %158 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState162 = getelementptr inbounds %struct.mz_zip_archive_tag* %158, i32 0, i32 12
  %159 = load %struct.mz_zip_internal_state_tag** %m_pState162, align 8
  %m_sorted_central_dir_offsets163 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %159, i32 0, i32 2
  %m_p164 = getelementptr inbounds %struct.mz_zip_array* %m_sorted_central_dir_offsets163, i32 0, i32 0
  %160 = load i8** %m_p164, align 8
  %161 = bitcast i8* %160 to i32*
  %arrayidx165 = getelementptr inbounds i32* %161, i64 %idxprom161
  store i32 %156, i32* %arrayidx165, align 4
  br label %if.end166

if.end166:                                        ; preds = %if.then160, %if.end151
  %162 = load i8** %p, align 8
  %add.ptr167 = getelementptr inbounds i8* %162, i64 20
  %163 = bitcast i8* %add.ptr167 to i32*
  %164 = load i32* %163, align 4
  store i32 %164, i32* %comp_size, align 4
  %165 = load i8** %p, align 8
  %add.ptr168 = getelementptr inbounds i8* %165, i64 24
  %166 = bitcast i8* %add.ptr168 to i32*
  %167 = load i32* %166, align 4
  store i32 %167, i32* %decomp_size, align 4
  %168 = load i8** %p, align 8
  %add.ptr169 = getelementptr inbounds i8* %168, i64 10
  %169 = bitcast i8* %add.ptr169 to i32*
  %170 = load i32* %169, align 4
  %tobool170 = icmp ne i32 %170, 0
  br i1 %tobool170, label %lor.lhs.false174, label %land.lhs.true171

land.lhs.true171:                                 ; preds = %if.end166
  %171 = load i32* %decomp_size, align 4
  %172 = load i32* %comp_size, align 4
  %cmp172 = icmp ne i32 %171, %172
  br i1 %cmp172, label %if.then184, label %lor.lhs.false174

lor.lhs.false174:                                 ; preds = %land.lhs.true171, %if.end166
  %173 = load i32* %decomp_size, align 4
  %tobool175 = icmp ne i32 %173, 0
  br i1 %tobool175, label %land.lhs.true176, label %lor.lhs.false178

land.lhs.true176:                                 ; preds = %lor.lhs.false174
  %174 = load i32* %comp_size, align 4
  %tobool177 = icmp ne i32 %174, 0
  br i1 %tobool177, label %lor.lhs.false178, label %if.then184

lor.lhs.false178:                                 ; preds = %land.lhs.true176, %lor.lhs.false174
  %175 = load i32* %decomp_size, align 4
  %cmp179 = icmp eq i32 %175, -1
  br i1 %cmp179, label %if.then184, label %lor.lhs.false181

lor.lhs.false181:                                 ; preds = %lor.lhs.false178
  %176 = load i32* %comp_size, align 4
  %cmp182 = icmp eq i32 %176, -1
  br i1 %cmp182, label %if.then184, label %if.end185

if.then184:                                       ; preds = %lor.lhs.false181, %lor.lhs.false178, %land.lhs.true176, %land.lhs.true171
  store i32 0, i32* %retval
  br label %return

if.end185:                                        ; preds = %lor.lhs.false181
  %177 = load i8** %p, align 8
  %add.ptr186 = getelementptr inbounds i8* %177, i64 34
  %178 = bitcast i8* %add.ptr186 to i16*
  %179 = load i16* %178, align 2
  %conv187 = zext i16 %179 to i32
  store i32 %conv187, i32* %disk_index, align 4
  %180 = load i32* %disk_index, align 4
  %181 = load i32* %num_this_disk, align 4
  %cmp188 = icmp ne i32 %180, %181
  br i1 %cmp188, label %land.lhs.true190, label %if.end194

land.lhs.true190:                                 ; preds = %if.end185
  %182 = load i32* %disk_index, align 4
  %cmp191 = icmp ne i32 %182, 1
  br i1 %cmp191, label %if.then193, label %if.end194

if.then193:                                       ; preds = %land.lhs.true190
  store i32 0, i32* %retval
  br label %return

if.end194:                                        ; preds = %land.lhs.true190, %if.end185
  %183 = load i8** %p, align 8
  %add.ptr195 = getelementptr inbounds i8* %183, i64 42
  %184 = bitcast i8* %add.ptr195 to i32*
  %185 = load i32* %184, align 4
  %conv196 = zext i32 %185 to i64
  %add197 = add i64 %conv196, 30
  %186 = load i32* %comp_size, align 4
  %conv198 = zext i32 %186 to i64
  %add199 = add i64 %add197, %conv198
  %187 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size200 = getelementptr inbounds %struct.mz_zip_archive_tag* %187, i32 0, i32 0
  %188 = load i64* %m_archive_size200, align 8
  %cmp201 = icmp ugt i64 %add199, %188
  br i1 %cmp201, label %if.then203, label %if.end204

if.then203:                                       ; preds = %if.end194
  store i32 0, i32* %retval
  br label %return

if.end204:                                        ; preds = %if.end194
  %189 = load i8** %p, align 8
  %add.ptr205 = getelementptr inbounds i8* %189, i64 28
  %190 = bitcast i8* %add.ptr205 to i16*
  %191 = load i16* %190, align 2
  %conv206 = zext i16 %191 to i32
  %add207 = add nsw i32 46, %conv206
  %192 = load i8** %p, align 8
  %add.ptr208 = getelementptr inbounds i8* %192, i64 30
  %193 = bitcast i8* %add.ptr208 to i16*
  %194 = load i16* %193, align 2
  %conv209 = zext i16 %194 to i32
  %add210 = add nsw i32 %add207, %conv209
  %195 = load i8** %p, align 8
  %add.ptr211 = getelementptr inbounds i8* %195, i64 32
  %196 = bitcast i8* %add.ptr211 to i16*
  %197 = load i16* %196, align 2
  %conv212 = zext i16 %197 to i32
  %add213 = add nsw i32 %add210, %conv212
  store i32 %add213, i32* %total_header_size, align 4
  %198 = load i32* %n104, align 4
  %cmp214 = icmp ugt i32 %add213, %198
  br i1 %cmp214, label %if.then216, label %if.end217

if.then216:                                       ; preds = %if.end204
  store i32 0, i32* %retval
  br label %return

if.end217:                                        ; preds = %if.end204
  %199 = load i32* %total_header_size, align 4
  %200 = load i32* %n104, align 4
  %sub218 = sub i32 %200, %199
  store i32 %sub218, i32* %n104, align 4
  %201 = load i32* %total_header_size, align 4
  %202 = load i8** %p, align 8
  %idx.ext219 = zext i32 %201 to i64
  %add.ptr220 = getelementptr inbounds i8* %202, i64 %idx.ext219
  store i8* %add.ptr220, i8** %p, align 8
  br label %for.inc221

for.inc221:                                       ; preds = %if.end217
  %203 = load i32* %i103, align 4
  %inc = add i32 %203, 1
  store i32 %inc, i32* %i103, align 4
  br label %for.cond140

for.end222:                                       ; preds = %for.cond140
  br label %if.end223

if.end223:                                        ; preds = %for.end222, %if.end99
  %204 = load i32* %sort_central_dir, align 4
  %tobool224 = icmp ne i32 %204, 0
  br i1 %tobool224, label %if.then225, label %if.end226

if.then225:                                       ; preds = %if.end223
  %205 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  call void @mz_zip_reader_sort_central_dir_offsets_by_filename(%struct.mz_zip_archive_tag* %205)
  br label %if.end226

if.end226:                                        ; preds = %if.then225, %if.end223
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end226, %if.then216, %if.then203, %if.then193, %if.then184, %if.then150, %if.then135, %if.then123, %if.then114, %if.then98, %if.then89, %if.then83, %if.then70, %if.then58, %if.then42, %if.then23, %if.then
  %206 = load i32* %retval
  ret i32 %206
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_end(%struct.mz_zip_archive_tag* %pZip) #0 {
entry:
  %pZip.addr.i25 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i26 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i20 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i21 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive_tag* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %1, i32 0, i32 12
  %2 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 5
  %4 = load i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %tobool3 = icmp ne i8* (i8*, i64, i64)* %4, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %5 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive_tag* %5, i32 0, i32 6
  %6 = load void (i8*, i8*)** %m_pFree, align 8
  %tobool5 = icmp ne void (i8*, i8*)* %6, null
  br i1 %tobool5, label %lor.lhs.false6, label %if.then

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %7 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive_tag* %7, i32 0, i32 3
  %8 = load i32* %m_zip_mode, align 4
  %cmp = icmp ne i32 %8, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false6
  %9 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState7 = getelementptr inbounds %struct.mz_zip_archive_tag* %9, i32 0, i32 12
  %10 = load %struct.mz_zip_internal_state_tag** %m_pState7, align 8
  %tobool8 = icmp ne %struct.mz_zip_internal_state_tag* %10, null
  br i1 %tobool8, label %if.then9, label %if.end18

if.then9:                                         ; preds = %if.end
  %11 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState10 = getelementptr inbounds %struct.mz_zip_archive_tag* %11, i32 0, i32 12
  %12 = load %struct.mz_zip_internal_state_tag** %m_pState10, align 8
  store %struct.mz_zip_internal_state_tag* %12, %struct.mz_zip_internal_state_tag** %pState, align 8
  %13 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState11 = getelementptr inbounds %struct.mz_zip_archive_tag* %13, i32 0, i32 12
  store %struct.mz_zip_internal_state_tag* null, %struct.mz_zip_internal_state_tag** %m_pState11, align 8
  %14 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %15 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag* %15, i32 0, i32 0
  store %struct.mz_zip_archive_tag* %14, %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  store %struct.mz_zip_array* %m_central_dir, %struct.mz_zip_array** %pArray.addr.i, align 8
  %16 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pFree.i = getelementptr inbounds %struct.mz_zip_archive_tag* %16, i32 0, i32 6
  %17 = load void (i8*, i8*)** %m_pFree.i, align 8
  %18 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pAlloc_opaque.i = getelementptr inbounds %struct.mz_zip_archive_tag* %18, i32 0, i32 8
  %19 = load i8** %m_pAlloc_opaque.i, align 8
  %20 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_p.i = getelementptr inbounds %struct.mz_zip_array* %20, i32 0, i32 0
  %21 = load i8** %m_p.i, align 8
  call void %17(i8* %19, i8* %21) #2
  %22 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %23 = bitcast %struct.mz_zip_array* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 32, i32 8, i1 false) #2
  %24 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %25 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %25, i32 0, i32 1
  store %struct.mz_zip_archive_tag* %24, %struct.mz_zip_archive_tag** %pZip.addr.i20, align 8
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i21, align 8
  %26 = load %struct.mz_zip_archive_tag** %pZip.addr.i20, align 8
  %m_pFree.i22 = getelementptr inbounds %struct.mz_zip_archive_tag* %26, i32 0, i32 6
  %27 = load void (i8*, i8*)** %m_pFree.i22, align 8
  %28 = load %struct.mz_zip_archive_tag** %pZip.addr.i20, align 8
  %m_pAlloc_opaque.i23 = getelementptr inbounds %struct.mz_zip_archive_tag* %28, i32 0, i32 8
  %29 = load i8** %m_pAlloc_opaque.i23, align 8
  %30 = load %struct.mz_zip_array** %pArray.addr.i21, align 8
  %m_p.i24 = getelementptr inbounds %struct.mz_zip_array* %30, i32 0, i32 0
  %31 = load i8** %m_p.i24, align 8
  call void %27(i8* %29, i8* %31) #2
  %32 = load %struct.mz_zip_array** %pArray.addr.i21, align 8
  %33 = bitcast %struct.mz_zip_array* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* %33, i8 0, i64 32, i32 8, i1 false) #2
  %34 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %35 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %35, i32 0, i32 2
  store %struct.mz_zip_archive_tag* %34, %struct.mz_zip_archive_tag** %pZip.addr.i25, align 8
  store %struct.mz_zip_array* %m_sorted_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i26, align 8
  %36 = load %struct.mz_zip_archive_tag** %pZip.addr.i25, align 8
  %m_pFree.i27 = getelementptr inbounds %struct.mz_zip_archive_tag* %36, i32 0, i32 6
  %37 = load void (i8*, i8*)** %m_pFree.i27, align 8
  %38 = load %struct.mz_zip_archive_tag** %pZip.addr.i25, align 8
  %m_pAlloc_opaque.i28 = getelementptr inbounds %struct.mz_zip_archive_tag* %38, i32 0, i32 8
  %39 = load i8** %m_pAlloc_opaque.i28, align 8
  %40 = load %struct.mz_zip_array** %pArray.addr.i26, align 8
  %m_p.i29 = getelementptr inbounds %struct.mz_zip_array* %40, i32 0, i32 0
  %41 = load i8** %m_p.i29, align 8
  call void %37(i8* %39, i8* %41) #2
  %42 = load %struct.mz_zip_array** %pArray.addr.i26, align 8
  %43 = bitcast %struct.mz_zip_array* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* %43, i8 0, i64 32, i32 8, i1 false) #2
  %44 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag* %44, i32 0, i32 3
  %45 = load %struct._IO_FILE** %m_pFile, align 8
  %tobool12 = icmp ne %struct._IO_FILE* %45, null
  br i1 %tobool12, label %if.then13, label %if.end16

if.then13:                                        ; preds = %if.then9
  %46 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile14 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %46, i32 0, i32 3
  %47 = load %struct._IO_FILE** %m_pFile14, align 8
  %call = call i32 @fclose(%struct._IO_FILE* %47)
  %48 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile15 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %48, i32 0, i32 3
  store %struct._IO_FILE* null, %struct._IO_FILE** %m_pFile15, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then13, %if.then9
  %49 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree17 = getelementptr inbounds %struct.mz_zip_archive_tag* %49, i32 0, i32 6
  %50 = load void (i8*, i8*)** %m_pFree17, align 8
  %51 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %51, i32 0, i32 8
  %52 = load i8** %m_pAlloc_opaque, align 8
  %53 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %54 = bitcast %struct.mz_zip_internal_state_tag* %53 to i8*
  call void %50(i8* %52, i8* %54)
  br label %if.end18

if.end18:                                         ; preds = %if.end16, %if.end
  %55 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode19 = getelementptr inbounds %struct.mz_zip_archive_tag* %55, i32 0, i32 3
  store i32 0, i32* %m_zip_mode19, align 4
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end18, %if.then
  %56 = load i32* %retval
  ret i32 %56
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_init_mem(%struct.mz_zip_archive_tag* %pZip, i8* %pMem, i64 %size, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pMem.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pMem, i8** %pMem.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_init_internal(%struct.mz_zip_archive_tag* %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64* %size.addr, align 8
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 0
  store i64 %2, i64* %m_archive_size, align 8
  %4 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive_tag* %4, i32 0, i32 9
  store i64 (i8*, i64, i8*, i64)* @mz_zip_mem_read_func, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %5 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %6 = bitcast %struct.mz_zip_archive_tag* %5 to i8*
  %7 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %7, i32 0, i32 11
  store i8* %6, i8** %m_pIO_opaque, align 8
  %8 = load i8** %pMem.addr, align 8
  %9 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %9, i32 0, i32 12
  %10 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag* %10, i32 0, i32 4
  store i8* %8, i8** %m_pMem, align 8
  %11 = load i64* %size.addr, align 8
  %12 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState1 = getelementptr inbounds %struct.mz_zip_archive_tag* %12, i32 0, i32 12
  %13 = load %struct.mz_zip_internal_state_tag** %m_pState1, align 8
  %m_mem_size = getelementptr inbounds %struct.mz_zip_internal_state_tag* %13, i32 0, i32 5
  store i64 %11, i64* %m_mem_size, align 8
  %14 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %15 = load i32* %flags.addr, align 4
  %call2 = call i32 @mz_zip_reader_read_central_dir(%struct.mz_zip_archive_tag* %14, i32 %15)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end6, label %if.then4

if.then4:                                         ; preds = %if.end
  %16 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %call5 = call i32 @mz_zip_reader_end(%struct.mz_zip_archive_tag* %16)
  store i32 0, i32* %retval
  br label %return

if.end6:                                          ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %17 = load i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define internal i64 @mz_zip_mem_read_func(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pZip = alloca %struct.mz_zip_archive_tag*, align 8
  %s = alloca i64, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8** %pOpaque.addr, align 8
  %1 = bitcast i8* %0 to %struct.mz_zip_archive_tag*
  store %struct.mz_zip_archive_tag* %1, %struct.mz_zip_archive_tag** %pZip, align 8
  %2 = load i64* %file_ofs.addr, align 8
  %3 = load %struct.mz_zip_archive_tag** %pZip, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 0
  %4 = load i64* %m_archive_size, align 8
  %cmp = icmp uge i64 %2, %4
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end7

cond.false:                                       ; preds = %entry
  %5 = load %struct.mz_zip_archive_tag** %pZip, align 8
  %m_archive_size1 = getelementptr inbounds %struct.mz_zip_archive_tag* %5, i32 0, i32 0
  %6 = load i64* %m_archive_size1, align 8
  %7 = load i64* %file_ofs.addr, align 8
  %sub = sub i64 %6, %7
  %8 = load i64* %n.addr, align 8
  %cmp2 = icmp ult i64 %sub, %8
  br i1 %cmp2, label %cond.true3, label %cond.false6

cond.true3:                                       ; preds = %cond.false
  %9 = load %struct.mz_zip_archive_tag** %pZip, align 8
  %m_archive_size4 = getelementptr inbounds %struct.mz_zip_archive_tag* %9, i32 0, i32 0
  %10 = load i64* %m_archive_size4, align 8
  %11 = load i64* %file_ofs.addr, align 8
  %sub5 = sub i64 %10, %11
  br label %cond.end

cond.false6:                                      ; preds = %cond.false
  %12 = load i64* %n.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true3
  %cond = phi i64 [ %sub5, %cond.true3 ], [ %12, %cond.false6 ]
  br label %cond.end7

cond.end7:                                        ; preds = %cond.end, %cond.true
  %cond8 = phi i64 [ 0, %cond.true ], [ %cond, %cond.end ]
  store i64 %cond8, i64* %s, align 8
  %13 = load i8** %pBuf.addr, align 8
  %14 = load %struct.mz_zip_archive_tag** %pZip, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %14, i32 0, i32 12
  %15 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag* %15, i32 0, i32 4
  %16 = load i8** %m_pMem, align 8
  %17 = load i64* %file_ofs.addr, align 8
  %add.ptr = getelementptr inbounds i8* %16, i64 %17
  %18 = load i64* %s, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %add.ptr, i64 %18, i32 1, i1 false)
  %19 = load i64* %s, align 8
  ret i64 %19
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_init_file(%struct.mz_zip_archive_tag* %pZip, i8* %pFilename, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pFilename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %file_size = alloca i64, align 8
  %pFile = alloca %struct._IO_FILE*, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8** %pFilename.addr, align 8
  %call = call %struct._IO_FILE* @fopen(i8* %0, i8* getelementptr inbounds ([3 x i8]* @.str17, i32 0, i32 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %pFile, align 8
  %1 = load %struct._IO_FILE** %pFile, align 8
  %tobool = icmp ne %struct._IO_FILE* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._IO_FILE** %pFile, align 8
  %call1 = call i32 @fseeko(%struct._IO_FILE* %2, i64 0, i32 2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %3 = load %struct._IO_FILE** %pFile, align 8
  %call4 = call i32 @fclose(%struct._IO_FILE* %3)
  store i32 0, i32* %retval
  br label %return

if.end5:                                          ; preds = %if.end
  %4 = load %struct._IO_FILE** %pFile, align 8
  %call6 = call i64 @ftello(%struct._IO_FILE* %4)
  store i64 %call6, i64* %file_size, align 8
  %5 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %6 = load i32* %flags.addr, align 4
  %call7 = call i32 @mz_zip_reader_init_internal(%struct.mz_zip_archive_tag* %5, i32 %6)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end11, label %if.then9

if.then9:                                         ; preds = %if.end5
  %7 = load %struct._IO_FILE** %pFile, align 8
  %call10 = call i32 @fclose(%struct._IO_FILE* %7)
  store i32 0, i32* %retval
  br label %return

if.end11:                                         ; preds = %if.end5
  %8 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive_tag* %8, i32 0, i32 9
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_read_func, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %9 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %10 = bitcast %struct.mz_zip_archive_tag* %9 to i8*
  %11 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %11, i32 0, i32 11
  store i8* %10, i8** %m_pIO_opaque, align 8
  %12 = load %struct._IO_FILE** %pFile, align 8
  %13 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %13, i32 0, i32 12
  %14 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag* %14, i32 0, i32 3
  store %struct._IO_FILE* %12, %struct._IO_FILE** %m_pFile, align 8
  %15 = load i64* %file_size, align 8
  %16 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %16, i32 0, i32 0
  store i64 %15, i64* %m_archive_size, align 8
  %17 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %18 = load i32* %flags.addr, align 4
  %call12 = call i32 @mz_zip_reader_read_central_dir(%struct.mz_zip_archive_tag* %17, i32 %18)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.end16, label %if.then14

if.then14:                                        ; preds = %if.end11
  %19 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %call15 = call i32 @mz_zip_reader_end(%struct.mz_zip_archive_tag* %19)
  store i32 0, i32* %retval
  br label %return

if.end16:                                         ; preds = %if.end11
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end16, %if.then14, %if.then9, %if.then3, %if.then
  %20 = load i32* %retval
  ret i32 %20
}

declare %struct._IO_FILE* @fopen(i8*, i8*) #4

declare i32 @fseeko(%struct._IO_FILE*, i64, i32) #4

declare i32 @fclose(%struct._IO_FILE*) #4

declare i64 @ftello(%struct._IO_FILE*) #4

; Function Attrs: nounwind uwtable
define internal i64 @mz_zip_file_read_func(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pZip = alloca %struct.mz_zip_archive_tag*, align 8
  %cur_ofs = alloca i64, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8** %pOpaque.addr, align 8
  %1 = bitcast i8* %0 to %struct.mz_zip_archive_tag*
  store %struct.mz_zip_archive_tag* %1, %struct.mz_zip_archive_tag** %pZip, align 8
  %2 = load %struct.mz_zip_archive_tag** %pZip, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %2, i32 0, i32 12
  %3 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag* %3, i32 0, i32 3
  %4 = load %struct._IO_FILE** %m_pFile, align 8
  %call = call i64 @ftello(%struct._IO_FILE* %4)
  store i64 %call, i64* %cur_ofs, align 8
  %5 = load i64* %file_ofs.addr, align 8
  %cmp = icmp slt i64 %5, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load i64* %cur_ofs, align 8
  %7 = load i64* %file_ofs.addr, align 8
  %cmp1 = icmp ne i64 %6, %7
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %8 = load %struct.mz_zip_archive_tag** %pZip, align 8
  %m_pState2 = getelementptr inbounds %struct.mz_zip_archive_tag* %8, i32 0, i32 12
  %9 = load %struct.mz_zip_internal_state_tag** %m_pState2, align 8
  %m_pFile3 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %9, i32 0, i32 3
  %10 = load %struct._IO_FILE** %m_pFile3, align 8
  %11 = load i64* %file_ofs.addr, align 8
  %call4 = call i32 @fseeko(%struct._IO_FILE* %10, i64 %11, i32 0)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %entry
  store i64 0, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %12 = load i8** %pBuf.addr, align 8
  %13 = load i64* %n.addr, align 8
  %14 = load %struct.mz_zip_archive_tag** %pZip, align 8
  %m_pState5 = getelementptr inbounds %struct.mz_zip_archive_tag* %14, i32 0, i32 12
  %15 = load %struct.mz_zip_internal_state_tag** %m_pState5, align 8
  %m_pFile6 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %15, i32 0, i32 3
  %16 = load %struct._IO_FILE** %m_pFile6, align 8
  %call7 = call i64 @fread(i8* %12, i64 1, i64 %13, %struct._IO_FILE* %16)
  store i64 %call7, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %17 = load i64* %retval
  ret i64 %17
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_get_num_files(%struct.mz_zip_archive_tag* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive_tag* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive_tag* %1, i32 0, i32 2
  %2 = load i32* %m_total_files, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_is_file_encrypted(%struct.mz_zip_archive_tag* %pZip, i32 %file_index) #0 {
entry:
  %retval.i = alloca i8*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr = alloca i32, align 4
  %m_bit_flag = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i32* %file_index.addr, align 4
  store %struct.mz_zip_archive_tag* %0, %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  store i32 %1, i32* %file_index.addr.i, align 4
  %2 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive_tag* %2, null
  br i1 %tobool.i, label %lor.lhs.false.i, label %if.then.i

lor.lhs.false.i:                                  ; preds = %entry
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState.i = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 12
  %4 = load %struct.mz_zip_internal_state_tag** %m_pState.i, align 8
  %tobool1.i = icmp ne %struct.mz_zip_internal_state_tag* %4, null
  br i1 %tobool1.i, label %lor.lhs.false2.i, label %if.then.i

lor.lhs.false2.i:                                 ; preds = %lor.lhs.false.i
  %5 = load i32* %file_index.addr.i, align 4
  %6 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_total_files.i = getelementptr inbounds %struct.mz_zip_archive_tag* %6, i32 0, i32 2
  %7 = load i32* %m_total_files.i, align 4
  %cmp.i = icmp uge i32 %5, %7
  br i1 %cmp.i, label %if.then.i, label %lor.lhs.false3.i

lor.lhs.false3.i:                                 ; preds = %lor.lhs.false2.i
  %8 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_zip_mode.i = getelementptr inbounds %struct.mz_zip_archive_tag* %8, i32 0, i32 3
  %9 = load i32* %m_zip_mode.i, align 4
  %cmp4.i = icmp ne i32 %9, 1
  br i1 %cmp4.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %lor.lhs.false3.i, %lor.lhs.false2.i, %lor.lhs.false.i, %entry
  store i8* null, i8** %retval.i
  br label %mz_zip_reader_get_cdh.exit

if.end.i:                                         ; preds = %lor.lhs.false3.i
  %10 = load i32* %file_index.addr.i, align 4
  %idxprom.i = zext i32 %10 to i64
  %11 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState5.i = getelementptr inbounds %struct.mz_zip_archive_tag* %11, i32 0, i32 12
  %12 = load %struct.mz_zip_internal_state_tag** %m_pState5.i, align 8
  %m_central_dir_offsets.i = getelementptr inbounds %struct.mz_zip_internal_state_tag* %12, i32 0, i32 1
  %m_p.i = getelementptr inbounds %struct.mz_zip_array* %m_central_dir_offsets.i, i32 0, i32 0
  %13 = load i8** %m_p.i, align 8
  %14 = bitcast i8* %13 to i32*
  %arrayidx.i = getelementptr inbounds i32* %14, i64 %idxprom.i
  %15 = load i32* %arrayidx.i, align 4
  %idxprom6.i = zext i32 %15 to i64
  %16 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState7.i = getelementptr inbounds %struct.mz_zip_archive_tag* %16, i32 0, i32 12
  %17 = load %struct.mz_zip_internal_state_tag** %m_pState7.i, align 8
  %m_central_dir.i = getelementptr inbounds %struct.mz_zip_internal_state_tag* %17, i32 0, i32 0
  %m_p8.i = getelementptr inbounds %struct.mz_zip_array* %m_central_dir.i, i32 0, i32 0
  %18 = load i8** %m_p8.i, align 8
  %arrayidx9.i = getelementptr inbounds i8* %18, i64 %idxprom6.i
  store i8* %arrayidx9.i, i8** %retval.i
  br label %mz_zip_reader_get_cdh.exit

mz_zip_reader_get_cdh.exit:                       ; preds = %if.end.i, %if.then.i
  %19 = load i8** %retval.i
  store i8* %19, i8** %p, align 8
  %20 = load i8** %p, align 8
  %tobool = icmp ne i8* %20, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %mz_zip_reader_get_cdh.exit
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %mz_zip_reader_get_cdh.exit
  %21 = load i8** %p, align 8
  %add.ptr = getelementptr inbounds i8* %21, i64 8
  %22 = bitcast i8* %add.ptr to i16*
  %23 = load i16* %22, align 2
  %conv = zext i16 %23 to i32
  store i32 %conv, i32* %m_bit_flag, align 4
  %24 = load i32* %m_bit_flag, align 4
  %and = and i32 %24, 1
  store i32 %and, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %25 = load i32* %retval
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_is_file_a_directory(%struct.mz_zip_archive_tag* %pZip, i32 %file_index) #0 {
entry:
  %retval.i = alloca i8*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr = alloca i32, align 4
  %filename_len = alloca i32, align 4
  %external_attr = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i32* %file_index.addr, align 4
  store %struct.mz_zip_archive_tag* %0, %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  store i32 %1, i32* %file_index.addr.i, align 4
  %2 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive_tag* %2, null
  br i1 %tobool.i, label %lor.lhs.false.i, label %if.then.i

lor.lhs.false.i:                                  ; preds = %entry
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState.i = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 12
  %4 = load %struct.mz_zip_internal_state_tag** %m_pState.i, align 8
  %tobool1.i = icmp ne %struct.mz_zip_internal_state_tag* %4, null
  br i1 %tobool1.i, label %lor.lhs.false2.i, label %if.then.i

lor.lhs.false2.i:                                 ; preds = %lor.lhs.false.i
  %5 = load i32* %file_index.addr.i, align 4
  %6 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_total_files.i = getelementptr inbounds %struct.mz_zip_archive_tag* %6, i32 0, i32 2
  %7 = load i32* %m_total_files.i, align 4
  %cmp.i = icmp uge i32 %5, %7
  br i1 %cmp.i, label %if.then.i, label %lor.lhs.false3.i

lor.lhs.false3.i:                                 ; preds = %lor.lhs.false2.i
  %8 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_zip_mode.i = getelementptr inbounds %struct.mz_zip_archive_tag* %8, i32 0, i32 3
  %9 = load i32* %m_zip_mode.i, align 4
  %cmp4.i = icmp ne i32 %9, 1
  br i1 %cmp4.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %lor.lhs.false3.i, %lor.lhs.false2.i, %lor.lhs.false.i, %entry
  store i8* null, i8** %retval.i
  br label %mz_zip_reader_get_cdh.exit

if.end.i:                                         ; preds = %lor.lhs.false3.i
  %10 = load i32* %file_index.addr.i, align 4
  %idxprom.i = zext i32 %10 to i64
  %11 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState5.i = getelementptr inbounds %struct.mz_zip_archive_tag* %11, i32 0, i32 12
  %12 = load %struct.mz_zip_internal_state_tag** %m_pState5.i, align 8
  %m_central_dir_offsets.i = getelementptr inbounds %struct.mz_zip_internal_state_tag* %12, i32 0, i32 1
  %m_p.i = getelementptr inbounds %struct.mz_zip_array* %m_central_dir_offsets.i, i32 0, i32 0
  %13 = load i8** %m_p.i, align 8
  %14 = bitcast i8* %13 to i32*
  %arrayidx.i = getelementptr inbounds i32* %14, i64 %idxprom.i
  %15 = load i32* %arrayidx.i, align 4
  %idxprom6.i = zext i32 %15 to i64
  %16 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState7.i = getelementptr inbounds %struct.mz_zip_archive_tag* %16, i32 0, i32 12
  %17 = load %struct.mz_zip_internal_state_tag** %m_pState7.i, align 8
  %m_central_dir.i = getelementptr inbounds %struct.mz_zip_internal_state_tag* %17, i32 0, i32 0
  %m_p8.i = getelementptr inbounds %struct.mz_zip_array* %m_central_dir.i, i32 0, i32 0
  %18 = load i8** %m_p8.i, align 8
  %arrayidx9.i = getelementptr inbounds i8* %18, i64 %idxprom6.i
  store i8* %arrayidx9.i, i8** %retval.i
  br label %mz_zip_reader_get_cdh.exit

mz_zip_reader_get_cdh.exit:                       ; preds = %if.end.i, %if.then.i
  %19 = load i8** %retval.i
  store i8* %19, i8** %p, align 8
  %20 = load i8** %p, align 8
  %tobool = icmp ne i8* %20, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %mz_zip_reader_get_cdh.exit
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %mz_zip_reader_get_cdh.exit
  %21 = load i8** %p, align 8
  %add.ptr = getelementptr inbounds i8* %21, i64 28
  %22 = bitcast i8* %add.ptr to i16*
  %23 = load i16* %22, align 2
  %conv = zext i16 %23 to i32
  store i32 %conv, i32* %filename_len, align 4
  %24 = load i32* %filename_len, align 4
  %tobool1 = icmp ne i32 %24, 0
  br i1 %tobool1, label %if.then2, label %if.end10

if.then2:                                         ; preds = %if.end
  %25 = load i8** %p, align 8
  %add.ptr3 = getelementptr inbounds i8* %25, i64 46
  %26 = load i32* %filename_len, align 4
  %idx.ext = zext i32 %26 to i64
  %add.ptr4 = getelementptr inbounds i8* %add.ptr3, i64 %idx.ext
  %add.ptr5 = getelementptr inbounds i8* %add.ptr4, i64 -1
  %27 = load i8* %add.ptr5, align 1
  %conv6 = zext i8 %27 to i32
  %cmp = icmp eq i32 %conv6, 47
  br i1 %cmp, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.then2
  store i32 1, i32* %retval
  br label %return

if.end9:                                          ; preds = %if.then2
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.end
  %28 = load i8** %p, align 8
  %add.ptr11 = getelementptr inbounds i8* %28, i64 38
  %29 = bitcast i8* %add.ptr11 to i32*
  %30 = load i32* %29, align 4
  store i32 %30, i32* %external_attr, align 4
  %31 = load i32* %external_attr, align 4
  %and = and i32 %31, 16
  %cmp12 = icmp ne i32 %and, 0
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end10
  store i32 1, i32* %retval
  br label %return

if.end15:                                         ; preds = %if.end10
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end15, %if.then14, %if.then8, %if.then
  %32 = load i32* %retval
  ret i32 %32
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive_tag* %pZip, i32 %file_index, %struct.mz_zip_archive_file_stat* %pStat) #0 {
entry:
  %retval.i = alloca i8*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr = alloca i32, align 4
  %pStat.addr = alloca %struct.mz_zip_archive_file_stat*, align 8
  %n = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store %struct.mz_zip_archive_file_stat* %pStat, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i32* %file_index.addr, align 4
  store %struct.mz_zip_archive_tag* %0, %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  store i32 %1, i32* %file_index.addr.i, align 4
  %2 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive_tag* %2, null
  br i1 %tobool.i, label %lor.lhs.false.i, label %if.then.i

lor.lhs.false.i:                                  ; preds = %entry
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState.i = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 12
  %4 = load %struct.mz_zip_internal_state_tag** %m_pState.i, align 8
  %tobool1.i = icmp ne %struct.mz_zip_internal_state_tag* %4, null
  br i1 %tobool1.i, label %lor.lhs.false2.i, label %if.then.i

lor.lhs.false2.i:                                 ; preds = %lor.lhs.false.i
  %5 = load i32* %file_index.addr.i, align 4
  %6 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_total_files.i = getelementptr inbounds %struct.mz_zip_archive_tag* %6, i32 0, i32 2
  %7 = load i32* %m_total_files.i, align 4
  %cmp.i = icmp uge i32 %5, %7
  br i1 %cmp.i, label %if.then.i, label %lor.lhs.false3.i

lor.lhs.false3.i:                                 ; preds = %lor.lhs.false2.i
  %8 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_zip_mode.i = getelementptr inbounds %struct.mz_zip_archive_tag* %8, i32 0, i32 3
  %9 = load i32* %m_zip_mode.i, align 4
  %cmp4.i = icmp ne i32 %9, 1
  br i1 %cmp4.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %lor.lhs.false3.i, %lor.lhs.false2.i, %lor.lhs.false.i, %entry
  store i8* null, i8** %retval.i
  br label %mz_zip_reader_get_cdh.exit

if.end.i:                                         ; preds = %lor.lhs.false3.i
  %10 = load i32* %file_index.addr.i, align 4
  %idxprom.i = zext i32 %10 to i64
  %11 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState5.i = getelementptr inbounds %struct.mz_zip_archive_tag* %11, i32 0, i32 12
  %12 = load %struct.mz_zip_internal_state_tag** %m_pState5.i, align 8
  %m_central_dir_offsets.i = getelementptr inbounds %struct.mz_zip_internal_state_tag* %12, i32 0, i32 1
  %m_p.i = getelementptr inbounds %struct.mz_zip_array* %m_central_dir_offsets.i, i32 0, i32 0
  %13 = load i8** %m_p.i, align 8
  %14 = bitcast i8* %13 to i32*
  %arrayidx.i = getelementptr inbounds i32* %14, i64 %idxprom.i
  %15 = load i32* %arrayidx.i, align 4
  %idxprom6.i = zext i32 %15 to i64
  %16 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState7.i = getelementptr inbounds %struct.mz_zip_archive_tag* %16, i32 0, i32 12
  %17 = load %struct.mz_zip_internal_state_tag** %m_pState7.i, align 8
  %m_central_dir.i = getelementptr inbounds %struct.mz_zip_internal_state_tag* %17, i32 0, i32 0
  %m_p8.i = getelementptr inbounds %struct.mz_zip_array* %m_central_dir.i, i32 0, i32 0
  %18 = load i8** %m_p8.i, align 8
  %arrayidx9.i = getelementptr inbounds i8* %18, i64 %idxprom6.i
  store i8* %arrayidx9.i, i8** %retval.i
  br label %mz_zip_reader_get_cdh.exit

mz_zip_reader_get_cdh.exit:                       ; preds = %if.end.i, %if.then.i
  %19 = load i8** %retval.i
  store i8* %19, i8** %p, align 8
  %20 = load i8** %p, align 8
  %tobool = icmp ne i8* %20, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %mz_zip_reader_get_cdh.exit
  %21 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %tobool1 = icmp ne %struct.mz_zip_archive_file_stat* %21, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %mz_zip_reader_get_cdh.exit
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %22 = load i32* %file_index.addr, align 4
  %23 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_file_index = getelementptr inbounds %struct.mz_zip_archive_file_stat* %23, i32 0, i32 0
  store i32 %22, i32* %m_file_index, align 4
  %24 = load i32* %file_index.addr, align 4
  %idxprom = zext i32 %24 to i64
  %25 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %25, i32 0, i32 12
  %26 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %26, i32 0, i32 1
  %m_p = getelementptr inbounds %struct.mz_zip_array* %m_central_dir_offsets, i32 0, i32 0
  %27 = load i8** %m_p, align 8
  %28 = bitcast i8* %27 to i32*
  %arrayidx = getelementptr inbounds i32* %28, i64 %idxprom
  %29 = load i32* %arrayidx, align 4
  %30 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_central_dir_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat* %30, i32 0, i32 1
  store i32 %29, i32* %m_central_dir_ofs, align 4
  %31 = load i8** %p, align 8
  %add.ptr = getelementptr inbounds i8* %31, i64 4
  %32 = bitcast i8* %add.ptr to i16*
  %33 = load i16* %32, align 2
  %34 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_version_made_by = getelementptr inbounds %struct.mz_zip_archive_file_stat* %34, i32 0, i32 2
  store i16 %33, i16* %m_version_made_by, align 2
  %35 = load i8** %p, align 8
  %add.ptr2 = getelementptr inbounds i8* %35, i64 6
  %36 = bitcast i8* %add.ptr2 to i16*
  %37 = load i16* %36, align 2
  %38 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_version_needed = getelementptr inbounds %struct.mz_zip_archive_file_stat* %38, i32 0, i32 3
  store i16 %37, i16* %m_version_needed, align 2
  %39 = load i8** %p, align 8
  %add.ptr3 = getelementptr inbounds i8* %39, i64 8
  %40 = bitcast i8* %add.ptr3 to i16*
  %41 = load i16* %40, align 2
  %42 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_bit_flag = getelementptr inbounds %struct.mz_zip_archive_file_stat* %42, i32 0, i32 4
  store i16 %41, i16* %m_bit_flag, align 2
  %43 = load i8** %p, align 8
  %add.ptr4 = getelementptr inbounds i8* %43, i64 10
  %44 = bitcast i8* %add.ptr4 to i16*
  %45 = load i16* %44, align 2
  %46 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat* %46, i32 0, i32 5
  store i16 %45, i16* %m_method, align 2
  %47 = load i8** %p, align 8
  %add.ptr5 = getelementptr inbounds i8* %47, i64 12
  %48 = bitcast i8* %add.ptr5 to i16*
  %49 = load i16* %48, align 2
  %conv = zext i16 %49 to i32
  %50 = load i8** %p, align 8
  %add.ptr6 = getelementptr inbounds i8* %50, i64 14
  %51 = bitcast i8* %add.ptr6 to i16*
  %52 = load i16* %51, align 2
  %conv7 = zext i16 %52 to i32
  %call8 = call i64 @mz_zip_dos_to_time_t(i32 %conv, i32 %conv7)
  %53 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_time = getelementptr inbounds %struct.mz_zip_archive_file_stat* %53, i32 0, i32 6
  store i64 %call8, i64* %m_time, align 8
  %54 = load i8** %p, align 8
  %add.ptr9 = getelementptr inbounds i8* %54, i64 16
  %55 = bitcast i8* %add.ptr9 to i32*
  %56 = load i32* %55, align 4
  %57 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_crc32 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %57, i32 0, i32 7
  store i32 %56, i32* %m_crc32, align 4
  %58 = load i8** %p, align 8
  %add.ptr10 = getelementptr inbounds i8* %58, i64 20
  %59 = bitcast i8* %add.ptr10 to i32*
  %60 = load i32* %59, align 4
  %conv11 = zext i32 %60 to i64
  %61 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat* %61, i32 0, i32 8
  store i64 %conv11, i64* %m_comp_size, align 8
  %62 = load i8** %p, align 8
  %add.ptr12 = getelementptr inbounds i8* %62, i64 24
  %63 = bitcast i8* %add.ptr12 to i32*
  %64 = load i32* %63, align 4
  %conv13 = zext i32 %64 to i64
  %65 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat* %65, i32 0, i32 9
  store i64 %conv13, i64* %m_uncomp_size, align 8
  %66 = load i8** %p, align 8
  %add.ptr14 = getelementptr inbounds i8* %66, i64 36
  %67 = bitcast i8* %add.ptr14 to i16*
  %68 = load i16* %67, align 2
  %69 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_internal_attr = getelementptr inbounds %struct.mz_zip_archive_file_stat* %69, i32 0, i32 10
  store i16 %68, i16* %m_internal_attr, align 2
  %70 = load i8** %p, align 8
  %add.ptr15 = getelementptr inbounds i8* %70, i64 38
  %71 = bitcast i8* %add.ptr15 to i32*
  %72 = load i32* %71, align 4
  %73 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_external_attr = getelementptr inbounds %struct.mz_zip_archive_file_stat* %73, i32 0, i32 11
  store i32 %72, i32* %m_external_attr, align 4
  %74 = load i8** %p, align 8
  %add.ptr16 = getelementptr inbounds i8* %74, i64 42
  %75 = bitcast i8* %add.ptr16 to i32*
  %76 = load i32* %75, align 4
  %conv17 = zext i32 %76 to i64
  %77 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat* %77, i32 0, i32 12
  store i64 %conv17, i64* %m_local_header_ofs, align 8
  %78 = load i8** %p, align 8
  %add.ptr18 = getelementptr inbounds i8* %78, i64 28
  %79 = bitcast i8* %add.ptr18 to i16*
  %80 = load i16* %79, align 2
  %conv19 = zext i16 %80 to i32
  store i32 %conv19, i32* %n, align 4
  %81 = load i32* %n, align 4
  %cmp = icmp ult i32 %81, 259
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %82 = load i32* %n, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %82, %cond.true ], [ 259, %cond.false ]
  store i32 %cond, i32* %n, align 4
  %83 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_filename = getelementptr inbounds %struct.mz_zip_archive_file_stat* %83, i32 0, i32 14
  %84 = bitcast [260 x i8]* %m_filename to i8*
  %85 = load i8** %p, align 8
  %add.ptr21 = getelementptr inbounds i8* %85, i64 46
  %86 = load i32* %n, align 4
  %conv22 = zext i32 %86 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %add.ptr21, i64 %conv22, i32 1, i1 false)
  %87 = load i32* %n, align 4
  %idxprom23 = zext i32 %87 to i64
  %88 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_filename24 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %88, i32 0, i32 14
  %arrayidx25 = getelementptr inbounds [260 x i8]* %m_filename24, i32 0, i64 %idxprom23
  store i8 0, i8* %arrayidx25, align 1
  %89 = load i8** %p, align 8
  %add.ptr26 = getelementptr inbounds i8* %89, i64 32
  %90 = bitcast i8* %add.ptr26 to i16*
  %91 = load i16* %90, align 2
  %conv27 = zext i16 %91 to i32
  store i32 %conv27, i32* %n, align 4
  %92 = load i32* %n, align 4
  %cmp28 = icmp ult i32 %92, 255
  br i1 %cmp28, label %cond.true30, label %cond.false31

cond.true30:                                      ; preds = %cond.end
  %93 = load i32* %n, align 4
  br label %cond.end32

cond.false31:                                     ; preds = %cond.end
  br label %cond.end32

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i32 [ %93, %cond.true30 ], [ 255, %cond.false31 ]
  store i32 %cond33, i32* %n, align 4
  %94 = load i32* %n, align 4
  %95 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comment_size = getelementptr inbounds %struct.mz_zip_archive_file_stat* %95, i32 0, i32 13
  store i32 %94, i32* %m_comment_size, align 4
  %96 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comment = getelementptr inbounds %struct.mz_zip_archive_file_stat* %96, i32 0, i32 15
  %97 = bitcast [256 x i8]* %m_comment to i8*
  %98 = load i8** %p, align 8
  %add.ptr34 = getelementptr inbounds i8* %98, i64 46
  %99 = load i8** %p, align 8
  %add.ptr35 = getelementptr inbounds i8* %99, i64 28
  %100 = bitcast i8* %add.ptr35 to i16*
  %101 = load i16* %100, align 2
  %conv36 = zext i16 %101 to i32
  %idx.ext = sext i32 %conv36 to i64
  %add.ptr37 = getelementptr inbounds i8* %add.ptr34, i64 %idx.ext
  %102 = load i8** %p, align 8
  %add.ptr38 = getelementptr inbounds i8* %102, i64 30
  %103 = bitcast i8* %add.ptr38 to i16*
  %104 = load i16* %103, align 2
  %conv39 = zext i16 %104 to i32
  %idx.ext40 = sext i32 %conv39 to i64
  %add.ptr41 = getelementptr inbounds i8* %add.ptr37, i64 %idx.ext40
  %105 = load i32* %n, align 4
  %conv42 = zext i32 %105 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %97, i8* %add.ptr41, i64 %conv42, i32 1, i1 false)
  %106 = load i32* %n, align 4
  %idxprom43 = zext i32 %106 to i64
  %107 = load %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comment44 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %107, i32 0, i32 15
  %arrayidx45 = getelementptr inbounds [256 x i8]* %m_comment44, i32 0, i64 %idxprom43
  store i8 0, i8* %arrayidx45, align 1
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %cond.end32, %if.then
  %108 = load i32* %retval
  ret i32 %108
}

; Function Attrs: nounwind uwtable
define internal i64 @mz_zip_dos_to_time_t(i32 %dos_time, i32 %dos_date) #0 {
entry:
  %dos_time.addr = alloca i32, align 4
  %dos_date.addr = alloca i32, align 4
  %tm = alloca %struct.tm, align 8
  store i32 %dos_time, i32* %dos_time.addr, align 4
  store i32 %dos_date, i32* %dos_date.addr, align 4
  %0 = bitcast %struct.tm* %tm to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 56, i32 8, i1 false)
  %tm_isdst = getelementptr inbounds %struct.tm* %tm, i32 0, i32 8
  store i32 -1, i32* %tm_isdst, align 4
  %1 = load i32* %dos_date.addr, align 4
  %shr = ashr i32 %1, 9
  %and = and i32 %shr, 127
  %add = add nsw i32 %and, 1980
  %sub = sub nsw i32 %add, 1900
  %tm_year = getelementptr inbounds %struct.tm* %tm, i32 0, i32 5
  store i32 %sub, i32* %tm_year, align 4
  %2 = load i32* %dos_date.addr, align 4
  %shr1 = ashr i32 %2, 5
  %and2 = and i32 %shr1, 15
  %sub3 = sub nsw i32 %and2, 1
  %tm_mon = getelementptr inbounds %struct.tm* %tm, i32 0, i32 4
  store i32 %sub3, i32* %tm_mon, align 4
  %3 = load i32* %dos_date.addr, align 4
  %and4 = and i32 %3, 31
  %tm_mday = getelementptr inbounds %struct.tm* %tm, i32 0, i32 3
  store i32 %and4, i32* %tm_mday, align 4
  %4 = load i32* %dos_time.addr, align 4
  %shr5 = ashr i32 %4, 11
  %and6 = and i32 %shr5, 31
  %tm_hour = getelementptr inbounds %struct.tm* %tm, i32 0, i32 2
  store i32 %and6, i32* %tm_hour, align 4
  %5 = load i32* %dos_time.addr, align 4
  %shr7 = ashr i32 %5, 5
  %and8 = and i32 %shr7, 63
  %tm_min = getelementptr inbounds %struct.tm* %tm, i32 0, i32 1
  store i32 %and8, i32* %tm_min, align 4
  %6 = load i32* %dos_time.addr, align 4
  %shl = shl i32 %6, 1
  %and9 = and i32 %shl, 62
  %tm_sec = getelementptr inbounds %struct.tm* %tm, i32 0, i32 0
  store i32 %and9, i32* %tm_sec, align 4
  %call = call i64 @mktime(%struct.tm* %tm) #2
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_get_filename(%struct.mz_zip_archive_tag* %pZip, i32 %file_index, i8* %pFilename, i32 %filename_buf_size) #0 {
entry:
  %retval.i = alloca i8*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr = alloca i32, align 4
  %pFilename.addr = alloca i8*, align 8
  %filename_buf_size.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i32 %filename_buf_size, i32* %filename_buf_size.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i32* %file_index.addr, align 4
  store %struct.mz_zip_archive_tag* %0, %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  store i32 %1, i32* %file_index.addr.i, align 4
  %2 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive_tag* %2, null
  br i1 %tobool.i, label %lor.lhs.false.i, label %if.then.i

lor.lhs.false.i:                                  ; preds = %entry
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState.i = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 12
  %4 = load %struct.mz_zip_internal_state_tag** %m_pState.i, align 8
  %tobool1.i = icmp ne %struct.mz_zip_internal_state_tag* %4, null
  br i1 %tobool1.i, label %lor.lhs.false2.i, label %if.then.i

lor.lhs.false2.i:                                 ; preds = %lor.lhs.false.i
  %5 = load i32* %file_index.addr.i, align 4
  %6 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_total_files.i = getelementptr inbounds %struct.mz_zip_archive_tag* %6, i32 0, i32 2
  %7 = load i32* %m_total_files.i, align 4
  %cmp.i = icmp uge i32 %5, %7
  br i1 %cmp.i, label %if.then.i, label %lor.lhs.false3.i

lor.lhs.false3.i:                                 ; preds = %lor.lhs.false2.i
  %8 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_zip_mode.i = getelementptr inbounds %struct.mz_zip_archive_tag* %8, i32 0, i32 3
  %9 = load i32* %m_zip_mode.i, align 4
  %cmp4.i = icmp ne i32 %9, 1
  br i1 %cmp4.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %lor.lhs.false3.i, %lor.lhs.false2.i, %lor.lhs.false.i, %entry
  store i8* null, i8** %retval.i
  br label %mz_zip_reader_get_cdh.exit

if.end.i:                                         ; preds = %lor.lhs.false3.i
  %10 = load i32* %file_index.addr.i, align 4
  %idxprom.i = zext i32 %10 to i64
  %11 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState5.i = getelementptr inbounds %struct.mz_zip_archive_tag* %11, i32 0, i32 12
  %12 = load %struct.mz_zip_internal_state_tag** %m_pState5.i, align 8
  %m_central_dir_offsets.i = getelementptr inbounds %struct.mz_zip_internal_state_tag* %12, i32 0, i32 1
  %m_p.i = getelementptr inbounds %struct.mz_zip_array* %m_central_dir_offsets.i, i32 0, i32 0
  %13 = load i8** %m_p.i, align 8
  %14 = bitcast i8* %13 to i32*
  %arrayidx.i = getelementptr inbounds i32* %14, i64 %idxprom.i
  %15 = load i32* %arrayidx.i, align 4
  %idxprom6.i = zext i32 %15 to i64
  %16 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState7.i = getelementptr inbounds %struct.mz_zip_archive_tag* %16, i32 0, i32 12
  %17 = load %struct.mz_zip_internal_state_tag** %m_pState7.i, align 8
  %m_central_dir.i = getelementptr inbounds %struct.mz_zip_internal_state_tag* %17, i32 0, i32 0
  %m_p8.i = getelementptr inbounds %struct.mz_zip_array* %m_central_dir.i, i32 0, i32 0
  %18 = load i8** %m_p8.i, align 8
  %arrayidx9.i = getelementptr inbounds i8* %18, i64 %idxprom6.i
  store i8* %arrayidx9.i, i8** %retval.i
  br label %mz_zip_reader_get_cdh.exit

mz_zip_reader_get_cdh.exit:                       ; preds = %if.end.i, %if.then.i
  %19 = load i8** %retval.i
  store i8* %19, i8** %p, align 8
  %20 = load i8** %p, align 8
  %tobool = icmp ne i8* %20, null
  br i1 %tobool, label %if.end3, label %if.then

if.then:                                          ; preds = %mz_zip_reader_get_cdh.exit
  %21 = load i32* %filename_buf_size.addr, align 4
  %tobool1 = icmp ne i32 %21, 0
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %22 = load i8** %pFilename.addr, align 8
  %arrayidx = getelementptr inbounds i8* %22, i64 0
  store i8 0, i8* %arrayidx, align 1
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  store i32 0, i32* %retval
  br label %return

if.end3:                                          ; preds = %mz_zip_reader_get_cdh.exit
  %23 = load i8** %p, align 8
  %add.ptr = getelementptr inbounds i8* %23, i64 28
  %24 = bitcast i8* %add.ptr to i16*
  %25 = load i16* %24, align 2
  %conv = zext i16 %25 to i32
  store i32 %conv, i32* %n, align 4
  %26 = load i32* %filename_buf_size.addr, align 4
  %tobool4 = icmp ne i32 %26, 0
  br i1 %tobool4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %if.end3
  %27 = load i32* %n, align 4
  %28 = load i32* %filename_buf_size.addr, align 4
  %sub = sub i32 %28, 1
  %cmp = icmp ult i32 %27, %sub
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then5
  %29 = load i32* %n, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then5
  %30 = load i32* %filename_buf_size.addr, align 4
  %sub7 = sub i32 %30, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %29, %cond.true ], [ %sub7, %cond.false ]
  store i32 %cond, i32* %n, align 4
  %31 = load i8** %pFilename.addr, align 8
  %32 = load i8** %p, align 8
  %add.ptr8 = getelementptr inbounds i8* %32, i64 46
  %33 = load i32* %n, align 4
  %conv9 = zext i32 %33 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %add.ptr8, i64 %conv9, i32 1, i1 false)
  %34 = load i32* %n, align 4
  %idxprom = zext i32 %34 to i64
  %35 = load i8** %pFilename.addr, align 8
  %arrayidx10 = getelementptr inbounds i8* %35, i64 %idxprom
  store i8 0, i8* %arrayidx10, align 1
  br label %if.end11

if.end11:                                         ; preds = %cond.end, %if.end3
  %36 = load i32* %n, align 4
  %add = add i32 %36, 1
  store i32 %add, i32* %retval
  br label %return

return:                                           ; preds = %if.end11, %if.end
  %37 = load i32* %retval
  ret i32 %37
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_locate_file(%struct.mz_zip_archive_tag* %pZip, i8* %pName, i8* %pComment, i32 %flags) #0 {
entry:
  %retval.i90 = alloca i32, align 4
  %pA.addr.i91 = alloca i8*, align 8
  %pB.addr.i92 = alloca i8*, align 8
  %len.addr.i93 = alloca i32, align 4
  %flags.addr.i94 = alloca i32, align 4
  %i.i95 = alloca i32, align 4
  %retval.i = alloca i32, align 4
  %pA.addr.i = alloca i8*, align 8
  %pB.addr.i = alloca i8*, align 8
  %len.addr.i = alloca i32, align 4
  %flags.addr.i = alloca i32, align 4
  %i.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pName.addr = alloca i8*, align 8
  %pComment.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  %name_len = alloca i64, align 8
  %comment_len = alloca i64, align 8
  %pHeader = alloca i8*, align 8
  %filename_len = alloca i32, align 4
  %pFilename = alloca i8*, align 8
  %file_extra_len = alloca i32, align 4
  %file_comment_len = alloca i32, align 4
  %pFile_comment = alloca i8*, align 8
  %ofs = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pName, i8** %pName.addr, align 8
  store i8* %pComment, i8** %pComment.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive_tag* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %1, i32 0, i32 12
  %2 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i8** %pName.addr, align 8
  %tobool3 = icmp ne i8* %3, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %4 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive_tag* %4, i32 0, i32 3
  %5 = load i32* %m_zip_mode, align 4
  %cmp = icmp ne i32 %5, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false4
  %6 = load i32* %flags.addr, align 4
  %and = and i32 %6, 768
  %cmp5 = icmp eq i32 %and, 0
  br i1 %cmp5, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end
  %7 = load i8** %pComment.addr, align 8
  %tobool6 = icmp ne i8* %7, null
  br i1 %tobool6, label %if.end11, label %land.lhs.true7

land.lhs.true7:                                   ; preds = %land.lhs.true
  %8 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState8 = getelementptr inbounds %struct.mz_zip_archive_tag* %8, i32 0, i32 12
  %9 = load %struct.mz_zip_internal_state_tag** %m_pState8, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %9, i32 0, i32 2
  %m_size = getelementptr inbounds %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 1
  %10 = load i64* %m_size, align 8
  %tobool9 = icmp ne i64 %10, 0
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %land.lhs.true7
  %11 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %12 = load i8** %pName.addr, align 8
  %call = call i32 @mz_zip_reader_locate_file_binary_search(%struct.mz_zip_archive_tag* %11, i8* %12)
  store i32 %call, i32* %retval
  br label %return

if.end11:                                         ; preds = %land.lhs.true7, %land.lhs.true, %if.end
  %13 = load i8** %pName.addr, align 8
  %call12 = call i64 @strlen(i8* %13) #7
  store i64 %call12, i64* %name_len, align 8
  %14 = load i64* %name_len, align 8
  %cmp13 = icmp ugt i64 %14, 65535
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end11
  store i32 -1, i32* %retval
  br label %return

if.end15:                                         ; preds = %if.end11
  %15 = load i8** %pComment.addr, align 8
  %tobool16 = icmp ne i8* %15, null
  br i1 %tobool16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end15
  %16 = load i8** %pComment.addr, align 8
  %call17 = call i64 @strlen(i8* %16) #7
  br label %cond.end

cond.false:                                       ; preds = %if.end15
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call17, %cond.true ], [ 0, %cond.false ]
  store i64 %cond, i64* %comment_len, align 8
  %17 = load i64* %comment_len, align 8
  %cmp18 = icmp ugt i64 %17, 65535
  br i1 %cmp18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %cond.end
  store i32 -1, i32* %retval
  br label %return

if.end20:                                         ; preds = %cond.end
  store i32 0, i32* %file_index, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end20
  %18 = load i32* %file_index, align 4
  %19 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive_tag* %19, i32 0, i32 2
  %20 = load i32* %m_total_files, align 4
  %cmp21 = icmp ult i32 %18, %20
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i32* %file_index, align 4
  %idxprom = zext i32 %21 to i64
  %22 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState22 = getelementptr inbounds %struct.mz_zip_archive_tag* %22, i32 0, i32 12
  %23 = load %struct.mz_zip_internal_state_tag** %m_pState22, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %23, i32 0, i32 1
  %m_p = getelementptr inbounds %struct.mz_zip_array* %m_central_dir_offsets, i32 0, i32 0
  %24 = load i8** %m_p, align 8
  %25 = bitcast i8* %24 to i32*
  %arrayidx = getelementptr inbounds i32* %25, i64 %idxprom
  %26 = load i32* %arrayidx, align 4
  %idxprom23 = zext i32 %26 to i64
  %27 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState24 = getelementptr inbounds %struct.mz_zip_archive_tag* %27, i32 0, i32 12
  %28 = load %struct.mz_zip_internal_state_tag** %m_pState24, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag* %28, i32 0, i32 0
  %m_p25 = getelementptr inbounds %struct.mz_zip_array* %m_central_dir, i32 0, i32 0
  %29 = load i8** %m_p25, align 8
  %arrayidx26 = getelementptr inbounds i8* %29, i64 %idxprom23
  store i8* %arrayidx26, i8** %pHeader, align 8
  %30 = load i8** %pHeader, align 8
  %add.ptr = getelementptr inbounds i8* %30, i64 28
  %31 = bitcast i8* %add.ptr to i16*
  %32 = load i16* %31, align 2
  %conv = zext i16 %32 to i32
  store i32 %conv, i32* %filename_len, align 4
  %33 = load i8** %pHeader, align 8
  %add.ptr27 = getelementptr inbounds i8* %33, i64 46
  store i8* %add.ptr27, i8** %pFilename, align 8
  %34 = load i32* %filename_len, align 4
  %conv28 = zext i32 %34 to i64
  %35 = load i64* %name_len, align 8
  %cmp29 = icmp ult i64 %conv28, %35
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %for.body
  br label %for.inc

if.end32:                                         ; preds = %for.body
  %36 = load i64* %comment_len, align 8
  %tobool33 = icmp ne i64 %36, 0
  br i1 %tobool33, label %if.then34, label %if.end50

if.then34:                                        ; preds = %if.end32
  %37 = load i8** %pHeader, align 8
  %add.ptr35 = getelementptr inbounds i8* %37, i64 30
  %38 = bitcast i8* %add.ptr35 to i16*
  %39 = load i16* %38, align 2
  %conv36 = zext i16 %39 to i32
  store i32 %conv36, i32* %file_extra_len, align 4
  %40 = load i8** %pHeader, align 8
  %add.ptr37 = getelementptr inbounds i8* %40, i64 32
  %41 = bitcast i8* %add.ptr37 to i16*
  %42 = load i16* %41, align 2
  %conv38 = zext i16 %42 to i32
  store i32 %conv38, i32* %file_comment_len, align 4
  %43 = load i8** %pFilename, align 8
  %44 = load i32* %filename_len, align 4
  %idx.ext = zext i32 %44 to i64
  %add.ptr39 = getelementptr inbounds i8* %43, i64 %idx.ext
  %45 = load i32* %file_extra_len, align 4
  %idx.ext40 = zext i32 %45 to i64
  %add.ptr41 = getelementptr inbounds i8* %add.ptr39, i64 %idx.ext40
  store i8* %add.ptr41, i8** %pFile_comment, align 8
  %46 = load i32* %file_comment_len, align 4
  %conv42 = zext i32 %46 to i64
  %47 = load i64* %comment_len, align 8
  %cmp43 = icmp ne i64 %conv42, %47
  br i1 %cmp43, label %if.then48, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %if.then34
  %48 = load i8** %pComment.addr, align 8
  %49 = load i8** %pFile_comment, align 8
  %50 = load i32* %file_comment_len, align 4
  %51 = load i32* %flags.addr, align 4
  store i8* %48, i8** %pA.addr.i, align 8
  store i8* %49, i8** %pB.addr.i, align 8
  store i32 %50, i32* %len.addr.i, align 4
  store i32 %51, i32* %flags.addr.i, align 4
  %52 = load i32* %flags.addr.i, align 4
  %and.i = and i32 %52, 256
  %tobool.i = icmp ne i32 %and.i, 0
  br i1 %tobool.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %lor.lhs.false45
  %53 = load i8** %pA.addr.i, align 8
  %54 = load i8** %pB.addr.i, align 8
  %55 = load i32* %len.addr.i, align 4
  %conv.i = zext i32 %55 to i64
  %call.i = call i32 @memcmp(i8* %53, i8* %54, i64 %conv.i) #7
  %cmp.i = icmp eq i32 0, %call.i
  %conv1.i = zext i1 %cmp.i to i32
  store i32 %conv1.i, i32* %retval.i
  br label %mz_zip_reader_string_equal.exit

if.end.i:                                         ; preds = %lor.lhs.false45
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.end44.i, %if.end.i
  %56 = load i32* %i.i, align 4
  %57 = load i32* %len.addr.i, align 4
  %cmp2.i = icmp ult i32 %56, %57
  br i1 %cmp2.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %58 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %58 to i64
  %59 = load i8** %pA.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %59, i64 %idxprom.i
  %60 = load i8* %arrayidx.i, align 1
  %conv4.i = sext i8 %60 to i32
  %cmp5.i = icmp sge i32 %conv4.i, 65
  br i1 %cmp5.i, label %land.lhs.true.i, label %cond.false.i

land.lhs.true.i:                                  ; preds = %for.body.i
  %61 = load i32* %i.i, align 4
  %idxprom7.i = zext i32 %61 to i64
  %62 = load i8** %pA.addr.i, align 8
  %arrayidx8.i = getelementptr inbounds i8* %62, i64 %idxprom7.i
  %63 = load i8* %arrayidx8.i, align 1
  %conv9.i = sext i8 %63 to i32
  %cmp10.i = icmp sle i32 %conv9.i, 90
  br i1 %cmp10.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %land.lhs.true.i
  %64 = load i32* %i.i, align 4
  %idxprom12.i = zext i32 %64 to i64
  %65 = load i8** %pA.addr.i, align 8
  %arrayidx13.i = getelementptr inbounds i8* %65, i64 %idxprom12.i
  %66 = load i8* %arrayidx13.i, align 1
  %conv14.i = sext i8 %66 to i32
  %sub.i = sub nsw i32 %conv14.i, 65
  %add.i = add nsw i32 %sub.i, 97
  br label %cond.end.i

cond.false.i:                                     ; preds = %land.lhs.true.i, %for.body.i
  %67 = load i32* %i.i, align 4
  %idxprom15.i = zext i32 %67 to i64
  %68 = load i8** %pA.addr.i, align 8
  %arrayidx16.i = getelementptr inbounds i8* %68, i64 %idxprom15.i
  %69 = load i8* %arrayidx16.i, align 1
  %conv17.i = sext i8 %69 to i32
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %add.i, %cond.true.i ], [ %conv17.i, %cond.false.i ]
  %70 = load i32* %i.i, align 4
  %idxprom18.i = zext i32 %70 to i64
  %71 = load i8** %pB.addr.i, align 8
  %arrayidx19.i = getelementptr inbounds i8* %71, i64 %idxprom18.i
  %72 = load i8* %arrayidx19.i, align 1
  %conv20.i = sext i8 %72 to i32
  %cmp21.i = icmp sge i32 %conv20.i, 65
  br i1 %cmp21.i, label %land.lhs.true23.i, label %cond.false35.i

land.lhs.true23.i:                                ; preds = %cond.end.i
  %73 = load i32* %i.i, align 4
  %idxprom24.i = zext i32 %73 to i64
  %74 = load i8** %pB.addr.i, align 8
  %arrayidx25.i = getelementptr inbounds i8* %74, i64 %idxprom24.i
  %75 = load i8* %arrayidx25.i, align 1
  %conv26.i = sext i8 %75 to i32
  %cmp27.i = icmp sle i32 %conv26.i, 90
  br i1 %cmp27.i, label %cond.true29.i, label %cond.false35.i

cond.true29.i:                                    ; preds = %land.lhs.true23.i
  %76 = load i32* %i.i, align 4
  %idxprom30.i = zext i32 %76 to i64
  %77 = load i8** %pB.addr.i, align 8
  %arrayidx31.i = getelementptr inbounds i8* %77, i64 %idxprom30.i
  %78 = load i8* %arrayidx31.i, align 1
  %conv32.i = sext i8 %78 to i32
  %sub33.i = sub nsw i32 %conv32.i, 65
  %add34.i = add nsw i32 %sub33.i, 97
  br label %cond.end39.i

cond.false35.i:                                   ; preds = %land.lhs.true23.i, %cond.end.i
  %79 = load i32* %i.i, align 4
  %idxprom36.i = zext i32 %79 to i64
  %80 = load i8** %pB.addr.i, align 8
  %arrayidx37.i = getelementptr inbounds i8* %80, i64 %idxprom36.i
  %81 = load i8* %arrayidx37.i, align 1
  %conv38.i = sext i8 %81 to i32
  br label %cond.end39.i

cond.end39.i:                                     ; preds = %cond.false35.i, %cond.true29.i
  %cond40.i = phi i32 [ %add34.i, %cond.true29.i ], [ %conv38.i, %cond.false35.i ]
  %cmp41.i = icmp ne i32 %cond.i, %cond40.i
  br i1 %cmp41.i, label %if.then43.i, label %if.end44.i

if.then43.i:                                      ; preds = %cond.end39.i
  store i32 0, i32* %retval.i
  br label %mz_zip_reader_string_equal.exit

if.end44.i:                                       ; preds = %cond.end39.i
  %82 = load i32* %i.i, align 4
  %inc.i = add i32 %82, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  store i32 1, i32* %retval.i
  br label %mz_zip_reader_string_equal.exit

mz_zip_reader_string_equal.exit:                  ; preds = %for.end.i, %if.then43.i, %if.then.i
  %83 = load i32* %retval.i
  %tobool47 = icmp ne i32 %83, 0
  br i1 %tobool47, label %if.end49, label %if.then48

if.then48:                                        ; preds = %mz_zip_reader_string_equal.exit, %if.then34
  br label %for.inc

if.end49:                                         ; preds = %mz_zip_reader_string_equal.exit
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.end32
  %84 = load i32* %flags.addr, align 4
  %and51 = and i32 %84, 512
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %land.lhs.true53, label %if.end80

land.lhs.true53:                                  ; preds = %if.end50
  %85 = load i32* %filename_len, align 4
  %tobool54 = icmp ne i32 %85, 0
  br i1 %tobool54, label %if.then55, label %if.end80

if.then55:                                        ; preds = %land.lhs.true53
  %86 = load i32* %filename_len, align 4
  %sub = sub i32 %86, 1
  store i32 %sub, i32* %ofs, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then55
  %87 = load i32* %ofs, align 4
  %idxprom56 = sext i32 %87 to i64
  %88 = load i8** %pFilename, align 8
  %arrayidx57 = getelementptr inbounds i8* %88, i64 %idxprom56
  %89 = load i8* %arrayidx57, align 1
  %conv58 = sext i8 %89 to i32
  %cmp59 = icmp eq i32 %conv58, 47
  br i1 %cmp59, label %if.then73, label %lor.lhs.false61

lor.lhs.false61:                                  ; preds = %do.body
  %90 = load i32* %ofs, align 4
  %idxprom62 = sext i32 %90 to i64
  %91 = load i8** %pFilename, align 8
  %arrayidx63 = getelementptr inbounds i8* %91, i64 %idxprom62
  %92 = load i8* %arrayidx63, align 1
  %conv64 = sext i8 %92 to i32
  %cmp65 = icmp eq i32 %conv64, 92
  br i1 %cmp65, label %if.then73, label %lor.lhs.false67

lor.lhs.false67:                                  ; preds = %lor.lhs.false61
  %93 = load i32* %ofs, align 4
  %idxprom68 = sext i32 %93 to i64
  %94 = load i8** %pFilename, align 8
  %arrayidx69 = getelementptr inbounds i8* %94, i64 %idxprom68
  %95 = load i8* %arrayidx69, align 1
  %conv70 = sext i8 %95 to i32
  %cmp71 = icmp eq i32 %conv70, 58
  br i1 %cmp71, label %if.then73, label %if.end74

if.then73:                                        ; preds = %lor.lhs.false67, %lor.lhs.false61, %do.body
  br label %do.end

if.end74:                                         ; preds = %lor.lhs.false67
  br label %do.cond

do.cond:                                          ; preds = %if.end74
  %96 = load i32* %ofs, align 4
  %dec = add nsw i32 %96, -1
  store i32 %dec, i32* %ofs, align 4
  %cmp75 = icmp sge i32 %dec, 0
  br i1 %cmp75, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.then73
  %97 = load i32* %ofs, align 4
  %inc = add nsw i32 %97, 1
  store i32 %inc, i32* %ofs, align 4
  %98 = load i32* %ofs, align 4
  %99 = load i8** %pFilename, align 8
  %idx.ext77 = sext i32 %98 to i64
  %add.ptr78 = getelementptr inbounds i8* %99, i64 %idx.ext77
  store i8* %add.ptr78, i8** %pFilename, align 8
  %100 = load i32* %ofs, align 4
  %101 = load i32* %filename_len, align 4
  %sub79 = sub i32 %101, %100
  store i32 %sub79, i32* %filename_len, align 4
  br label %if.end80

if.end80:                                         ; preds = %do.end, %land.lhs.true53, %if.end50
  %102 = load i32* %filename_len, align 4
  %conv81 = zext i32 %102 to i64
  %103 = load i64* %name_len, align 8
  %cmp82 = icmp eq i64 %conv81, %103
  br i1 %cmp82, label %land.lhs.true84, label %if.end88

land.lhs.true84:                                  ; preds = %if.end80
  %104 = load i8** %pName.addr, align 8
  %105 = load i8** %pFilename, align 8
  %106 = load i32* %filename_len, align 4
  %107 = load i32* %flags.addr, align 4
  store i8* %104, i8** %pA.addr.i91, align 8
  store i8* %105, i8** %pB.addr.i92, align 8
  store i32 %106, i32* %len.addr.i93, align 4
  store i32 %107, i32* %flags.addr.i94, align 4
  %108 = load i32* %flags.addr.i94, align 4
  %and.i96 = and i32 %108, 256
  %tobool.i97 = icmp ne i32 %and.i96, 0
  br i1 %tobool.i97, label %if.then.i102, label %if.end.i103

if.then.i102:                                     ; preds = %land.lhs.true84
  %109 = load i8** %pA.addr.i91, align 8
  %110 = load i8** %pB.addr.i92, align 8
  %111 = load i32* %len.addr.i93, align 4
  %conv.i98 = zext i32 %111 to i64
  %call.i99 = call i32 @memcmp(i8* %109, i8* %110, i64 %conv.i98) #7
  %cmp.i100 = icmp eq i32 0, %call.i99
  %conv1.i101 = zext i1 %cmp.i100 to i32
  store i32 %conv1.i101, i32* %retval.i90
  br label %mz_zip_reader_string_equal.exit154

if.end.i103:                                      ; preds = %land.lhs.true84
  store i32 0, i32* %i.i95, align 4
  br label %for.cond.i105

for.cond.i105:                                    ; preds = %if.end44.i151, %if.end.i103
  %112 = load i32* %i.i95, align 4
  %113 = load i32* %len.addr.i93, align 4
  %cmp2.i104 = icmp ult i32 %112, %113
  br i1 %cmp2.i104, label %for.body.i110, label %for.end.i153

for.body.i110:                                    ; preds = %for.cond.i105
  %114 = load i32* %i.i95, align 4
  %idxprom.i106 = zext i32 %114 to i64
  %115 = load i8** %pA.addr.i91, align 8
  %arrayidx.i107 = getelementptr inbounds i8* %115, i64 %idxprom.i106
  %116 = load i8* %arrayidx.i107, align 1
  %conv4.i108 = sext i8 %116 to i32
  %cmp5.i109 = icmp sge i32 %conv4.i108, 65
  br i1 %cmp5.i109, label %land.lhs.true.i115, label %cond.false.i125

land.lhs.true.i115:                               ; preds = %for.body.i110
  %117 = load i32* %i.i95, align 4
  %idxprom7.i111 = zext i32 %117 to i64
  %118 = load i8** %pA.addr.i91, align 8
  %arrayidx8.i112 = getelementptr inbounds i8* %118, i64 %idxprom7.i111
  %119 = load i8* %arrayidx8.i112, align 1
  %conv9.i113 = sext i8 %119 to i32
  %cmp10.i114 = icmp sle i32 %conv9.i113, 90
  br i1 %cmp10.i114, label %cond.true.i121, label %cond.false.i125

cond.true.i121:                                   ; preds = %land.lhs.true.i115
  %120 = load i32* %i.i95, align 4
  %idxprom12.i116 = zext i32 %120 to i64
  %121 = load i8** %pA.addr.i91, align 8
  %arrayidx13.i117 = getelementptr inbounds i8* %121, i64 %idxprom12.i116
  %122 = load i8* %arrayidx13.i117, align 1
  %conv14.i118 = sext i8 %122 to i32
  %sub.i119 = sub nsw i32 %conv14.i118, 65
  %add.i120 = add nsw i32 %sub.i119, 97
  br label %cond.end.i131

cond.false.i125:                                  ; preds = %land.lhs.true.i115, %for.body.i110
  %123 = load i32* %i.i95, align 4
  %idxprom15.i122 = zext i32 %123 to i64
  %124 = load i8** %pA.addr.i91, align 8
  %arrayidx16.i123 = getelementptr inbounds i8* %124, i64 %idxprom15.i122
  %125 = load i8* %arrayidx16.i123, align 1
  %conv17.i124 = sext i8 %125 to i32
  br label %cond.end.i131

cond.end.i131:                                    ; preds = %cond.false.i125, %cond.true.i121
  %cond.i126 = phi i32 [ %add.i120, %cond.true.i121 ], [ %conv17.i124, %cond.false.i125 ]
  %126 = load i32* %i.i95, align 4
  %idxprom18.i127 = zext i32 %126 to i64
  %127 = load i8** %pB.addr.i92, align 8
  %arrayidx19.i128 = getelementptr inbounds i8* %127, i64 %idxprom18.i127
  %128 = load i8* %arrayidx19.i128, align 1
  %conv20.i129 = sext i8 %128 to i32
  %cmp21.i130 = icmp sge i32 %conv20.i129, 65
  br i1 %cmp21.i130, label %land.lhs.true23.i136, label %cond.false35.i146

land.lhs.true23.i136:                             ; preds = %cond.end.i131
  %129 = load i32* %i.i95, align 4
  %idxprom24.i132 = zext i32 %129 to i64
  %130 = load i8** %pB.addr.i92, align 8
  %arrayidx25.i133 = getelementptr inbounds i8* %130, i64 %idxprom24.i132
  %131 = load i8* %arrayidx25.i133, align 1
  %conv26.i134 = sext i8 %131 to i32
  %cmp27.i135 = icmp sle i32 %conv26.i134, 90
  br i1 %cmp27.i135, label %cond.true29.i142, label %cond.false35.i146

cond.true29.i142:                                 ; preds = %land.lhs.true23.i136
  %132 = load i32* %i.i95, align 4
  %idxprom30.i137 = zext i32 %132 to i64
  %133 = load i8** %pB.addr.i92, align 8
  %arrayidx31.i138 = getelementptr inbounds i8* %133, i64 %idxprom30.i137
  %134 = load i8* %arrayidx31.i138, align 1
  %conv32.i139 = sext i8 %134 to i32
  %sub33.i140 = sub nsw i32 %conv32.i139, 65
  %add34.i141 = add nsw i32 %sub33.i140, 97
  br label %cond.end39.i149

cond.false35.i146:                                ; preds = %land.lhs.true23.i136, %cond.end.i131
  %135 = load i32* %i.i95, align 4
  %idxprom36.i143 = zext i32 %135 to i64
  %136 = load i8** %pB.addr.i92, align 8
  %arrayidx37.i144 = getelementptr inbounds i8* %136, i64 %idxprom36.i143
  %137 = load i8* %arrayidx37.i144, align 1
  %conv38.i145 = sext i8 %137 to i32
  br label %cond.end39.i149

cond.end39.i149:                                  ; preds = %cond.false35.i146, %cond.true29.i142
  %cond40.i147 = phi i32 [ %add34.i141, %cond.true29.i142 ], [ %conv38.i145, %cond.false35.i146 ]
  %cmp41.i148 = icmp ne i32 %cond.i126, %cond40.i147
  br i1 %cmp41.i148, label %if.then43.i150, label %if.end44.i151

if.then43.i150:                                   ; preds = %cond.end39.i149
  store i32 0, i32* %retval.i90
  br label %mz_zip_reader_string_equal.exit154

if.end44.i151:                                    ; preds = %cond.end39.i149
  %138 = load i32* %i.i95, align 4
  %inc.i152 = add i32 %138, 1
  store i32 %inc.i152, i32* %i.i95, align 4
  br label %for.cond.i105

for.end.i153:                                     ; preds = %for.cond.i105
  store i32 1, i32* %retval.i90
  br label %mz_zip_reader_string_equal.exit154

mz_zip_reader_string_equal.exit154:               ; preds = %for.end.i153, %if.then43.i150, %if.then.i102
  %139 = load i32* %retval.i90
  %tobool86 = icmp ne i32 %139, 0
  br i1 %tobool86, label %if.then87, label %if.end88

if.then87:                                        ; preds = %mz_zip_reader_string_equal.exit154
  %140 = load i32* %file_index, align 4
  store i32 %140, i32* %retval
  br label %return

if.end88:                                         ; preds = %mz_zip_reader_string_equal.exit154, %if.end80
  br label %for.inc

for.inc:                                          ; preds = %if.end88, %if.then48, %if.then31
  %141 = load i32* %file_index, align 4
  %inc89 = add i32 %141, 1
  store i32 %inc89, i32* %file_index, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then87, %if.then19, %if.then14, %if.then10, %if.then
  %142 = load i32* %retval
  ret i32 %142
}

; Function Attrs: nounwind uwtable
define internal i32 @mz_zip_reader_locate_file_binary_search(%struct.mz_zip_archive_tag* %pZip, i8* %pFilename) #0 {
entry:
  %pCentral_dir_array.addr.i = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir_offsets.addr.i = alloca %struct.mz_zip_array*, align 8
  %l_index.addr.i = alloca i32, align 4
  %pR.addr.i = alloca i8*, align 8
  %r_len.addr.i = alloca i32, align 4
  %pL.i = alloca i8*, align 8
  %pE.i = alloca i8*, align 8
  %l_len.i = alloca i32, align 4
  %l.i = alloca i8, align 1
  %r.i = alloca i8, align 1
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %pCentral_dir_offsets = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir = alloca %struct.mz_zip_array*, align 8
  %pIndices = alloca i32*, align 8
  %size = alloca i32, align 4
  %filename_len = alloca i32, align 4
  %l = alloca i32, align 4
  %h = alloca i32, align 4
  %m = alloca i32, align 4
  %file_index = alloca i32, align 4
  %comp = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %0, i32 0, i32 12
  %1 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  store %struct.mz_zip_internal_state_tag* %1, %struct.mz_zip_internal_state_tag** %pState, align 8
  %2 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %2, i32 0, i32 1
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pCentral_dir_offsets, align 8
  %3 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag* %3, i32 0, i32 0
  store %struct.mz_zip_array* %m_central_dir, %struct.mz_zip_array** %pCentral_dir, align 8
  %4 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %4, i32 0, i32 2
  %m_p = getelementptr inbounds %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 0
  %5 = load i8** %m_p, align 8
  %6 = bitcast i8* %5 to i32*
  %arrayidx = getelementptr inbounds i32* %6, i64 0
  store i32* %arrayidx, i32** %pIndices, align 8
  %7 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive_tag* %7, i32 0, i32 2
  %8 = load i32* %m_total_files, align 4
  store i32 %8, i32* %size, align 4
  %9 = load i8** %pFilename.addr, align 8
  %call = call i64 @strlen(i8* %9) #7
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %filename_len, align 4
  store i32 0, i32* %l, align 4
  %10 = load i32* %size, align 4
  %sub = sub nsw i32 %10, 1
  store i32 %sub, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end10, %entry
  %11 = load i32* %l, align 4
  %12 = load i32* %h, align 4
  %cmp = icmp sle i32 %11, %12
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load i32* %l, align 4
  %14 = load i32* %h, align 4
  %add = add nsw i32 %13, %14
  %shr = ashr i32 %add, 1
  store i32 %shr, i32* %m, align 4
  %15 = load i32* %m, align 4
  %idxprom = sext i32 %15 to i64
  %16 = load i32** %pIndices, align 8
  %arrayidx2 = getelementptr inbounds i32* %16, i64 %idxprom
  %17 = load i32* %arrayidx2, align 4
  store i32 %17, i32* %file_index, align 4
  %18 = load %struct.mz_zip_array** %pCentral_dir, align 8
  %19 = load %struct.mz_zip_array** %pCentral_dir_offsets, align 8
  %20 = load i32* %file_index, align 4
  %21 = load i8** %pFilename.addr, align 8
  %22 = load i32* %filename_len, align 4
  store %struct.mz_zip_array* %18, %struct.mz_zip_array** %pCentral_dir_array.addr.i, align 8
  store %struct.mz_zip_array* %19, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i, align 8
  store i32 %20, i32* %l_index.addr.i, align 4
  store i8* %21, i8** %pR.addr.i, align 8
  store i32 %22, i32* %r_len.addr.i, align 4
  %23 = load i32* %l_index.addr.i, align 4
  %idxprom.i = zext i32 %23 to i64
  %24 = load %struct.mz_zip_array** %pCentral_dir_offsets.addr.i, align 8
  %m_p.i = getelementptr inbounds %struct.mz_zip_array* %24, i32 0, i32 0
  %25 = load i8** %m_p.i, align 8
  %26 = bitcast i8* %25 to i32*
  %arrayidx.i = getelementptr inbounds i32* %26, i64 %idxprom.i
  %27 = load i32* %arrayidx.i, align 4
  %idxprom1.i = zext i32 %27 to i64
  %28 = load %struct.mz_zip_array** %pCentral_dir_array.addr.i, align 8
  %m_p2.i = getelementptr inbounds %struct.mz_zip_array* %28, i32 0, i32 0
  %29 = load i8** %m_p2.i, align 8
  %arrayidx3.i = getelementptr inbounds i8* %29, i64 %idxprom1.i
  store i8* %arrayidx3.i, i8** %pL.i, align 8
  %30 = load i8** %pL.i, align 8
  %add.ptr.i = getelementptr inbounds i8* %30, i64 28
  %31 = bitcast i8* %add.ptr.i to i16*
  %32 = load i16* %31, align 2
  %conv.i = zext i16 %32 to i32
  store i32 %conv.i, i32* %l_len.i, align 4
  store i8 0, i8* %l.i, align 1
  store i8 0, i8* %r.i, align 1
  %33 = load i8** %pL.i, align 8
  %add.ptr4.i = getelementptr inbounds i8* %33, i64 46
  store i8* %add.ptr4.i, i8** %pL.i, align 8
  %34 = load i8** %pL.i, align 8
  %35 = load i32* %l_len.i, align 4
  %36 = load i32* %r_len.addr.i, align 4
  %cmp.i = icmp ult i32 %35, %36
  br i1 %cmp.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %while.body
  %37 = load i32* %l_len.i, align 4
  br label %cond.end.i

cond.false.i:                                     ; preds = %while.body
  %38 = load i32* %r_len.addr.i, align 4
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %37, %cond.true.i ], [ %38, %cond.false.i ]
  %idx.ext.i = zext i32 %cond.i to i64
  %add.ptr6.i = getelementptr inbounds i8* %34, i64 %idx.ext.i
  store i8* %add.ptr6.i, i8** %pE.i, align 8
  br label %while.cond.i

while.cond.i:                                     ; preds = %if.end.i, %cond.end.i
  %39 = load i8** %pL.i, align 8
  %40 = load i8** %pE.i, align 8
  %cmp7.i = icmp ult i8* %39, %40
  br i1 %cmp7.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %41 = load i8** %pL.i, align 8
  %42 = load i8* %41, align 1
  %conv9.i = zext i8 %42 to i32
  %cmp10.i = icmp sge i32 %conv9.i, 65
  br i1 %cmp10.i, label %land.lhs.true.i, label %cond.false17.i

land.lhs.true.i:                                  ; preds = %while.body.i
  %43 = load i8** %pL.i, align 8
  %44 = load i8* %43, align 1
  %conv12.i = zext i8 %44 to i32
  %cmp13.i = icmp sle i32 %conv12.i, 90
  br i1 %cmp13.i, label %cond.true15.i, label %cond.false17.i

cond.true15.i:                                    ; preds = %land.lhs.true.i
  %45 = load i8** %pL.i, align 8
  %46 = load i8* %45, align 1
  %conv16.i = zext i8 %46 to i32
  %sub.i = sub nsw i32 %conv16.i, 65
  %add.i = add nsw i32 %sub.i, 97
  br label %cond.end19.i

cond.false17.i:                                   ; preds = %land.lhs.true.i, %while.body.i
  %47 = load i8** %pL.i, align 8
  %48 = load i8* %47, align 1
  %conv18.i = zext i8 %48 to i32
  br label %cond.end19.i

cond.end19.i:                                     ; preds = %cond.false17.i, %cond.true15.i
  %cond20.i = phi i32 [ %add.i, %cond.true15.i ], [ %conv18.i, %cond.false17.i ]
  %conv21.i = trunc i32 %cond20.i to i8
  store i8 %conv21.i, i8* %l.i, align 1
  %conv22.i = zext i8 %conv21.i to i32
  %49 = load i8** %pR.addr.i, align 8
  %50 = load i8* %49, align 1
  %conv23.i = sext i8 %50 to i32
  %cmp24.i = icmp sge i32 %conv23.i, 65
  br i1 %cmp24.i, label %land.lhs.true26.i, label %cond.false34.i

land.lhs.true26.i:                                ; preds = %cond.end19.i
  %51 = load i8** %pR.addr.i, align 8
  %52 = load i8* %51, align 1
  %conv27.i = sext i8 %52 to i32
  %cmp28.i = icmp sle i32 %conv27.i, 90
  br i1 %cmp28.i, label %cond.true30.i, label %cond.false34.i

cond.true30.i:                                    ; preds = %land.lhs.true26.i
  %53 = load i8** %pR.addr.i, align 8
  %54 = load i8* %53, align 1
  %conv31.i = sext i8 %54 to i32
  %sub32.i = sub nsw i32 %conv31.i, 65
  %add33.i = add nsw i32 %sub32.i, 97
  br label %cond.end36.i

cond.false34.i:                                   ; preds = %land.lhs.true26.i, %cond.end19.i
  %55 = load i8** %pR.addr.i, align 8
  %56 = load i8* %55, align 1
  %conv35.i = sext i8 %56 to i32
  br label %cond.end36.i

cond.end36.i:                                     ; preds = %cond.false34.i, %cond.true30.i
  %cond37.i = phi i32 [ %add33.i, %cond.true30.i ], [ %conv35.i, %cond.false34.i ]
  %conv38.i = trunc i32 %cond37.i to i8
  store i8 %conv38.i, i8* %r.i, align 1
  %conv39.i = zext i8 %conv38.i to i32
  %cmp40.i = icmp ne i32 %conv22.i, %conv39.i
  br i1 %cmp40.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %cond.end36.i
  br label %while.end.i

if.end.i:                                         ; preds = %cond.end36.i
  %57 = load i8** %pL.i, align 8
  %incdec.ptr.i = getelementptr inbounds i8* %57, i32 1
  store i8* %incdec.ptr.i, i8** %pL.i, align 8
  %58 = load i8** %pR.addr.i, align 8
  %incdec.ptr42.i = getelementptr inbounds i8* %58, i32 1
  store i8* %incdec.ptr42.i, i8** %pR.addr.i, align 8
  br label %while.cond.i

while.end.i:                                      ; preds = %if.then.i, %while.cond.i
  %59 = load i8** %pL.i, align 8
  %60 = load i8** %pE.i, align 8
  %cmp43.i = icmp eq i8* %59, %60
  br i1 %cmp43.i, label %cond.true45.i, label %cond.false47.i

cond.true45.i:                                    ; preds = %while.end.i
  %61 = load i32* %l_len.i, align 4
  %62 = load i32* %r_len.addr.i, align 4
  %sub46.i = sub i32 %61, %62
  br label %mz_zip_reader_filename_compare.exit

cond.false47.i:                                   ; preds = %while.end.i
  %63 = load i8* %l.i, align 1
  %conv48.i = zext i8 %63 to i32
  %64 = load i8* %r.i, align 1
  %conv49.i = zext i8 %64 to i32
  %sub50.i = sub nsw i32 %conv48.i, %conv49.i
  br label %mz_zip_reader_filename_compare.exit

mz_zip_reader_filename_compare.exit:              ; preds = %cond.false47.i, %cond.true45.i
  %cond52.i = phi i32 [ %sub46.i, %cond.true45.i ], [ %sub50.i, %cond.false47.i ]
  store i32 %cond52.i, i32* %comp, align 4
  %65 = load i32* %comp, align 4
  %tobool = icmp ne i32 %65, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %mz_zip_reader_filename_compare.exit
  %66 = load i32* %file_index, align 4
  store i32 %66, i32* %retval
  br label %return

if.else:                                          ; preds = %mz_zip_reader_filename_compare.exit
  %67 = load i32* %comp, align 4
  %cmp4 = icmp slt i32 %67, 0
  br i1 %cmp4, label %if.then6, label %if.else8

if.then6:                                         ; preds = %if.else
  %68 = load i32* %m, align 4
  %add7 = add nsw i32 %68, 1
  store i32 %add7, i32* %l, align 4
  br label %if.end

if.else8:                                         ; preds = %if.else
  %69 = load i32* %m, align 4
  %sub9 = sub nsw i32 %69, 1
  store i32 %sub9, i32* %h, align 4
  br label %if.end

if.end:                                           ; preds = %if.else8, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then
  %70 = load i32* %retval
  ret i32 %70
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #5

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_extract_to_mem_no_alloc(%struct.mz_zip_archive_tag* %pZip, i32 %file_index, i8* %pBuf, i64 %buf_size, i32 %flags, i8* %pUser_read_buf, i64 %user_read_buf_size) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %pUser_read_buf.addr = alloca i8*, align 8
  %user_read_buf_size.addr = alloca i64, align 8
  %status = alloca i32, align 4
  %needed_size = alloca i64, align 8
  %cur_file_ofs = alloca i64, align 8
  %comp_remaining = alloca i64, align 8
  %out_buf_ofs = alloca i64, align 8
  %read_buf_size = alloca i64, align 8
  %read_buf_ofs = alloca i64, align 8
  %read_buf_avail = alloca i64, align 8
  %file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  %pRead_buf = alloca i8*, align 8
  %local_header_u32 = alloca [8 x i32], align 16
  %pLocal_header = alloca i8*, align 8
  %inflator = alloca %struct.tinfl_decompressor_tag, align 8
  %in_buf_size = alloca i64, align 8
  %out_buf_size = alloca i64, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i8* %pUser_read_buf, i8** %pUser_read_buf.addr, align 8
  store i64 %user_read_buf_size, i64* %user_read_buf_size.addr, align 8
  store i32 0, i32* %status, align 4
  store i64 0, i64* %out_buf_ofs, align 8
  store i64 0, i64* %read_buf_ofs, align 8
  %arraydecay = getelementptr inbounds [8 x i32]* %local_header_u32, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  store i8* %0, i8** %pLocal_header, align 8
  %1 = load i64* %buf_size.addr, align 8
  %tobool = icmp ne i64 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8** %pBuf.addr, align 8
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %4 = load i32* %file_index.addr, align 4
  %call = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive_tag* %3, i32 %4, %struct.mz_zip_archive_file_stat* %file_stat)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end4:                                          ; preds = %if.end
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %5 = load i64* %m_comp_size, align 8
  %tobool5 = icmp ne i64 %5, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  store i32 1, i32* %retval
  br label %return

if.end7:                                          ; preds = %if.end4
  %6 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %7 = load i32* %file_index.addr, align 4
  %call8 = call i32 @mz_zip_reader_is_file_a_directory(%struct.mz_zip_archive_tag* %6, i32 %7)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end7
  store i32 1, i32* %retval
  br label %return

if.end11:                                         ; preds = %if.end7
  %m_bit_flag = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 4
  %8 = load i16* %m_bit_flag, align 2
  %conv = zext i16 %8 to i32
  %and = and i32 %conv, 33
  %tobool12 = icmp ne i32 %and, 0
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end11
  store i32 0, i32* %retval
  br label %return

if.end14:                                         ; preds = %if.end11
  %9 = load i32* %flags.addr, align 4
  %and15 = and i32 %9, 1024
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.end26, label %land.lhs.true17

land.lhs.true17:                                  ; preds = %if.end14
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %10 = load i16* %m_method, align 2
  %conv18 = zext i16 %10 to i32
  %cmp = icmp ne i32 %conv18, 0
  br i1 %cmp, label %land.lhs.true20, label %if.end26

land.lhs.true20:                                  ; preds = %land.lhs.true17
  %m_method21 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %11 = load i16* %m_method21, align 2
  %conv22 = zext i16 %11 to i32
  %cmp23 = icmp ne i32 %conv22, 8
  br i1 %cmp23, label %if.then25, label %if.end26

if.then25:                                        ; preds = %land.lhs.true20
  store i32 0, i32* %retval
  br label %return

if.end26:                                         ; preds = %land.lhs.true20, %land.lhs.true17, %if.end14
  %12 = load i32* %flags.addr, align 4
  %and27 = and i32 %12, 1024
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end26
  %m_comp_size29 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %13 = load i64* %m_comp_size29, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end26
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %14 = load i64* %m_uncomp_size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %13, %cond.true ], [ %14, %cond.false ]
  store i64 %cond, i64* %needed_size, align 8
  %15 = load i64* %buf_size.addr, align 8
  %16 = load i64* %needed_size, align 8
  %cmp30 = icmp ult i64 %15, %16
  br i1 %cmp30, label %if.then32, label %if.end33

if.then32:                                        ; preds = %cond.end
  store i32 0, i32* %retval
  br label %return

if.end33:                                         ; preds = %cond.end
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 12
  %17 = load i64* %m_local_header_ofs, align 8
  store i64 %17, i64* %cur_file_ofs, align 8
  %18 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive_tag* %18, i32 0, i32 9
  %19 = load i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %20 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %20, i32 0, i32 11
  %21 = load i8** %m_pIO_opaque, align 8
  %22 = load i64* %cur_file_ofs, align 8
  %23 = load i8** %pLocal_header, align 8
  %call34 = call i64 %19(i8* %21, i64 %22, i8* %23, i64 30)
  %cmp35 = icmp ne i64 %call34, 30
  br i1 %cmp35, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.end33
  store i32 0, i32* %retval
  br label %return

if.end38:                                         ; preds = %if.end33
  %24 = load i8** %pLocal_header, align 8
  %25 = bitcast i8* %24 to i32*
  %26 = load i32* %25, align 4
  %cmp39 = icmp ne i32 %26, 67324752
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end38
  store i32 0, i32* %retval
  br label %return

if.end42:                                         ; preds = %if.end38
  %27 = load i8** %pLocal_header, align 8
  %add.ptr = getelementptr inbounds i8* %27, i64 26
  %28 = bitcast i8* %add.ptr to i16*
  %29 = load i16* %28, align 2
  %conv43 = zext i16 %29 to i32
  %add = add nsw i32 30, %conv43
  %30 = load i8** %pLocal_header, align 8
  %add.ptr44 = getelementptr inbounds i8* %30, i64 28
  %31 = bitcast i8* %add.ptr44 to i16*
  %32 = load i16* %31, align 2
  %conv45 = zext i16 %32 to i32
  %add46 = add nsw i32 %add, %conv45
  %conv47 = sext i32 %add46 to i64
  %33 = load i64* %cur_file_ofs, align 8
  %add48 = add i64 %33, %conv47
  store i64 %add48, i64* %cur_file_ofs, align 8
  %34 = load i64* %cur_file_ofs, align 8
  %m_comp_size49 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %35 = load i64* %m_comp_size49, align 8
  %add50 = add i64 %34, %35
  %36 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %36, i32 0, i32 0
  %37 = load i64* %m_archive_size, align 8
  %cmp51 = icmp ugt i64 %add50, %37
  br i1 %cmp51, label %if.then53, label %if.end54

if.then53:                                        ; preds = %if.end42
  store i32 0, i32* %retval
  br label %return

if.end54:                                         ; preds = %if.end42
  %38 = load i32* %flags.addr, align 4
  %and55 = and i32 %38, 1024
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %if.then59, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end54
  %m_method57 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %39 = load i16* %m_method57, align 2
  %tobool58 = icmp ne i16 %39, 0
  br i1 %tobool58, label %if.end75, label %if.then59

if.then59:                                        ; preds = %lor.lhs.false, %if.end54
  %40 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRead60 = getelementptr inbounds %struct.mz_zip_archive_tag* %40, i32 0, i32 9
  %41 = load i64 (i8*, i64, i8*, i64)** %m_pRead60, align 8
  %42 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque61 = getelementptr inbounds %struct.mz_zip_archive_tag* %42, i32 0, i32 11
  %43 = load i8** %m_pIO_opaque61, align 8
  %44 = load i64* %cur_file_ofs, align 8
  %45 = load i8** %pBuf.addr, align 8
  %46 = load i64* %needed_size, align 8
  %call62 = call i64 %41(i8* %43, i64 %44, i8* %45, i64 %46)
  %47 = load i64* %needed_size, align 8
  %cmp63 = icmp ne i64 %call62, %47
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %if.then59
  store i32 0, i32* %retval
  br label %return

if.end66:                                         ; preds = %if.then59
  %48 = load i32* %flags.addr, align 4
  %and67 = and i32 %48, 1024
  %cmp68 = icmp ne i32 %and67, 0
  br i1 %cmp68, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end66
  %49 = load i8** %pBuf.addr, align 8
  %m_uncomp_size70 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %50 = load i64* %m_uncomp_size70, align 8
  %call71 = call i64 @mz_crc32(i64 0, i8* %49, i64 %50)
  %m_crc32 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %51 = load i32* %m_crc32, align 4
  %conv72 = zext i32 %51 to i64
  %cmp73 = icmp eq i64 %call71, %conv72
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end66
  %52 = phi i1 [ true, %if.end66 ], [ %cmp73, %lor.rhs ]
  %lor.ext = zext i1 %52 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

if.end75:                                         ; preds = %lor.lhs.false
  br label %do.body

do.body:                                          ; preds = %if.end75
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag* %inflator, i32 0, i32 0
  store i32 0, i32* %m_state, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %53 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %53, i32 0, i32 12
  %54 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag* %54, i32 0, i32 4
  %55 = load i8** %m_pMem, align 8
  %tobool76 = icmp ne i8* %55, null
  br i1 %tobool76, label %if.then77, label %if.else

if.then77:                                        ; preds = %do.end
  %56 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState78 = getelementptr inbounds %struct.mz_zip_archive_tag* %56, i32 0, i32 12
  %57 = load %struct.mz_zip_internal_state_tag** %m_pState78, align 8
  %m_pMem79 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %57, i32 0, i32 4
  %58 = load i8** %m_pMem79, align 8
  %59 = load i64* %cur_file_ofs, align 8
  %add.ptr80 = getelementptr inbounds i8* %58, i64 %59
  store i8* %add.ptr80, i8** %pRead_buf, align 8
  %m_comp_size81 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %60 = load i64* %m_comp_size81, align 8
  store i64 %60, i64* %read_buf_avail, align 8
  store i64 %60, i64* %read_buf_size, align 8
  store i64 0, i64* %comp_remaining, align 8
  br label %if.end104

if.else:                                          ; preds = %do.end
  %61 = load i8** %pUser_read_buf.addr, align 8
  %tobool82 = icmp ne i8* %61, null
  br i1 %tobool82, label %if.then83, label %if.else88

if.then83:                                        ; preds = %if.else
  %62 = load i64* %user_read_buf_size.addr, align 8
  %tobool84 = icmp ne i64 %62, 0
  br i1 %tobool84, label %if.end86, label %if.then85

if.then85:                                        ; preds = %if.then83
  store i32 0, i32* %retval
  br label %return

if.end86:                                         ; preds = %if.then83
  %63 = load i8** %pUser_read_buf.addr, align 8
  store i8* %63, i8** %pRead_buf, align 8
  %64 = load i64* %user_read_buf_size.addr, align 8
  store i64 %64, i64* %read_buf_size, align 8
  store i64 0, i64* %read_buf_avail, align 8
  %m_comp_size87 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %65 = load i64* %m_comp_size87, align 8
  store i64 %65, i64* %comp_remaining, align 8
  br label %if.end103

if.else88:                                        ; preds = %if.else
  %m_comp_size89 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %66 = load i64* %m_comp_size89, align 8
  %cmp90 = icmp ult i64 %66, 65536
  br i1 %cmp90, label %cond.true92, label %cond.false94

cond.true92:                                      ; preds = %if.else88
  %m_comp_size93 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %67 = load i64* %m_comp_size93, align 8
  br label %cond.end95

cond.false94:                                     ; preds = %if.else88
  br label %cond.end95

cond.end95:                                       ; preds = %cond.false94, %cond.true92
  %cond96 = phi i64 [ %67, %cond.true92 ], [ 65536, %cond.false94 ]
  store i64 %cond96, i64* %read_buf_size, align 8
  %68 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive_tag* %68, i32 0, i32 5
  %69 = load i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %70 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %70, i32 0, i32 8
  %71 = load i8** %m_pAlloc_opaque, align 8
  %72 = load i64* %read_buf_size, align 8
  %call97 = call i8* %69(i8* %71, i64 1, i64 %72)
  store i8* %call97, i8** %pRead_buf, align 8
  %cmp98 = icmp eq i8* null, %call97
  br i1 %cmp98, label %if.then100, label %if.end101

if.then100:                                       ; preds = %cond.end95
  store i32 0, i32* %retval
  br label %return

if.end101:                                        ; preds = %cond.end95
  store i64 0, i64* %read_buf_avail, align 8
  %m_comp_size102 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %73 = load i64* %m_comp_size102, align 8
  store i64 %73, i64* %comp_remaining, align 8
  br label %if.end103

if.end103:                                        ; preds = %if.end101, %if.end86
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.then77
  br label %do.body105

do.body105:                                       ; preds = %do.cond, %if.end104
  %m_uncomp_size106 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %74 = load i64* %m_uncomp_size106, align 8
  %75 = load i64* %out_buf_ofs, align 8
  %sub = sub i64 %74, %75
  store i64 %sub, i64* %out_buf_size, align 8
  %76 = load i64* %read_buf_avail, align 8
  %tobool107 = icmp ne i64 %76, 0
  br i1 %tobool107, label %if.end128, label %land.lhs.true108

land.lhs.true108:                                 ; preds = %do.body105
  %77 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState109 = getelementptr inbounds %struct.mz_zip_archive_tag* %77, i32 0, i32 12
  %78 = load %struct.mz_zip_internal_state_tag** %m_pState109, align 8
  %m_pMem110 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %78, i32 0, i32 4
  %79 = load i8** %m_pMem110, align 8
  %tobool111 = icmp ne i8* %79, null
  br i1 %tobool111, label %if.end128, label %if.then112

if.then112:                                       ; preds = %land.lhs.true108
  %80 = load i64* %read_buf_size, align 8
  %81 = load i64* %comp_remaining, align 8
  %cmp113 = icmp ult i64 %80, %81
  br i1 %cmp113, label %cond.true115, label %cond.false116

cond.true115:                                     ; preds = %if.then112
  %82 = load i64* %read_buf_size, align 8
  br label %cond.end117

cond.false116:                                    ; preds = %if.then112
  %83 = load i64* %comp_remaining, align 8
  br label %cond.end117

cond.end117:                                      ; preds = %cond.false116, %cond.true115
  %cond118 = phi i64 [ %82, %cond.true115 ], [ %83, %cond.false116 ]
  store i64 %cond118, i64* %read_buf_avail, align 8
  %84 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRead119 = getelementptr inbounds %struct.mz_zip_archive_tag* %84, i32 0, i32 9
  %85 = load i64 (i8*, i64, i8*, i64)** %m_pRead119, align 8
  %86 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque120 = getelementptr inbounds %struct.mz_zip_archive_tag* %86, i32 0, i32 11
  %87 = load i8** %m_pIO_opaque120, align 8
  %88 = load i64* %cur_file_ofs, align 8
  %89 = load i8** %pRead_buf, align 8
  %90 = load i64* %read_buf_avail, align 8
  %call121 = call i64 %85(i8* %87, i64 %88, i8* %89, i64 %90)
  %91 = load i64* %read_buf_avail, align 8
  %cmp122 = icmp ne i64 %call121, %91
  br i1 %cmp122, label %if.then124, label %if.end125

if.then124:                                       ; preds = %cond.end117
  store i32 -1, i32* %status, align 4
  br label %do.end139

if.end125:                                        ; preds = %cond.end117
  %92 = load i64* %read_buf_avail, align 8
  %93 = load i64* %cur_file_ofs, align 8
  %add126 = add i64 %93, %92
  store i64 %add126, i64* %cur_file_ofs, align 8
  %94 = load i64* %read_buf_avail, align 8
  %95 = load i64* %comp_remaining, align 8
  %sub127 = sub i64 %95, %94
  store i64 %sub127, i64* %comp_remaining, align 8
  store i64 0, i64* %read_buf_ofs, align 8
  br label %if.end128

if.end128:                                        ; preds = %if.end125, %land.lhs.true108, %do.body105
  %96 = load i64* %read_buf_avail, align 8
  store i64 %96, i64* %in_buf_size, align 8
  %97 = load i8** %pRead_buf, align 8
  %98 = load i64* %read_buf_ofs, align 8
  %add.ptr129 = getelementptr inbounds i8* %97, i64 %98
  %99 = load i8** %pBuf.addr, align 8
  %100 = load i8** %pBuf.addr, align 8
  %101 = load i64* %out_buf_ofs, align 8
  %add.ptr130 = getelementptr inbounds i8* %100, i64 %101
  %102 = load i64* %comp_remaining, align 8
  %tobool131 = icmp ne i64 %102, 0
  %cond132 = select i1 %tobool131, i32 2, i32 0
  %or = or i32 4, %cond132
  %call133 = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %inflator, i8* %add.ptr129, i64* %in_buf_size, i8* %99, i8* %add.ptr130, i64* %out_buf_size, i32 %or)
  store i32 %call133, i32* %status, align 4
  %103 = load i64* %in_buf_size, align 8
  %104 = load i64* %read_buf_avail, align 8
  %sub134 = sub i64 %104, %103
  store i64 %sub134, i64* %read_buf_avail, align 8
  %105 = load i64* %in_buf_size, align 8
  %106 = load i64* %read_buf_ofs, align 8
  %add135 = add i64 %106, %105
  store i64 %add135, i64* %read_buf_ofs, align 8
  %107 = load i64* %out_buf_size, align 8
  %108 = load i64* %out_buf_ofs, align 8
  %add136 = add i64 %108, %107
  store i64 %add136, i64* %out_buf_ofs, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end128
  %109 = load i32* %status, align 4
  %cmp137 = icmp eq i32 %109, 1
  br i1 %cmp137, label %do.body105, label %do.end139

do.end139:                                        ; preds = %do.cond, %if.then124
  %110 = load i32* %status, align 4
  %cmp140 = icmp eq i32 %110, 0
  br i1 %cmp140, label %if.then142, label %if.end155

if.then142:                                       ; preds = %do.end139
  %111 = load i64* %out_buf_ofs, align 8
  %m_uncomp_size143 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %112 = load i64* %m_uncomp_size143, align 8
  %cmp144 = icmp ne i64 %111, %112
  br i1 %cmp144, label %if.then153, label %lor.lhs.false146

lor.lhs.false146:                                 ; preds = %if.then142
  %113 = load i8** %pBuf.addr, align 8
  %m_uncomp_size147 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %114 = load i64* %m_uncomp_size147, align 8
  %call148 = call i64 @mz_crc32(i64 0, i8* %113, i64 %114)
  %m_crc32149 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %115 = load i32* %m_crc32149, align 4
  %conv150 = zext i32 %115 to i64
  %cmp151 = icmp ne i64 %call148, %conv150
  br i1 %cmp151, label %if.then153, label %if.end154

if.then153:                                       ; preds = %lor.lhs.false146, %if.then142
  store i32 -1, i32* %status, align 4
  br label %if.end154

if.end154:                                        ; preds = %if.then153, %lor.lhs.false146
  br label %if.end155

if.end155:                                        ; preds = %if.end154, %do.end139
  %116 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState156 = getelementptr inbounds %struct.mz_zip_archive_tag* %116, i32 0, i32 12
  %117 = load %struct.mz_zip_internal_state_tag** %m_pState156, align 8
  %m_pMem157 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %117, i32 0, i32 4
  %118 = load i8** %m_pMem157, align 8
  %tobool158 = icmp ne i8* %118, null
  br i1 %tobool158, label %if.end163, label %land.lhs.true159

land.lhs.true159:                                 ; preds = %if.end155
  %119 = load i8** %pUser_read_buf.addr, align 8
  %tobool160 = icmp ne i8* %119, null
  br i1 %tobool160, label %if.end163, label %if.then161

if.then161:                                       ; preds = %land.lhs.true159
  %120 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive_tag* %120, i32 0, i32 6
  %121 = load void (i8*, i8*)** %m_pFree, align 8
  %122 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque162 = getelementptr inbounds %struct.mz_zip_archive_tag* %122, i32 0, i32 8
  %123 = load i8** %m_pAlloc_opaque162, align 8
  %124 = load i8** %pRead_buf, align 8
  call void %121(i8* %123, i8* %124)
  br label %if.end163

if.end163:                                        ; preds = %if.then161, %land.lhs.true159, %if.end155
  %125 = load i32* %status, align 4
  %cmp164 = icmp eq i32 %125, 0
  %conv165 = zext i1 %cmp164 to i32
  store i32 %conv165, i32* %retval
  br label %return

return:                                           ; preds = %if.end163, %if.then100, %if.then85, %lor.end, %if.then65, %if.then53, %if.then41, %if.then37, %if.then32, %if.then25, %if.then13, %if.then10, %if.then6, %if.then3, %if.then
  %126 = load i32* %retval
  ret i32 %126
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_extract_file_to_mem_no_alloc(%struct.mz_zip_archive_tag* %pZip, i8* %pFilename, i8* %pBuf, i64 %buf_size, i32 %flags, i8* %pUser_read_buf, i64 %user_read_buf_size) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %pUser_read_buf.addr = alloca i8*, align 8
  %user_read_buf_size.addr = alloca i64, align 8
  %file_index = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i8* %pUser_read_buf, i8** %pUser_read_buf.addr, align 8
  store i64 %user_read_buf_size, i64* %user_read_buf_size.addr, align 8
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i8** %pFilename.addr, align 8
  %2 = load i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_locate_file(%struct.mz_zip_archive_tag* %0, i8* %1, i8* null, i32 %2)
  store i32 %call, i32* %file_index, align 4
  %3 = load i32* %file_index, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %5 = load i32* %file_index, align 4
  %6 = load i8** %pBuf.addr, align 8
  %7 = load i64* %buf_size.addr, align 8
  %8 = load i32* %flags.addr, align 4
  %9 = load i8** %pUser_read_buf.addr, align 8
  %10 = load i64* %user_read_buf_size.addr, align 8
  %call1 = call i32 @mz_zip_reader_extract_to_mem_no_alloc(%struct.mz_zip_archive_tag* %4, i32 %5, i8* %6, i64 %7, i32 %8, i8* %9, i64 %10)
  store i32 %call1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_extract_to_mem(%struct.mz_zip_archive_tag* %pZip, i32 %file_index, i8* %pBuf, i64 %buf_size, i32 %flags) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i32* %file_index.addr, align 4
  %2 = load i8** %pBuf.addr, align 8
  %3 = load i64* %buf_size.addr, align 8
  %4 = load i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_extract_to_mem_no_alloc(%struct.mz_zip_archive_tag* %0, i32 %1, i8* %2, i64 %3, i32 %4, i8* null, i64 0)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_extract_file_to_mem(%struct.mz_zip_archive_tag* %pZip, i8* %pFilename, i8* %pBuf, i64 %buf_size, i32 %flags) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i8** %pFilename.addr, align 8
  %2 = load i8** %pBuf.addr, align 8
  %3 = load i64* %buf_size.addr, align 8
  %4 = load i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_extract_file_to_mem_no_alloc(%struct.mz_zip_archive_tag* %0, i8* %1, i8* %2, i64 %3, i32 %4, i8* null, i64 0)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define i8* @mz_zip_reader_extract_to_heap(%struct.mz_zip_archive_tag* %pZip, i32 %file_index, i64* %pSize, i32 %flags) #0 {
entry:
  %retval.i = alloca i8*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr.i = alloca i32, align 4
  %retval = alloca i8*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr = alloca i32, align 4
  %pSize.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %comp_size = alloca i64, align 8
  %uncomp_size = alloca i64, align 8
  %alloc_size = alloca i64, align 8
  %p = alloca i8*, align 8
  %pBuf = alloca i8*, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i64* %pSize, i64** %pSize.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i32* %file_index.addr, align 4
  store %struct.mz_zip_archive_tag* %0, %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  store i32 %1, i32* %file_index.addr.i, align 4
  %2 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive_tag* %2, null
  br i1 %tobool.i, label %lor.lhs.false.i, label %if.then.i

lor.lhs.false.i:                                  ; preds = %entry
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState.i = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 12
  %4 = load %struct.mz_zip_internal_state_tag** %m_pState.i, align 8
  %tobool1.i = icmp ne %struct.mz_zip_internal_state_tag* %4, null
  br i1 %tobool1.i, label %lor.lhs.false2.i, label %if.then.i

lor.lhs.false2.i:                                 ; preds = %lor.lhs.false.i
  %5 = load i32* %file_index.addr.i, align 4
  %6 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_total_files.i = getelementptr inbounds %struct.mz_zip_archive_tag* %6, i32 0, i32 2
  %7 = load i32* %m_total_files.i, align 4
  %cmp.i = icmp uge i32 %5, %7
  br i1 %cmp.i, label %if.then.i, label %lor.lhs.false3.i

lor.lhs.false3.i:                                 ; preds = %lor.lhs.false2.i
  %8 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_zip_mode.i = getelementptr inbounds %struct.mz_zip_archive_tag* %8, i32 0, i32 3
  %9 = load i32* %m_zip_mode.i, align 4
  %cmp4.i = icmp ne i32 %9, 1
  br i1 %cmp4.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %lor.lhs.false3.i, %lor.lhs.false2.i, %lor.lhs.false.i, %entry
  store i8* null, i8** %retval.i
  br label %mz_zip_reader_get_cdh.exit

if.end.i:                                         ; preds = %lor.lhs.false3.i
  %10 = load i32* %file_index.addr.i, align 4
  %idxprom.i = zext i32 %10 to i64
  %11 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState5.i = getelementptr inbounds %struct.mz_zip_archive_tag* %11, i32 0, i32 12
  %12 = load %struct.mz_zip_internal_state_tag** %m_pState5.i, align 8
  %m_central_dir_offsets.i = getelementptr inbounds %struct.mz_zip_internal_state_tag* %12, i32 0, i32 1
  %m_p.i = getelementptr inbounds %struct.mz_zip_array* %m_central_dir_offsets.i, i32 0, i32 0
  %13 = load i8** %m_p.i, align 8
  %14 = bitcast i8* %13 to i32*
  %arrayidx.i = getelementptr inbounds i32* %14, i64 %idxprom.i
  %15 = load i32* %arrayidx.i, align 4
  %idxprom6.i = zext i32 %15 to i64
  %16 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState7.i = getelementptr inbounds %struct.mz_zip_archive_tag* %16, i32 0, i32 12
  %17 = load %struct.mz_zip_internal_state_tag** %m_pState7.i, align 8
  %m_central_dir.i = getelementptr inbounds %struct.mz_zip_internal_state_tag* %17, i32 0, i32 0
  %m_p8.i = getelementptr inbounds %struct.mz_zip_array* %m_central_dir.i, i32 0, i32 0
  %18 = load i8** %m_p8.i, align 8
  %arrayidx9.i = getelementptr inbounds i8* %18, i64 %idxprom6.i
  store i8* %arrayidx9.i, i8** %retval.i
  br label %mz_zip_reader_get_cdh.exit

mz_zip_reader_get_cdh.exit:                       ; preds = %if.end.i, %if.then.i
  %19 = load i8** %retval.i
  store i8* %19, i8** %p, align 8
  %20 = load i64** %pSize.addr, align 8
  %tobool = icmp ne i64* %20, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %mz_zip_reader_get_cdh.exit
  %21 = load i64** %pSize.addr, align 8
  store i64 0, i64* %21, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %mz_zip_reader_get_cdh.exit
  %22 = load i8** %p, align 8
  %tobool1 = icmp ne i8* %22, null
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i8* null, i8** %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %23 = load i8** %p, align 8
  %add.ptr = getelementptr inbounds i8* %23, i64 20
  %24 = bitcast i8* %add.ptr to i32*
  %25 = load i32* %24, align 4
  %conv = zext i32 %25 to i64
  store i64 %conv, i64* %comp_size, align 8
  %26 = load i8** %p, align 8
  %add.ptr4 = getelementptr inbounds i8* %26, i64 24
  %27 = bitcast i8* %add.ptr4 to i32*
  %28 = load i32* %27, align 4
  %conv5 = zext i32 %28 to i64
  store i64 %conv5, i64* %uncomp_size, align 8
  %29 = load i32* %flags.addr, align 4
  %and = and i32 %29, 1024
  %tobool6 = icmp ne i32 %and, 0
  br i1 %tobool6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end3
  %30 = load i64* %comp_size, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end3
  %31 = load i64* %uncomp_size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %30, %cond.true ], [ %31, %cond.false ]
  store i64 %cond, i64* %alloc_size, align 8
  %32 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive_tag* %32, i32 0, i32 5
  %33 = load i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %34 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %34, i32 0, i32 8
  %35 = load i8** %m_pAlloc_opaque, align 8
  %36 = load i64* %alloc_size, align 8
  %call7 = call i8* %33(i8* %35, i64 1, i64 %36)
  store i8* %call7, i8** %pBuf, align 8
  %cmp = icmp eq i8* null, %call7
  br i1 %cmp, label %if.then9, label %if.end10

if.then9:                                         ; preds = %cond.end
  store i8* null, i8** %retval
  br label %return

if.end10:                                         ; preds = %cond.end
  %37 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %38 = load i32* %file_index.addr, align 4
  %39 = load i8** %pBuf, align 8
  %40 = load i64* %alloc_size, align 8
  %41 = load i32* %flags.addr, align 4
  %call11 = call i32 @mz_zip_reader_extract_to_mem(%struct.mz_zip_archive_tag* %37, i32 %38, i8* %39, i64 %40, i32 %41)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end15, label %if.then13

if.then13:                                        ; preds = %if.end10
  %42 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive_tag* %42, i32 0, i32 6
  %43 = load void (i8*, i8*)** %m_pFree, align 8
  %44 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque14 = getelementptr inbounds %struct.mz_zip_archive_tag* %44, i32 0, i32 8
  %45 = load i8** %m_pAlloc_opaque14, align 8
  %46 = load i8** %pBuf, align 8
  call void %43(i8* %45, i8* %46)
  store i8* null, i8** %retval
  br label %return

if.end15:                                         ; preds = %if.end10
  %47 = load i64** %pSize.addr, align 8
  %tobool16 = icmp ne i64* %47, null
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end15
  %48 = load i64* %alloc_size, align 8
  %49 = load i64** %pSize.addr, align 8
  store i64 %48, i64* %49, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end15
  %50 = load i8** %pBuf, align 8
  store i8* %50, i8** %retval
  br label %return

return:                                           ; preds = %if.end18, %if.then13, %if.then9, %if.then2
  %51 = load i8** %retval
  ret i8* %51
}

; Function Attrs: nounwind uwtable
define i8* @mz_zip_reader_extract_file_to_heap(%struct.mz_zip_archive_tag* %pZip, i8* %pFilename, i64* %pSize, i32 %flags) #0 {
entry:
  %retval = alloca i8*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pSize.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i64* %pSize, i64** %pSize.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i8** %pFilename.addr, align 8
  %2 = load i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_locate_file(%struct.mz_zip_archive_tag* %0, i8* %1, i8* null, i32 %2)
  store i32 %call, i32* %file_index, align 4
  %3 = load i32* %file_index, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end2

if.then:                                          ; preds = %entry
  %4 = load i64** %pSize.addr, align 8
  %tobool = icmp ne i64* %4, null
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %5 = load i64** %pSize.addr, align 8
  store i64 0, i64* %5, align 8
  br label %if.end

if.end:                                           ; preds = %if.then1, %if.then
  store i8* null, i8** %retval
  br label %return

if.end2:                                          ; preds = %entry
  %6 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %7 = load i32* %file_index, align 4
  %8 = load i64** %pSize.addr, align 8
  %9 = load i32* %flags.addr, align 4
  %call3 = call i8* @mz_zip_reader_extract_to_heap(%struct.mz_zip_archive_tag* %6, i32 %7, i64* %8, i32 %9)
  store i8* %call3, i8** %retval
  br label %return

return:                                           ; preds = %if.end2, %if.end
  %10 = load i8** %retval
  ret i8* %10
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_extract_to_callback(%struct.mz_zip_archive_tag* %pZip, i32 %file_index, i64 (i8*, i64, i8*, i64)* %pCallback, i8* %pOpaque, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr = alloca i32, align 4
  %pCallback.addr = alloca i64 (i8*, i64, i8*, i64)*, align 8
  %pOpaque.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %file_crc32 = alloca i32, align 4
  %read_buf_size = alloca i64, align 8
  %read_buf_ofs = alloca i64, align 8
  %read_buf_avail = alloca i64, align 8
  %comp_remaining = alloca i64, align 8
  %out_buf_ofs = alloca i64, align 8
  %cur_file_ofs = alloca i64, align 8
  %file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  %pRead_buf = alloca i8*, align 8
  %pWrite_buf = alloca i8*, align 8
  %local_header_u32 = alloca [8 x i32], align 16
  %pLocal_header = alloca i8*, align 8
  %inflator = alloca %struct.tinfl_decompressor_tag, align 8
  %pWrite_buf_cur = alloca i8*, align 8
  %in_buf_size = alloca i64, align 8
  %out_buf_size = alloca i64, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i64 (i8*, i64, i8*, i64)* %pCallback, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 0, i32* %status, align 4
  store i32 0, i32* %file_crc32, align 4
  store i64 0, i64* %read_buf_ofs, align 8
  store i64 0, i64* %out_buf_ofs, align 8
  store i8* null, i8** %pRead_buf, align 8
  store i8* null, i8** %pWrite_buf, align 8
  %arraydecay = getelementptr inbounds [8 x i32]* %local_header_u32, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  store i8* %0, i8** %pLocal_header, align 8
  %1 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %2 = load i32* %file_index.addr, align 4
  %call = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive_tag* %1, i32 %2, %struct.mz_zip_archive_file_stat* %file_stat)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %3 = load i64* %m_comp_size, align 8
  %tobool1 = icmp ne i64 %3, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %4 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %5 = load i32* %file_index.addr, align 4
  %call4 = call i32 @mz_zip_reader_is_file_a_directory(%struct.mz_zip_archive_tag* %4, i32 %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end3
  store i32 1, i32* %retval
  br label %return

if.end7:                                          ; preds = %if.end3
  %m_bit_flag = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 4
  %6 = load i16* %m_bit_flag, align 2
  %conv = zext i16 %6 to i32
  %and = and i32 %conv, 33
  %tobool8 = icmp ne i32 %and, 0
  br i1 %tobool8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end7
  store i32 0, i32* %retval
  br label %return

if.end10:                                         ; preds = %if.end7
  %7 = load i32* %flags.addr, align 4
  %and11 = and i32 %7, 1024
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.end21, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end10
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %8 = load i16* %m_method, align 2
  %conv13 = zext i16 %8 to i32
  %cmp = icmp ne i32 %conv13, 0
  br i1 %cmp, label %land.lhs.true15, label %if.end21

land.lhs.true15:                                  ; preds = %land.lhs.true
  %m_method16 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %9 = load i16* %m_method16, align 2
  %conv17 = zext i16 %9 to i32
  %cmp18 = icmp ne i32 %conv17, 8
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %land.lhs.true15
  store i32 0, i32* %retval
  br label %return

if.end21:                                         ; preds = %land.lhs.true15, %land.lhs.true, %if.end10
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 12
  %10 = load i64* %m_local_header_ofs, align 8
  store i64 %10, i64* %cur_file_ofs, align 8
  %11 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive_tag* %11, i32 0, i32 9
  %12 = load i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %13 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %13, i32 0, i32 11
  %14 = load i8** %m_pIO_opaque, align 8
  %15 = load i64* %cur_file_ofs, align 8
  %16 = load i8** %pLocal_header, align 8
  %call22 = call i64 %12(i8* %14, i64 %15, i8* %16, i64 30)
  %cmp23 = icmp ne i64 %call22, 30
  br i1 %cmp23, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.end21
  store i32 0, i32* %retval
  br label %return

if.end26:                                         ; preds = %if.end21
  %17 = load i8** %pLocal_header, align 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32* %18, align 4
  %cmp27 = icmp ne i32 %19, 67324752
  br i1 %cmp27, label %if.then29, label %if.end30

if.then29:                                        ; preds = %if.end26
  store i32 0, i32* %retval
  br label %return

if.end30:                                         ; preds = %if.end26
  %20 = load i8** %pLocal_header, align 8
  %add.ptr = getelementptr inbounds i8* %20, i64 26
  %21 = bitcast i8* %add.ptr to i16*
  %22 = load i16* %21, align 2
  %conv31 = zext i16 %22 to i32
  %add = add nsw i32 30, %conv31
  %23 = load i8** %pLocal_header, align 8
  %add.ptr32 = getelementptr inbounds i8* %23, i64 28
  %24 = bitcast i8* %add.ptr32 to i16*
  %25 = load i16* %24, align 2
  %conv33 = zext i16 %25 to i32
  %add34 = add nsw i32 %add, %conv33
  %conv35 = sext i32 %add34 to i64
  %26 = load i64* %cur_file_ofs, align 8
  %add36 = add i64 %26, %conv35
  store i64 %add36, i64* %cur_file_ofs, align 8
  %27 = load i64* %cur_file_ofs, align 8
  %m_comp_size37 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %28 = load i64* %m_comp_size37, align 8
  %add38 = add i64 %27, %28
  %29 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %29, i32 0, i32 0
  %30 = load i64* %m_archive_size, align 8
  %cmp39 = icmp ugt i64 %add38, %30
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end30
  store i32 0, i32* %retval
  br label %return

if.end42:                                         ; preds = %if.end30
  %31 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %31, i32 0, i32 12
  %32 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag* %32, i32 0, i32 4
  %33 = load i8** %m_pMem, align 8
  %tobool43 = icmp ne i8* %33, null
  br i1 %tobool43, label %if.then44, label %if.else

if.then44:                                        ; preds = %if.end42
  %34 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState45 = getelementptr inbounds %struct.mz_zip_archive_tag* %34, i32 0, i32 12
  %35 = load %struct.mz_zip_internal_state_tag** %m_pState45, align 8
  %m_pMem46 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %35, i32 0, i32 4
  %36 = load i8** %m_pMem46, align 8
  %37 = load i64* %cur_file_ofs, align 8
  %add.ptr47 = getelementptr inbounds i8* %36, i64 %37
  store i8* %add.ptr47, i8** %pRead_buf, align 8
  %m_comp_size48 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %38 = load i64* %m_comp_size48, align 8
  store i64 %38, i64* %read_buf_avail, align 8
  store i64 %38, i64* %read_buf_size, align 8
  store i64 0, i64* %comp_remaining, align 8
  br label %if.end59

if.else:                                          ; preds = %if.end42
  %m_comp_size49 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %39 = load i64* %m_comp_size49, align 8
  %cmp50 = icmp ult i64 %39, 65536
  br i1 %cmp50, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %m_comp_size52 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %40 = load i64* %m_comp_size52, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %40, %cond.true ], [ 65536, %cond.false ]
  store i64 %cond, i64* %read_buf_size, align 8
  %41 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive_tag* %41, i32 0, i32 5
  %42 = load i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %43 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %43, i32 0, i32 8
  %44 = load i8** %m_pAlloc_opaque, align 8
  %45 = load i64* %read_buf_size, align 8
  %call53 = call i8* %42(i8* %44, i64 1, i64 %45)
  store i8* %call53, i8** %pRead_buf, align 8
  %cmp54 = icmp eq i8* null, %call53
  br i1 %cmp54, label %if.then56, label %if.end57

if.then56:                                        ; preds = %cond.end
  store i32 0, i32* %retval
  br label %return

if.end57:                                         ; preds = %cond.end
  store i64 0, i64* %read_buf_avail, align 8
  %m_comp_size58 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %46 = load i64* %m_comp_size58, align 8
  store i64 %46, i64* %comp_remaining, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.end57, %if.then44
  %47 = load i32* %flags.addr, align 4
  %and60 = and i32 %47, 1024
  %tobool61 = icmp ne i32 %and60, 0
  br i1 %tobool61, label %if.then64, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end59
  %m_method62 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %48 = load i16* %m_method62, align 2
  %tobool63 = icmp ne i16 %48, 0
  br i1 %tobool63, label %if.else119, label %if.then64

if.then64:                                        ; preds = %lor.lhs.false, %if.end59
  %49 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState65 = getelementptr inbounds %struct.mz_zip_archive_tag* %49, i32 0, i32 12
  %50 = load %struct.mz_zip_internal_state_tag** %m_pState65, align 8
  %m_pMem66 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %50, i32 0, i32 4
  %51 = load i8** %m_pMem66, align 8
  %tobool67 = icmp ne i8* %51, null
  br i1 %tobool67, label %if.then68, label %if.else89

if.then68:                                        ; preds = %if.then64
  %52 = load i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8
  %53 = load i8** %pOpaque.addr, align 8
  %54 = load i64* %out_buf_ofs, align 8
  %55 = load i8** %pRead_buf, align 8
  %m_comp_size69 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %56 = load i64* %m_comp_size69, align 8
  %call70 = call i64 %52(i8* %53, i64 %54, i8* %55, i64 %56)
  %m_comp_size71 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %57 = load i64* %m_comp_size71, align 8
  %cmp72 = icmp ne i64 %call70, %57
  br i1 %cmp72, label %if.then74, label %if.else75

if.then74:                                        ; preds = %if.then68
  store i32 -1, i32* %status, align 4
  br label %if.end84

if.else75:                                        ; preds = %if.then68
  %58 = load i32* %flags.addr, align 4
  %and76 = and i32 %58, 1024
  %tobool77 = icmp ne i32 %and76, 0
  br i1 %tobool77, label %if.end83, label %if.then78

if.then78:                                        ; preds = %if.else75
  %59 = load i32* %file_crc32, align 4
  %conv79 = zext i32 %59 to i64
  %60 = load i8** %pRead_buf, align 8
  %m_comp_size80 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %61 = load i64* %m_comp_size80, align 8
  %call81 = call i64 @mz_crc32(i64 %conv79, i8* %60, i64 %61)
  %conv82 = trunc i64 %call81 to i32
  store i32 %conv82, i32* %file_crc32, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.then78, %if.else75
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.then74
  %m_comp_size85 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %62 = load i64* %m_comp_size85, align 8
  %63 = load i64* %cur_file_ofs, align 8
  %add86 = add i64 %63, %62
  store i64 %add86, i64* %cur_file_ofs, align 8
  %m_comp_size87 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %64 = load i64* %m_comp_size87, align 8
  %65 = load i64* %out_buf_ofs, align 8
  %add88 = add i64 %65, %64
  store i64 %add88, i64* %out_buf_ofs, align 8
  store i64 0, i64* %comp_remaining, align 8
  br label %if.end118

if.else89:                                        ; preds = %if.then64
  br label %while.cond

while.cond:                                       ; preds = %if.end115, %if.else89
  %66 = load i64* %comp_remaining, align 8
  %tobool90 = icmp ne i64 %66, 0
  br i1 %tobool90, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %67 = load i64* %read_buf_size, align 8
  %68 = load i64* %comp_remaining, align 8
  %cmp91 = icmp ult i64 %67, %68
  br i1 %cmp91, label %cond.true93, label %cond.false94

cond.true93:                                      ; preds = %while.body
  %69 = load i64* %read_buf_size, align 8
  br label %cond.end95

cond.false94:                                     ; preds = %while.body
  %70 = load i64* %comp_remaining, align 8
  br label %cond.end95

cond.end95:                                       ; preds = %cond.false94, %cond.true93
  %cond96 = phi i64 [ %69, %cond.true93 ], [ %70, %cond.false94 ]
  store i64 %cond96, i64* %read_buf_avail, align 8
  %71 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRead97 = getelementptr inbounds %struct.mz_zip_archive_tag* %71, i32 0, i32 9
  %72 = load i64 (i8*, i64, i8*, i64)** %m_pRead97, align 8
  %73 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque98 = getelementptr inbounds %struct.mz_zip_archive_tag* %73, i32 0, i32 11
  %74 = load i8** %m_pIO_opaque98, align 8
  %75 = load i64* %cur_file_ofs, align 8
  %76 = load i8** %pRead_buf, align 8
  %77 = load i64* %read_buf_avail, align 8
  %call99 = call i64 %72(i8* %74, i64 %75, i8* %76, i64 %77)
  %78 = load i64* %read_buf_avail, align 8
  %cmp100 = icmp ne i64 %call99, %78
  br i1 %cmp100, label %if.then102, label %if.end103

if.then102:                                       ; preds = %cond.end95
  store i32 -1, i32* %status, align 4
  br label %while.end

if.end103:                                        ; preds = %cond.end95
  %79 = load i32* %flags.addr, align 4
  %and104 = and i32 %79, 1024
  %tobool105 = icmp ne i32 %and104, 0
  br i1 %tobool105, label %if.end110, label %if.then106

if.then106:                                       ; preds = %if.end103
  %80 = load i32* %file_crc32, align 4
  %conv107 = zext i32 %80 to i64
  %81 = load i8** %pRead_buf, align 8
  %82 = load i64* %read_buf_avail, align 8
  %call108 = call i64 @mz_crc32(i64 %conv107, i8* %81, i64 %82)
  %conv109 = trunc i64 %call108 to i32
  store i32 %conv109, i32* %file_crc32, align 4
  br label %if.end110

if.end110:                                        ; preds = %if.then106, %if.end103
  %83 = load i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8
  %84 = load i8** %pOpaque.addr, align 8
  %85 = load i64* %out_buf_ofs, align 8
  %86 = load i8** %pRead_buf, align 8
  %87 = load i64* %read_buf_avail, align 8
  %call111 = call i64 %83(i8* %84, i64 %85, i8* %86, i64 %87)
  %88 = load i64* %read_buf_avail, align 8
  %cmp112 = icmp ne i64 %call111, %88
  br i1 %cmp112, label %if.then114, label %if.end115

if.then114:                                       ; preds = %if.end110
  store i32 -1, i32* %status, align 4
  br label %while.end

if.end115:                                        ; preds = %if.end110
  %89 = load i64* %read_buf_avail, align 8
  %90 = load i64* %cur_file_ofs, align 8
  %add116 = add i64 %90, %89
  store i64 %add116, i64* %cur_file_ofs, align 8
  %91 = load i64* %read_buf_avail, align 8
  %92 = load i64* %out_buf_ofs, align 8
  %add117 = add i64 %92, %91
  store i64 %add117, i64* %out_buf_ofs, align 8
  %93 = load i64* %read_buf_avail, align 8
  %94 = load i64* %comp_remaining, align 8
  %sub = sub i64 %94, %93
  store i64 %sub, i64* %comp_remaining, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then114, %if.then102, %while.cond
  br label %if.end118

if.end118:                                        ; preds = %while.end, %if.end84
  br label %if.end182

if.else119:                                       ; preds = %lor.lhs.false
  br label %do.body

do.body:                                          ; preds = %if.else119
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag* %inflator, i32 0, i32 0
  store i32 0, i32* %m_state, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %95 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc120 = getelementptr inbounds %struct.mz_zip_archive_tag* %95, i32 0, i32 5
  %96 = load i8* (i8*, i64, i64)** %m_pAlloc120, align 8
  %97 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque121 = getelementptr inbounds %struct.mz_zip_archive_tag* %97, i32 0, i32 8
  %98 = load i8** %m_pAlloc_opaque121, align 8
  %call122 = call i8* %96(i8* %98, i64 1, i64 32768)
  store i8* %call122, i8** %pWrite_buf, align 8
  %cmp123 = icmp eq i8* null, %call122
  br i1 %cmp123, label %if.then125, label %if.else126

if.then125:                                       ; preds = %do.end
  store i32 -1, i32* %status, align 4
  br label %if.end181

if.else126:                                       ; preds = %do.end
  br label %do.body127

do.body127:                                       ; preds = %lor.end, %if.else126
  %99 = load i8** %pWrite_buf, align 8
  %100 = load i64* %out_buf_ofs, align 8
  %and128 = and i64 %100, 32767
  %add.ptr129 = getelementptr inbounds i8* %99, i64 %and128
  store i8* %add.ptr129, i8** %pWrite_buf_cur, align 8
  %101 = load i64* %out_buf_ofs, align 8
  %and130 = and i64 %101, 32767
  %sub131 = sub i64 32768, %and130
  store i64 %sub131, i64* %out_buf_size, align 8
  %102 = load i64* %read_buf_avail, align 8
  %tobool132 = icmp ne i64 %102, 0
  br i1 %tobool132, label %if.end153, label %land.lhs.true133

land.lhs.true133:                                 ; preds = %do.body127
  %103 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState134 = getelementptr inbounds %struct.mz_zip_archive_tag* %103, i32 0, i32 12
  %104 = load %struct.mz_zip_internal_state_tag** %m_pState134, align 8
  %m_pMem135 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %104, i32 0, i32 4
  %105 = load i8** %m_pMem135, align 8
  %tobool136 = icmp ne i8* %105, null
  br i1 %tobool136, label %if.end153, label %if.then137

if.then137:                                       ; preds = %land.lhs.true133
  %106 = load i64* %read_buf_size, align 8
  %107 = load i64* %comp_remaining, align 8
  %cmp138 = icmp ult i64 %106, %107
  br i1 %cmp138, label %cond.true140, label %cond.false141

cond.true140:                                     ; preds = %if.then137
  %108 = load i64* %read_buf_size, align 8
  br label %cond.end142

cond.false141:                                    ; preds = %if.then137
  %109 = load i64* %comp_remaining, align 8
  br label %cond.end142

cond.end142:                                      ; preds = %cond.false141, %cond.true140
  %cond143 = phi i64 [ %108, %cond.true140 ], [ %109, %cond.false141 ]
  store i64 %cond143, i64* %read_buf_avail, align 8
  %110 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRead144 = getelementptr inbounds %struct.mz_zip_archive_tag* %110, i32 0, i32 9
  %111 = load i64 (i8*, i64, i8*, i64)** %m_pRead144, align 8
  %112 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque145 = getelementptr inbounds %struct.mz_zip_archive_tag* %112, i32 0, i32 11
  %113 = load i8** %m_pIO_opaque145, align 8
  %114 = load i64* %cur_file_ofs, align 8
  %115 = load i8** %pRead_buf, align 8
  %116 = load i64* %read_buf_avail, align 8
  %call146 = call i64 %111(i8* %113, i64 %114, i8* %115, i64 %116)
  %117 = load i64* %read_buf_avail, align 8
  %cmp147 = icmp ne i64 %call146, %117
  br i1 %cmp147, label %if.then149, label %if.end150

if.then149:                                       ; preds = %cond.end142
  store i32 -1, i32* %status, align 4
  br label %do.end180

if.end150:                                        ; preds = %cond.end142
  %118 = load i64* %read_buf_avail, align 8
  %119 = load i64* %cur_file_ofs, align 8
  %add151 = add i64 %119, %118
  store i64 %add151, i64* %cur_file_ofs, align 8
  %120 = load i64* %read_buf_avail, align 8
  %121 = load i64* %comp_remaining, align 8
  %sub152 = sub i64 %121, %120
  store i64 %sub152, i64* %comp_remaining, align 8
  store i64 0, i64* %read_buf_ofs, align 8
  br label %if.end153

if.end153:                                        ; preds = %if.end150, %land.lhs.true133, %do.body127
  %122 = load i64* %read_buf_avail, align 8
  store i64 %122, i64* %in_buf_size, align 8
  %123 = load i8** %pRead_buf, align 8
  %124 = load i64* %read_buf_ofs, align 8
  %add.ptr154 = getelementptr inbounds i8* %123, i64 %124
  %125 = load i8** %pWrite_buf, align 8
  %126 = load i8** %pWrite_buf_cur, align 8
  %127 = load i64* %comp_remaining, align 8
  %tobool155 = icmp ne i64 %127, 0
  %cond156 = select i1 %tobool155, i32 2, i32 0
  %call157 = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %inflator, i8* %add.ptr154, i64* %in_buf_size, i8* %125, i8* %126, i64* %out_buf_size, i32 %cond156)
  store i32 %call157, i32* %status, align 4
  %128 = load i64* %in_buf_size, align 8
  %129 = load i64* %read_buf_avail, align 8
  %sub158 = sub i64 %129, %128
  store i64 %sub158, i64* %read_buf_avail, align 8
  %130 = load i64* %in_buf_size, align 8
  %131 = load i64* %read_buf_ofs, align 8
  %add159 = add i64 %131, %130
  store i64 %add159, i64* %read_buf_ofs, align 8
  %132 = load i64* %out_buf_size, align 8
  %tobool160 = icmp ne i64 %132, 0
  br i1 %tobool160, label %if.then161, label %if.end175

if.then161:                                       ; preds = %if.end153
  %133 = load i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8
  %134 = load i8** %pOpaque.addr, align 8
  %135 = load i64* %out_buf_ofs, align 8
  %136 = load i8** %pWrite_buf_cur, align 8
  %137 = load i64* %out_buf_size, align 8
  %call162 = call i64 %133(i8* %134, i64 %135, i8* %136, i64 %137)
  %138 = load i64* %out_buf_size, align 8
  %cmp163 = icmp ne i64 %call162, %138
  br i1 %cmp163, label %if.then165, label %if.end166

if.then165:                                       ; preds = %if.then161
  store i32 -1, i32* %status, align 4
  br label %do.end180

if.end166:                                        ; preds = %if.then161
  %139 = load i32* %file_crc32, align 4
  %conv167 = zext i32 %139 to i64
  %140 = load i8** %pWrite_buf_cur, align 8
  %141 = load i64* %out_buf_size, align 8
  %call168 = call i64 @mz_crc32(i64 %conv167, i8* %140, i64 %141)
  %conv169 = trunc i64 %call168 to i32
  store i32 %conv169, i32* %file_crc32, align 4
  %142 = load i64* %out_buf_size, align 8
  %143 = load i64* %out_buf_ofs, align 8
  %add170 = add i64 %143, %142
  store i64 %add170, i64* %out_buf_ofs, align 8
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %144 = load i64* %m_uncomp_size, align 8
  %cmp171 = icmp ugt i64 %add170, %144
  br i1 %cmp171, label %if.then173, label %if.end174

if.then173:                                       ; preds = %if.end166
  store i32 -1, i32* %status, align 4
  br label %do.end180

if.end174:                                        ; preds = %if.end166
  br label %if.end175

if.end175:                                        ; preds = %if.end174, %if.end153
  br label %do.cond

do.cond:                                          ; preds = %if.end175
  %145 = load i32* %status, align 4
  %cmp176 = icmp eq i32 %145, 1
  br i1 %cmp176, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.cond
  %146 = load i32* %status, align 4
  %cmp178 = icmp eq i32 %146, 2
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.cond
  %147 = phi i1 [ true, %do.cond ], [ %cmp178, %lor.rhs ]
  br i1 %147, label %do.body127, label %do.end180

do.end180:                                        ; preds = %lor.end, %if.then173, %if.then165, %if.then149
  br label %if.end181

if.end181:                                        ; preds = %do.end180, %if.then125
  br label %if.end182

if.end182:                                        ; preds = %if.end181, %if.end118
  %148 = load i32* %status, align 4
  %cmp183 = icmp eq i32 %148, 0
  br i1 %cmp183, label %land.lhs.true185, label %if.end197

land.lhs.true185:                                 ; preds = %if.end182
  %149 = load i32* %flags.addr, align 4
  %and186 = and i32 %149, 1024
  %tobool187 = icmp ne i32 %and186, 0
  br i1 %tobool187, label %if.end197, label %if.then188

if.then188:                                       ; preds = %land.lhs.true185
  %150 = load i64* %out_buf_ofs, align 8
  %m_uncomp_size189 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %151 = load i64* %m_uncomp_size189, align 8
  %cmp190 = icmp ne i64 %150, %151
  br i1 %cmp190, label %if.then195, label %lor.lhs.false192

lor.lhs.false192:                                 ; preds = %if.then188
  %152 = load i32* %file_crc32, align 4
  %m_crc32 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %153 = load i32* %m_crc32, align 4
  %cmp193 = icmp ne i32 %152, %153
  br i1 %cmp193, label %if.then195, label %if.end196

if.then195:                                       ; preds = %lor.lhs.false192, %if.then188
  store i32 -1, i32* %status, align 4
  br label %if.end196

if.end196:                                        ; preds = %if.then195, %lor.lhs.false192
  br label %if.end197

if.end197:                                        ; preds = %if.end196, %land.lhs.true185, %if.end182
  %154 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState198 = getelementptr inbounds %struct.mz_zip_archive_tag* %154, i32 0, i32 12
  %155 = load %struct.mz_zip_internal_state_tag** %m_pState198, align 8
  %m_pMem199 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %155, i32 0, i32 4
  %156 = load i8** %m_pMem199, align 8
  %tobool200 = icmp ne i8* %156, null
  br i1 %tobool200, label %if.end203, label %if.then201

if.then201:                                       ; preds = %if.end197
  %157 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive_tag* %157, i32 0, i32 6
  %158 = load void (i8*, i8*)** %m_pFree, align 8
  %159 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque202 = getelementptr inbounds %struct.mz_zip_archive_tag* %159, i32 0, i32 8
  %160 = load i8** %m_pAlloc_opaque202, align 8
  %161 = load i8** %pRead_buf, align 8
  call void %158(i8* %160, i8* %161)
  br label %if.end203

if.end203:                                        ; preds = %if.then201, %if.end197
  %162 = load i8** %pWrite_buf, align 8
  %tobool204 = icmp ne i8* %162, null
  br i1 %tobool204, label %if.then205, label %if.end208

if.then205:                                       ; preds = %if.end203
  %163 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree206 = getelementptr inbounds %struct.mz_zip_archive_tag* %163, i32 0, i32 6
  %164 = load void (i8*, i8*)** %m_pFree206, align 8
  %165 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque207 = getelementptr inbounds %struct.mz_zip_archive_tag* %165, i32 0, i32 8
  %166 = load i8** %m_pAlloc_opaque207, align 8
  %167 = load i8** %pWrite_buf, align 8
  call void %164(i8* %166, i8* %167)
  br label %if.end208

if.end208:                                        ; preds = %if.then205, %if.end203
  %168 = load i32* %status, align 4
  %cmp209 = icmp eq i32 %168, 0
  %conv210 = zext i1 %cmp209 to i32
  store i32 %conv210, i32* %retval
  br label %return

return:                                           ; preds = %if.end208, %if.then56, %if.then41, %if.then29, %if.then25, %if.then20, %if.then9, %if.then6, %if.then2, %if.then
  %169 = load i32* %retval
  ret i32 %169
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_extract_file_to_callback(%struct.mz_zip_archive_tag* %pZip, i8* %pFilename, i64 (i8*, i64, i8*, i64)* %pCallback, i8* %pOpaque, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pCallback.addr = alloca i64 (i8*, i64, i8*, i64)*, align 8
  %pOpaque.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i64 (i8*, i64, i8*, i64)* %pCallback, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i8** %pFilename.addr, align 8
  %2 = load i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_locate_file(%struct.mz_zip_archive_tag* %0, i8* %1, i8* null, i32 %2)
  store i32 %call, i32* %file_index, align 4
  %3 = load i32* %file_index, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %5 = load i32* %file_index, align 4
  %6 = load i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8
  %7 = load i8** %pOpaque.addr, align 8
  %8 = load i32* %flags.addr, align 4
  %call1 = call i32 @mz_zip_reader_extract_to_callback(%struct.mz_zip_archive_tag* %4, i32 %5, i64 (i8*, i64, i8*, i64)* %6, i8* %7, i32 %8)
  store i32 %call1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_extract_to_file(%struct.mz_zip_archive_tag* %pZip, i32 %file_index, i8* %pDst_filename, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr = alloca i32, align 4
  %pDst_filename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  %pFile = alloca %struct._IO_FILE*, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i8* %pDst_filename, i8** %pDst_filename.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i32* %file_index.addr, align 4
  %call = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive_tag* %0, i32 %1, %struct.mz_zip_archive_file_stat* %file_stat)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8** %pDst_filename.addr, align 8
  %call1 = call %struct._IO_FILE* @fopen(i8* %2, i8* getelementptr inbounds ([3 x i8]* @.str18, i32 0, i32 0))
  store %struct._IO_FILE* %call1, %struct._IO_FILE** %pFile, align 8
  %3 = load %struct._IO_FILE** %pFile, align 8
  %tobool2 = icmp ne %struct._IO_FILE* %3, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end4:                                          ; preds = %if.end
  %4 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %5 = load i32* %file_index.addr, align 4
  %6 = load %struct._IO_FILE** %pFile, align 8
  %7 = bitcast %struct._IO_FILE* %6 to i8*
  %8 = load i32* %flags.addr, align 4
  %call5 = call i32 @mz_zip_reader_extract_to_callback(%struct.mz_zip_archive_tag* %4, i32 %5, i64 (i8*, i64, i8*, i64)* @mz_zip_file_write_callback, i8* %7, i32 %8)
  store i32 %call5, i32* %status, align 4
  %9 = load %struct._IO_FILE** %pFile, align 8
  %call6 = call i32 @fclose(%struct._IO_FILE* %9)
  %cmp = icmp eq i32 %call6, -1
  br i1 %cmp, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end4
  store i32 0, i32* %retval
  br label %return

if.end8:                                          ; preds = %if.end4
  %10 = load i32* %status, align 4
  %tobool9 = icmp ne i32 %10, 0
  br i1 %tobool9, label %if.then10, label %if.end13

if.then10:                                        ; preds = %if.end8
  %11 = load i8** %pDst_filename.addr, align 8
  %m_time = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 6
  %12 = load i64* %m_time, align 8
  %m_time11 = getelementptr inbounds %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 6
  %13 = load i64* %m_time11, align 8
  %call12 = call i32 @mz_zip_set_file_times(i8* %11, i64 %12, i64 %13)
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %if.end8
  %14 = load i32* %status, align 4
  store i32 %14, i32* %retval
  br label %return

return:                                           ; preds = %if.end13, %if.then7, %if.then3, %if.then
  %15 = load i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal i64 @mz_zip_file_write_callback(i8* %pOpaque, i64 %ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %pOpaque.addr = alloca i8*, align 8
  %ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i64 %ofs, i64* %ofs.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i64* %ofs.addr, align 8
  %1 = load i8** %pBuf.addr, align 8
  %2 = load i64* %n.addr, align 8
  %3 = load i8** %pOpaque.addr, align 8
  %4 = bitcast i8* %3 to %struct._IO_FILE*
  %call = call i64 @fwrite(i8* %1, i64 1, i64 %2, %struct._IO_FILE* %4)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @mz_zip_set_file_times(i8* %pFilename, i64 %access_time, i64 %modified_time) #0 {
entry:
  %pFilename.addr = alloca i8*, align 8
  %access_time.addr = alloca i64, align 8
  %modified_time.addr = alloca i64, align 8
  %t = alloca %struct.utimbuf, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i64 %access_time, i64* %access_time.addr, align 8
  store i64 %modified_time, i64* %modified_time.addr, align 8
  %0 = load i64* %access_time.addr, align 8
  %actime = getelementptr inbounds %struct.utimbuf* %t, i32 0, i32 0
  store i64 %0, i64* %actime, align 8
  %1 = load i64* %modified_time.addr, align 8
  %modtime = getelementptr inbounds %struct.utimbuf* %t, i32 0, i32 1
  store i64 %1, i64* %modtime, align 8
  %2 = load i8** %pFilename.addr, align 8
  %call = call i32 @utime(i8* %2, %struct.utimbuf* %t) #2
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_reader_extract_file_to_file(%struct.mz_zip_archive_tag* %pZip, i8* %pArchive_filename, i8* %pDst_filename, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pArchive_filename.addr = alloca i8*, align 8
  %pDst_filename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pArchive_filename, i8** %pArchive_filename.addr, align 8
  store i8* %pDst_filename, i8** %pDst_filename.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i8** %pArchive_filename.addr, align 8
  %2 = load i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_locate_file(%struct.mz_zip_archive_tag* %0, i8* %1, i8* null, i32 %2)
  store i32 %call, i32* %file_index, align 4
  %3 = load i32* %file_index, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %5 = load i32* %file_index, align 4
  %6 = load i8** %pDst_filename.addr, align 8
  %7 = load i32* %flags.addr, align 4
  %call1 = call i32 @mz_zip_reader_extract_to_file(%struct.mz_zip_archive_tag* %4, i32 %5, i8* %6, i32 %7)
  store i32 %call1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_writer_init(%struct.mz_zip_archive_tag* %pZip, i64 %existing_size) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %existing_size.addr = alloca i64, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i64 %existing_size, i64* %existing_size.addr, align 8
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive_tag* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %1, i32 0, i32 12
  %2 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 10
  %4 = load i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %tobool3 = icmp ne i64 (i8*, i64, i8*, i64)* %4, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %5 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive_tag* %5, i32 0, i32 3
  %6 = load i32* %m_zip_mode, align 4
  %cmp = icmp ne i32 %6, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false4
  %7 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive_tag* %7, i32 0, i32 4
  %8 = load i32* %m_file_offset_alignment, align 4
  %tobool5 = icmp ne i32 %8, 0
  br i1 %tobool5, label %if.then6, label %if.end12

if.then6:                                         ; preds = %if.end
  %9 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_file_offset_alignment7 = getelementptr inbounds %struct.mz_zip_archive_tag* %9, i32 0, i32 4
  %10 = load i32* %m_file_offset_alignment7, align 4
  %11 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_file_offset_alignment8 = getelementptr inbounds %struct.mz_zip_archive_tag* %11, i32 0, i32 4
  %12 = load i32* %m_file_offset_alignment8, align 4
  %sub = sub i32 %12, 1
  %and = and i32 %10, %sub
  %tobool9 = icmp ne i32 %and, 0
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.then6
  store i32 0, i32* %retval
  br label %return

if.end11:                                         ; preds = %if.then6
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.end
  %13 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive_tag* %13, i32 0, i32 5
  %14 = load i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %tobool13 = icmp ne i8* (i8*, i64, i64)* %14, null
  br i1 %tobool13, label %if.end16, label %if.then14

if.then14:                                        ; preds = %if.end12
  %15 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc15 = getelementptr inbounds %struct.mz_zip_archive_tag* %15, i32 0, i32 5
  store i8* (i8*, i64, i64)* @def_alloc_func, i8* (i8*, i64, i64)** %m_pAlloc15, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %if.end12
  %16 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive_tag* %16, i32 0, i32 6
  %17 = load void (i8*, i8*)** %m_pFree, align 8
  %tobool17 = icmp ne void (i8*, i8*)* %17, null
  br i1 %tobool17, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %18 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree19 = getelementptr inbounds %struct.mz_zip_archive_tag* %18, i32 0, i32 6
  store void (i8*, i8*)* @def_free_func, void (i8*, i8*)** %m_pFree19, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %19 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRealloc = getelementptr inbounds %struct.mz_zip_archive_tag* %19, i32 0, i32 7
  %20 = load i8* (i8*, i8*, i64, i64)** %m_pRealloc, align 8
  %tobool21 = icmp ne i8* (i8*, i8*, i64, i64)* %20, null
  br i1 %tobool21, label %if.end24, label %if.then22

if.then22:                                        ; preds = %if.end20
  %21 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRealloc23 = getelementptr inbounds %struct.mz_zip_archive_tag* %21, i32 0, i32 7
  store i8* (i8*, i8*, i64, i64)* @def_realloc_func, i8* (i8*, i8*, i64, i64)** %m_pRealloc23, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.end20
  %22 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode25 = getelementptr inbounds %struct.mz_zip_archive_tag* %22, i32 0, i32 3
  store i32 2, i32* %m_zip_mode25, align 4
  %23 = load i64* %existing_size.addr, align 8
  %24 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %24, i32 0, i32 0
  store i64 %23, i64* %m_archive_size, align 8
  %25 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive_tag* %25, i32 0, i32 1
  store i64 0, i64* %m_central_directory_file_ofs, align 8
  %26 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive_tag* %26, i32 0, i32 2
  store i32 0, i32* %m_total_files, align 4
  %27 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc26 = getelementptr inbounds %struct.mz_zip_archive_tag* %27, i32 0, i32 5
  %28 = load i8* (i8*, i64, i64)** %m_pAlloc26, align 8
  %29 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %29, i32 0, i32 8
  %30 = load i8** %m_pAlloc_opaque, align 8
  %call = call i8* %28(i8* %30, i64 1, i64 128)
  %31 = bitcast i8* %call to %struct.mz_zip_internal_state_tag*
  %32 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState27 = getelementptr inbounds %struct.mz_zip_archive_tag* %32, i32 0, i32 12
  store %struct.mz_zip_internal_state_tag* %31, %struct.mz_zip_internal_state_tag** %m_pState27, align 8
  %cmp28 = icmp eq %struct.mz_zip_internal_state_tag* null, %31
  br i1 %cmp28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %if.end24
  store i32 0, i32* %retval
  br label %return

if.end30:                                         ; preds = %if.end24
  %33 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState31 = getelementptr inbounds %struct.mz_zip_archive_tag* %33, i32 0, i32 12
  %34 = load %struct.mz_zip_internal_state_tag** %m_pState31, align 8
  %35 = bitcast %struct.mz_zip_internal_state_tag* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* %35, i8 0, i64 128, i32 8, i1 false)
  %36 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState32 = getelementptr inbounds %struct.mz_zip_archive_tag* %36, i32 0, i32 12
  %37 = load %struct.mz_zip_internal_state_tag** %m_pState32, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag* %37, i32 0, i32 0
  %m_element_size = getelementptr inbounds %struct.mz_zip_array* %m_central_dir, i32 0, i32 3
  store i32 1, i32* %m_element_size, align 4
  %38 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState33 = getelementptr inbounds %struct.mz_zip_archive_tag* %38, i32 0, i32 12
  %39 = load %struct.mz_zip_internal_state_tag** %m_pState33, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %39, i32 0, i32 1
  %m_element_size34 = getelementptr inbounds %struct.mz_zip_array* %m_central_dir_offsets, i32 0, i32 3
  store i32 4, i32* %m_element_size34, align 4
  %40 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState35 = getelementptr inbounds %struct.mz_zip_archive_tag* %40, i32 0, i32 12
  %41 = load %struct.mz_zip_internal_state_tag** %m_pState35, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %41, i32 0, i32 2
  %m_element_size36 = getelementptr inbounds %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 3
  store i32 4, i32* %m_element_size36, align 4
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end30, %if.then29, %if.then10, %if.then
  %42 = load i32* %retval
  ret i32 %42
}

; Function Attrs: nounwind uwtable
define internal i8* @def_realloc_func(i8* %opaque, i8* %address, i64 %items, i64 %size) #0 {
entry:
  %opaque.addr = alloca i8*, align 8
  %address.addr = alloca i8*, align 8
  %items.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  store i8* %opaque, i8** %opaque.addr, align 8
  store i8* %address, i8** %address.addr, align 8
  store i64 %items, i64* %items.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %opaque.addr, align 8
  %1 = load i8** %address.addr, align 8
  %2 = load i64* %items.addr, align 8
  %3 = load i64* %size.addr, align 8
  %4 = load i8** %address.addr, align 8
  %5 = load i64* %items.addr, align 8
  %6 = load i64* %size.addr, align 8
  %mul = mul i64 %5, %6
  %call = call i8* @realloc(i8* %4, i64 %mul) #2
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_writer_init_heap(%struct.mz_zip_archive_tag* %pZip, i64 %size_to_reserve_at_beginning, i64 %initial_allocation_size) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %size_to_reserve_at_beginning.addr = alloca i64, align 8
  %initial_allocation_size.addr = alloca i64, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i64 %size_to_reserve_at_beginning, i64* %size_to_reserve_at_beginning.addr, align 8
  store i64 %initial_allocation_size, i64* %initial_allocation_size.addr, align 8
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive_tag* %0, i32 0, i32 10
  store i64 (i8*, i64, i8*, i64)* @mz_zip_heap_write_func, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %1 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %2 = bitcast %struct.mz_zip_archive_tag* %1 to i8*
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 11
  store i8* %2, i8** %m_pIO_opaque, align 8
  %4 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %5 = load i64* %size_to_reserve_at_beginning.addr, align 8
  %call = call i32 @mz_zip_writer_init(%struct.mz_zip_archive_tag* %4, i64 %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i64* %initial_allocation_size.addr, align 8
  %7 = load i64* %size_to_reserve_at_beginning.addr, align 8
  %cmp = icmp ugt i64 %6, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %8 = load i64* %initial_allocation_size.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load i64* %size_to_reserve_at_beginning.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %9, %cond.false ]
  store i64 %cond, i64* %initial_allocation_size.addr, align 8
  %cmp1 = icmp ne i64 0, %cond
  br i1 %cmp1, label %if.then2, label %if.end9

if.then2:                                         ; preds = %cond.end
  %10 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive_tag* %10, i32 0, i32 5
  %11 = load i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %12 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %12, i32 0, i32 8
  %13 = load i8** %m_pAlloc_opaque, align 8
  %14 = load i64* %initial_allocation_size.addr, align 8
  %call3 = call i8* %11(i8* %13, i64 1, i64 %14)
  %15 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %15, i32 0, i32 12
  %16 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag* %16, i32 0, i32 4
  store i8* %call3, i8** %m_pMem, align 8
  %cmp4 = icmp eq i8* null, %call3
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %17 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %call6 = call i32 @mz_zip_writer_end(%struct.mz_zip_archive_tag* %17)
  store i32 0, i32* %retval
  br label %return

if.end7:                                          ; preds = %if.then2
  %18 = load i64* %initial_allocation_size.addr, align 8
  %19 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState8 = getelementptr inbounds %struct.mz_zip_archive_tag* %19, i32 0, i32 12
  %20 = load %struct.mz_zip_internal_state_tag** %m_pState8, align 8
  %m_mem_capacity = getelementptr inbounds %struct.mz_zip_internal_state_tag* %20, i32 0, i32 6
  store i64 %18, i64* %m_mem_capacity, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.end7, %cond.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end9, %if.then5, %if.then
  %21 = load i32* %retval
  ret i32 %21
}

; Function Attrs: nounwind uwtable
define internal i64 @mz_zip_heap_write_func(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pZip = alloca %struct.mz_zip_archive_tag*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %new_size = alloca i64, align 8
  %pNew_block = alloca i8*, align 8
  %new_capacity = alloca i64, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8** %pOpaque.addr, align 8
  %1 = bitcast i8* %0 to %struct.mz_zip_archive_tag*
  store %struct.mz_zip_archive_tag* %1, %struct.mz_zip_archive_tag** %pZip, align 8
  %2 = load %struct.mz_zip_archive_tag** %pZip, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %2, i32 0, i32 12
  %3 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  store %struct.mz_zip_internal_state_tag* %3, %struct.mz_zip_internal_state_tag** %pState, align 8
  %4 = load i64* %file_ofs.addr, align 8
  %5 = load i64* %n.addr, align 8
  %add = add i64 %4, %5
  %6 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_size = getelementptr inbounds %struct.mz_zip_internal_state_tag* %6, i32 0, i32 5
  %7 = load i64* %m_mem_size, align 8
  %cmp = icmp ugt i64 %add, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load i64* %file_ofs.addr, align 8
  %9 = load i64* %n.addr, align 8
  %add1 = add i64 %8, %9
  br label %cond.end

cond.false:                                       ; preds = %entry
  %10 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_size2 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %10, i32 0, i32 5
  %11 = load i64* %m_mem_size2, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add1, %cond.true ], [ %11, %cond.false ]
  store i64 %cond, i64* %new_size, align 8
  %12 = load i64* %n.addr, align 8
  %tobool = icmp ne i64 %12, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  store i64 0, i64* %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %13 = load i64* %new_size, align 8
  %14 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_capacity = getelementptr inbounds %struct.mz_zip_internal_state_tag* %14, i32 0, i32 6
  %15 = load i64* %m_mem_capacity, align 8
  %cmp3 = icmp ugt i64 %13, %15
  br i1 %cmp3, label %if.then4, label %if.end18

if.then4:                                         ; preds = %if.end
  %16 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_capacity5 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %16, i32 0, i32 6
  %17 = load i64* %m_mem_capacity5, align 8
  %cmp6 = icmp ugt i64 64, %17
  br i1 %cmp6, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %if.then4
  br label %cond.end10

cond.false8:                                      ; preds = %if.then4
  %18 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_capacity9 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %18, i32 0, i32 6
  %19 = load i64* %m_mem_capacity9, align 8
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false8, %cond.true7
  %cond11 = phi i64 [ 64, %cond.true7 ], [ %19, %cond.false8 ]
  store i64 %cond11, i64* %new_capacity, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %cond.end10
  %20 = load i64* %new_capacity, align 8
  %21 = load i64* %new_size, align 8
  %cmp12 = icmp ult i64 %20, %21
  br i1 %cmp12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load i64* %new_capacity, align 8
  %mul = mul i64 %22, 2
  store i64 %mul, i64* %new_capacity, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %23 = load %struct.mz_zip_archive_tag** %pZip, align 8
  %m_pRealloc = getelementptr inbounds %struct.mz_zip_archive_tag* %23, i32 0, i32 7
  %24 = load i8* (i8*, i8*, i64, i64)** %m_pRealloc, align 8
  %25 = load %struct.mz_zip_archive_tag** %pZip, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %25, i32 0, i32 8
  %26 = load i8** %m_pAlloc_opaque, align 8
  %27 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag* %27, i32 0, i32 4
  %28 = load i8** %m_pMem, align 8
  %29 = load i64* %new_capacity, align 8
  %call = call i8* %24(i8* %26, i8* %28, i64 1, i64 %29)
  store i8* %call, i8** %pNew_block, align 8
  %cmp13 = icmp eq i8* null, %call
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %while.end
  store i64 0, i64* %retval
  br label %return

if.end15:                                         ; preds = %while.end
  %30 = load i8** %pNew_block, align 8
  %31 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem16 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %31, i32 0, i32 4
  store i8* %30, i8** %m_pMem16, align 8
  %32 = load i64* %new_capacity, align 8
  %33 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_capacity17 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %33, i32 0, i32 6
  store i64 %32, i64* %m_mem_capacity17, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.end15, %if.end
  %34 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem19 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %34, i32 0, i32 4
  %35 = load i8** %m_pMem19, align 8
  %36 = load i64* %file_ofs.addr, align 8
  %add.ptr = getelementptr inbounds i8* %35, i64 %36
  %37 = load i8** %pBuf.addr, align 8
  %38 = load i64* %n.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %37, i64 %38, i32 1, i1 false)
  %39 = load i64* %new_size, align 8
  %40 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_size20 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %40, i32 0, i32 5
  store i64 %39, i64* %m_mem_size20, align 8
  %41 = load i64* %n.addr, align 8
  store i64 %41, i64* %retval
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %42 = load i64* %retval
  ret i64 %42
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_writer_end(%struct.mz_zip_archive_tag* %pZip) #0 {
entry:
  %pZip.addr.i32 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i33 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i27 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i28 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %status = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i32 1, i32* %status, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive_tag* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %1, i32 0, i32 12
  %2 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 5
  %4 = load i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %tobool3 = icmp ne i8* (i8*, i64, i64)* %4, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %5 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive_tag* %5, i32 0, i32 6
  %6 = load void (i8*, i8*)** %m_pFree, align 8
  %tobool5 = icmp ne void (i8*, i8*)* %6, null
  br i1 %tobool5, label %lor.lhs.false6, label %if.then

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %7 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive_tag* %7, i32 0, i32 3
  %8 = load i32* %m_zip_mode, align 4
  %cmp = icmp ne i32 %8, 2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false6
  %9 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode7 = getelementptr inbounds %struct.mz_zip_archive_tag* %9, i32 0, i32 3
  %10 = load i32* %m_zip_mode7, align 4
  %cmp8 = icmp ne i32 %10, 3
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false6
  %11 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState9 = getelementptr inbounds %struct.mz_zip_archive_tag* %11, i32 0, i32 12
  %12 = load %struct.mz_zip_internal_state_tag** %m_pState9, align 8
  store %struct.mz_zip_internal_state_tag* %12, %struct.mz_zip_internal_state_tag** %pState, align 8
  %13 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState10 = getelementptr inbounds %struct.mz_zip_archive_tag* %13, i32 0, i32 12
  store %struct.mz_zip_internal_state_tag* null, %struct.mz_zip_internal_state_tag** %m_pState10, align 8
  %14 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %15 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag* %15, i32 0, i32 0
  store %struct.mz_zip_archive_tag* %14, %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  store %struct.mz_zip_array* %m_central_dir, %struct.mz_zip_array** %pArray.addr.i, align 8
  %16 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pFree.i = getelementptr inbounds %struct.mz_zip_archive_tag* %16, i32 0, i32 6
  %17 = load void (i8*, i8*)** %m_pFree.i, align 8
  %18 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pAlloc_opaque.i = getelementptr inbounds %struct.mz_zip_archive_tag* %18, i32 0, i32 8
  %19 = load i8** %m_pAlloc_opaque.i, align 8
  %20 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_p.i = getelementptr inbounds %struct.mz_zip_array* %20, i32 0, i32 0
  %21 = load i8** %m_p.i, align 8
  call void %17(i8* %19, i8* %21) #2
  %22 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %23 = bitcast %struct.mz_zip_array* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 32, i32 8, i1 false) #2
  %24 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %25 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %25, i32 0, i32 1
  store %struct.mz_zip_archive_tag* %24, %struct.mz_zip_archive_tag** %pZip.addr.i27, align 8
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i28, align 8
  %26 = load %struct.mz_zip_archive_tag** %pZip.addr.i27, align 8
  %m_pFree.i29 = getelementptr inbounds %struct.mz_zip_archive_tag* %26, i32 0, i32 6
  %27 = load void (i8*, i8*)** %m_pFree.i29, align 8
  %28 = load %struct.mz_zip_archive_tag** %pZip.addr.i27, align 8
  %m_pAlloc_opaque.i30 = getelementptr inbounds %struct.mz_zip_archive_tag* %28, i32 0, i32 8
  %29 = load i8** %m_pAlloc_opaque.i30, align 8
  %30 = load %struct.mz_zip_array** %pArray.addr.i28, align 8
  %m_p.i31 = getelementptr inbounds %struct.mz_zip_array* %30, i32 0, i32 0
  %31 = load i8** %m_p.i31, align 8
  call void %27(i8* %29, i8* %31) #2
  %32 = load %struct.mz_zip_array** %pArray.addr.i28, align 8
  %33 = bitcast %struct.mz_zip_array* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* %33, i8 0, i64 32, i32 8, i1 false) #2
  %34 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %35 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %35, i32 0, i32 2
  store %struct.mz_zip_archive_tag* %34, %struct.mz_zip_archive_tag** %pZip.addr.i32, align 8
  store %struct.mz_zip_array* %m_sorted_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i33, align 8
  %36 = load %struct.mz_zip_archive_tag** %pZip.addr.i32, align 8
  %m_pFree.i34 = getelementptr inbounds %struct.mz_zip_archive_tag* %36, i32 0, i32 6
  %37 = load void (i8*, i8*)** %m_pFree.i34, align 8
  %38 = load %struct.mz_zip_archive_tag** %pZip.addr.i32, align 8
  %m_pAlloc_opaque.i35 = getelementptr inbounds %struct.mz_zip_archive_tag* %38, i32 0, i32 8
  %39 = load i8** %m_pAlloc_opaque.i35, align 8
  %40 = load %struct.mz_zip_array** %pArray.addr.i33, align 8
  %m_p.i36 = getelementptr inbounds %struct.mz_zip_array* %40, i32 0, i32 0
  %41 = load i8** %m_p.i36, align 8
  call void %37(i8* %39, i8* %41) #2
  %42 = load %struct.mz_zip_array** %pArray.addr.i33, align 8
  %43 = bitcast %struct.mz_zip_array* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* %43, i8 0, i64 32, i32 8, i1 false) #2
  %44 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag* %44, i32 0, i32 3
  %45 = load %struct._IO_FILE** %m_pFile, align 8
  %tobool11 = icmp ne %struct._IO_FILE* %45, null
  br i1 %tobool11, label %if.then12, label %if.end15

if.then12:                                        ; preds = %if.end
  %46 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile13 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %46, i32 0, i32 3
  %47 = load %struct._IO_FILE** %m_pFile13, align 8
  %call = call i32 @fclose(%struct._IO_FILE* %47)
  %48 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile14 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %48, i32 0, i32 3
  store %struct._IO_FILE* null, %struct._IO_FILE** %m_pFile14, align 8
  br label %if.end15

if.end15:                                         ; preds = %if.then12, %if.end
  %49 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive_tag* %49, i32 0, i32 10
  %50 = load i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %cmp16 = icmp eq i64 (i8*, i64, i8*, i64)* %50, @mz_zip_heap_write_func
  br i1 %cmp16, label %land.lhs.true17, label %if.end23

land.lhs.true17:                                  ; preds = %if.end15
  %51 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag* %51, i32 0, i32 4
  %52 = load i8** %m_pMem, align 8
  %tobool18 = icmp ne i8* %52, null
  br i1 %tobool18, label %if.then19, label %if.end23

if.then19:                                        ; preds = %land.lhs.true17
  %53 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree20 = getelementptr inbounds %struct.mz_zip_archive_tag* %53, i32 0, i32 6
  %54 = load void (i8*, i8*)** %m_pFree20, align 8
  %55 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %55, i32 0, i32 8
  %56 = load i8** %m_pAlloc_opaque, align 8
  %57 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem21 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %57, i32 0, i32 4
  %58 = load i8** %m_pMem21, align 8
  call void %54(i8* %56, i8* %58)
  %59 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem22 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %59, i32 0, i32 4
  store i8* null, i8** %m_pMem22, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then19, %land.lhs.true17, %if.end15
  %60 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree24 = getelementptr inbounds %struct.mz_zip_archive_tag* %60, i32 0, i32 6
  %61 = load void (i8*, i8*)** %m_pFree24, align 8
  %62 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque25 = getelementptr inbounds %struct.mz_zip_archive_tag* %62, i32 0, i32 8
  %63 = load i8** %m_pAlloc_opaque25, align 8
  %64 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %65 = bitcast %struct.mz_zip_internal_state_tag* %64 to i8*
  call void %61(i8* %63, i8* %65)
  %66 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode26 = getelementptr inbounds %struct.mz_zip_archive_tag* %66, i32 0, i32 3
  store i32 0, i32* %m_zip_mode26, align 4
  %67 = load i32* %status, align 4
  store i32 %67, i32* %retval
  br label %return

return:                                           ; preds = %if.end23, %if.then
  %68 = load i32* %retval
  ret i32 %68
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_writer_init_file(%struct.mz_zip_archive_tag* %pZip, i8* %pFilename, i64 %size_to_reserve_at_beginning) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pFilename.addr = alloca i8*, align 8
  %size_to_reserve_at_beginning.addr = alloca i64, align 8
  %pFile = alloca %struct._IO_FILE*, align 8
  %cur_ofs = alloca i64, align 8
  %buf = alloca [4096 x i8], align 16
  %n = alloca i64, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i64 %size_to_reserve_at_beginning, i64* %size_to_reserve_at_beginning.addr, align 8
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive_tag* %0, i32 0, i32 10
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_write_func, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %1 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %2 = bitcast %struct.mz_zip_archive_tag* %1 to i8*
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 11
  store i8* %2, i8** %m_pIO_opaque, align 8
  %4 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %5 = load i64* %size_to_reserve_at_beginning.addr, align 8
  %call = call i32 @mz_zip_writer_init(%struct.mz_zip_archive_tag* %4, i64 %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i8** %pFilename.addr, align 8
  %call1 = call %struct._IO_FILE* @fopen(i8* %6, i8* getelementptr inbounds ([3 x i8]* @.str18, i32 0, i32 0))
  store %struct._IO_FILE* %call1, %struct._IO_FILE** %pFile, align 8
  %cmp = icmp eq %struct._IO_FILE* null, %call1
  br i1 %cmp, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %7 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %call3 = call i32 @mz_zip_writer_end(%struct.mz_zip_archive_tag* %7)
  store i32 0, i32* %retval
  br label %return

if.end4:                                          ; preds = %if.end
  %8 = load %struct._IO_FILE** %pFile, align 8
  %9 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %9, i32 0, i32 12
  %10 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag* %10, i32 0, i32 3
  store %struct._IO_FILE* %8, %struct._IO_FILE** %m_pFile, align 8
  %11 = load i64* %size_to_reserve_at_beginning.addr, align 8
  %tobool5 = icmp ne i64 %11, 0
  br i1 %tobool5, label %if.then6, label %if.end16

if.then6:                                         ; preds = %if.end4
  store i64 0, i64* %cur_ofs, align 8
  %12 = bitcast [4096 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i64(i8* %12, i8 0, i64 4096, i32 16, i1 false)
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then6
  %13 = load i64* %size_to_reserve_at_beginning.addr, align 8
  %cmp7 = icmp ult i64 4096, %13
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %14 = load i64* %size_to_reserve_at_beginning.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 4096, %cond.true ], [ %14, %cond.false ]
  store i64 %cond, i64* %n, align 8
  %15 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite8 = getelementptr inbounds %struct.mz_zip_archive_tag* %15, i32 0, i32 10
  %16 = load i64 (i8*, i64, i8*, i64)** %m_pWrite8, align 8
  %17 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque9 = getelementptr inbounds %struct.mz_zip_archive_tag* %17, i32 0, i32 11
  %18 = load i8** %m_pIO_opaque9, align 8
  %19 = load i64* %cur_ofs, align 8
  %arraydecay = getelementptr inbounds [4096 x i8]* %buf, i32 0, i32 0
  %20 = load i64* %n, align 8
  %call10 = call i64 %16(i8* %18, i64 %19, i8* %arraydecay, i64 %20)
  %21 = load i64* %n, align 8
  %cmp11 = icmp ne i64 %call10, %21
  br i1 %cmp11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %cond.end
  %22 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %call13 = call i32 @mz_zip_writer_end(%struct.mz_zip_archive_tag* %22)
  store i32 0, i32* %retval
  br label %return

if.end14:                                         ; preds = %cond.end
  %23 = load i64* %n, align 8
  %24 = load i64* %cur_ofs, align 8
  %add = add i64 %24, %23
  store i64 %add, i64* %cur_ofs, align 8
  %25 = load i64* %n, align 8
  %26 = load i64* %size_to_reserve_at_beginning.addr, align 8
  %sub = sub i64 %26, %25
  store i64 %sub, i64* %size_to_reserve_at_beginning.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end14
  %27 = load i64* %size_to_reserve_at_beginning.addr, align 8
  %tobool15 = icmp ne i64 %27, 0
  br i1 %tobool15, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end16

if.end16:                                         ; preds = %do.end, %if.end4
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end16, %if.then12, %if.then2, %if.then
  %28 = load i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal i64 @mz_zip_file_write_func(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pZip = alloca %struct.mz_zip_archive_tag*, align 8
  %cur_ofs = alloca i64, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8** %pOpaque.addr, align 8
  %1 = bitcast i8* %0 to %struct.mz_zip_archive_tag*
  store %struct.mz_zip_archive_tag* %1, %struct.mz_zip_archive_tag** %pZip, align 8
  %2 = load %struct.mz_zip_archive_tag** %pZip, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %2, i32 0, i32 12
  %3 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag* %3, i32 0, i32 3
  %4 = load %struct._IO_FILE** %m_pFile, align 8
  %call = call i64 @ftello(%struct._IO_FILE* %4)
  store i64 %call, i64* %cur_ofs, align 8
  %5 = load i64* %file_ofs.addr, align 8
  %cmp = icmp slt i64 %5, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load i64* %cur_ofs, align 8
  %7 = load i64* %file_ofs.addr, align 8
  %cmp1 = icmp ne i64 %6, %7
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %8 = load %struct.mz_zip_archive_tag** %pZip, align 8
  %m_pState2 = getelementptr inbounds %struct.mz_zip_archive_tag* %8, i32 0, i32 12
  %9 = load %struct.mz_zip_internal_state_tag** %m_pState2, align 8
  %m_pFile3 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %9, i32 0, i32 3
  %10 = load %struct._IO_FILE** %m_pFile3, align 8
  %11 = load i64* %file_ofs.addr, align 8
  %call4 = call i32 @fseeko(%struct._IO_FILE* %10, i64 %11, i32 0)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %entry
  store i64 0, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %12 = load i8** %pBuf.addr, align 8
  %13 = load i64* %n.addr, align 8
  %14 = load %struct.mz_zip_archive_tag** %pZip, align 8
  %m_pState5 = getelementptr inbounds %struct.mz_zip_archive_tag* %14, i32 0, i32 12
  %15 = load %struct.mz_zip_internal_state_tag** %m_pState5, align 8
  %m_pFile6 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %15, i32 0, i32 3
  %16 = load %struct._IO_FILE** %m_pFile6, align 8
  %call7 = call i64 @fwrite(i8* %12, i64 1, i64 %13, %struct._IO_FILE* %16)
  store i64 %call7, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %17 = load i64* %retval
  ret i64 %17
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_writer_init_from_reader(%struct.mz_zip_archive_tag* %pZip, i8* %pFilename) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive_tag* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %1, i32 0, i32 12
  %2 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 3
  %4 = load i32* %m_zip_mode, align 4
  %cmp = icmp ne i32 %4, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %5 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive_tag* %5, i32 0, i32 2
  %6 = load i32* %m_total_files, align 4
  %cmp3 = icmp eq i32 %6, 65535
  br i1 %cmp3, label %if.then7, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %if.end
  %7 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %7, i32 0, i32 0
  %8 = load i64* %m_archive_size, align 8
  %add = add i64 %8, 46
  %add5 = add i64 %add, 30
  %cmp6 = icmp ugt i64 %add5, 4294967295
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false4, %if.end
  store i32 0, i32* %retval
  br label %return

if.end8:                                          ; preds = %lor.lhs.false4
  %9 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState9 = getelementptr inbounds %struct.mz_zip_archive_tag* %9, i32 0, i32 12
  %10 = load %struct.mz_zip_internal_state_tag** %m_pState9, align 8
  store %struct.mz_zip_internal_state_tag* %10, %struct.mz_zip_internal_state_tag** %pState, align 8
  %11 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag* %11, i32 0, i32 3
  %12 = load %struct._IO_FILE** %m_pFile, align 8
  %tobool10 = icmp ne %struct._IO_FILE* %12, null
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end8
  %13 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %13, i32 0, i32 11
  %14 = load i8** %m_pIO_opaque, align 8
  %15 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %16 = bitcast %struct.mz_zip_archive_tag* %15 to i8*
  %cmp12 = icmp ne i8* %14, %16
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.then11
  store i32 0, i32* %retval
  br label %return

if.end14:                                         ; preds = %if.then11
  %17 = load i8** %pFilename.addr, align 8
  %tobool15 = icmp ne i8* %17, null
  br i1 %tobool15, label %if.end17, label %if.then16

if.then16:                                        ; preds = %if.end14
  store i32 0, i32* %retval
  br label %return

if.end17:                                         ; preds = %if.end14
  %18 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive_tag* %18, i32 0, i32 10
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_write_func, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %19 = load i8** %pFilename.addr, align 8
  %20 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile18 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %20, i32 0, i32 3
  %21 = load %struct._IO_FILE** %m_pFile18, align 8
  %call = call %struct._IO_FILE* @freopen(i8* %19, i8* getelementptr inbounds ([4 x i8]* @.str19, i32 0, i32 0), %struct._IO_FILE* %21)
  %22 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile19 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %22, i32 0, i32 3
  store %struct._IO_FILE* %call, %struct._IO_FILE** %m_pFile19, align 8
  %cmp20 = icmp eq %struct._IO_FILE* null, %call
  br i1 %cmp20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.end17
  %23 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %call22 = call i32 @mz_zip_reader_end(%struct.mz_zip_archive_tag* %23)
  store i32 0, i32* %retval
  br label %return

if.end23:                                         ; preds = %if.end17
  br label %if.end37

if.else:                                          ; preds = %if.end8
  %24 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag* %24, i32 0, i32 4
  %25 = load i8** %m_pMem, align 8
  %tobool24 = icmp ne i8* %25, null
  br i1 %tobool24, label %if.then25, label %if.else31

if.then25:                                        ; preds = %if.else
  %26 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque26 = getelementptr inbounds %struct.mz_zip_archive_tag* %26, i32 0, i32 11
  %27 = load i8** %m_pIO_opaque26, align 8
  %28 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %29 = bitcast %struct.mz_zip_archive_tag* %28 to i8*
  %cmp27 = icmp ne i8* %27, %29
  br i1 %cmp27, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.then25
  store i32 0, i32* %retval
  br label %return

if.end29:                                         ; preds = %if.then25
  %30 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_size = getelementptr inbounds %struct.mz_zip_internal_state_tag* %30, i32 0, i32 5
  %31 = load i64* %m_mem_size, align 8
  %32 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_capacity = getelementptr inbounds %struct.mz_zip_internal_state_tag* %32, i32 0, i32 6
  store i64 %31, i64* %m_mem_capacity, align 8
  %33 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite30 = getelementptr inbounds %struct.mz_zip_archive_tag* %33, i32 0, i32 10
  store i64 (i8*, i64, i8*, i64)* @mz_zip_heap_write_func, i64 (i8*, i64, i8*, i64)** %m_pWrite30, align 8
  br label %if.end36

if.else31:                                        ; preds = %if.else
  %34 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite32 = getelementptr inbounds %struct.mz_zip_archive_tag* %34, i32 0, i32 10
  %35 = load i64 (i8*, i64, i8*, i64)** %m_pWrite32, align 8
  %tobool33 = icmp ne i64 (i8*, i64, i8*, i64)* %35, null
  br i1 %tobool33, label %if.end35, label %if.then34

if.then34:                                        ; preds = %if.else31
  store i32 0, i32* %retval
  br label %return

if.end35:                                         ; preds = %if.else31
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.end29
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.end23
  %36 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive_tag* %36, i32 0, i32 1
  %37 = load i64* %m_central_directory_file_ofs, align 8
  %38 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size38 = getelementptr inbounds %struct.mz_zip_archive_tag* %38, i32 0, i32 0
  store i64 %37, i64* %m_archive_size38, align 8
  %39 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode39 = getelementptr inbounds %struct.mz_zip_archive_tag* %39, i32 0, i32 3
  store i32 2, i32* %m_zip_mode39, align 4
  %40 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_central_directory_file_ofs40 = getelementptr inbounds %struct.mz_zip_archive_tag* %40, i32 0, i32 1
  store i64 0, i64* %m_central_directory_file_ofs40, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end37, %if.then34, %if.then28, %if.then21, %if.then16, %if.then13, %if.then7, %if.then
  %41 = load i32* %retval
  ret i32 %41
}

declare %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) #4

; Function Attrs: nounwind uwtable
define i32 @mz_zip_writer_add_mem(%struct.mz_zip_archive_tag* %pZip, i8* %pArchive_name, i8* %pBuf, i64 %buf_size, i32 %level_and_flags) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %level_and_flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i8** %pArchive_name.addr, align 8
  %2 = load i8** %pBuf.addr, align 8
  %3 = load i64* %buf_size.addr, align 8
  %4 = load i32* %level_and_flags.addr, align 4
  %call = call i32 @mz_zip_writer_add_mem_ex(%struct.mz_zip_archive_tag* %0, i8* %1, i8* %2, i64 %3, i8* null, i16 zeroext 0, i32 %4, i64 0, i32 0)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_writer_add_mem_ex(%struct.mz_zip_archive_tag* %pZip, i8* %pArchive_name, i8* %pBuf, i64 %buf_size, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags, i64 %uncomp_size, i32 %uncomp_crc32) #0 {
entry:
  %retval.i.i199 = alloca i32, align 4
  %pZip.addr.i.i200 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i.i201 = alloca %struct.mz_zip_array*, align 8
  %new_capacity.addr.i.i202 = alloca i64, align 8
  %growing.addr.i.i203 = alloca i32, align 4
  %pZip.addr.i204 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i205 = alloca %struct.mz_zip_array*, align 8
  %n.addr.i206 = alloca i64, align 8
  %retval.i.i = alloca i32, align 4
  %pZip.addr.i.i = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i.i = alloca %struct.mz_zip_array*, align 8
  %new_capacity.addr.i.i = alloca i64, align 8
  %growing.addr.i.i = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %n.addr.i = alloca i64, align 8
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %uncomp_size.addr = alloca i64, align 8
  %uncomp_crc32.addr = alloca i32, align 4
  %method = alloca i16, align 2
  %dos_time = alloca i16, align 2
  %dos_date = alloca i16, align 2
  %level = alloca i32, align 4
  %ext_attributes = alloca i32, align 4
  %num_alignment_padding_bytes = alloca i32, align 4
  %local_dir_header_ofs = alloca i64, align 8
  %cur_archive_file_ofs = alloca i64, align 8
  %comp_size = alloca i64, align 8
  %archive_name_size = alloca i64, align 8
  %local_dir_header = alloca [30 x i8], align 16
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %store_data_uncompressed = alloca i32, align 4
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %cur_time = alloca i64, align 8
  %state = alloca %struct.mz_zip_writer_add_state, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i8* %pComment, i8** %pComment.addr, align 8
  store i16 %comment_size, i16* %comment_size.addr, align 2
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4
  store i64 %uncomp_size, i64* %uncomp_size.addr, align 8
  store i32 %uncomp_crc32, i32* %uncomp_crc32.addr, align 4
  store i16 0, i16* %method, align 2
  store i16 0, i16* %dos_time, align 2
  store i16 0, i16* %dos_date, align 2
  store i32 0, i32* %ext_attributes, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %0, i32 0, i32 0
  %1 = load i64* %m_archive_size, align 8
  store i64 %1, i64* %local_dir_header_ofs, align 8
  %2 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size1 = getelementptr inbounds %struct.mz_zip_archive_tag* %2, i32 0, i32 0
  %3 = load i64* %m_archive_size1, align 8
  store i64 %3, i64* %cur_archive_file_ofs, align 8
  store i64 0, i64* %comp_size, align 8
  store %struct.tdefl_compressor* null, %struct.tdefl_compressor** %pComp, align 8
  %4 = load i32* %level_and_flags.addr, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 6, i32* %level_and_flags.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %level_and_flags.addr, align 4
  %and = and i32 %5, 15
  store i32 %and, i32* %level, align 4
  %6 = load i32* %level, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end
  %7 = load i32* %level_and_flags.addr, align 4
  %and2 = and i32 %7, 1024
  %tobool3 = icmp ne i32 %and2, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %8 = phi i1 [ true, %if.end ], [ %tobool3, %lor.rhs ]
  %lor.ext = zext i1 %8 to i32
  store i32 %lor.ext, i32* %store_data_uncompressed, align 4
  %9 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %tobool4 = icmp ne %struct.mz_zip_archive_tag* %9, null
  br i1 %tobool4, label %lor.lhs.false, label %if.then23

lor.lhs.false:                                    ; preds = %lor.end
  %10 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %10, i32 0, i32 12
  %11 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool5 = icmp ne %struct.mz_zip_internal_state_tag* %11, null
  br i1 %tobool5, label %lor.lhs.false6, label %if.then23

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %12 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive_tag* %12, i32 0, i32 3
  %13 = load i32* %m_zip_mode, align 4
  %cmp7 = icmp ne i32 %13, 2
  br i1 %cmp7, label %if.then23, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %lor.lhs.false6
  %14 = load i64* %buf_size.addr, align 8
  %tobool9 = icmp ne i64 %14, 0
  br i1 %tobool9, label %land.lhs.true, label %lor.lhs.false11

land.lhs.true:                                    ; preds = %lor.lhs.false8
  %15 = load i8** %pBuf.addr, align 8
  %tobool10 = icmp ne i8* %15, null
  br i1 %tobool10, label %lor.lhs.false11, label %if.then23

lor.lhs.false11:                                  ; preds = %land.lhs.true, %lor.lhs.false8
  %16 = load i8** %pArchive_name.addr, align 8
  %tobool12 = icmp ne i8* %16, null
  br i1 %tobool12, label %lor.lhs.false13, label %if.then23

lor.lhs.false13:                                  ; preds = %lor.lhs.false11
  %17 = load i16* %comment_size.addr, align 2
  %conv = zext i16 %17 to i32
  %tobool14 = icmp ne i32 %conv, 0
  br i1 %tobool14, label %land.lhs.true15, label %lor.lhs.false17

land.lhs.true15:                                  ; preds = %lor.lhs.false13
  %18 = load i8** %pComment.addr, align 8
  %tobool16 = icmp ne i8* %18, null
  br i1 %tobool16, label %lor.lhs.false17, label %if.then23

lor.lhs.false17:                                  ; preds = %land.lhs.true15, %lor.lhs.false13
  %19 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive_tag* %19, i32 0, i32 2
  %20 = load i32* %m_total_files, align 4
  %cmp18 = icmp eq i32 %20, 65535
  br i1 %cmp18, label %if.then23, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %lor.lhs.false17
  %21 = load i32* %level, align 4
  %cmp21 = icmp ugt i32 %21, 10
  br i1 %cmp21, label %if.then23, label %if.end24

if.then23:                                        ; preds = %lor.lhs.false20, %lor.lhs.false17, %land.lhs.true15, %lor.lhs.false11, %land.lhs.true, %lor.lhs.false6, %lor.lhs.false, %lor.end
  store i32 0, i32* %retval
  br label %return

if.end24:                                         ; preds = %lor.lhs.false20
  %22 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState25 = getelementptr inbounds %struct.mz_zip_archive_tag* %22, i32 0, i32 12
  %23 = load %struct.mz_zip_internal_state_tag** %m_pState25, align 8
  store %struct.mz_zip_internal_state_tag* %23, %struct.mz_zip_internal_state_tag** %pState, align 8
  %24 = load i32* %level_and_flags.addr, align 4
  %and26 = and i32 %24, 1024
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %if.end31, label %land.lhs.true28

land.lhs.true28:                                  ; preds = %if.end24
  %25 = load i64* %uncomp_size.addr, align 8
  %tobool29 = icmp ne i64 %25, 0
  br i1 %tobool29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %land.lhs.true28
  store i32 0, i32* %retval
  br label %return

if.end31:                                         ; preds = %land.lhs.true28, %if.end24
  %26 = load i64* %buf_size.addr, align 8
  %cmp32 = icmp ugt i64 %26, 4294967295
  br i1 %cmp32, label %if.then37, label %lor.lhs.false34

lor.lhs.false34:                                  ; preds = %if.end31
  %27 = load i64* %uncomp_size.addr, align 8
  %cmp35 = icmp ugt i64 %27, 4294967295
  br i1 %cmp35, label %if.then37, label %if.end38

if.then37:                                        ; preds = %lor.lhs.false34, %if.end31
  store i32 0, i32* %retval
  br label %return

if.end38:                                         ; preds = %lor.lhs.false34
  %28 = load i8** %pArchive_name.addr, align 8
  %call = call i32 @mz_zip_writer_validate_archive_name(i8* %28)
  %tobool39 = icmp ne i32 %call, 0
  br i1 %tobool39, label %if.end41, label %if.then40

if.then40:                                        ; preds = %if.end38
  store i32 0, i32* %retval
  br label %return

if.end41:                                         ; preds = %if.end38
  %call42 = call i64 @time(i64* %cur_time) #2
  %29 = load i64* %cur_time, align 8
  call void @mz_zip_time_to_dos_time(i64 %29, i16* %dos_time, i16* %dos_date)
  %30 = load i8** %pArchive_name.addr, align 8
  %call43 = call i64 @strlen(i8* %30) #7
  store i64 %call43, i64* %archive_name_size, align 8
  %31 = load i64* %archive_name_size, align 8
  %cmp44 = icmp ugt i64 %31, 65535
  br i1 %cmp44, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.end41
  store i32 0, i32* %retval
  br label %return

if.end47:                                         ; preds = %if.end41
  %32 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %call48 = call i32 @mz_zip_writer_compute_padding_needed_for_file_alignment(%struct.mz_zip_archive_tag* %32)
  store i32 %call48, i32* %num_alignment_padding_bytes, align 4
  %33 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files49 = getelementptr inbounds %struct.mz_zip_archive_tag* %33, i32 0, i32 2
  %34 = load i32* %m_total_files49, align 4
  %cmp50 = icmp eq i32 %34, 65535
  br i1 %cmp50, label %if.then62, label %lor.lhs.false52

lor.lhs.false52:                                  ; preds = %if.end47
  %35 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size53 = getelementptr inbounds %struct.mz_zip_archive_tag* %35, i32 0, i32 0
  %36 = load i64* %m_archive_size53, align 8
  %37 = load i32* %num_alignment_padding_bytes, align 4
  %conv54 = zext i32 %37 to i64
  %add = add i64 %36, %conv54
  %add55 = add i64 %add, 30
  %add56 = add i64 %add55, 46
  %38 = load i16* %comment_size.addr, align 2
  %conv57 = zext i16 %38 to i64
  %add58 = add i64 %add56, %conv57
  %39 = load i64* %archive_name_size, align 8
  %add59 = add i64 %add58, %39
  %cmp60 = icmp ugt i64 %add59, 4294967295
  br i1 %cmp60, label %if.then62, label %if.end63

if.then62:                                        ; preds = %lor.lhs.false52, %if.end47
  store i32 0, i32* %retval
  br label %return

if.end63:                                         ; preds = %lor.lhs.false52
  %40 = load i64* %archive_name_size, align 8
  %tobool64 = icmp ne i64 %40, 0
  br i1 %tobool64, label %land.lhs.true65, label %if.end75

land.lhs.true65:                                  ; preds = %if.end63
  %41 = load i64* %archive_name_size, align 8
  %sub = sub i64 %41, 1
  %42 = load i8** %pArchive_name.addr, align 8
  %arrayidx = getelementptr inbounds i8* %42, i64 %sub
  %43 = load i8* %arrayidx, align 1
  %conv66 = sext i8 %43 to i32
  %cmp67 = icmp eq i32 %conv66, 47
  br i1 %cmp67, label %if.then69, label %if.end75

if.then69:                                        ; preds = %land.lhs.true65
  %44 = load i32* %ext_attributes, align 4
  %or = or i32 %44, 16
  store i32 %or, i32* %ext_attributes, align 4
  %45 = load i64* %buf_size.addr, align 8
  %tobool70 = icmp ne i64 %45, 0
  br i1 %tobool70, label %if.then73, label %lor.lhs.false71

lor.lhs.false71:                                  ; preds = %if.then69
  %46 = load i64* %uncomp_size.addr, align 8
  %tobool72 = icmp ne i64 %46, 0
  br i1 %tobool72, label %if.then73, label %if.end74

if.then73:                                        ; preds = %lor.lhs.false71, %if.then69
  store i32 0, i32* %retval
  br label %return

if.end74:                                         ; preds = %lor.lhs.false71
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %land.lhs.true65, %if.end63
  %47 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %48 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag* %48, i32 0, i32 0
  %49 = load i64* %archive_name_size, align 8
  %add76 = add i64 46, %49
  %50 = load i16* %comment_size.addr, align 2
  %conv77 = zext i16 %50 to i64
  %add78 = add i64 %add76, %conv77
  store %struct.mz_zip_archive_tag* %47, %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  store %struct.mz_zip_array* %m_central_dir, %struct.mz_zip_array** %pArray.addr.i, align 8
  store i64 %add78, i64* %n.addr.i, align 8
  %51 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %52 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %53 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_size.i = getelementptr inbounds %struct.mz_zip_array* %53, i32 0, i32 1
  %54 = load i64* %m_size.i, align 8
  %55 = load i64* %n.addr.i, align 8
  %add.i = add i64 %54, %55
  store %struct.mz_zip_archive_tag* %51, %struct.mz_zip_archive_tag** %pZip.addr.i.i, align 8
  store %struct.mz_zip_array* %52, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  store i64 %add.i, i64* %new_capacity.addr.i.i, align 8
  store i32 1, i32* %growing.addr.i.i, align 4
  %56 = load i64* %new_capacity.addr.i.i, align 8
  %57 = load %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %m_capacity.i.i = getelementptr inbounds %struct.mz_zip_array* %57, i32 0, i32 2
  %58 = load i64* %m_capacity.i.i, align 8
  %cmp.i.i = icmp ugt i64 %56, %58
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end2.i.i

if.then.i.i:                                      ; preds = %if.end75
  %59 = load %struct.mz_zip_archive_tag** %pZip.addr.i.i, align 8
  %60 = load %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %61 = load i64* %new_capacity.addr.i.i, align 8
  %62 = load i32* %growing.addr.i.i, align 4
  %call.i.i = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %59, %struct.mz_zip_array* %60, i64 %61, i32 %62) #2
  %tobool.i.i = icmp ne i32 %call.i.i, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then1.i.i

if.then1.i.i:                                     ; preds = %if.then.i.i
  store i32 0, i32* %retval.i.i
  br label %mz_zip_array_ensure_room.exit

if.end.i.i:                                       ; preds = %if.then.i.i
  br label %if.end2.i.i

if.end2.i.i:                                      ; preds = %if.end.i.i, %if.end75
  store i32 1, i32* %retval.i.i
  br label %mz_zip_array_ensure_room.exit

mz_zip_array_ensure_room.exit:                    ; preds = %if.end2.i.i, %if.then1.i.i
  %63 = load i32* %retval.i.i
  %tobool80 = icmp ne i32 %63, 0
  br i1 %tobool80, label %lor.lhs.false81, label %if.then84

lor.lhs.false81:                                  ; preds = %mz_zip_array_ensure_room.exit
  %64 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %65 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %65, i32 0, i32 1
  store %struct.mz_zip_archive_tag* %64, %struct.mz_zip_archive_tag** %pZip.addr.i204, align 8
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i205, align 8
  store i64 1, i64* %n.addr.i206, align 8
  %66 = load %struct.mz_zip_archive_tag** %pZip.addr.i204, align 8
  %67 = load %struct.mz_zip_array** %pArray.addr.i205, align 8
  %68 = load %struct.mz_zip_array** %pArray.addr.i205, align 8
  %m_size.i207 = getelementptr inbounds %struct.mz_zip_array* %68, i32 0, i32 1
  %69 = load i64* %m_size.i207, align 8
  %70 = load i64* %n.addr.i206, align 8
  %add.i208 = add i64 %69, %70
  store %struct.mz_zip_archive_tag* %66, %struct.mz_zip_archive_tag** %pZip.addr.i.i200, align 8
  store %struct.mz_zip_array* %67, %struct.mz_zip_array** %pArray.addr.i.i201, align 8
  store i64 %add.i208, i64* %new_capacity.addr.i.i202, align 8
  store i32 1, i32* %growing.addr.i.i203, align 4
  %71 = load i64* %new_capacity.addr.i.i202, align 8
  %72 = load %struct.mz_zip_array** %pArray.addr.i.i201, align 8
  %m_capacity.i.i209 = getelementptr inbounds %struct.mz_zip_array* %72, i32 0, i32 2
  %73 = load i64* %m_capacity.i.i209, align 8
  %cmp.i.i210 = icmp ugt i64 %71, %73
  br i1 %cmp.i.i210, label %if.then.i.i213, label %if.end2.i.i216

if.then.i.i213:                                   ; preds = %lor.lhs.false81
  %74 = load %struct.mz_zip_archive_tag** %pZip.addr.i.i200, align 8
  %75 = load %struct.mz_zip_array** %pArray.addr.i.i201, align 8
  %76 = load i64* %new_capacity.addr.i.i202, align 8
  %77 = load i32* %growing.addr.i.i203, align 4
  %call.i.i211 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %74, %struct.mz_zip_array* %75, i64 %76, i32 %77) #2
  %tobool.i.i212 = icmp ne i32 %call.i.i211, 0
  br i1 %tobool.i.i212, label %if.end.i.i215, label %if.then1.i.i214

if.then1.i.i214:                                  ; preds = %if.then.i.i213
  store i32 0, i32* %retval.i.i199
  br label %mz_zip_array_ensure_room.exit217

if.end.i.i215:                                    ; preds = %if.then.i.i213
  br label %if.end2.i.i216

if.end2.i.i216:                                   ; preds = %if.end.i.i215, %lor.lhs.false81
  store i32 1, i32* %retval.i.i199
  br label %mz_zip_array_ensure_room.exit217

mz_zip_array_ensure_room.exit217:                 ; preds = %if.end2.i.i216, %if.then1.i.i214
  %78 = load i32* %retval.i.i199
  %tobool83 = icmp ne i32 %78, 0
  br i1 %tobool83, label %if.end85, label %if.then84

if.then84:                                        ; preds = %mz_zip_array_ensure_room.exit217, %mz_zip_array_ensure_room.exit
  store i32 0, i32* %retval
  br label %return

if.end85:                                         ; preds = %mz_zip_array_ensure_room.exit217
  %79 = load i32* %store_data_uncompressed, align 4
  %tobool86 = icmp ne i32 %79, 0
  br i1 %tobool86, label %if.end95, label %land.lhs.true87

land.lhs.true87:                                  ; preds = %if.end85
  %80 = load i64* %buf_size.addr, align 8
  %tobool88 = icmp ne i64 %80, 0
  br i1 %tobool88, label %if.then89, label %if.end95

if.then89:                                        ; preds = %land.lhs.true87
  %81 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive_tag* %81, i32 0, i32 5
  %82 = load i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %83 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %83, i32 0, i32 8
  %84 = load i8** %m_pAlloc_opaque, align 8
  %call90 = call i8* %82(i8* %84, i64 1, i64 319352)
  %85 = bitcast i8* %call90 to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %85, %struct.tdefl_compressor** %pComp, align 8
  %cmp91 = icmp eq %struct.tdefl_compressor* null, %85
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %if.then89
  store i32 0, i32* %retval
  br label %return

if.end94:                                         ; preds = %if.then89
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %land.lhs.true87, %if.end85
  %86 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %87 = load i64* %cur_archive_file_ofs, align 8
  %88 = load i32* %num_alignment_padding_bytes, align 4
  %conv96 = zext i32 %88 to i64
  %add97 = add i64 %conv96, 30
  %conv98 = trunc i64 %add97 to i32
  %call99 = call i32 @mz_zip_writer_write_zeros(%struct.mz_zip_archive_tag* %86, i64 %87, i32 %conv98)
  %tobool100 = icmp ne i32 %call99, 0
  br i1 %tobool100, label %if.end103, label %if.then101

if.then101:                                       ; preds = %if.end95
  %89 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive_tag* %89, i32 0, i32 6
  %90 = load void (i8*, i8*)** %m_pFree, align 8
  %91 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque102 = getelementptr inbounds %struct.mz_zip_archive_tag* %91, i32 0, i32 8
  %92 = load i8** %m_pAlloc_opaque102, align 8
  %93 = load %struct.tdefl_compressor** %pComp, align 8
  %94 = bitcast %struct.tdefl_compressor* %93 to i8*
  call void %90(i8* %92, i8* %94)
  store i32 0, i32* %retval
  br label %return

if.end103:                                        ; preds = %if.end95
  %95 = load i32* %num_alignment_padding_bytes, align 4
  %conv104 = zext i32 %95 to i64
  %96 = load i64* %local_dir_header_ofs, align 8
  %add105 = add i64 %96, %conv104
  store i64 %add105, i64* %local_dir_header_ofs, align 8
  %97 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive_tag* %97, i32 0, i32 4
  %98 = load i32* %m_file_offset_alignment, align 4
  %tobool106 = icmp ne i32 %98, 0
  br i1 %tobool106, label %if.then107, label %if.end114

if.then107:                                       ; preds = %if.end103
  %99 = load i64* %local_dir_header_ofs, align 8
  %100 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_file_offset_alignment108 = getelementptr inbounds %struct.mz_zip_archive_tag* %100, i32 0, i32 4
  %101 = load i32* %m_file_offset_alignment108, align 4
  %sub109 = sub i32 %101, 1
  %conv110 = zext i32 %sub109 to i64
  %and111 = and i64 %99, %conv110
  %cmp112 = icmp eq i64 %and111, 0
  br i1 %cmp112, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then107
  br label %cond.end

cond.false:                                       ; preds = %if.then107
  call void @__assert_fail(i8* getelementptr inbounds ([66 x i8]* @.str20, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 4332, i8* getelementptr inbounds ([143 x i8]* @__PRETTY_FUNCTION__.mz_zip_writer_add_mem_ex, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %102, %cond.true
  br label %if.end114

if.end114:                                        ; preds = %cond.end, %if.end103
  %103 = load i32* %num_alignment_padding_bytes, align 4
  %conv115 = zext i32 %103 to i64
  %add116 = add i64 %conv115, 30
  %104 = load i64* %cur_archive_file_ofs, align 8
  %add117 = add i64 %104, %add116
  store i64 %add117, i64* %cur_archive_file_ofs, align 8
  %105 = bitcast [30 x i8]* %local_dir_header to i8*
  call void @llvm.memset.p0i8.i64(i8* %105, i8 0, i64 30, i32 16, i1 false)
  %106 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive_tag* %106, i32 0, i32 10
  %107 = load i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %108 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %108, i32 0, i32 11
  %109 = load i8** %m_pIO_opaque, align 8
  %110 = load i64* %cur_archive_file_ofs, align 8
  %111 = load i8** %pArchive_name.addr, align 8
  %112 = load i64* %archive_name_size, align 8
  %call118 = call i64 %107(i8* %109, i64 %110, i8* %111, i64 %112)
  %113 = load i64* %archive_name_size, align 8
  %cmp119 = icmp ne i64 %call118, %113
  br i1 %cmp119, label %if.then121, label %if.end124

if.then121:                                       ; preds = %if.end114
  %114 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree122 = getelementptr inbounds %struct.mz_zip_archive_tag* %114, i32 0, i32 6
  %115 = load void (i8*, i8*)** %m_pFree122, align 8
  %116 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque123 = getelementptr inbounds %struct.mz_zip_archive_tag* %116, i32 0, i32 8
  %117 = load i8** %m_pAlloc_opaque123, align 8
  %118 = load %struct.tdefl_compressor** %pComp, align 8
  %119 = bitcast %struct.tdefl_compressor* %118 to i8*
  call void %115(i8* %117, i8* %119)
  store i32 0, i32* %retval
  br label %return

if.end124:                                        ; preds = %if.end114
  %120 = load i64* %archive_name_size, align 8
  %121 = load i64* %cur_archive_file_ofs, align 8
  %add125 = add i64 %121, %120
  store i64 %add125, i64* %cur_archive_file_ofs, align 8
  %122 = load i32* %level_and_flags.addr, align 4
  %and126 = and i32 %122, 1024
  %tobool127 = icmp ne i32 %and126, 0
  br i1 %tobool127, label %if.end135, label %if.then128

if.then128:                                       ; preds = %if.end124
  %123 = load i8** %pBuf.addr, align 8
  %124 = load i64* %buf_size.addr, align 8
  %call129 = call i64 @mz_crc32(i64 0, i8* %123, i64 %124)
  %conv130 = trunc i64 %call129 to i32
  store i32 %conv130, i32* %uncomp_crc32.addr, align 4
  %125 = load i64* %buf_size.addr, align 8
  store i64 %125, i64* %uncomp_size.addr, align 8
  %126 = load i64* %uncomp_size.addr, align 8
  %cmp131 = icmp ule i64 %126, 3
  br i1 %cmp131, label %if.then133, label %if.end134

if.then133:                                       ; preds = %if.then128
  store i32 0, i32* %level, align 4
  store i32 1, i32* %store_data_uncompressed, align 4
  br label %if.end134

if.end134:                                        ; preds = %if.then133, %if.then128
  br label %if.end135

if.end135:                                        ; preds = %if.end134, %if.end124
  %127 = load i32* %store_data_uncompressed, align 4
  %tobool136 = icmp ne i32 %127, 0
  br i1 %tobool136, label %if.then137, label %if.else

if.then137:                                       ; preds = %if.end135
  %128 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite138 = getelementptr inbounds %struct.mz_zip_archive_tag* %128, i32 0, i32 10
  %129 = load i64 (i8*, i64, i8*, i64)** %m_pWrite138, align 8
  %130 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque139 = getelementptr inbounds %struct.mz_zip_archive_tag* %130, i32 0, i32 11
  %131 = load i8** %m_pIO_opaque139, align 8
  %132 = load i64* %cur_archive_file_ofs, align 8
  %133 = load i8** %pBuf.addr, align 8
  %134 = load i64* %buf_size.addr, align 8
  %call140 = call i64 %129(i8* %131, i64 %132, i8* %133, i64 %134)
  %135 = load i64* %buf_size.addr, align 8
  %cmp141 = icmp ne i64 %call140, %135
  br i1 %cmp141, label %if.then143, label %if.end146

if.then143:                                       ; preds = %if.then137
  %136 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree144 = getelementptr inbounds %struct.mz_zip_archive_tag* %136, i32 0, i32 6
  %137 = load void (i8*, i8*)** %m_pFree144, align 8
  %138 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque145 = getelementptr inbounds %struct.mz_zip_archive_tag* %138, i32 0, i32 8
  %139 = load i8** %m_pAlloc_opaque145, align 8
  %140 = load %struct.tdefl_compressor** %pComp, align 8
  %141 = bitcast %struct.tdefl_compressor* %140 to i8*
  call void %137(i8* %139, i8* %141)
  store i32 0, i32* %retval
  br label %return

if.end146:                                        ; preds = %if.then137
  %142 = load i64* %buf_size.addr, align 8
  %143 = load i64* %cur_archive_file_ofs, align 8
  %add147 = add i64 %143, %142
  store i64 %add147, i64* %cur_archive_file_ofs, align 8
  %144 = load i64* %buf_size.addr, align 8
  store i64 %144, i64* %comp_size, align 8
  %145 = load i32* %level_and_flags.addr, align 4
  %and148 = and i32 %145, 1024
  %tobool149 = icmp ne i32 %and148, 0
  br i1 %tobool149, label %if.then150, label %if.end151

if.then150:                                       ; preds = %if.end146
  store i16 8, i16* %method, align 2
  br label %if.end151

if.end151:                                        ; preds = %if.then150, %if.end146
  br label %if.end169

if.else:                                          ; preds = %if.end135
  %146 = load i64* %buf_size.addr, align 8
  %tobool152 = icmp ne i64 %146, 0
  br i1 %tobool152, label %if.then153, label %if.end168

if.then153:                                       ; preds = %if.else
  %147 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pZip = getelementptr inbounds %struct.mz_zip_writer_add_state* %state, i32 0, i32 0
  store %struct.mz_zip_archive_tag* %147, %struct.mz_zip_archive_tag** %m_pZip, align 8
  %148 = load i64* %cur_archive_file_ofs, align 8
  %m_cur_archive_file_ofs = getelementptr inbounds %struct.mz_zip_writer_add_state* %state, i32 0, i32 1
  store i64 %148, i64* %m_cur_archive_file_ofs, align 8
  %m_comp_size = getelementptr inbounds %struct.mz_zip_writer_add_state* %state, i32 0, i32 2
  store i64 0, i64* %m_comp_size, align 8
  %149 = load %struct.tdefl_compressor** %pComp, align 8
  %150 = bitcast %struct.mz_zip_writer_add_state* %state to i8*
  %151 = load i32* %level, align 4
  %call154 = call i32 @tdefl_create_comp_flags_from_zip_params(i32 %151, i32 -15, i32 0)
  %call155 = call i32 @tdefl_init(%struct.tdefl_compressor* %149, i32 (i8*, i32, i8*)* @mz_zip_writer_add_put_buf_callback, i8* %150, i32 %call154)
  %cmp156 = icmp ne i32 %call155, 0
  br i1 %cmp156, label %if.then162, label %lor.lhs.false158

lor.lhs.false158:                                 ; preds = %if.then153
  %152 = load %struct.tdefl_compressor** %pComp, align 8
  %153 = load i8** %pBuf.addr, align 8
  %154 = load i64* %buf_size.addr, align 8
  %call159 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %152, i8* %153, i64 %154, i32 4)
  %cmp160 = icmp ne i32 %call159, 1
  br i1 %cmp160, label %if.then162, label %if.end165

if.then162:                                       ; preds = %lor.lhs.false158, %if.then153
  %155 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree163 = getelementptr inbounds %struct.mz_zip_archive_tag* %155, i32 0, i32 6
  %156 = load void (i8*, i8*)** %m_pFree163, align 8
  %157 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque164 = getelementptr inbounds %struct.mz_zip_archive_tag* %157, i32 0, i32 8
  %158 = load i8** %m_pAlloc_opaque164, align 8
  %159 = load %struct.tdefl_compressor** %pComp, align 8
  %160 = bitcast %struct.tdefl_compressor* %159 to i8*
  call void %156(i8* %158, i8* %160)
  store i32 0, i32* %retval
  br label %return

if.end165:                                        ; preds = %lor.lhs.false158
  %m_comp_size166 = getelementptr inbounds %struct.mz_zip_writer_add_state* %state, i32 0, i32 2
  %161 = load i64* %m_comp_size166, align 8
  store i64 %161, i64* %comp_size, align 8
  %m_cur_archive_file_ofs167 = getelementptr inbounds %struct.mz_zip_writer_add_state* %state, i32 0, i32 1
  %162 = load i64* %m_cur_archive_file_ofs167, align 8
  store i64 %162, i64* %cur_archive_file_ofs, align 8
  store i16 8, i16* %method, align 2
  br label %if.end168

if.end168:                                        ; preds = %if.end165, %if.else
  br label %if.end169

if.end169:                                        ; preds = %if.end168, %if.end151
  %163 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree170 = getelementptr inbounds %struct.mz_zip_archive_tag* %163, i32 0, i32 6
  %164 = load void (i8*, i8*)** %m_pFree170, align 8
  %165 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque171 = getelementptr inbounds %struct.mz_zip_archive_tag* %165, i32 0, i32 8
  %166 = load i8** %m_pAlloc_opaque171, align 8
  %167 = load %struct.tdefl_compressor** %pComp, align 8
  %168 = bitcast %struct.tdefl_compressor* %167 to i8*
  call void %164(i8* %166, i8* %168)
  store %struct.tdefl_compressor* null, %struct.tdefl_compressor** %pComp, align 8
  %169 = load i64* %comp_size, align 8
  %cmp172 = icmp ugt i64 %169, 4294967295
  br i1 %cmp172, label %if.then177, label %lor.lhs.false174

lor.lhs.false174:                                 ; preds = %if.end169
  %170 = load i64* %cur_archive_file_ofs, align 8
  %cmp175 = icmp ugt i64 %170, 4294967295
  br i1 %cmp175, label %if.then177, label %if.end178

if.then177:                                       ; preds = %lor.lhs.false174, %if.end169
  store i32 0, i32* %retval
  br label %return

if.end178:                                        ; preds = %lor.lhs.false174
  %171 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %arraydecay = getelementptr inbounds [30 x i8]* %local_dir_header, i32 0, i32 0
  %172 = load i64* %archive_name_size, align 8
  %conv179 = trunc i64 %172 to i16
  %173 = load i64* %uncomp_size.addr, align 8
  %174 = load i64* %comp_size, align 8
  %175 = load i32* %uncomp_crc32.addr, align 4
  %176 = load i16* %method, align 2
  %177 = load i16* %dos_time, align 2
  %178 = load i16* %dos_date, align 2
  %call180 = call i32 @mz_zip_writer_create_local_dir_header(%struct.mz_zip_archive_tag* %171, i8* %arraydecay, i16 zeroext %conv179, i16 zeroext 0, i64 %173, i64 %174, i32 %175, i16 zeroext %176, i16 zeroext 0, i16 zeroext %177, i16 zeroext %178)
  %tobool181 = icmp ne i32 %call180, 0
  br i1 %tobool181, label %if.end183, label %if.then182

if.then182:                                       ; preds = %if.end178
  store i32 0, i32* %retval
  br label %return

if.end183:                                        ; preds = %if.end178
  %179 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite184 = getelementptr inbounds %struct.mz_zip_archive_tag* %179, i32 0, i32 10
  %180 = load i64 (i8*, i64, i8*, i64)** %m_pWrite184, align 8
  %181 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque185 = getelementptr inbounds %struct.mz_zip_archive_tag* %181, i32 0, i32 11
  %182 = load i8** %m_pIO_opaque185, align 8
  %183 = load i64* %local_dir_header_ofs, align 8
  %arraydecay186 = getelementptr inbounds [30 x i8]* %local_dir_header, i32 0, i32 0
  %call187 = call i64 %180(i8* %182, i64 %183, i8* %arraydecay186, i64 30)
  %cmp188 = icmp ne i64 %call187, 30
  br i1 %cmp188, label %if.then190, label %if.end191

if.then190:                                       ; preds = %if.end183
  store i32 0, i32* %retval
  br label %return

if.end191:                                        ; preds = %if.end183
  %184 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %185 = load i8** %pArchive_name.addr, align 8
  %186 = load i64* %archive_name_size, align 8
  %conv192 = trunc i64 %186 to i16
  %187 = load i8** %pComment.addr, align 8
  %188 = load i16* %comment_size.addr, align 2
  %189 = load i64* %uncomp_size.addr, align 8
  %190 = load i64* %comp_size, align 8
  %191 = load i32* %uncomp_crc32.addr, align 4
  %192 = load i16* %method, align 2
  %193 = load i16* %dos_time, align 2
  %194 = load i16* %dos_date, align 2
  %195 = load i64* %local_dir_header_ofs, align 8
  %196 = load i32* %ext_attributes, align 4
  %call193 = call i32 @mz_zip_writer_add_to_central_dir(%struct.mz_zip_archive_tag* %184, i8* %185, i16 zeroext %conv192, i8* null, i16 zeroext 0, i8* %187, i16 zeroext %188, i64 %189, i64 %190, i32 %191, i16 zeroext %192, i16 zeroext 0, i16 zeroext %193, i16 zeroext %194, i64 %195, i32 %196)
  %tobool194 = icmp ne i32 %call193, 0
  br i1 %tobool194, label %if.end196, label %if.then195

if.then195:                                       ; preds = %if.end191
  store i32 0, i32* %retval
  br label %return

if.end196:                                        ; preds = %if.end191
  %197 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files197 = getelementptr inbounds %struct.mz_zip_archive_tag* %197, i32 0, i32 2
  %198 = load i32* %m_total_files197, align 4
  %inc = add i32 %198, 1
  store i32 %inc, i32* %m_total_files197, align 4
  %199 = load i64* %cur_archive_file_ofs, align 8
  %200 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size198 = getelementptr inbounds %struct.mz_zip_archive_tag* %200, i32 0, i32 0
  store i64 %199, i64* %m_archive_size198, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end196, %if.then195, %if.then190, %if.then182, %if.then177, %if.then162, %if.then143, %if.then121, %if.then101, %if.then93, %if.then84, %if.then73, %if.then62, %if.then46, %if.then40, %if.then37, %if.then30, %if.then23
  %201 = load i32* %retval
  ret i32 %201
}

; Function Attrs: nounwind uwtable
define internal i32 @mz_zip_writer_validate_archive_name(i8* %pArchive_name) #0 {
entry:
  %retval = alloca i32, align 4
  %pArchive_name.addr = alloca i8*, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  %0 = load i8** %pArchive_name.addr, align 8
  %1 = load i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 47
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end9, %if.end
  %2 = load i8** %pArchive_name.addr, align 8
  %3 = load i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8** %pArchive_name.addr, align 8
  %5 = load i8* %4, align 1
  %conv2 = sext i8 %5 to i32
  %cmp3 = icmp eq i32 %conv2, 92
  br i1 %cmp3, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %6 = load i8** %pArchive_name.addr, align 8
  %7 = load i8* %6, align 1
  %conv5 = sext i8 %7 to i32
  %cmp6 = icmp eq i32 %conv5, 58
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %lor.lhs.false, %while.body
  store i32 0, i32* %retval
  br label %return

if.end9:                                          ; preds = %lor.lhs.false
  %8 = load i8** %pArchive_name.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %8, i32 1
  store i8* %incdec.ptr, i8** %pArchive_name.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then8, %if.then
  %9 = load i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind
declare i64 @time(i64*) #1

; Function Attrs: nounwind uwtable
define internal void @mz_zip_time_to_dos_time(i64 %time, i16* %pDOS_time, i16* %pDOS_date) #0 {
entry:
  %time.addr = alloca i64, align 8
  %pDOS_time.addr = alloca i16*, align 8
  %pDOS_date.addr = alloca i16*, align 8
  %tm = alloca %struct.tm*, align 8
  store i64 %time, i64* %time.addr, align 8
  store i16* %pDOS_time, i16** %pDOS_time.addr, align 8
  store i16* %pDOS_date, i16** %pDOS_date.addr, align 8
  %call = call %struct.tm* @localtime(i64* %time.addr) #2
  store %struct.tm* %call, %struct.tm** %tm, align 8
  %0 = load %struct.tm** %tm, align 8
  %tm_hour = getelementptr inbounds %struct.tm* %0, i32 0, i32 2
  %1 = load i32* %tm_hour, align 4
  %shl = shl i32 %1, 11
  %2 = load %struct.tm** %tm, align 8
  %tm_min = getelementptr inbounds %struct.tm* %2, i32 0, i32 1
  %3 = load i32* %tm_min, align 4
  %shl1 = shl i32 %3, 5
  %add = add nsw i32 %shl, %shl1
  %4 = load %struct.tm** %tm, align 8
  %tm_sec = getelementptr inbounds %struct.tm* %4, i32 0, i32 0
  %5 = load i32* %tm_sec, align 4
  %shr = ashr i32 %5, 1
  %add2 = add nsw i32 %add, %shr
  %conv = trunc i32 %add2 to i16
  %6 = load i16** %pDOS_time.addr, align 8
  store i16 %conv, i16* %6, align 2
  %7 = load %struct.tm** %tm, align 8
  %tm_year = getelementptr inbounds %struct.tm* %7, i32 0, i32 5
  %8 = load i32* %tm_year, align 4
  %add3 = add nsw i32 %8, 1900
  %sub = sub nsw i32 %add3, 1980
  %shl4 = shl i32 %sub, 9
  %9 = load %struct.tm** %tm, align 8
  %tm_mon = getelementptr inbounds %struct.tm* %9, i32 0, i32 4
  %10 = load i32* %tm_mon, align 4
  %add5 = add nsw i32 %10, 1
  %shl6 = shl i32 %add5, 5
  %add7 = add nsw i32 %shl4, %shl6
  %11 = load %struct.tm** %tm, align 8
  %tm_mday = getelementptr inbounds %struct.tm* %11, i32 0, i32 3
  %12 = load i32* %tm_mday, align 4
  %add8 = add nsw i32 %add7, %12
  %conv9 = trunc i32 %add8 to i16
  %13 = load i16** %pDOS_date.addr, align 8
  store i16 %conv9, i16* %13, align 2
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @mz_zip_writer_compute_padding_needed_for_file_alignment(%struct.mz_zip_archive_tag* %pZip) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %n = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive_tag* %0, i32 0, i32 4
  %1 = load i32* %m_file_offset_alignment, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %2, i32 0, i32 0
  %3 = load i64* %m_archive_size, align 8
  %4 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_file_offset_alignment1 = getelementptr inbounds %struct.mz_zip_archive_tag* %4, i32 0, i32 4
  %5 = load i32* %m_file_offset_alignment1, align 4
  %sub = sub i32 %5, 1
  %conv = zext i32 %sub to i64
  %and = and i64 %3, %conv
  %conv2 = trunc i64 %and to i32
  store i32 %conv2, i32* %n, align 4
  %6 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_file_offset_alignment3 = getelementptr inbounds %struct.mz_zip_archive_tag* %6, i32 0, i32 4
  %7 = load i32* %m_file_offset_alignment3, align 4
  %8 = load i32* %n, align 4
  %sub4 = sub i32 %7, %8
  %9 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_file_offset_alignment5 = getelementptr inbounds %struct.mz_zip_archive_tag* %9, i32 0, i32 4
  %10 = load i32* %m_file_offset_alignment5, align 4
  %sub6 = sub i32 %10, 1
  %and7 = and i32 %sub4, %sub6
  store i32 %and7, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define internal i32 @mz_zip_writer_write_zeros(%struct.mz_zip_archive_tag* %pZip, i64 %cur_file_ofs, i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %cur_file_ofs.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  %buf = alloca [4096 x i8], align 16
  %s = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i64 %cur_file_ofs, i64* %cur_file_ofs.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = bitcast [4096 x i8]* %buf to i8*
  %1 = load i32* %n.addr, align 4
  %conv = zext i32 %1 to i64
  %cmp = icmp ult i64 4096, %conv
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32* %n.addr, align 4
  %conv2 = zext i32 %2 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 4096, %cond.true ], [ %conv2, %cond.false ]
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 %cond, i32 16, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %3 = load i32* %n.addr, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32* %n.addr, align 4
  %conv3 = zext i32 %4 to i64
  %cmp4 = icmp ult i64 4096, %conv3
  br i1 %cmp4, label %cond.true6, label %cond.false7

cond.true6:                                       ; preds = %while.body
  br label %cond.end9

cond.false7:                                      ; preds = %while.body
  %5 = load i32* %n.addr, align 4
  %conv8 = zext i32 %5 to i64
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false7, %cond.true6
  %cond10 = phi i64 [ 4096, %cond.true6 ], [ %conv8, %cond.false7 ]
  %conv11 = trunc i64 %cond10 to i32
  store i32 %conv11, i32* %s, align 4
  %6 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive_tag* %6, i32 0, i32 10
  %7 = load i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %8 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %8, i32 0, i32 11
  %9 = load i8** %m_pIO_opaque, align 8
  %10 = load i64* %cur_file_ofs.addr, align 8
  %arraydecay = getelementptr inbounds [4096 x i8]* %buf, i32 0, i32 0
  %11 = load i32* %s, align 4
  %conv12 = zext i32 %11 to i64
  %call = call i64 %7(i8* %9, i64 %10, i8* %arraydecay, i64 %conv12)
  %12 = load i32* %s, align 4
  %conv13 = zext i32 %12 to i64
  %cmp14 = icmp ne i64 %call, %conv13
  br i1 %cmp14, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end9
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %cond.end9
  %13 = load i32* %s, align 4
  %conv16 = zext i32 %13 to i64
  %14 = load i64* %cur_file_ofs.addr, align 8
  %add = add i64 %14, %conv16
  store i64 %add, i64* %cur_file_ofs.addr, align 8
  %15 = load i32* %s, align 4
  %16 = load i32* %n.addr, align 4
  %sub = sub i32 %16, %15
  store i32 %sub, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then
  %17 = load i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define internal i32 @mz_zip_writer_add_put_buf_callback(i8* %pBuf, i32 %len, i8* %pUser) #0 {
entry:
  %retval = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %pUser.addr = alloca i8*, align 8
  %pState = alloca %struct.mz_zip_writer_add_state*, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %pUser, i8** %pUser.addr, align 8
  %0 = load i8** %pUser.addr, align 8
  %1 = bitcast i8* %0 to %struct.mz_zip_writer_add_state*
  store %struct.mz_zip_writer_add_state* %1, %struct.mz_zip_writer_add_state** %pState, align 8
  %2 = load %struct.mz_zip_writer_add_state** %pState, align 8
  %m_pZip = getelementptr inbounds %struct.mz_zip_writer_add_state* %2, i32 0, i32 0
  %3 = load %struct.mz_zip_archive_tag** %m_pZip, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 10
  %4 = load i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %5 = load %struct.mz_zip_writer_add_state** %pState, align 8
  %m_pZip1 = getelementptr inbounds %struct.mz_zip_writer_add_state* %5, i32 0, i32 0
  %6 = load %struct.mz_zip_archive_tag** %m_pZip1, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %6, i32 0, i32 11
  %7 = load i8** %m_pIO_opaque, align 8
  %8 = load %struct.mz_zip_writer_add_state** %pState, align 8
  %m_cur_archive_file_ofs = getelementptr inbounds %struct.mz_zip_writer_add_state* %8, i32 0, i32 1
  %9 = load i64* %m_cur_archive_file_ofs, align 8
  %10 = load i8** %pBuf.addr, align 8
  %11 = load i32* %len.addr, align 4
  %conv = sext i32 %11 to i64
  %call = call i64 %4(i8* %7, i64 %9, i8* %10, i64 %conv)
  %conv2 = trunc i64 %call to i32
  %12 = load i32* %len.addr, align 4
  %cmp = icmp ne i32 %conv2, %12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %13 = load i32* %len.addr, align 4
  %conv4 = sext i32 %13 to i64
  %14 = load %struct.mz_zip_writer_add_state** %pState, align 8
  %m_cur_archive_file_ofs5 = getelementptr inbounds %struct.mz_zip_writer_add_state* %14, i32 0, i32 1
  %15 = load i64* %m_cur_archive_file_ofs5, align 8
  %add = add i64 %15, %conv4
  store i64 %add, i64* %m_cur_archive_file_ofs5, align 8
  %16 = load i32* %len.addr, align 4
  %conv6 = sext i32 %16 to i64
  %17 = load %struct.mz_zip_writer_add_state** %pState, align 8
  %m_comp_size = getelementptr inbounds %struct.mz_zip_writer_add_state* %17, i32 0, i32 2
  %18 = load i64* %m_comp_size, align 8
  %add7 = add i64 %18, %conv6
  store i64 %add7, i64* %m_comp_size, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %19 = load i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal i32 @mz_zip_writer_create_local_dir_header(%struct.mz_zip_archive_tag* %pZip, i8* %pDst, i16 zeroext %filename_size, i16 zeroext %extra_size, i64 %uncomp_size, i64 %comp_size, i32 %uncomp_crc32, i16 zeroext %method, i16 zeroext %bit_flags, i16 zeroext %dos_time, i16 zeroext %dos_date) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pDst.addr = alloca i8*, align 8
  %filename_size.addr = alloca i16, align 2
  %extra_size.addr = alloca i16, align 2
  %uncomp_size.addr = alloca i64, align 8
  %comp_size.addr = alloca i64, align 8
  %uncomp_crc32.addr = alloca i32, align 4
  %method.addr = alloca i16, align 2
  %bit_flags.addr = alloca i16, align 2
  %dos_time.addr = alloca i16, align 2
  %dos_date.addr = alloca i16, align 2
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pDst, i8** %pDst.addr, align 8
  store i16 %filename_size, i16* %filename_size.addr, align 2
  store i16 %extra_size, i16* %extra_size.addr, align 2
  store i64 %uncomp_size, i64* %uncomp_size.addr, align 8
  store i64 %comp_size, i64* %comp_size.addr, align 8
  store i32 %uncomp_crc32, i32* %uncomp_crc32.addr, align 4
  store i16 %method, i16* %method.addr, align 2
  store i16 %bit_flags, i16* %bit_flags.addr, align 2
  store i16 %dos_time, i16* %dos_time.addr, align 2
  store i16 %dos_date, i16* %dos_date.addr, align 2
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i8** %pDst.addr, align 8
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 30, i32 1, i1 false)
  %2 = load i8** %pDst.addr, align 8
  %add.ptr = getelementptr inbounds i8* %2, i64 0
  call void @mz_write_le32(i8* %add.ptr, i32 67324752)
  %3 = load i8** %pDst.addr, align 8
  %add.ptr1 = getelementptr inbounds i8* %3, i64 4
  %4 = load i16* %method.addr, align 2
  %conv = zext i16 %4 to i32
  %tobool = icmp ne i32 %conv, 0
  %cond = select i1 %tobool, i32 20, i32 0
  %conv2 = trunc i32 %cond to i16
  call void @mz_write_le16(i8* %add.ptr1, i16 zeroext %conv2)
  %5 = load i8** %pDst.addr, align 8
  %add.ptr3 = getelementptr inbounds i8* %5, i64 6
  %6 = load i16* %bit_flags.addr, align 2
  call void @mz_write_le16(i8* %add.ptr3, i16 zeroext %6)
  %7 = load i8** %pDst.addr, align 8
  %add.ptr4 = getelementptr inbounds i8* %7, i64 8
  %8 = load i16* %method.addr, align 2
  call void @mz_write_le16(i8* %add.ptr4, i16 zeroext %8)
  %9 = load i8** %pDst.addr, align 8
  %add.ptr5 = getelementptr inbounds i8* %9, i64 10
  %10 = load i16* %dos_time.addr, align 2
  call void @mz_write_le16(i8* %add.ptr5, i16 zeroext %10)
  %11 = load i8** %pDst.addr, align 8
  %add.ptr6 = getelementptr inbounds i8* %11, i64 12
  %12 = load i16* %dos_date.addr, align 2
  call void @mz_write_le16(i8* %add.ptr6, i16 zeroext %12)
  %13 = load i8** %pDst.addr, align 8
  %add.ptr7 = getelementptr inbounds i8* %13, i64 14
  %14 = load i32* %uncomp_crc32.addr, align 4
  call void @mz_write_le32(i8* %add.ptr7, i32 %14)
  %15 = load i8** %pDst.addr, align 8
  %add.ptr8 = getelementptr inbounds i8* %15, i64 18
  %16 = load i64* %comp_size.addr, align 8
  %conv9 = trunc i64 %16 to i32
  call void @mz_write_le32(i8* %add.ptr8, i32 %conv9)
  %17 = load i8** %pDst.addr, align 8
  %add.ptr10 = getelementptr inbounds i8* %17, i64 22
  %18 = load i64* %uncomp_size.addr, align 8
  %conv11 = trunc i64 %18 to i32
  call void @mz_write_le32(i8* %add.ptr10, i32 %conv11)
  %19 = load i8** %pDst.addr, align 8
  %add.ptr12 = getelementptr inbounds i8* %19, i64 26
  %20 = load i16* %filename_size.addr, align 2
  call void @mz_write_le16(i8* %add.ptr12, i16 zeroext %20)
  %21 = load i8** %pDst.addr, align 8
  %add.ptr13 = getelementptr inbounds i8* %21, i64 28
  %22 = load i16* %extra_size.addr, align 2
  call void @mz_write_le16(i8* %add.ptr13, i16 zeroext %22)
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal i32 @mz_zip_writer_add_to_central_dir(%struct.mz_zip_archive_tag* %pZip, i8* %pFilename, i16 zeroext %filename_size, i8* %pExtra, i16 zeroext %extra_size, i8* %pComment, i16 zeroext %comment_size, i64 %uncomp_size, i64 %comp_size, i32 %uncomp_crc32, i16 zeroext %method, i16 zeroext %bit_flags, i16 zeroext %dos_time, i16 zeroext %dos_date, i64 %local_header_ofs, i32 %ext_attributes) #0 {
entry:
  %retval.i182 = alloca i32, align 4
  %pZip.addr.i183 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i184 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i = alloca i64, align 8
  %growing.addr.i = alloca i32, align 4
  %retval.i.i147 = alloca i32, align 4
  %pZip.addr.i.i148 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i.i149 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i150 = alloca i64, align 8
  %growing.addr.i.i151 = alloca i32, align 4
  %retval.i152 = alloca i32, align 4
  %pZip.addr.i153 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i154 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i155 = alloca i8*, align 8
  %n.addr.i156 = alloca i64, align 8
  %orig_size.i157 = alloca i64, align 8
  %retval.i.i112 = alloca i32, align 4
  %pZip.addr.i.i113 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i.i114 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i115 = alloca i64, align 8
  %growing.addr.i.i116 = alloca i32, align 4
  %retval.i117 = alloca i32, align 4
  %pZip.addr.i118 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i119 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i120 = alloca i8*, align 8
  %n.addr.i121 = alloca i64, align 8
  %orig_size.i122 = alloca i64, align 8
  %retval.i.i77 = alloca i32, align 4
  %pZip.addr.i.i78 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i.i79 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i80 = alloca i64, align 8
  %growing.addr.i.i81 = alloca i32, align 4
  %retval.i82 = alloca i32, align 4
  %pZip.addr.i83 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i84 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i85 = alloca i8*, align 8
  %n.addr.i86 = alloca i64, align 8
  %orig_size.i87 = alloca i64, align 8
  %retval.i.i42 = alloca i32, align 4
  %pZip.addr.i.i43 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i.i44 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i45 = alloca i64, align 8
  %growing.addr.i.i46 = alloca i32, align 4
  %retval.i47 = alloca i32, align 4
  %pZip.addr.i48 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i49 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i50 = alloca i8*, align 8
  %n.addr.i51 = alloca i64, align 8
  %orig_size.i52 = alloca i64, align 8
  %retval.i.i = alloca i32, align 4
  %pZip.addr.i.i = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i.i = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i = alloca i64, align 8
  %growing.addr.i.i = alloca i32, align 4
  %retval.i = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i = alloca i8*, align 8
  %n.addr.i = alloca i64, align 8
  %orig_size.i = alloca i64, align 8
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pFilename.addr = alloca i8*, align 8
  %filename_size.addr = alloca i16, align 2
  %pExtra.addr = alloca i8*, align 8
  %extra_size.addr = alloca i16, align 2
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %uncomp_size.addr = alloca i64, align 8
  %comp_size.addr = alloca i64, align 8
  %uncomp_crc32.addr = alloca i32, align 4
  %method.addr = alloca i16, align 2
  %bit_flags.addr = alloca i16, align 2
  %dos_time.addr = alloca i16, align 2
  %dos_date.addr = alloca i16, align 2
  %local_header_ofs.addr = alloca i64, align 8
  %ext_attributes.addr = alloca i32, align 4
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %central_dir_ofs = alloca i32, align 4
  %orig_central_dir_size = alloca i64, align 8
  %central_dir_header = alloca [46 x i8], align 16
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i16 %filename_size, i16* %filename_size.addr, align 2
  store i8* %pExtra, i8** %pExtra.addr, align 8
  store i16 %extra_size, i16* %extra_size.addr, align 2
  store i8* %pComment, i8** %pComment.addr, align 8
  store i16 %comment_size, i16* %comment_size.addr, align 2
  store i64 %uncomp_size, i64* %uncomp_size.addr, align 8
  store i64 %comp_size, i64* %comp_size.addr, align 8
  store i32 %uncomp_crc32, i32* %uncomp_crc32.addr, align 4
  store i16 %method, i16* %method.addr, align 2
  store i16 %bit_flags, i16* %bit_flags.addr, align 2
  store i16 %dos_time, i16* %dos_time.addr, align 2
  store i16 %dos_date, i16* %dos_date.addr, align 2
  store i64 %local_header_ofs, i64* %local_header_ofs.addr, align 8
  store i32 %ext_attributes, i32* %ext_attributes.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %0, i32 0, i32 12
  %1 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  store %struct.mz_zip_internal_state_tag* %1, %struct.mz_zip_internal_state_tag** %pState, align 8
  %2 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag* %2, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %3 = load i64* %m_size, align 8
  %conv = trunc i64 %3 to i32
  store i32 %conv, i32* %central_dir_ofs, align 4
  %4 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir1 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %4, i32 0, i32 0
  %m_size2 = getelementptr inbounds %struct.mz_zip_array* %m_central_dir1, i32 0, i32 1
  %5 = load i64* %m_size2, align 8
  store i64 %5, i64* %orig_central_dir_size, align 8
  %6 = load i64* %local_header_ofs.addr, align 8
  %cmp = icmp ugt i64 %6, 4294967295
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir4 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %7, i32 0, i32 0
  %m_size5 = getelementptr inbounds %struct.mz_zip_array* %m_central_dir4, i32 0, i32 1
  %8 = load i64* %m_size5, align 8
  %add = add i64 %8, 46
  %9 = load i16* %filename_size.addr, align 2
  %conv6 = zext i16 %9 to i64
  %add7 = add i64 %add, %conv6
  %10 = load i16* %extra_size.addr, align 2
  %conv8 = zext i16 %10 to i64
  %add9 = add i64 %add7, %conv8
  %11 = load i16* %comment_size.addr, align 2
  %conv10 = zext i16 %11 to i64
  %add11 = add i64 %add9, %conv10
  %cmp12 = icmp ugt i64 %add11, 4294967295
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %12 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %arraydecay = getelementptr inbounds [46 x i8]* %central_dir_header, i32 0, i32 0
  %13 = load i16* %filename_size.addr, align 2
  %14 = load i16* %extra_size.addr, align 2
  %15 = load i16* %comment_size.addr, align 2
  %16 = load i64* %uncomp_size.addr, align 8
  %17 = load i64* %comp_size.addr, align 8
  %18 = load i32* %uncomp_crc32.addr, align 4
  %19 = load i16* %method.addr, align 2
  %20 = load i16* %bit_flags.addr, align 2
  %21 = load i16* %dos_time.addr, align 2
  %22 = load i16* %dos_date.addr, align 2
  %23 = load i64* %local_header_ofs.addr, align 8
  %24 = load i32* %ext_attributes.addr, align 4
  %call = call i32 @mz_zip_writer_create_central_dir_header(%struct.mz_zip_archive_tag* %12, i8* %arraydecay, i16 zeroext %13, i16 zeroext %14, i16 zeroext %15, i64 %16, i64 %17, i32 %18, i16 zeroext %19, i16 zeroext %20, i16 zeroext %21, i16 zeroext %22, i64 %23, i32 %24)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end15, label %if.then14

if.then14:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end15:                                         ; preds = %if.end
  %25 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %26 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir16 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %26, i32 0, i32 0
  %arraydecay17 = getelementptr inbounds [46 x i8]* %central_dir_header, i32 0, i32 0
  store %struct.mz_zip_archive_tag* %25, %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  store %struct.mz_zip_array* %m_central_dir16, %struct.mz_zip_array** %pArray.addr.i, align 8
  store i8* %arraydecay17, i8** %pElements.addr.i, align 8
  store i64 46, i64* %n.addr.i, align 8
  %27 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_size.i = getelementptr inbounds %struct.mz_zip_array* %27, i32 0, i32 1
  %28 = load i64* %m_size.i, align 8
  store i64 %28, i64* %orig_size.i, align 8
  %29 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %30 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %31 = load i64* %orig_size.i, align 8
  %32 = load i64* %n.addr.i, align 8
  %add.i = add i64 %31, %32
  store %struct.mz_zip_archive_tag* %29, %struct.mz_zip_archive_tag** %pZip.addr.i.i, align 8
  store %struct.mz_zip_array* %30, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  store i64 %add.i, i64* %new_size.addr.i.i, align 8
  store i32 1, i32* %growing.addr.i.i, align 4
  %33 = load i64* %new_size.addr.i.i, align 8
  %34 = load %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %m_capacity.i.i = getelementptr inbounds %struct.mz_zip_array* %34, i32 0, i32 2
  %35 = load i64* %m_capacity.i.i, align 8
  %cmp.i.i = icmp ugt i64 %33, %35
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end2.i.i

if.then.i.i:                                      ; preds = %if.end15
  %36 = load %struct.mz_zip_archive_tag** %pZip.addr.i.i, align 8
  %37 = load %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %38 = load i64* %new_size.addr.i.i, align 8
  %39 = load i32* %growing.addr.i.i, align 4
  %call.i.i = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %36, %struct.mz_zip_array* %37, i64 %38, i32 %39) #2
  %tobool.i.i = icmp ne i32 %call.i.i, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then1.i.i

if.then1.i.i:                                     ; preds = %if.then.i.i
  store i32 0, i32* %retval.i.i
  br label %mz_zip_array_resize.exit.i

if.end.i.i:                                       ; preds = %if.then.i.i
  br label %if.end2.i.i

if.end2.i.i:                                      ; preds = %if.end.i.i, %if.end15
  %40 = load i64* %new_size.addr.i.i, align 8
  %41 = load %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %m_size.i.i = getelementptr inbounds %struct.mz_zip_array* %41, i32 0, i32 1
  store i64 %40, i64* %m_size.i.i, align 8
  store i32 1, i32* %retval.i.i
  br label %mz_zip_array_resize.exit.i

mz_zip_array_resize.exit.i:                       ; preds = %if.end2.i.i, %if.then1.i.i
  %42 = load i32* %retval.i.i
  %tobool.i = icmp ne i32 %42, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %mz_zip_array_resize.exit.i
  store i32 0, i32* %retval.i
  br label %mz_zip_array_push_back.exit

if.end.i:                                         ; preds = %mz_zip_array_resize.exit.i
  %43 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_p.i = getelementptr inbounds %struct.mz_zip_array* %43, i32 0, i32 0
  %44 = load i8** %m_p.i, align 8
  %45 = load i64* %orig_size.i, align 8
  %46 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_element_size.i = getelementptr inbounds %struct.mz_zip_array* %46, i32 0, i32 3
  %47 = load i32* %m_element_size.i, align 4
  %conv.i = zext i32 %47 to i64
  %mul.i = mul i64 %45, %conv.i
  %add.ptr.i = getelementptr inbounds i8* %44, i64 %mul.i
  %48 = load i8** %pElements.addr.i, align 8
  %49 = load i64* %n.addr.i, align 8
  %50 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_element_size1.i = getelementptr inbounds %struct.mz_zip_array* %50, i32 0, i32 3
  %51 = load i32* %m_element_size1.i, align 4
  %conv2.i = zext i32 %51 to i64
  %mul3.i = mul i64 %49, %conv2.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr.i, i8* %48, i64 %mul3.i, i32 1, i1 false) #2
  store i32 1, i32* %retval.i
  br label %mz_zip_array_push_back.exit

mz_zip_array_push_back.exit:                      ; preds = %if.end.i, %if.then.i
  %52 = load i32* %retval.i
  %tobool19 = icmp ne i32 %52, 0
  br i1 %tobool19, label %lor.lhs.false20, label %if.then38

lor.lhs.false20:                                  ; preds = %mz_zip_array_push_back.exit
  %53 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %54 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir21 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %54, i32 0, i32 0
  %55 = load i8** %pFilename.addr, align 8
  %56 = load i16* %filename_size.addr, align 2
  %conv22 = zext i16 %56 to i64
  store %struct.mz_zip_archive_tag* %53, %struct.mz_zip_archive_tag** %pZip.addr.i48, align 8
  store %struct.mz_zip_array* %m_central_dir21, %struct.mz_zip_array** %pArray.addr.i49, align 8
  store i8* %55, i8** %pElements.addr.i50, align 8
  store i64 %conv22, i64* %n.addr.i51, align 8
  %57 = load %struct.mz_zip_array** %pArray.addr.i49, align 8
  %m_size.i53 = getelementptr inbounds %struct.mz_zip_array* %57, i32 0, i32 1
  %58 = load i64* %m_size.i53, align 8
  store i64 %58, i64* %orig_size.i52, align 8
  %59 = load %struct.mz_zip_archive_tag** %pZip.addr.i48, align 8
  %60 = load %struct.mz_zip_array** %pArray.addr.i49, align 8
  %61 = load i64* %orig_size.i52, align 8
  %62 = load i64* %n.addr.i51, align 8
  %add.i54 = add i64 %61, %62
  store %struct.mz_zip_archive_tag* %59, %struct.mz_zip_archive_tag** %pZip.addr.i.i43, align 8
  store %struct.mz_zip_array* %60, %struct.mz_zip_array** %pArray.addr.i.i44, align 8
  store i64 %add.i54, i64* %new_size.addr.i.i45, align 8
  store i32 1, i32* %growing.addr.i.i46, align 4
  %63 = load i64* %new_size.addr.i.i45, align 8
  %64 = load %struct.mz_zip_array** %pArray.addr.i.i44, align 8
  %m_capacity.i.i55 = getelementptr inbounds %struct.mz_zip_array* %64, i32 0, i32 2
  %65 = load i64* %m_capacity.i.i55, align 8
  %cmp.i.i56 = icmp ugt i64 %63, %65
  br i1 %cmp.i.i56, label %if.then.i.i59, label %if.end2.i.i63

if.then.i.i59:                                    ; preds = %lor.lhs.false20
  %66 = load %struct.mz_zip_archive_tag** %pZip.addr.i.i43, align 8
  %67 = load %struct.mz_zip_array** %pArray.addr.i.i44, align 8
  %68 = load i64* %new_size.addr.i.i45, align 8
  %69 = load i32* %growing.addr.i.i46, align 4
  %call.i.i57 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %66, %struct.mz_zip_array* %67, i64 %68, i32 %69) #2
  %tobool.i.i58 = icmp ne i32 %call.i.i57, 0
  br i1 %tobool.i.i58, label %if.end.i.i61, label %if.then1.i.i60

if.then1.i.i60:                                   ; preds = %if.then.i.i59
  store i32 0, i32* %retval.i.i42
  br label %mz_zip_array_resize.exit.i65

if.end.i.i61:                                     ; preds = %if.then.i.i59
  br label %if.end2.i.i63

if.end2.i.i63:                                    ; preds = %if.end.i.i61, %lor.lhs.false20
  %70 = load i64* %new_size.addr.i.i45, align 8
  %71 = load %struct.mz_zip_array** %pArray.addr.i.i44, align 8
  %m_size.i.i62 = getelementptr inbounds %struct.mz_zip_array* %71, i32 0, i32 1
  store i64 %70, i64* %m_size.i.i62, align 8
  store i32 1, i32* %retval.i.i42
  br label %mz_zip_array_resize.exit.i65

mz_zip_array_resize.exit.i65:                     ; preds = %if.end2.i.i63, %if.then1.i.i60
  %72 = load i32* %retval.i.i42
  %tobool.i64 = icmp ne i32 %72, 0
  br i1 %tobool.i64, label %if.end.i75, label %if.then.i66

if.then.i66:                                      ; preds = %mz_zip_array_resize.exit.i65
  store i32 0, i32* %retval.i47
  br label %mz_zip_array_push_back.exit76

if.end.i75:                                       ; preds = %mz_zip_array_resize.exit.i65
  %73 = load %struct.mz_zip_array** %pArray.addr.i49, align 8
  %m_p.i67 = getelementptr inbounds %struct.mz_zip_array* %73, i32 0, i32 0
  %74 = load i8** %m_p.i67, align 8
  %75 = load i64* %orig_size.i52, align 8
  %76 = load %struct.mz_zip_array** %pArray.addr.i49, align 8
  %m_element_size.i68 = getelementptr inbounds %struct.mz_zip_array* %76, i32 0, i32 3
  %77 = load i32* %m_element_size.i68, align 4
  %conv.i69 = zext i32 %77 to i64
  %mul.i70 = mul i64 %75, %conv.i69
  %add.ptr.i71 = getelementptr inbounds i8* %74, i64 %mul.i70
  %78 = load i8** %pElements.addr.i50, align 8
  %79 = load i64* %n.addr.i51, align 8
  %80 = load %struct.mz_zip_array** %pArray.addr.i49, align 8
  %m_element_size1.i72 = getelementptr inbounds %struct.mz_zip_array* %80, i32 0, i32 3
  %81 = load i32* %m_element_size1.i72, align 4
  %conv2.i73 = zext i32 %81 to i64
  %mul3.i74 = mul i64 %79, %conv2.i73
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr.i71, i8* %78, i64 %mul3.i74, i32 1, i1 false) #2
  store i32 1, i32* %retval.i47
  br label %mz_zip_array_push_back.exit76

mz_zip_array_push_back.exit76:                    ; preds = %if.end.i75, %if.then.i66
  %82 = load i32* %retval.i47
  %tobool24 = icmp ne i32 %82, 0
  br i1 %tobool24, label %lor.lhs.false25, label %if.then38

lor.lhs.false25:                                  ; preds = %mz_zip_array_push_back.exit76
  %83 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %84 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir26 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %84, i32 0, i32 0
  %85 = load i8** %pExtra.addr, align 8
  %86 = load i16* %extra_size.addr, align 2
  %conv27 = zext i16 %86 to i64
  store %struct.mz_zip_archive_tag* %83, %struct.mz_zip_archive_tag** %pZip.addr.i83, align 8
  store %struct.mz_zip_array* %m_central_dir26, %struct.mz_zip_array** %pArray.addr.i84, align 8
  store i8* %85, i8** %pElements.addr.i85, align 8
  store i64 %conv27, i64* %n.addr.i86, align 8
  %87 = load %struct.mz_zip_array** %pArray.addr.i84, align 8
  %m_size.i88 = getelementptr inbounds %struct.mz_zip_array* %87, i32 0, i32 1
  %88 = load i64* %m_size.i88, align 8
  store i64 %88, i64* %orig_size.i87, align 8
  %89 = load %struct.mz_zip_archive_tag** %pZip.addr.i83, align 8
  %90 = load %struct.mz_zip_array** %pArray.addr.i84, align 8
  %91 = load i64* %orig_size.i87, align 8
  %92 = load i64* %n.addr.i86, align 8
  %add.i89 = add i64 %91, %92
  store %struct.mz_zip_archive_tag* %89, %struct.mz_zip_archive_tag** %pZip.addr.i.i78, align 8
  store %struct.mz_zip_array* %90, %struct.mz_zip_array** %pArray.addr.i.i79, align 8
  store i64 %add.i89, i64* %new_size.addr.i.i80, align 8
  store i32 1, i32* %growing.addr.i.i81, align 4
  %93 = load i64* %new_size.addr.i.i80, align 8
  %94 = load %struct.mz_zip_array** %pArray.addr.i.i79, align 8
  %m_capacity.i.i90 = getelementptr inbounds %struct.mz_zip_array* %94, i32 0, i32 2
  %95 = load i64* %m_capacity.i.i90, align 8
  %cmp.i.i91 = icmp ugt i64 %93, %95
  br i1 %cmp.i.i91, label %if.then.i.i94, label %if.end2.i.i98

if.then.i.i94:                                    ; preds = %lor.lhs.false25
  %96 = load %struct.mz_zip_archive_tag** %pZip.addr.i.i78, align 8
  %97 = load %struct.mz_zip_array** %pArray.addr.i.i79, align 8
  %98 = load i64* %new_size.addr.i.i80, align 8
  %99 = load i32* %growing.addr.i.i81, align 4
  %call.i.i92 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %96, %struct.mz_zip_array* %97, i64 %98, i32 %99) #2
  %tobool.i.i93 = icmp ne i32 %call.i.i92, 0
  br i1 %tobool.i.i93, label %if.end.i.i96, label %if.then1.i.i95

if.then1.i.i95:                                   ; preds = %if.then.i.i94
  store i32 0, i32* %retval.i.i77
  br label %mz_zip_array_resize.exit.i100

if.end.i.i96:                                     ; preds = %if.then.i.i94
  br label %if.end2.i.i98

if.end2.i.i98:                                    ; preds = %if.end.i.i96, %lor.lhs.false25
  %100 = load i64* %new_size.addr.i.i80, align 8
  %101 = load %struct.mz_zip_array** %pArray.addr.i.i79, align 8
  %m_size.i.i97 = getelementptr inbounds %struct.mz_zip_array* %101, i32 0, i32 1
  store i64 %100, i64* %m_size.i.i97, align 8
  store i32 1, i32* %retval.i.i77
  br label %mz_zip_array_resize.exit.i100

mz_zip_array_resize.exit.i100:                    ; preds = %if.end2.i.i98, %if.then1.i.i95
  %102 = load i32* %retval.i.i77
  %tobool.i99 = icmp ne i32 %102, 0
  br i1 %tobool.i99, label %if.end.i110, label %if.then.i101

if.then.i101:                                     ; preds = %mz_zip_array_resize.exit.i100
  store i32 0, i32* %retval.i82
  br label %mz_zip_array_push_back.exit111

if.end.i110:                                      ; preds = %mz_zip_array_resize.exit.i100
  %103 = load %struct.mz_zip_array** %pArray.addr.i84, align 8
  %m_p.i102 = getelementptr inbounds %struct.mz_zip_array* %103, i32 0, i32 0
  %104 = load i8** %m_p.i102, align 8
  %105 = load i64* %orig_size.i87, align 8
  %106 = load %struct.mz_zip_array** %pArray.addr.i84, align 8
  %m_element_size.i103 = getelementptr inbounds %struct.mz_zip_array* %106, i32 0, i32 3
  %107 = load i32* %m_element_size.i103, align 4
  %conv.i104 = zext i32 %107 to i64
  %mul.i105 = mul i64 %105, %conv.i104
  %add.ptr.i106 = getelementptr inbounds i8* %104, i64 %mul.i105
  %108 = load i8** %pElements.addr.i85, align 8
  %109 = load i64* %n.addr.i86, align 8
  %110 = load %struct.mz_zip_array** %pArray.addr.i84, align 8
  %m_element_size1.i107 = getelementptr inbounds %struct.mz_zip_array* %110, i32 0, i32 3
  %111 = load i32* %m_element_size1.i107, align 4
  %conv2.i108 = zext i32 %111 to i64
  %mul3.i109 = mul i64 %109, %conv2.i108
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr.i106, i8* %108, i64 %mul3.i109, i32 1, i1 false) #2
  store i32 1, i32* %retval.i82
  br label %mz_zip_array_push_back.exit111

mz_zip_array_push_back.exit111:                   ; preds = %if.end.i110, %if.then.i101
  %112 = load i32* %retval.i82
  %tobool29 = icmp ne i32 %112, 0
  br i1 %tobool29, label %lor.lhs.false30, label %if.then38

lor.lhs.false30:                                  ; preds = %mz_zip_array_push_back.exit111
  %113 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %114 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir31 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %114, i32 0, i32 0
  %115 = load i8** %pComment.addr, align 8
  %116 = load i16* %comment_size.addr, align 2
  %conv32 = zext i16 %116 to i64
  store %struct.mz_zip_archive_tag* %113, %struct.mz_zip_archive_tag** %pZip.addr.i118, align 8
  store %struct.mz_zip_array* %m_central_dir31, %struct.mz_zip_array** %pArray.addr.i119, align 8
  store i8* %115, i8** %pElements.addr.i120, align 8
  store i64 %conv32, i64* %n.addr.i121, align 8
  %117 = load %struct.mz_zip_array** %pArray.addr.i119, align 8
  %m_size.i123 = getelementptr inbounds %struct.mz_zip_array* %117, i32 0, i32 1
  %118 = load i64* %m_size.i123, align 8
  store i64 %118, i64* %orig_size.i122, align 8
  %119 = load %struct.mz_zip_archive_tag** %pZip.addr.i118, align 8
  %120 = load %struct.mz_zip_array** %pArray.addr.i119, align 8
  %121 = load i64* %orig_size.i122, align 8
  %122 = load i64* %n.addr.i121, align 8
  %add.i124 = add i64 %121, %122
  store %struct.mz_zip_archive_tag* %119, %struct.mz_zip_archive_tag** %pZip.addr.i.i113, align 8
  store %struct.mz_zip_array* %120, %struct.mz_zip_array** %pArray.addr.i.i114, align 8
  store i64 %add.i124, i64* %new_size.addr.i.i115, align 8
  store i32 1, i32* %growing.addr.i.i116, align 4
  %123 = load i64* %new_size.addr.i.i115, align 8
  %124 = load %struct.mz_zip_array** %pArray.addr.i.i114, align 8
  %m_capacity.i.i125 = getelementptr inbounds %struct.mz_zip_array* %124, i32 0, i32 2
  %125 = load i64* %m_capacity.i.i125, align 8
  %cmp.i.i126 = icmp ugt i64 %123, %125
  br i1 %cmp.i.i126, label %if.then.i.i129, label %if.end2.i.i133

if.then.i.i129:                                   ; preds = %lor.lhs.false30
  %126 = load %struct.mz_zip_archive_tag** %pZip.addr.i.i113, align 8
  %127 = load %struct.mz_zip_array** %pArray.addr.i.i114, align 8
  %128 = load i64* %new_size.addr.i.i115, align 8
  %129 = load i32* %growing.addr.i.i116, align 4
  %call.i.i127 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %126, %struct.mz_zip_array* %127, i64 %128, i32 %129) #2
  %tobool.i.i128 = icmp ne i32 %call.i.i127, 0
  br i1 %tobool.i.i128, label %if.end.i.i131, label %if.then1.i.i130

if.then1.i.i130:                                  ; preds = %if.then.i.i129
  store i32 0, i32* %retval.i.i112
  br label %mz_zip_array_resize.exit.i135

if.end.i.i131:                                    ; preds = %if.then.i.i129
  br label %if.end2.i.i133

if.end2.i.i133:                                   ; preds = %if.end.i.i131, %lor.lhs.false30
  %130 = load i64* %new_size.addr.i.i115, align 8
  %131 = load %struct.mz_zip_array** %pArray.addr.i.i114, align 8
  %m_size.i.i132 = getelementptr inbounds %struct.mz_zip_array* %131, i32 0, i32 1
  store i64 %130, i64* %m_size.i.i132, align 8
  store i32 1, i32* %retval.i.i112
  br label %mz_zip_array_resize.exit.i135

mz_zip_array_resize.exit.i135:                    ; preds = %if.end2.i.i133, %if.then1.i.i130
  %132 = load i32* %retval.i.i112
  %tobool.i134 = icmp ne i32 %132, 0
  br i1 %tobool.i134, label %if.end.i145, label %if.then.i136

if.then.i136:                                     ; preds = %mz_zip_array_resize.exit.i135
  store i32 0, i32* %retval.i117
  br label %mz_zip_array_push_back.exit146

if.end.i145:                                      ; preds = %mz_zip_array_resize.exit.i135
  %133 = load %struct.mz_zip_array** %pArray.addr.i119, align 8
  %m_p.i137 = getelementptr inbounds %struct.mz_zip_array* %133, i32 0, i32 0
  %134 = load i8** %m_p.i137, align 8
  %135 = load i64* %orig_size.i122, align 8
  %136 = load %struct.mz_zip_array** %pArray.addr.i119, align 8
  %m_element_size.i138 = getelementptr inbounds %struct.mz_zip_array* %136, i32 0, i32 3
  %137 = load i32* %m_element_size.i138, align 4
  %conv.i139 = zext i32 %137 to i64
  %mul.i140 = mul i64 %135, %conv.i139
  %add.ptr.i141 = getelementptr inbounds i8* %134, i64 %mul.i140
  %138 = load i8** %pElements.addr.i120, align 8
  %139 = load i64* %n.addr.i121, align 8
  %140 = load %struct.mz_zip_array** %pArray.addr.i119, align 8
  %m_element_size1.i142 = getelementptr inbounds %struct.mz_zip_array* %140, i32 0, i32 3
  %141 = load i32* %m_element_size1.i142, align 4
  %conv2.i143 = zext i32 %141 to i64
  %mul3.i144 = mul i64 %139, %conv2.i143
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr.i141, i8* %138, i64 %mul3.i144, i32 1, i1 false) #2
  store i32 1, i32* %retval.i117
  br label %mz_zip_array_push_back.exit146

mz_zip_array_push_back.exit146:                   ; preds = %if.end.i145, %if.then.i136
  %142 = load i32* %retval.i117
  %tobool34 = icmp ne i32 %142, 0
  br i1 %tobool34, label %lor.lhs.false35, label %if.then38

lor.lhs.false35:                                  ; preds = %mz_zip_array_push_back.exit146
  %143 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %144 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %144, i32 0, i32 1
  %145 = bitcast i32* %central_dir_ofs to i8*
  store %struct.mz_zip_archive_tag* %143, %struct.mz_zip_archive_tag** %pZip.addr.i153, align 8
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i154, align 8
  store i8* %145, i8** %pElements.addr.i155, align 8
  store i64 1, i64* %n.addr.i156, align 8
  %146 = load %struct.mz_zip_array** %pArray.addr.i154, align 8
  %m_size.i158 = getelementptr inbounds %struct.mz_zip_array* %146, i32 0, i32 1
  %147 = load i64* %m_size.i158, align 8
  store i64 %147, i64* %orig_size.i157, align 8
  %148 = load %struct.mz_zip_archive_tag** %pZip.addr.i153, align 8
  %149 = load %struct.mz_zip_array** %pArray.addr.i154, align 8
  %150 = load i64* %orig_size.i157, align 8
  %151 = load i64* %n.addr.i156, align 8
  %add.i159 = add i64 %150, %151
  store %struct.mz_zip_archive_tag* %148, %struct.mz_zip_archive_tag** %pZip.addr.i.i148, align 8
  store %struct.mz_zip_array* %149, %struct.mz_zip_array** %pArray.addr.i.i149, align 8
  store i64 %add.i159, i64* %new_size.addr.i.i150, align 8
  store i32 1, i32* %growing.addr.i.i151, align 4
  %152 = load i64* %new_size.addr.i.i150, align 8
  %153 = load %struct.mz_zip_array** %pArray.addr.i.i149, align 8
  %m_capacity.i.i160 = getelementptr inbounds %struct.mz_zip_array* %153, i32 0, i32 2
  %154 = load i64* %m_capacity.i.i160, align 8
  %cmp.i.i161 = icmp ugt i64 %152, %154
  br i1 %cmp.i.i161, label %if.then.i.i164, label %if.end2.i.i168

if.then.i.i164:                                   ; preds = %lor.lhs.false35
  %155 = load %struct.mz_zip_archive_tag** %pZip.addr.i.i148, align 8
  %156 = load %struct.mz_zip_array** %pArray.addr.i.i149, align 8
  %157 = load i64* %new_size.addr.i.i150, align 8
  %158 = load i32* %growing.addr.i.i151, align 4
  %call.i.i162 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %155, %struct.mz_zip_array* %156, i64 %157, i32 %158) #2
  %tobool.i.i163 = icmp ne i32 %call.i.i162, 0
  br i1 %tobool.i.i163, label %if.end.i.i166, label %if.then1.i.i165

if.then1.i.i165:                                  ; preds = %if.then.i.i164
  store i32 0, i32* %retval.i.i147
  br label %mz_zip_array_resize.exit.i170

if.end.i.i166:                                    ; preds = %if.then.i.i164
  br label %if.end2.i.i168

if.end2.i.i168:                                   ; preds = %if.end.i.i166, %lor.lhs.false35
  %159 = load i64* %new_size.addr.i.i150, align 8
  %160 = load %struct.mz_zip_array** %pArray.addr.i.i149, align 8
  %m_size.i.i167 = getelementptr inbounds %struct.mz_zip_array* %160, i32 0, i32 1
  store i64 %159, i64* %m_size.i.i167, align 8
  store i32 1, i32* %retval.i.i147
  br label %mz_zip_array_resize.exit.i170

mz_zip_array_resize.exit.i170:                    ; preds = %if.end2.i.i168, %if.then1.i.i165
  %161 = load i32* %retval.i.i147
  %tobool.i169 = icmp ne i32 %161, 0
  br i1 %tobool.i169, label %if.end.i180, label %if.then.i171

if.then.i171:                                     ; preds = %mz_zip_array_resize.exit.i170
  store i32 0, i32* %retval.i152
  br label %mz_zip_array_push_back.exit181

if.end.i180:                                      ; preds = %mz_zip_array_resize.exit.i170
  %162 = load %struct.mz_zip_array** %pArray.addr.i154, align 8
  %m_p.i172 = getelementptr inbounds %struct.mz_zip_array* %162, i32 0, i32 0
  %163 = load i8** %m_p.i172, align 8
  %164 = load i64* %orig_size.i157, align 8
  %165 = load %struct.mz_zip_array** %pArray.addr.i154, align 8
  %m_element_size.i173 = getelementptr inbounds %struct.mz_zip_array* %165, i32 0, i32 3
  %166 = load i32* %m_element_size.i173, align 4
  %conv.i174 = zext i32 %166 to i64
  %mul.i175 = mul i64 %164, %conv.i174
  %add.ptr.i176 = getelementptr inbounds i8* %163, i64 %mul.i175
  %167 = load i8** %pElements.addr.i155, align 8
  %168 = load i64* %n.addr.i156, align 8
  %169 = load %struct.mz_zip_array** %pArray.addr.i154, align 8
  %m_element_size1.i177 = getelementptr inbounds %struct.mz_zip_array* %169, i32 0, i32 3
  %170 = load i32* %m_element_size1.i177, align 4
  %conv2.i178 = zext i32 %170 to i64
  %mul3.i179 = mul i64 %168, %conv2.i178
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr.i176, i8* %167, i64 %mul3.i179, i32 1, i1 false) #2
  store i32 1, i32* %retval.i152
  br label %mz_zip_array_push_back.exit181

mz_zip_array_push_back.exit181:                   ; preds = %if.end.i180, %if.then.i171
  %171 = load i32* %retval.i152
  %tobool37 = icmp ne i32 %171, 0
  br i1 %tobool37, label %if.end41, label %if.then38

if.then38:                                        ; preds = %mz_zip_array_push_back.exit181, %mz_zip_array_push_back.exit146, %mz_zip_array_push_back.exit111, %mz_zip_array_push_back.exit76, %mz_zip_array_push_back.exit
  %172 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %173 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir39 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %173, i32 0, i32 0
  %174 = load i64* %orig_central_dir_size, align 8
  store %struct.mz_zip_archive_tag* %172, %struct.mz_zip_archive_tag** %pZip.addr.i183, align 8
  store %struct.mz_zip_array* %m_central_dir39, %struct.mz_zip_array** %pArray.addr.i184, align 8
  store i64 %174, i64* %new_size.addr.i, align 8
  store i32 0, i32* %growing.addr.i, align 4
  %175 = load i64* %new_size.addr.i, align 8
  %176 = load %struct.mz_zip_array** %pArray.addr.i184, align 8
  %m_capacity.i = getelementptr inbounds %struct.mz_zip_array* %176, i32 0, i32 2
  %177 = load i64* %m_capacity.i, align 8
  %cmp.i = icmp ugt i64 %175, %177
  br i1 %cmp.i, label %if.then.i186, label %if.end2.i

if.then.i186:                                     ; preds = %if.then38
  %178 = load %struct.mz_zip_archive_tag** %pZip.addr.i183, align 8
  %179 = load %struct.mz_zip_array** %pArray.addr.i184, align 8
  %180 = load i64* %new_size.addr.i, align 8
  %181 = load i32* %growing.addr.i, align 4
  %call.i = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %178, %struct.mz_zip_array* %179, i64 %180, i32 %181) #2
  %tobool.i185 = icmp ne i32 %call.i, 0
  br i1 %tobool.i185, label %if.end.i187, label %if.then1.i

if.then1.i:                                       ; preds = %if.then.i186
  store i32 0, i32* %retval.i182
  br label %mz_zip_array_resize.exit

if.end.i187:                                      ; preds = %if.then.i186
  br label %if.end2.i

if.end2.i:                                        ; preds = %if.end.i187, %if.then38
  %182 = load i64* %new_size.addr.i, align 8
  %183 = load %struct.mz_zip_array** %pArray.addr.i184, align 8
  %m_size.i188 = getelementptr inbounds %struct.mz_zip_array* %183, i32 0, i32 1
  store i64 %182, i64* %m_size.i188, align 8
  store i32 1, i32* %retval.i182
  br label %mz_zip_array_resize.exit

mz_zip_array_resize.exit:                         ; preds = %if.end2.i, %if.then1.i
  %184 = load i32* %retval.i182
  store i32 0, i32* %retval
  br label %return

if.end41:                                         ; preds = %mz_zip_array_push_back.exit181
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end41, %mz_zip_array_resize.exit, %if.then14, %if.then
  %185 = load i32* %retval
  ret i32 %185
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_writer_add_file(%struct.mz_zip_archive_tag* %pZip, i8* %pArchive_name, i8* %pSrc_filename, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pSrc_filename.addr = alloca i8*, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %uncomp_crc32 = alloca i32, align 4
  %level = alloca i32, align 4
  %num_alignment_padding_bytes = alloca i32, align 4
  %method = alloca i16, align 2
  %dos_time = alloca i16, align 2
  %dos_date = alloca i16, align 2
  %ext_attributes = alloca i16, align 2
  %local_dir_header_ofs = alloca i64, align 8
  %cur_archive_file_ofs = alloca i64, align 8
  %uncomp_size = alloca i64, align 8
  %comp_size = alloca i64, align 8
  %archive_name_size = alloca i64, align 8
  %local_dir_header = alloca [30 x i8], align 16
  %pSrc_file = alloca %struct._IO_FILE*, align 8
  %uncomp_remaining = alloca i64, align 8
  %pRead_buf = alloca i8*, align 8
  %n = alloca i32, align 4
  %result = alloca i32, align 4
  %state = alloca %struct.mz_zip_writer_add_state, align 8
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %in_buf_size = alloca i64, align 8
  %status = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store i8* %pSrc_filename, i8** %pSrc_filename.addr, align 8
  store i8* %pComment, i8** %pComment.addr, align 8
  store i16 %comment_size, i16* %comment_size.addr, align 2
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4
  store i32 0, i32* %uncomp_crc32, align 4
  store i16 0, i16* %method, align 2
  store i16 0, i16* %dos_time, align 2
  store i16 0, i16* %dos_date, align 2
  store i16 0, i16* %ext_attributes, align 2
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %0, i32 0, i32 0
  %1 = load i64* %m_archive_size, align 8
  store i64 %1, i64* %local_dir_header_ofs, align 8
  %2 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size1 = getelementptr inbounds %struct.mz_zip_archive_tag* %2, i32 0, i32 0
  %3 = load i64* %m_archive_size1, align 8
  store i64 %3, i64* %cur_archive_file_ofs, align 8
  store i64 0, i64* %uncomp_size, align 8
  store i64 0, i64* %comp_size, align 8
  store %struct._IO_FILE* null, %struct._IO_FILE** %pSrc_file, align 8
  %4 = load i32* %level_and_flags.addr, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 6, i32* %level_and_flags.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %level_and_flags.addr, align 4
  %and = and i32 %5, 15
  store i32 %and, i32* %level, align 4
  %6 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive_tag* %6, null
  br i1 %tobool, label %lor.lhs.false, label %if.then13

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %7, i32 0, i32 12
  %8 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool2 = icmp ne %struct.mz_zip_internal_state_tag* %8, null
  br i1 %tobool2, label %lor.lhs.false3, label %if.then13

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %9 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive_tag* %9, i32 0, i32 3
  %10 = load i32* %m_zip_mode, align 4
  %cmp4 = icmp ne i32 %10, 2
  br i1 %cmp4, label %if.then13, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false3
  %11 = load i8** %pArchive_name.addr, align 8
  %tobool6 = icmp ne i8* %11, null
  br i1 %tobool6, label %lor.lhs.false7, label %if.then13

lor.lhs.false7:                                   ; preds = %lor.lhs.false5
  %12 = load i16* %comment_size.addr, align 2
  %conv = zext i16 %12 to i32
  %tobool8 = icmp ne i32 %conv, 0
  br i1 %tobool8, label %land.lhs.true, label %lor.lhs.false10

land.lhs.true:                                    ; preds = %lor.lhs.false7
  %13 = load i8** %pComment.addr, align 8
  %tobool9 = icmp ne i8* %13, null
  br i1 %tobool9, label %lor.lhs.false10, label %if.then13

lor.lhs.false10:                                  ; preds = %land.lhs.true, %lor.lhs.false7
  %14 = load i32* %level, align 4
  %cmp11 = icmp ugt i32 %14, 10
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false10, %land.lhs.true, %lor.lhs.false5, %lor.lhs.false3, %lor.lhs.false, %if.end
  store i32 0, i32* %retval
  br label %return

if.end14:                                         ; preds = %lor.lhs.false10
  %15 = load i32* %level_and_flags.addr, align 4
  %and15 = and i32 %15, 1024
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end14
  store i32 0, i32* %retval
  br label %return

if.end18:                                         ; preds = %if.end14
  %16 = load i8** %pArchive_name.addr, align 8
  %call = call i32 @mz_zip_writer_validate_archive_name(i8* %16)
  %tobool19 = icmp ne i32 %call, 0
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %if.end18
  store i32 0, i32* %retval
  br label %return

if.end21:                                         ; preds = %if.end18
  %17 = load i8** %pArchive_name.addr, align 8
  %call22 = call i64 @strlen(i8* %17) #7
  store i64 %call22, i64* %archive_name_size, align 8
  %18 = load i64* %archive_name_size, align 8
  %cmp23 = icmp ugt i64 %18, 65535
  br i1 %cmp23, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.end21
  store i32 0, i32* %retval
  br label %return

if.end26:                                         ; preds = %if.end21
  %19 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %call27 = call i32 @mz_zip_writer_compute_padding_needed_for_file_alignment(%struct.mz_zip_archive_tag* %19)
  store i32 %call27, i32* %num_alignment_padding_bytes, align 4
  %20 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive_tag* %20, i32 0, i32 2
  %21 = load i32* %m_total_files, align 4
  %cmp28 = icmp eq i32 %21, 65535
  br i1 %cmp28, label %if.then40, label %lor.lhs.false30

lor.lhs.false30:                                  ; preds = %if.end26
  %22 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size31 = getelementptr inbounds %struct.mz_zip_archive_tag* %22, i32 0, i32 0
  %23 = load i64* %m_archive_size31, align 8
  %24 = load i32* %num_alignment_padding_bytes, align 4
  %conv32 = zext i32 %24 to i64
  %add = add i64 %23, %conv32
  %add33 = add i64 %add, 30
  %add34 = add i64 %add33, 46
  %25 = load i16* %comment_size.addr, align 2
  %conv35 = zext i16 %25 to i64
  %add36 = add i64 %add34, %conv35
  %26 = load i64* %archive_name_size, align 8
  %add37 = add i64 %add36, %26
  %cmp38 = icmp ugt i64 %add37, 4294967295
  br i1 %cmp38, label %if.then40, label %if.end41

if.then40:                                        ; preds = %lor.lhs.false30, %if.end26
  store i32 0, i32* %retval
  br label %return

if.end41:                                         ; preds = %lor.lhs.false30
  %27 = load i8** %pSrc_filename.addr, align 8
  %call42 = call i32 @mz_zip_get_file_modified_time(i8* %27, i16* %dos_time, i16* %dos_date)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.end45, label %if.then44

if.then44:                                        ; preds = %if.end41
  store i32 0, i32* %retval
  br label %return

if.end45:                                         ; preds = %if.end41
  %28 = load i8** %pSrc_filename.addr, align 8
  %call46 = call %struct._IO_FILE* @fopen(i8* %28, i8* getelementptr inbounds ([3 x i8]* @.str17, i32 0, i32 0))
  store %struct._IO_FILE* %call46, %struct._IO_FILE** %pSrc_file, align 8
  %29 = load %struct._IO_FILE** %pSrc_file, align 8
  %tobool47 = icmp ne %struct._IO_FILE* %29, null
  br i1 %tobool47, label %if.end49, label %if.then48

if.then48:                                        ; preds = %if.end45
  store i32 0, i32* %retval
  br label %return

if.end49:                                         ; preds = %if.end45
  %30 = load %struct._IO_FILE** %pSrc_file, align 8
  %call50 = call i32 @fseeko(%struct._IO_FILE* %30, i64 0, i32 2)
  %31 = load %struct._IO_FILE** %pSrc_file, align 8
  %call51 = call i64 @ftello(%struct._IO_FILE* %31)
  store i64 %call51, i64* %uncomp_size, align 8
  %32 = load %struct._IO_FILE** %pSrc_file, align 8
  %call52 = call i32 @fseeko(%struct._IO_FILE* %32, i64 0, i32 0)
  %33 = load i64* %uncomp_size, align 8
  %cmp53 = icmp ugt i64 %33, 4294967295
  br i1 %cmp53, label %if.then55, label %if.end57

if.then55:                                        ; preds = %if.end49
  %34 = load %struct._IO_FILE** %pSrc_file, align 8
  %call56 = call i32 @fclose(%struct._IO_FILE* %34)
  store i32 0, i32* %retval
  br label %return

if.end57:                                         ; preds = %if.end49
  %35 = load i64* %uncomp_size, align 8
  %cmp58 = icmp ule i64 %35, 3
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %if.end57
  store i32 0, i32* %level, align 4
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %if.end57
  %36 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %37 = load i64* %cur_archive_file_ofs, align 8
  %38 = load i32* %num_alignment_padding_bytes, align 4
  %conv62 = zext i32 %38 to i64
  %add63 = add i64 %conv62, 30
  %conv64 = trunc i64 %add63 to i32
  %call65 = call i32 @mz_zip_writer_write_zeros(%struct.mz_zip_archive_tag* %36, i64 %37, i32 %conv64)
  %tobool66 = icmp ne i32 %call65, 0
  br i1 %tobool66, label %if.end69, label %if.then67

if.then67:                                        ; preds = %if.end61
  %39 = load %struct._IO_FILE** %pSrc_file, align 8
  %call68 = call i32 @fclose(%struct._IO_FILE* %39)
  store i32 0, i32* %retval
  br label %return

if.end69:                                         ; preds = %if.end61
  %40 = load i32* %num_alignment_padding_bytes, align 4
  %conv70 = zext i32 %40 to i64
  %41 = load i64* %local_dir_header_ofs, align 8
  %add71 = add i64 %41, %conv70
  store i64 %add71, i64* %local_dir_header_ofs, align 8
  %42 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive_tag* %42, i32 0, i32 4
  %43 = load i32* %m_file_offset_alignment, align 4
  %tobool72 = icmp ne i32 %43, 0
  br i1 %tobool72, label %if.then73, label %if.end79

if.then73:                                        ; preds = %if.end69
  %44 = load i64* %local_dir_header_ofs, align 8
  %45 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_file_offset_alignment74 = getelementptr inbounds %struct.mz_zip_archive_tag* %45, i32 0, i32 4
  %46 = load i32* %m_file_offset_alignment74, align 4
  %sub = sub i32 %46, 1
  %conv75 = zext i32 %sub to i64
  %and76 = and i64 %44, %conv75
  %cmp77 = icmp eq i64 %and76, 0
  br i1 %cmp77, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then73
  br label %cond.end

cond.false:                                       ; preds = %if.then73
  call void @__assert_fail(i8* getelementptr inbounds ([66 x i8]* @.str20, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 4467, i8* getelementptr inbounds ([111 x i8]* @__PRETTY_FUNCTION__.mz_zip_writer_add_file, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %47, %cond.true
  br label %if.end79

if.end79:                                         ; preds = %cond.end, %if.end69
  %48 = load i32* %num_alignment_padding_bytes, align 4
  %conv80 = zext i32 %48 to i64
  %add81 = add i64 %conv80, 30
  %49 = load i64* %cur_archive_file_ofs, align 8
  %add82 = add i64 %49, %add81
  store i64 %add82, i64* %cur_archive_file_ofs, align 8
  %50 = bitcast [30 x i8]* %local_dir_header to i8*
  call void @llvm.memset.p0i8.i64(i8* %50, i8 0, i64 30, i32 16, i1 false)
  %51 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive_tag* %51, i32 0, i32 10
  %52 = load i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %53 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %53, i32 0, i32 11
  %54 = load i8** %m_pIO_opaque, align 8
  %55 = load i64* %cur_archive_file_ofs, align 8
  %56 = load i8** %pArchive_name.addr, align 8
  %57 = load i64* %archive_name_size, align 8
  %call83 = call i64 %52(i8* %54, i64 %55, i8* %56, i64 %57)
  %58 = load i64* %archive_name_size, align 8
  %cmp84 = icmp ne i64 %call83, %58
  br i1 %cmp84, label %if.then86, label %if.end88

if.then86:                                        ; preds = %if.end79
  %59 = load %struct._IO_FILE** %pSrc_file, align 8
  %call87 = call i32 @fclose(%struct._IO_FILE* %59)
  store i32 0, i32* %retval
  br label %return

if.end88:                                         ; preds = %if.end79
  %60 = load i64* %archive_name_size, align 8
  %61 = load i64* %cur_archive_file_ofs, align 8
  %add89 = add i64 %61, %60
  store i64 %add89, i64* %cur_archive_file_ofs, align 8
  %62 = load i64* %uncomp_size, align 8
  %tobool90 = icmp ne i64 %62, 0
  br i1 %tobool90, label %if.then91, label %if.end193

if.then91:                                        ; preds = %if.end88
  %63 = load i64* %uncomp_size, align 8
  store i64 %63, i64* %uncomp_remaining, align 8
  %64 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive_tag* %64, i32 0, i32 5
  %65 = load i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %66 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %66, i32 0, i32 8
  %67 = load i8** %m_pAlloc_opaque, align 8
  %call92 = call i8* %65(i8* %67, i64 1, i64 65536)
  store i8* %call92, i8** %pRead_buf, align 8
  %68 = load i8** %pRead_buf, align 8
  %tobool93 = icmp ne i8* %68, null
  br i1 %tobool93, label %if.end96, label %if.then94

if.then94:                                        ; preds = %if.then91
  %69 = load %struct._IO_FILE** %pSrc_file, align 8
  %call95 = call i32 @fclose(%struct._IO_FILE* %69)
  store i32 0, i32* %retval
  br label %return

if.end96:                                         ; preds = %if.then91
  %70 = load i32* %level, align 4
  %tobool97 = icmp ne i32 %70, 0
  br i1 %tobool97, label %if.else, label %if.then98

if.then98:                                        ; preds = %if.end96
  br label %while.cond

while.cond:                                       ; preds = %if.end122, %if.then98
  %71 = load i64* %uncomp_remaining, align 8
  %tobool99 = icmp ne i64 %71, 0
  br i1 %tobool99, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %72 = load i64* %uncomp_remaining, align 8
  %cmp100 = icmp ult i64 65536, %72
  br i1 %cmp100, label %cond.true102, label %cond.false103

cond.true102:                                     ; preds = %while.body
  br label %cond.end104

cond.false103:                                    ; preds = %while.body
  %73 = load i64* %uncomp_remaining, align 8
  br label %cond.end104

cond.end104:                                      ; preds = %cond.false103, %cond.true102
  %cond = phi i64 [ 65536, %cond.true102 ], [ %73, %cond.false103 ]
  %conv105 = trunc i64 %cond to i32
  store i32 %conv105, i32* %n, align 4
  %74 = load i8** %pRead_buf, align 8
  %75 = load i32* %n, align 4
  %conv106 = zext i32 %75 to i64
  %76 = load %struct._IO_FILE** %pSrc_file, align 8
  %call107 = call i64 @fread(i8* %74, i64 1, i64 %conv106, %struct._IO_FILE* %76)
  %77 = load i32* %n, align 4
  %conv108 = zext i32 %77 to i64
  %cmp109 = icmp ne i64 %call107, %conv108
  br i1 %cmp109, label %if.then119, label %lor.lhs.false111

lor.lhs.false111:                                 ; preds = %cond.end104
  %78 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite112 = getelementptr inbounds %struct.mz_zip_archive_tag* %78, i32 0, i32 10
  %79 = load i64 (i8*, i64, i8*, i64)** %m_pWrite112, align 8
  %80 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque113 = getelementptr inbounds %struct.mz_zip_archive_tag* %80, i32 0, i32 11
  %81 = load i8** %m_pIO_opaque113, align 8
  %82 = load i64* %cur_archive_file_ofs, align 8
  %83 = load i8** %pRead_buf, align 8
  %84 = load i32* %n, align 4
  %conv114 = zext i32 %84 to i64
  %call115 = call i64 %79(i8* %81, i64 %82, i8* %83, i64 %conv114)
  %85 = load i32* %n, align 4
  %conv116 = zext i32 %85 to i64
  %cmp117 = icmp ne i64 %call115, %conv116
  br i1 %cmp117, label %if.then119, label %if.end122

if.then119:                                       ; preds = %lor.lhs.false111, %cond.end104
  %86 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive_tag* %86, i32 0, i32 6
  %87 = load void (i8*, i8*)** %m_pFree, align 8
  %88 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque120 = getelementptr inbounds %struct.mz_zip_archive_tag* %88, i32 0, i32 8
  %89 = load i8** %m_pAlloc_opaque120, align 8
  %90 = load i8** %pRead_buf, align 8
  call void %87(i8* %89, i8* %90)
  %91 = load %struct._IO_FILE** %pSrc_file, align 8
  %call121 = call i32 @fclose(%struct._IO_FILE* %91)
  store i32 0, i32* %retval
  br label %return

if.end122:                                        ; preds = %lor.lhs.false111
  %92 = load i32* %uncomp_crc32, align 4
  %conv123 = zext i32 %92 to i64
  %93 = load i8** %pRead_buf, align 8
  %94 = load i32* %n, align 4
  %conv124 = zext i32 %94 to i64
  %call125 = call i64 @mz_crc32(i64 %conv123, i8* %93, i64 %conv124)
  %conv126 = trunc i64 %call125 to i32
  store i32 %conv126, i32* %uncomp_crc32, align 4
  %95 = load i32* %n, align 4
  %conv127 = zext i32 %95 to i64
  %96 = load i64* %uncomp_remaining, align 8
  %sub128 = sub i64 %96, %conv127
  store i64 %sub128, i64* %uncomp_remaining, align 8
  %97 = load i32* %n, align 4
  %conv129 = zext i32 %97 to i64
  %98 = load i64* %cur_archive_file_ofs, align 8
  %add130 = add i64 %98, %conv129
  store i64 %add130, i64* %cur_archive_file_ofs, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %99 = load i64* %uncomp_size, align 8
  store i64 %99, i64* %comp_size, align 8
  br label %if.end190

if.else:                                          ; preds = %if.end96
  store i32 0, i32* %result, align 4
  %100 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc131 = getelementptr inbounds %struct.mz_zip_archive_tag* %100, i32 0, i32 5
  %101 = load i8* (i8*, i64, i64)** %m_pAlloc131, align 8
  %102 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque132 = getelementptr inbounds %struct.mz_zip_archive_tag* %102, i32 0, i32 8
  %103 = load i8** %m_pAlloc_opaque132, align 8
  %call133 = call i8* %101(i8* %103, i64 1, i64 319352)
  %104 = bitcast i8* %call133 to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %104, %struct.tdefl_compressor** %pComp, align 8
  %105 = load %struct.tdefl_compressor** %pComp, align 8
  %tobool134 = icmp ne %struct.tdefl_compressor* %105, null
  br i1 %tobool134, label %if.end139, label %if.then135

if.then135:                                       ; preds = %if.else
  %106 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree136 = getelementptr inbounds %struct.mz_zip_archive_tag* %106, i32 0, i32 6
  %107 = load void (i8*, i8*)** %m_pFree136, align 8
  %108 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque137 = getelementptr inbounds %struct.mz_zip_archive_tag* %108, i32 0, i32 8
  %109 = load i8** %m_pAlloc_opaque137, align 8
  %110 = load i8** %pRead_buf, align 8
  call void %107(i8* %109, i8* %110)
  %111 = load %struct._IO_FILE** %pSrc_file, align 8
  %call138 = call i32 @fclose(%struct._IO_FILE* %111)
  store i32 0, i32* %retval
  br label %return

if.end139:                                        ; preds = %if.else
  %112 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pZip = getelementptr inbounds %struct.mz_zip_writer_add_state* %state, i32 0, i32 0
  store %struct.mz_zip_archive_tag* %112, %struct.mz_zip_archive_tag** %m_pZip, align 8
  %113 = load i64* %cur_archive_file_ofs, align 8
  %m_cur_archive_file_ofs = getelementptr inbounds %struct.mz_zip_writer_add_state* %state, i32 0, i32 1
  store i64 %113, i64* %m_cur_archive_file_ofs, align 8
  %m_comp_size = getelementptr inbounds %struct.mz_zip_writer_add_state* %state, i32 0, i32 2
  store i64 0, i64* %m_comp_size, align 8
  %114 = load %struct.tdefl_compressor** %pComp, align 8
  %115 = bitcast %struct.mz_zip_writer_add_state* %state to i8*
  %116 = load i32* %level, align 4
  %call140 = call i32 @tdefl_create_comp_flags_from_zip_params(i32 %116, i32 -15, i32 0)
  %call141 = call i32 @tdefl_init(%struct.tdefl_compressor* %114, i32 (i8*, i32, i8*)* @mz_zip_writer_add_put_buf_callback, i8* %115, i32 %call140)
  %cmp142 = icmp ne i32 %call141, 0
  br i1 %cmp142, label %if.then144, label %if.end150

if.then144:                                       ; preds = %if.end139
  %117 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree145 = getelementptr inbounds %struct.mz_zip_archive_tag* %117, i32 0, i32 6
  %118 = load void (i8*, i8*)** %m_pFree145, align 8
  %119 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque146 = getelementptr inbounds %struct.mz_zip_archive_tag* %119, i32 0, i32 8
  %120 = load i8** %m_pAlloc_opaque146, align 8
  %121 = load %struct.tdefl_compressor** %pComp, align 8
  %122 = bitcast %struct.tdefl_compressor* %121 to i8*
  call void %118(i8* %120, i8* %122)
  %123 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree147 = getelementptr inbounds %struct.mz_zip_archive_tag* %123, i32 0, i32 6
  %124 = load void (i8*, i8*)** %m_pFree147, align 8
  %125 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque148 = getelementptr inbounds %struct.mz_zip_archive_tag* %125, i32 0, i32 8
  %126 = load i8** %m_pAlloc_opaque148, align 8
  %127 = load i8** %pRead_buf, align 8
  call void %124(i8* %126, i8* %127)
  %128 = load %struct._IO_FILE** %pSrc_file, align 8
  %call149 = call i32 @fclose(%struct._IO_FILE* %128)
  store i32 0, i32* %retval
  br label %return

if.end150:                                        ; preds = %if.end139
  br label %for.cond

for.cond:                                         ; preds = %if.end179, %if.end150
  %129 = load i64* %uncomp_remaining, align 8
  %cmp151 = icmp ult i64 %129, 65536
  br i1 %cmp151, label %cond.true153, label %cond.false154

cond.true153:                                     ; preds = %for.cond
  %130 = load i64* %uncomp_remaining, align 8
  br label %cond.end155

cond.false154:                                    ; preds = %for.cond
  br label %cond.end155

cond.end155:                                      ; preds = %cond.false154, %cond.true153
  %cond156 = phi i64 [ %130, %cond.true153 ], [ 65536, %cond.false154 ]
  %conv157 = trunc i64 %cond156 to i32
  %conv158 = zext i32 %conv157 to i64
  store i64 %conv158, i64* %in_buf_size, align 8
  %131 = load i8** %pRead_buf, align 8
  %132 = load i64* %in_buf_size, align 8
  %133 = load %struct._IO_FILE** %pSrc_file, align 8
  %call159 = call i64 @fread(i8* %131, i64 1, i64 %132, %struct._IO_FILE* %133)
  %134 = load i64* %in_buf_size, align 8
  %cmp160 = icmp ne i64 %call159, %134
  br i1 %cmp160, label %if.then162, label %if.end163

if.then162:                                       ; preds = %cond.end155
  br label %for.end

if.end163:                                        ; preds = %cond.end155
  %135 = load i32* %uncomp_crc32, align 4
  %conv164 = zext i32 %135 to i64
  %136 = load i8** %pRead_buf, align 8
  %137 = load i64* %in_buf_size, align 8
  %call165 = call i64 @mz_crc32(i64 %conv164, i8* %136, i64 %137)
  %conv166 = trunc i64 %call165 to i32
  store i32 %conv166, i32* %uncomp_crc32, align 4
  %138 = load i64* %in_buf_size, align 8
  %139 = load i64* %uncomp_remaining, align 8
  %sub167 = sub i64 %139, %138
  store i64 %sub167, i64* %uncomp_remaining, align 8
  %140 = load %struct.tdefl_compressor** %pComp, align 8
  %141 = load i8** %pRead_buf, align 8
  %142 = load i64* %in_buf_size, align 8
  %143 = load i64* %uncomp_remaining, align 8
  %tobool168 = icmp ne i64 %143, 0
  %cond169 = select i1 %tobool168, i32 0, i32 4
  %call170 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %140, i8* %141, i64 %142, i32 %cond169)
  store i32 %call170, i32* %status, align 4
  %144 = load i32* %status, align 4
  %cmp171 = icmp eq i32 %144, 1
  br i1 %cmp171, label %if.then173, label %if.else174

if.then173:                                       ; preds = %if.end163
  store i32 1, i32* %result, align 4
  br label %for.end

if.else174:                                       ; preds = %if.end163
  %145 = load i32* %status, align 4
  %cmp175 = icmp ne i32 %145, 0
  br i1 %cmp175, label %if.then177, label %if.end178

if.then177:                                       ; preds = %if.else174
  br label %for.end

if.end178:                                        ; preds = %if.else174
  br label %if.end179

if.end179:                                        ; preds = %if.end178
  br label %for.cond

for.end:                                          ; preds = %if.then177, %if.then173, %if.then162
  %146 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree180 = getelementptr inbounds %struct.mz_zip_archive_tag* %146, i32 0, i32 6
  %147 = load void (i8*, i8*)** %m_pFree180, align 8
  %148 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque181 = getelementptr inbounds %struct.mz_zip_archive_tag* %148, i32 0, i32 8
  %149 = load i8** %m_pAlloc_opaque181, align 8
  %150 = load %struct.tdefl_compressor** %pComp, align 8
  %151 = bitcast %struct.tdefl_compressor* %150 to i8*
  call void %147(i8* %149, i8* %151)
  %152 = load i32* %result, align 4
  %tobool182 = icmp ne i32 %152, 0
  br i1 %tobool182, label %if.end187, label %if.then183

if.then183:                                       ; preds = %for.end
  %153 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree184 = getelementptr inbounds %struct.mz_zip_archive_tag* %153, i32 0, i32 6
  %154 = load void (i8*, i8*)** %m_pFree184, align 8
  %155 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque185 = getelementptr inbounds %struct.mz_zip_archive_tag* %155, i32 0, i32 8
  %156 = load i8** %m_pAlloc_opaque185, align 8
  %157 = load i8** %pRead_buf, align 8
  call void %154(i8* %156, i8* %157)
  %158 = load %struct._IO_FILE** %pSrc_file, align 8
  %call186 = call i32 @fclose(%struct._IO_FILE* %158)
  store i32 0, i32* %retval
  br label %return

if.end187:                                        ; preds = %for.end
  %m_comp_size188 = getelementptr inbounds %struct.mz_zip_writer_add_state* %state, i32 0, i32 2
  %159 = load i64* %m_comp_size188, align 8
  store i64 %159, i64* %comp_size, align 8
  %m_cur_archive_file_ofs189 = getelementptr inbounds %struct.mz_zip_writer_add_state* %state, i32 0, i32 1
  %160 = load i64* %m_cur_archive_file_ofs189, align 8
  store i64 %160, i64* %cur_archive_file_ofs, align 8
  store i16 8, i16* %method, align 2
  br label %if.end190

if.end190:                                        ; preds = %if.end187, %while.end
  %161 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree191 = getelementptr inbounds %struct.mz_zip_archive_tag* %161, i32 0, i32 6
  %162 = load void (i8*, i8*)** %m_pFree191, align 8
  %163 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque192 = getelementptr inbounds %struct.mz_zip_archive_tag* %163, i32 0, i32 8
  %164 = load i8** %m_pAlloc_opaque192, align 8
  %165 = load i8** %pRead_buf, align 8
  call void %162(i8* %164, i8* %165)
  br label %if.end193

if.end193:                                        ; preds = %if.end190, %if.end88
  %166 = load %struct._IO_FILE** %pSrc_file, align 8
  %call194 = call i32 @fclose(%struct._IO_FILE* %166)
  store %struct._IO_FILE* null, %struct._IO_FILE** %pSrc_file, align 8
  %167 = load i64* %comp_size, align 8
  %cmp195 = icmp ugt i64 %167, 4294967295
  br i1 %cmp195, label %if.then200, label %lor.lhs.false197

lor.lhs.false197:                                 ; preds = %if.end193
  %168 = load i64* %cur_archive_file_ofs, align 8
  %cmp198 = icmp ugt i64 %168, 4294967295
  br i1 %cmp198, label %if.then200, label %if.end201

if.then200:                                       ; preds = %lor.lhs.false197, %if.end193
  store i32 0, i32* %retval
  br label %return

if.end201:                                        ; preds = %lor.lhs.false197
  %169 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %arraydecay = getelementptr inbounds [30 x i8]* %local_dir_header, i32 0, i32 0
  %170 = load i64* %archive_name_size, align 8
  %conv202 = trunc i64 %170 to i16
  %171 = load i64* %uncomp_size, align 8
  %172 = load i64* %comp_size, align 8
  %173 = load i32* %uncomp_crc32, align 4
  %174 = load i16* %method, align 2
  %175 = load i16* %dos_time, align 2
  %176 = load i16* %dos_date, align 2
  %call203 = call i32 @mz_zip_writer_create_local_dir_header(%struct.mz_zip_archive_tag* %169, i8* %arraydecay, i16 zeroext %conv202, i16 zeroext 0, i64 %171, i64 %172, i32 %173, i16 zeroext %174, i16 zeroext 0, i16 zeroext %175, i16 zeroext %176)
  %tobool204 = icmp ne i32 %call203, 0
  br i1 %tobool204, label %if.end206, label %if.then205

if.then205:                                       ; preds = %if.end201
  store i32 0, i32* %retval
  br label %return

if.end206:                                        ; preds = %if.end201
  %177 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite207 = getelementptr inbounds %struct.mz_zip_archive_tag* %177, i32 0, i32 10
  %178 = load i64 (i8*, i64, i8*, i64)** %m_pWrite207, align 8
  %179 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque208 = getelementptr inbounds %struct.mz_zip_archive_tag* %179, i32 0, i32 11
  %180 = load i8** %m_pIO_opaque208, align 8
  %181 = load i64* %local_dir_header_ofs, align 8
  %arraydecay209 = getelementptr inbounds [30 x i8]* %local_dir_header, i32 0, i32 0
  %call210 = call i64 %178(i8* %180, i64 %181, i8* %arraydecay209, i64 30)
  %cmp211 = icmp ne i64 %call210, 30
  br i1 %cmp211, label %if.then213, label %if.end214

if.then213:                                       ; preds = %if.end206
  store i32 0, i32* %retval
  br label %return

if.end214:                                        ; preds = %if.end206
  %182 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %183 = load i8** %pArchive_name.addr, align 8
  %184 = load i64* %archive_name_size, align 8
  %conv215 = trunc i64 %184 to i16
  %185 = load i8** %pComment.addr, align 8
  %186 = load i16* %comment_size.addr, align 2
  %187 = load i64* %uncomp_size, align 8
  %188 = load i64* %comp_size, align 8
  %189 = load i32* %uncomp_crc32, align 4
  %190 = load i16* %method, align 2
  %191 = load i16* %dos_time, align 2
  %192 = load i16* %dos_date, align 2
  %193 = load i64* %local_dir_header_ofs, align 8
  %194 = load i16* %ext_attributes, align 2
  %conv216 = zext i16 %194 to i32
  %call217 = call i32 @mz_zip_writer_add_to_central_dir(%struct.mz_zip_archive_tag* %182, i8* %183, i16 zeroext %conv215, i8* null, i16 zeroext 0, i8* %185, i16 zeroext %186, i64 %187, i64 %188, i32 %189, i16 zeroext %190, i16 zeroext 0, i16 zeroext %191, i16 zeroext %192, i64 %193, i32 %conv216)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.end220, label %if.then219

if.then219:                                       ; preds = %if.end214
  store i32 0, i32* %retval
  br label %return

if.end220:                                        ; preds = %if.end214
  %195 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files221 = getelementptr inbounds %struct.mz_zip_archive_tag* %195, i32 0, i32 2
  %196 = load i32* %m_total_files221, align 4
  %inc = add i32 %196, 1
  store i32 %inc, i32* %m_total_files221, align 4
  %197 = load i64* %cur_archive_file_ofs, align 8
  %198 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size222 = getelementptr inbounds %struct.mz_zip_archive_tag* %198, i32 0, i32 0
  store i64 %197, i64* %m_archive_size222, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end220, %if.then219, %if.then213, %if.then205, %if.then200, %if.then183, %if.then144, %if.then135, %if.then119, %if.then94, %if.then86, %if.then67, %if.then55, %if.then48, %if.then44, %if.then40, %if.then25, %if.then20, %if.then17, %if.then13
  %199 = load i32* %retval
  ret i32 %199
}

; Function Attrs: nounwind uwtable
define internal i32 @mz_zip_get_file_modified_time(i8* %pFilename, i16* %pDOS_time, i16* %pDOS_date) #0 {
entry:
  %retval = alloca i32, align 4
  %pFilename.addr = alloca i8*, align 8
  %pDOS_time.addr = alloca i16*, align 8
  %pDOS_date.addr = alloca i16*, align 8
  %file_stat = alloca %struct.stat, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i16* %pDOS_time, i16** %pDOS_time.addr, align 8
  store i16* %pDOS_date, i16** %pDOS_date.addr, align 8
  %0 = load i8** %pFilename.addr, align 8
  %call = call i32 @stat(i8* %0, %struct.stat* %file_stat) #2
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %st_mtim = getelementptr inbounds %struct.stat* %file_stat, i32 0, i32 12
  %tv_sec = getelementptr inbounds %struct.timespec* %st_mtim, i32 0, i32 0
  %1 = load i64* %tv_sec, align 8
  %2 = load i16** %pDOS_time.addr, align 8
  %3 = load i16** %pDOS_date.addr, align 8
  call void @mz_zip_time_to_dos_time(i64 %1, i16* %2, i16* %3)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32* %retval
  ret i32 %4
}

declare i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #4

; Function Attrs: nounwind uwtable
define i32 @mz_zip_writer_add_from_zip_reader(%struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag* %pSource_zip, i32 %file_index) #0 {
entry:
  %retval.i.i259 = alloca i32, align 4
  %pZip.addr.i.i260 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i.i261 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i262 = alloca i64, align 8
  %growing.addr.i.i263 = alloca i32, align 4
  %retval.i264 = alloca i32, align 4
  %pZip.addr.i265 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i266 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i267 = alloca i8*, align 8
  %n.addr.i268 = alloca i64, align 8
  %orig_size.i269 = alloca i64, align 8
  %retval.i244 = alloca i32, align 4
  %pZip.addr.i245 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i246 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i247 = alloca i64, align 8
  %growing.addr.i248 = alloca i32, align 4
  %retval.i.i209 = alloca i32, align 4
  %pZip.addr.i.i210 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i.i211 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i212 = alloca i64, align 8
  %growing.addr.i.i213 = alloca i32, align 4
  %retval.i214 = alloca i32, align 4
  %pZip.addr.i215 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i216 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i217 = alloca i8*, align 8
  %n.addr.i218 = alloca i64, align 8
  %orig_size.i219 = alloca i64, align 8
  %retval.i.i = alloca i32, align 4
  %pZip.addr.i.i = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i.i = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i = alloca i64, align 8
  %growing.addr.i.i = alloca i32, align 4
  %retval.i201 = alloca i32, align 4
  %pZip.addr.i202 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i203 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i = alloca i8*, align 8
  %n.addr.i = alloca i64, align 8
  %orig_size.i = alloca i64, align 8
  %retval.i195 = alloca i32, align 4
  %pZip.addr.i196 = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i = alloca i64, align 8
  %growing.addr.i = alloca i32, align 4
  %retval.i = alloca i8*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pSource_zip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %file_index.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %bit_flags = alloca i32, align 4
  %num_alignment_padding_bytes = alloca i32, align 4
  %comp_bytes_remaining = alloca i64, align 8
  %local_dir_header_ofs = alloca i64, align 8
  %cur_src_file_ofs = alloca i64, align 8
  %cur_dst_file_ofs = alloca i64, align 8
  %local_header_u32 = alloca [8 x i32], align 16
  %pLocal_header = alloca i8*, align 8
  %central_header = alloca [46 x i8], align 16
  %orig_central_dir_size = alloca i64, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %pBuf = alloca i8*, align 8
  %pSrc_central_header = alloca i8*, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store %struct.mz_zip_archive_tag* %pSource_zip, %struct.mz_zip_archive_tag** %pSource_zip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  %arraydecay = getelementptr inbounds [8 x i32]* %local_header_u32, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  store i8* %0, i8** %pLocal_header, align 8
  %1 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive_tag* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %2, i32 0, i32 12
  %3 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %3, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive_tag* %4, i32 0, i32 3
  %5 = load i32* %m_zip_mode, align 4
  %cmp = icmp ne i32 %5, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %6 = load %struct.mz_zip_archive_tag** %pSource_zip.addr, align 8
  %7 = load i32* %file_index.addr, align 4
  store %struct.mz_zip_archive_tag* %6, %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  store i32 %7, i32* %file_index.addr.i, align 4
  %8 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive_tag* %8, null
  br i1 %tobool.i, label %lor.lhs.false.i, label %if.then.i

lor.lhs.false.i:                                  ; preds = %if.end
  %9 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState.i = getelementptr inbounds %struct.mz_zip_archive_tag* %9, i32 0, i32 12
  %10 = load %struct.mz_zip_internal_state_tag** %m_pState.i, align 8
  %tobool1.i = icmp ne %struct.mz_zip_internal_state_tag* %10, null
  br i1 %tobool1.i, label %lor.lhs.false2.i, label %if.then.i

lor.lhs.false2.i:                                 ; preds = %lor.lhs.false.i
  %11 = load i32* %file_index.addr.i, align 4
  %12 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_total_files.i = getelementptr inbounds %struct.mz_zip_archive_tag* %12, i32 0, i32 2
  %13 = load i32* %m_total_files.i, align 4
  %cmp.i = icmp uge i32 %11, %13
  br i1 %cmp.i, label %if.then.i, label %lor.lhs.false3.i

lor.lhs.false3.i:                                 ; preds = %lor.lhs.false2.i
  %14 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_zip_mode.i = getelementptr inbounds %struct.mz_zip_archive_tag* %14, i32 0, i32 3
  %15 = load i32* %m_zip_mode.i, align 4
  %cmp4.i = icmp ne i32 %15, 1
  br i1 %cmp4.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %lor.lhs.false3.i, %lor.lhs.false2.i, %lor.lhs.false.i, %if.end
  store i8* null, i8** %retval.i
  br label %mz_zip_reader_get_cdh.exit

if.end.i:                                         ; preds = %lor.lhs.false3.i
  %16 = load i32* %file_index.addr.i, align 4
  %idxprom.i = zext i32 %16 to i64
  %17 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState5.i = getelementptr inbounds %struct.mz_zip_archive_tag* %17, i32 0, i32 12
  %18 = load %struct.mz_zip_internal_state_tag** %m_pState5.i, align 8
  %m_central_dir_offsets.i = getelementptr inbounds %struct.mz_zip_internal_state_tag* %18, i32 0, i32 1
  %m_p.i = getelementptr inbounds %struct.mz_zip_array* %m_central_dir_offsets.i, i32 0, i32 0
  %19 = load i8** %m_p.i, align 8
  %20 = bitcast i8* %19 to i32*
  %arrayidx.i = getelementptr inbounds i32* %20, i64 %idxprom.i
  %21 = load i32* %arrayidx.i, align 4
  %idxprom6.i = zext i32 %21 to i64
  %22 = load %struct.mz_zip_archive_tag** %pZip.addr.i, align 8
  %m_pState7.i = getelementptr inbounds %struct.mz_zip_archive_tag* %22, i32 0, i32 12
  %23 = load %struct.mz_zip_internal_state_tag** %m_pState7.i, align 8
  %m_central_dir.i = getelementptr inbounds %struct.mz_zip_internal_state_tag* %23, i32 0, i32 0
  %m_p8.i = getelementptr inbounds %struct.mz_zip_array* %m_central_dir.i, i32 0, i32 0
  %24 = load i8** %m_p8.i, align 8
  %arrayidx9.i = getelementptr inbounds i8* %24, i64 %idxprom6.i
  store i8* %arrayidx9.i, i8** %retval.i
  br label %mz_zip_reader_get_cdh.exit

mz_zip_reader_get_cdh.exit:                       ; preds = %if.end.i, %if.then.i
  %25 = load i8** %retval.i
  store i8* %25, i8** %pSrc_central_header, align 8
  %cmp3 = icmp eq i8* null, %25
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %mz_zip_reader_get_cdh.exit
  store i32 0, i32* %retval
  br label %return

if.end5:                                          ; preds = %mz_zip_reader_get_cdh.exit
  %26 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState6 = getelementptr inbounds %struct.mz_zip_archive_tag* %26, i32 0, i32 12
  %27 = load %struct.mz_zip_internal_state_tag** %m_pState6, align 8
  store %struct.mz_zip_internal_state_tag* %27, %struct.mz_zip_internal_state_tag** %pState, align 8
  %28 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %call7 = call i32 @mz_zip_writer_compute_padding_needed_for_file_alignment(%struct.mz_zip_archive_tag* %28)
  store i32 %call7, i32* %num_alignment_padding_bytes, align 4
  %29 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive_tag* %29, i32 0, i32 2
  %30 = load i32* %m_total_files, align 4
  %cmp8 = icmp eq i32 %30, 65535
  br i1 %cmp8, label %if.then14, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %if.end5
  %31 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %31, i32 0, i32 0
  %32 = load i64* %m_archive_size, align 8
  %33 = load i32* %num_alignment_padding_bytes, align 4
  %conv = zext i32 %33 to i64
  %add = add i64 %32, %conv
  %add10 = add i64 %add, 30
  %add11 = add i64 %add10, 46
  %cmp12 = icmp ugt i64 %add11, 4294967295
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %lor.lhs.false9, %if.end5
  store i32 0, i32* %retval
  br label %return

if.end15:                                         ; preds = %lor.lhs.false9
  %34 = load i8** %pSrc_central_header, align 8
  %add.ptr = getelementptr inbounds i8* %34, i64 42
  %35 = bitcast i8* %add.ptr to i32*
  %36 = load i32* %35, align 4
  %conv16 = zext i32 %36 to i64
  store i64 %conv16, i64* %cur_src_file_ofs, align 8
  %37 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size17 = getelementptr inbounds %struct.mz_zip_archive_tag* %37, i32 0, i32 0
  %38 = load i64* %m_archive_size17, align 8
  store i64 %38, i64* %cur_dst_file_ofs, align 8
  %39 = load %struct.mz_zip_archive_tag** %pSource_zip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive_tag* %39, i32 0, i32 9
  %40 = load i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %41 = load %struct.mz_zip_archive_tag** %pSource_zip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %41, i32 0, i32 11
  %42 = load i8** %m_pIO_opaque, align 8
  %43 = load i64* %cur_src_file_ofs, align 8
  %44 = load i8** %pLocal_header, align 8
  %call18 = call i64 %40(i8* %42, i64 %43, i8* %44, i64 30)
  %cmp19 = icmp ne i64 %call18, 30
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.end15
  store i32 0, i32* %retval
  br label %return

if.end22:                                         ; preds = %if.end15
  %45 = load i8** %pLocal_header, align 8
  %46 = bitcast i8* %45 to i32*
  %47 = load i32* %46, align 4
  %cmp23 = icmp ne i32 %47, 67324752
  br i1 %cmp23, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.end22
  store i32 0, i32* %retval
  br label %return

if.end26:                                         ; preds = %if.end22
  %48 = load i64* %cur_src_file_ofs, align 8
  %add27 = add i64 %48, 30
  store i64 %add27, i64* %cur_src_file_ofs, align 8
  %49 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %50 = load i64* %cur_dst_file_ofs, align 8
  %51 = load i32* %num_alignment_padding_bytes, align 4
  %call28 = call i32 @mz_zip_writer_write_zeros(%struct.mz_zip_archive_tag* %49, i64 %50, i32 %51)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.end31, label %if.then30

if.then30:                                        ; preds = %if.end26
  store i32 0, i32* %retval
  br label %return

if.end31:                                         ; preds = %if.end26
  %52 = load i32* %num_alignment_padding_bytes, align 4
  %conv32 = zext i32 %52 to i64
  %53 = load i64* %cur_dst_file_ofs, align 8
  %add33 = add i64 %53, %conv32
  store i64 %add33, i64* %cur_dst_file_ofs, align 8
  %54 = load i64* %cur_dst_file_ofs, align 8
  store i64 %54, i64* %local_dir_header_ofs, align 8
  %55 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive_tag* %55, i32 0, i32 4
  %56 = load i32* %m_file_offset_alignment, align 4
  %tobool34 = icmp ne i32 %56, 0
  br i1 %tobool34, label %if.then35, label %if.end40

if.then35:                                        ; preds = %if.end31
  %57 = load i64* %local_dir_header_ofs, align 8
  %58 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_file_offset_alignment36 = getelementptr inbounds %struct.mz_zip_archive_tag* %58, i32 0, i32 4
  %59 = load i32* %m_file_offset_alignment36, align 4
  %sub = sub i32 %59, 1
  %conv37 = zext i32 %sub to i64
  %and = and i64 %57, %conv37
  %cmp38 = icmp eq i64 %and, 0
  br i1 %cmp38, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then35
  br label %cond.end

cond.false:                                       ; preds = %if.then35
  call void @__assert_fail(i8* getelementptr inbounds ([66 x i8]* @.str20, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 4626, i8* getelementptr inbounds ([87 x i8]* @__PRETTY_FUNCTION__.mz_zip_writer_add_from_zip_reader, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %60, %cond.true
  br label %if.end40

if.end40:                                         ; preds = %cond.end, %if.end31
  %61 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive_tag* %61, i32 0, i32 10
  %62 = load i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %63 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque41 = getelementptr inbounds %struct.mz_zip_archive_tag* %63, i32 0, i32 11
  %64 = load i8** %m_pIO_opaque41, align 8
  %65 = load i64* %cur_dst_file_ofs, align 8
  %66 = load i8** %pLocal_header, align 8
  %call42 = call i64 %62(i8* %64, i64 %65, i8* %66, i64 30)
  %cmp43 = icmp ne i64 %call42, 30
  br i1 %cmp43, label %if.then45, label %if.end46

if.then45:                                        ; preds = %if.end40
  store i32 0, i32* %retval
  br label %return

if.end46:                                         ; preds = %if.end40
  %67 = load i64* %cur_dst_file_ofs, align 8
  %add47 = add i64 %67, 30
  store i64 %add47, i64* %cur_dst_file_ofs, align 8
  %68 = load i8** %pLocal_header, align 8
  %add.ptr48 = getelementptr inbounds i8* %68, i64 26
  %69 = bitcast i8* %add.ptr48 to i16*
  %70 = load i16* %69, align 2
  %conv49 = zext i16 %70 to i32
  %71 = load i8** %pLocal_header, align 8
  %add.ptr50 = getelementptr inbounds i8* %71, i64 28
  %72 = bitcast i8* %add.ptr50 to i16*
  %73 = load i16* %72, align 2
  %conv51 = zext i16 %73 to i32
  %add52 = add nsw i32 %conv49, %conv51
  store i32 %add52, i32* %n, align 4
  %74 = load i32* %n, align 4
  %75 = load i8** %pSrc_central_header, align 8
  %add.ptr53 = getelementptr inbounds i8* %75, i64 20
  %76 = bitcast i8* %add.ptr53 to i32*
  %77 = load i32* %76, align 4
  %add54 = add i32 %74, %77
  %conv55 = zext i32 %add54 to i64
  store i64 %conv55, i64* %comp_bytes_remaining, align 8
  %78 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive_tag* %78, i32 0, i32 5
  %79 = load i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %80 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %80, i32 0, i32 8
  %81 = load i8** %m_pAlloc_opaque, align 8
  %82 = load i64* %comp_bytes_remaining, align 8
  %cmp56 = icmp ult i64 65536, %82
  br i1 %cmp56, label %cond.true58, label %cond.false59

cond.true58:                                      ; preds = %if.end46
  br label %cond.end60

cond.false59:                                     ; preds = %if.end46
  %83 = load i64* %comp_bytes_remaining, align 8
  br label %cond.end60

cond.end60:                                       ; preds = %cond.false59, %cond.true58
  %cond = phi i64 [ 65536, %cond.true58 ], [ %83, %cond.false59 ]
  %cmp61 = icmp ugt i64 16, %cond
  br i1 %cmp61, label %cond.true63, label %cond.false64

cond.true63:                                      ; preds = %cond.end60
  br label %cond.end71

cond.false64:                                     ; preds = %cond.end60
  %84 = load i64* %comp_bytes_remaining, align 8
  %cmp65 = icmp ult i64 65536, %84
  br i1 %cmp65, label %cond.true67, label %cond.false68

cond.true67:                                      ; preds = %cond.false64
  br label %cond.end69

cond.false68:                                     ; preds = %cond.false64
  %85 = load i64* %comp_bytes_remaining, align 8
  br label %cond.end69

cond.end69:                                       ; preds = %cond.false68, %cond.true67
  %cond70 = phi i64 [ 65536, %cond.true67 ], [ %85, %cond.false68 ]
  br label %cond.end71

cond.end71:                                       ; preds = %cond.end69, %cond.true63
  %cond72 = phi i64 [ 16, %cond.true63 ], [ %cond70, %cond.end69 ]
  %call73 = call i8* %79(i8* %81, i64 1, i64 %cond72)
  store i8* %call73, i8** %pBuf, align 8
  %cmp74 = icmp eq i8* null, %call73
  br i1 %cmp74, label %if.then76, label %if.end77

if.then76:                                        ; preds = %cond.end71
  store i32 0, i32* %retval
  br label %return

if.end77:                                         ; preds = %cond.end71
  br label %while.cond

while.cond:                                       ; preds = %if.end108, %if.end77
  %86 = load i64* %comp_bytes_remaining, align 8
  %tobool78 = icmp ne i64 %86, 0
  br i1 %tobool78, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %87 = load i64* %comp_bytes_remaining, align 8
  %cmp79 = icmp ult i64 65536, %87
  br i1 %cmp79, label %cond.true81, label %cond.false82

cond.true81:                                      ; preds = %while.body
  br label %cond.end83

cond.false82:                                     ; preds = %while.body
  %88 = load i64* %comp_bytes_remaining, align 8
  br label %cond.end83

cond.end83:                                       ; preds = %cond.false82, %cond.true81
  %cond84 = phi i64 [ 65536, %cond.true81 ], [ %88, %cond.false82 ]
  %conv85 = trunc i64 %cond84 to i32
  store i32 %conv85, i32* %n, align 4
  %89 = load %struct.mz_zip_archive_tag** %pSource_zip.addr, align 8
  %m_pRead86 = getelementptr inbounds %struct.mz_zip_archive_tag* %89, i32 0, i32 9
  %90 = load i64 (i8*, i64, i8*, i64)** %m_pRead86, align 8
  %91 = load %struct.mz_zip_archive_tag** %pSource_zip.addr, align 8
  %m_pIO_opaque87 = getelementptr inbounds %struct.mz_zip_archive_tag* %91, i32 0, i32 11
  %92 = load i8** %m_pIO_opaque87, align 8
  %93 = load i64* %cur_src_file_ofs, align 8
  %94 = load i8** %pBuf, align 8
  %95 = load i32* %n, align 4
  %conv88 = zext i32 %95 to i64
  %call89 = call i64 %90(i8* %92, i64 %93, i8* %94, i64 %conv88)
  %96 = load i32* %n, align 4
  %conv90 = zext i32 %96 to i64
  %cmp91 = icmp ne i64 %call89, %conv90
  br i1 %cmp91, label %if.then93, label %if.end95

if.then93:                                        ; preds = %cond.end83
  %97 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive_tag* %97, i32 0, i32 6
  %98 = load void (i8*, i8*)** %m_pFree, align 8
  %99 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque94 = getelementptr inbounds %struct.mz_zip_archive_tag* %99, i32 0, i32 8
  %100 = load i8** %m_pAlloc_opaque94, align 8
  %101 = load i8** %pBuf, align 8
  call void %98(i8* %100, i8* %101)
  store i32 0, i32* %retval
  br label %return

if.end95:                                         ; preds = %cond.end83
  %102 = load i32* %n, align 4
  %conv96 = zext i32 %102 to i64
  %103 = load i64* %cur_src_file_ofs, align 8
  %add97 = add i64 %103, %conv96
  store i64 %add97, i64* %cur_src_file_ofs, align 8
  %104 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite98 = getelementptr inbounds %struct.mz_zip_archive_tag* %104, i32 0, i32 10
  %105 = load i64 (i8*, i64, i8*, i64)** %m_pWrite98, align 8
  %106 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque99 = getelementptr inbounds %struct.mz_zip_archive_tag* %106, i32 0, i32 11
  %107 = load i8** %m_pIO_opaque99, align 8
  %108 = load i64* %cur_dst_file_ofs, align 8
  %109 = load i8** %pBuf, align 8
  %110 = load i32* %n, align 4
  %conv100 = zext i32 %110 to i64
  %call101 = call i64 %105(i8* %107, i64 %108, i8* %109, i64 %conv100)
  %111 = load i32* %n, align 4
  %conv102 = zext i32 %111 to i64
  %cmp103 = icmp ne i64 %call101, %conv102
  br i1 %cmp103, label %if.then105, label %if.end108

if.then105:                                       ; preds = %if.end95
  %112 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree106 = getelementptr inbounds %struct.mz_zip_archive_tag* %112, i32 0, i32 6
  %113 = load void (i8*, i8*)** %m_pFree106, align 8
  %114 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque107 = getelementptr inbounds %struct.mz_zip_archive_tag* %114, i32 0, i32 8
  %115 = load i8** %m_pAlloc_opaque107, align 8
  %116 = load i8** %pBuf, align 8
  call void %113(i8* %115, i8* %116)
  store i32 0, i32* %retval
  br label %return

if.end108:                                        ; preds = %if.end95
  %117 = load i32* %n, align 4
  %conv109 = zext i32 %117 to i64
  %118 = load i64* %cur_dst_file_ofs, align 8
  %add110 = add i64 %118, %conv109
  store i64 %add110, i64* %cur_dst_file_ofs, align 8
  %119 = load i32* %n, align 4
  %conv111 = zext i32 %119 to i64
  %120 = load i64* %comp_bytes_remaining, align 8
  %sub112 = sub i64 %120, %conv111
  store i64 %sub112, i64* %comp_bytes_remaining, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %121 = load i8** %pLocal_header, align 8
  %add.ptr113 = getelementptr inbounds i8* %121, i64 6
  %122 = bitcast i8* %add.ptr113 to i16*
  %123 = load i16* %122, align 2
  %conv114 = zext i16 %123 to i32
  store i32 %conv114, i32* %bit_flags, align 4
  %124 = load i32* %bit_flags, align 4
  %and115 = and i32 %124, 8
  %tobool116 = icmp ne i32 %and115, 0
  br i1 %tobool116, label %if.then117, label %if.end147

if.then117:                                       ; preds = %while.end
  %125 = load %struct.mz_zip_archive_tag** %pSource_zip.addr, align 8
  %m_pRead118 = getelementptr inbounds %struct.mz_zip_archive_tag* %125, i32 0, i32 9
  %126 = load i64 (i8*, i64, i8*, i64)** %m_pRead118, align 8
  %127 = load %struct.mz_zip_archive_tag** %pSource_zip.addr, align 8
  %m_pIO_opaque119 = getelementptr inbounds %struct.mz_zip_archive_tag* %127, i32 0, i32 11
  %128 = load i8** %m_pIO_opaque119, align 8
  %129 = load i64* %cur_src_file_ofs, align 8
  %130 = load i8** %pBuf, align 8
  %call120 = call i64 %126(i8* %128, i64 %129, i8* %130, i64 16)
  %cmp121 = icmp ne i64 %call120, 16
  br i1 %cmp121, label %if.then123, label %if.end126

if.then123:                                       ; preds = %if.then117
  %131 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree124 = getelementptr inbounds %struct.mz_zip_archive_tag* %131, i32 0, i32 6
  %132 = load void (i8*, i8*)** %m_pFree124, align 8
  %133 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque125 = getelementptr inbounds %struct.mz_zip_archive_tag* %133, i32 0, i32 8
  %134 = load i8** %m_pAlloc_opaque125, align 8
  %135 = load i8** %pBuf, align 8
  call void %132(i8* %134, i8* %135)
  store i32 0, i32* %retval
  br label %return

if.end126:                                        ; preds = %if.then117
  %136 = load i8** %pBuf, align 8
  %137 = bitcast i8* %136 to i32*
  %138 = load i32* %137, align 4
  %cmp127 = icmp eq i32 %138, 134695760
  %cond129 = select i1 %cmp127, i32 4, i32 3
  %conv130 = sext i32 %cond129 to i64
  %mul = mul i64 4, %conv130
  %conv131 = trunc i64 %mul to i32
  store i32 %conv131, i32* %n, align 4
  %139 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite132 = getelementptr inbounds %struct.mz_zip_archive_tag* %139, i32 0, i32 10
  %140 = load i64 (i8*, i64, i8*, i64)** %m_pWrite132, align 8
  %141 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque133 = getelementptr inbounds %struct.mz_zip_archive_tag* %141, i32 0, i32 11
  %142 = load i8** %m_pIO_opaque133, align 8
  %143 = load i64* %cur_dst_file_ofs, align 8
  %144 = load i8** %pBuf, align 8
  %145 = load i32* %n, align 4
  %conv134 = zext i32 %145 to i64
  %call135 = call i64 %140(i8* %142, i64 %143, i8* %144, i64 %conv134)
  %146 = load i32* %n, align 4
  %conv136 = zext i32 %146 to i64
  %cmp137 = icmp ne i64 %call135, %conv136
  br i1 %cmp137, label %if.then139, label %if.end142

if.then139:                                       ; preds = %if.end126
  %147 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree140 = getelementptr inbounds %struct.mz_zip_archive_tag* %147, i32 0, i32 6
  %148 = load void (i8*, i8*)** %m_pFree140, align 8
  %149 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque141 = getelementptr inbounds %struct.mz_zip_archive_tag* %149, i32 0, i32 8
  %150 = load i8** %m_pAlloc_opaque141, align 8
  %151 = load i8** %pBuf, align 8
  call void %148(i8* %150, i8* %151)
  store i32 0, i32* %retval
  br label %return

if.end142:                                        ; preds = %if.end126
  %152 = load i32* %n, align 4
  %conv143 = zext i32 %152 to i64
  %153 = load i64* %cur_src_file_ofs, align 8
  %add144 = add i64 %153, %conv143
  store i64 %add144, i64* %cur_src_file_ofs, align 8
  %154 = load i32* %n, align 4
  %conv145 = zext i32 %154 to i64
  %155 = load i64* %cur_dst_file_ofs, align 8
  %add146 = add i64 %155, %conv145
  store i64 %add146, i64* %cur_dst_file_ofs, align 8
  br label %if.end147

if.end147:                                        ; preds = %if.end142, %while.end
  %156 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pFree148 = getelementptr inbounds %struct.mz_zip_archive_tag* %156, i32 0, i32 6
  %157 = load void (i8*, i8*)** %m_pFree148, align 8
  %158 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque149 = getelementptr inbounds %struct.mz_zip_archive_tag* %158, i32 0, i32 8
  %159 = load i8** %m_pAlloc_opaque149, align 8
  %160 = load i8** %pBuf, align 8
  call void %157(i8* %159, i8* %160)
  %161 = load i64* %cur_dst_file_ofs, align 8
  %cmp150 = icmp ugt i64 %161, 4294967295
  br i1 %cmp150, label %if.then152, label %if.end153

if.then152:                                       ; preds = %if.end147
  store i32 0, i32* %retval
  br label %return

if.end153:                                        ; preds = %if.end147
  %162 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag* %162, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %163 = load i64* %m_size, align 8
  store i64 %163, i64* %orig_central_dir_size, align 8
  %164 = bitcast [46 x i8]* %central_header to i8*
  %165 = load i8** %pSrc_central_header, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %164, i8* %165, i64 46, i32 1, i1 false)
  %arraydecay154 = getelementptr inbounds [46 x i8]* %central_header, i32 0, i32 0
  %add.ptr155 = getelementptr inbounds i8* %arraydecay154, i64 42
  %166 = load i64* %local_dir_header_ofs, align 8
  %conv156 = trunc i64 %166 to i32
  call void @mz_write_le32(i8* %add.ptr155, i32 %conv156)
  %167 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %168 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir157 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %168, i32 0, i32 0
  %arraydecay158 = getelementptr inbounds [46 x i8]* %central_header, i32 0, i32 0
  store %struct.mz_zip_archive_tag* %167, %struct.mz_zip_archive_tag** %pZip.addr.i202, align 8
  store %struct.mz_zip_array* %m_central_dir157, %struct.mz_zip_array** %pArray.addr.i203, align 8
  store i8* %arraydecay158, i8** %pElements.addr.i, align 8
  store i64 46, i64* %n.addr.i, align 8
  %169 = load %struct.mz_zip_array** %pArray.addr.i203, align 8
  %m_size.i204 = getelementptr inbounds %struct.mz_zip_array* %169, i32 0, i32 1
  %170 = load i64* %m_size.i204, align 8
  store i64 %170, i64* %orig_size.i, align 8
  %171 = load %struct.mz_zip_archive_tag** %pZip.addr.i202, align 8
  %172 = load %struct.mz_zip_array** %pArray.addr.i203, align 8
  %173 = load i64* %orig_size.i, align 8
  %174 = load i64* %n.addr.i, align 8
  %add.i = add i64 %173, %174
  store %struct.mz_zip_archive_tag* %171, %struct.mz_zip_archive_tag** %pZip.addr.i.i, align 8
  store %struct.mz_zip_array* %172, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  store i64 %add.i, i64* %new_size.addr.i.i, align 8
  store i32 1, i32* %growing.addr.i.i, align 4
  %175 = load i64* %new_size.addr.i.i, align 8
  %176 = load %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %m_capacity.i.i = getelementptr inbounds %struct.mz_zip_array* %176, i32 0, i32 2
  %177 = load i64* %m_capacity.i.i, align 8
  %cmp.i.i = icmp ugt i64 %175, %177
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end2.i.i

if.then.i.i:                                      ; preds = %if.end153
  %178 = load %struct.mz_zip_archive_tag** %pZip.addr.i.i, align 8
  %179 = load %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %180 = load i64* %new_size.addr.i.i, align 8
  %181 = load i32* %growing.addr.i.i, align 4
  %call.i.i = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %178, %struct.mz_zip_array* %179, i64 %180, i32 %181) #2
  %tobool.i.i = icmp ne i32 %call.i.i, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then1.i.i

if.then1.i.i:                                     ; preds = %if.then.i.i
  store i32 0, i32* %retval.i.i
  br label %mz_zip_array_resize.exit.i

if.end.i.i:                                       ; preds = %if.then.i.i
  br label %if.end2.i.i

if.end2.i.i:                                      ; preds = %if.end.i.i, %if.end153
  %182 = load i64* %new_size.addr.i.i, align 8
  %183 = load %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %m_size.i.i = getelementptr inbounds %struct.mz_zip_array* %183, i32 0, i32 1
  store i64 %182, i64* %m_size.i.i, align 8
  store i32 1, i32* %retval.i.i
  br label %mz_zip_array_resize.exit.i

mz_zip_array_resize.exit.i:                       ; preds = %if.end2.i.i, %if.then1.i.i
  %184 = load i32* %retval.i.i
  %tobool.i205 = icmp ne i32 %184, 0
  br i1 %tobool.i205, label %if.end.i208, label %if.then.i206

if.then.i206:                                     ; preds = %mz_zip_array_resize.exit.i
  store i32 0, i32* %retval.i201
  br label %mz_zip_array_push_back.exit

if.end.i208:                                      ; preds = %mz_zip_array_resize.exit.i
  %185 = load %struct.mz_zip_array** %pArray.addr.i203, align 8
  %m_p.i207 = getelementptr inbounds %struct.mz_zip_array* %185, i32 0, i32 0
  %186 = load i8** %m_p.i207, align 8
  %187 = load i64* %orig_size.i, align 8
  %188 = load %struct.mz_zip_array** %pArray.addr.i203, align 8
  %m_element_size.i = getelementptr inbounds %struct.mz_zip_array* %188, i32 0, i32 3
  %189 = load i32* %m_element_size.i, align 4
  %conv.i = zext i32 %189 to i64
  %mul.i = mul i64 %187, %conv.i
  %add.ptr.i = getelementptr inbounds i8* %186, i64 %mul.i
  %190 = load i8** %pElements.addr.i, align 8
  %191 = load i64* %n.addr.i, align 8
  %192 = load %struct.mz_zip_array** %pArray.addr.i203, align 8
  %m_element_size1.i = getelementptr inbounds %struct.mz_zip_array* %192, i32 0, i32 3
  %193 = load i32* %m_element_size1.i, align 4
  %conv2.i = zext i32 %193 to i64
  %mul3.i = mul i64 %191, %conv2.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr.i, i8* %190, i64 %mul3.i, i32 1, i1 false) #2
  store i32 1, i32* %retval.i201
  br label %mz_zip_array_push_back.exit

mz_zip_array_push_back.exit:                      ; preds = %if.end.i208, %if.then.i206
  %194 = load i32* %retval.i201
  %tobool160 = icmp ne i32 %194, 0
  br i1 %tobool160, label %if.end162, label %if.then161

if.then161:                                       ; preds = %mz_zip_array_push_back.exit
  store i32 0, i32* %retval
  br label %return

if.end162:                                        ; preds = %mz_zip_array_push_back.exit
  %195 = load i8** %pSrc_central_header, align 8
  %add.ptr163 = getelementptr inbounds i8* %195, i64 28
  %196 = bitcast i8* %add.ptr163 to i16*
  %197 = load i16* %196, align 2
  %conv164 = zext i16 %197 to i32
  %198 = load i8** %pSrc_central_header, align 8
  %add.ptr165 = getelementptr inbounds i8* %198, i64 30
  %199 = bitcast i8* %add.ptr165 to i16*
  %200 = load i16* %199, align 2
  %conv166 = zext i16 %200 to i32
  %add167 = add nsw i32 %conv164, %conv166
  %201 = load i8** %pSrc_central_header, align 8
  %add.ptr168 = getelementptr inbounds i8* %201, i64 32
  %202 = bitcast i8* %add.ptr168 to i16*
  %203 = load i16* %202, align 2
  %conv169 = zext i16 %203 to i32
  %add170 = add nsw i32 %add167, %conv169
  store i32 %add170, i32* %n, align 4
  %204 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %205 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir171 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %205, i32 0, i32 0
  %206 = load i8** %pSrc_central_header, align 8
  %add.ptr172 = getelementptr inbounds i8* %206, i64 46
  %207 = load i32* %n, align 4
  %conv173 = zext i32 %207 to i64
  store %struct.mz_zip_archive_tag* %204, %struct.mz_zip_archive_tag** %pZip.addr.i215, align 8
  store %struct.mz_zip_array* %m_central_dir171, %struct.mz_zip_array** %pArray.addr.i216, align 8
  store i8* %add.ptr172, i8** %pElements.addr.i217, align 8
  store i64 %conv173, i64* %n.addr.i218, align 8
  %208 = load %struct.mz_zip_array** %pArray.addr.i216, align 8
  %m_size.i220 = getelementptr inbounds %struct.mz_zip_array* %208, i32 0, i32 1
  %209 = load i64* %m_size.i220, align 8
  store i64 %209, i64* %orig_size.i219, align 8
  %210 = load %struct.mz_zip_archive_tag** %pZip.addr.i215, align 8
  %211 = load %struct.mz_zip_array** %pArray.addr.i216, align 8
  %212 = load i64* %orig_size.i219, align 8
  %213 = load i64* %n.addr.i218, align 8
  %add.i221 = add i64 %212, %213
  store %struct.mz_zip_archive_tag* %210, %struct.mz_zip_archive_tag** %pZip.addr.i.i210, align 8
  store %struct.mz_zip_array* %211, %struct.mz_zip_array** %pArray.addr.i.i211, align 8
  store i64 %add.i221, i64* %new_size.addr.i.i212, align 8
  store i32 1, i32* %growing.addr.i.i213, align 4
  %214 = load i64* %new_size.addr.i.i212, align 8
  %215 = load %struct.mz_zip_array** %pArray.addr.i.i211, align 8
  %m_capacity.i.i222 = getelementptr inbounds %struct.mz_zip_array* %215, i32 0, i32 2
  %216 = load i64* %m_capacity.i.i222, align 8
  %cmp.i.i223 = icmp ugt i64 %214, %216
  br i1 %cmp.i.i223, label %if.then.i.i226, label %if.end2.i.i230

if.then.i.i226:                                   ; preds = %if.end162
  %217 = load %struct.mz_zip_archive_tag** %pZip.addr.i.i210, align 8
  %218 = load %struct.mz_zip_array** %pArray.addr.i.i211, align 8
  %219 = load i64* %new_size.addr.i.i212, align 8
  %220 = load i32* %growing.addr.i.i213, align 4
  %call.i.i224 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %217, %struct.mz_zip_array* %218, i64 %219, i32 %220) #2
  %tobool.i.i225 = icmp ne i32 %call.i.i224, 0
  br i1 %tobool.i.i225, label %if.end.i.i228, label %if.then1.i.i227

if.then1.i.i227:                                  ; preds = %if.then.i.i226
  store i32 0, i32* %retval.i.i209
  br label %mz_zip_array_resize.exit.i232

if.end.i.i228:                                    ; preds = %if.then.i.i226
  br label %if.end2.i.i230

if.end2.i.i230:                                   ; preds = %if.end.i.i228, %if.end162
  %221 = load i64* %new_size.addr.i.i212, align 8
  %222 = load %struct.mz_zip_array** %pArray.addr.i.i211, align 8
  %m_size.i.i229 = getelementptr inbounds %struct.mz_zip_array* %222, i32 0, i32 1
  store i64 %221, i64* %m_size.i.i229, align 8
  store i32 1, i32* %retval.i.i209
  br label %mz_zip_array_resize.exit.i232

mz_zip_array_resize.exit.i232:                    ; preds = %if.end2.i.i230, %if.then1.i.i227
  %223 = load i32* %retval.i.i209
  %tobool.i231 = icmp ne i32 %223, 0
  br i1 %tobool.i231, label %if.end.i242, label %if.then.i233

if.then.i233:                                     ; preds = %mz_zip_array_resize.exit.i232
  store i32 0, i32* %retval.i214
  br label %mz_zip_array_push_back.exit243

if.end.i242:                                      ; preds = %mz_zip_array_resize.exit.i232
  %224 = load %struct.mz_zip_array** %pArray.addr.i216, align 8
  %m_p.i234 = getelementptr inbounds %struct.mz_zip_array* %224, i32 0, i32 0
  %225 = load i8** %m_p.i234, align 8
  %226 = load i64* %orig_size.i219, align 8
  %227 = load %struct.mz_zip_array** %pArray.addr.i216, align 8
  %m_element_size.i235 = getelementptr inbounds %struct.mz_zip_array* %227, i32 0, i32 3
  %228 = load i32* %m_element_size.i235, align 4
  %conv.i236 = zext i32 %228 to i64
  %mul.i237 = mul i64 %226, %conv.i236
  %add.ptr.i238 = getelementptr inbounds i8* %225, i64 %mul.i237
  %229 = load i8** %pElements.addr.i217, align 8
  %230 = load i64* %n.addr.i218, align 8
  %231 = load %struct.mz_zip_array** %pArray.addr.i216, align 8
  %m_element_size1.i239 = getelementptr inbounds %struct.mz_zip_array* %231, i32 0, i32 3
  %232 = load i32* %m_element_size1.i239, align 4
  %conv2.i240 = zext i32 %232 to i64
  %mul3.i241 = mul i64 %230, %conv2.i240
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr.i238, i8* %229, i64 %mul3.i241, i32 1, i1 false) #2
  store i32 1, i32* %retval.i214
  br label %mz_zip_array_push_back.exit243

mz_zip_array_push_back.exit243:                   ; preds = %if.end.i242, %if.then.i233
  %233 = load i32* %retval.i214
  %tobool175 = icmp ne i32 %233, 0
  br i1 %tobool175, label %if.end179, label %if.then176

if.then176:                                       ; preds = %mz_zip_array_push_back.exit243
  %234 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %235 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir177 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %235, i32 0, i32 0
  %236 = load i64* %orig_central_dir_size, align 8
  store %struct.mz_zip_archive_tag* %234, %struct.mz_zip_archive_tag** %pZip.addr.i245, align 8
  store %struct.mz_zip_array* %m_central_dir177, %struct.mz_zip_array** %pArray.addr.i246, align 8
  store i64 %236, i64* %new_size.addr.i247, align 8
  store i32 0, i32* %growing.addr.i248, align 4
  %237 = load i64* %new_size.addr.i247, align 8
  %238 = load %struct.mz_zip_array** %pArray.addr.i246, align 8
  %m_capacity.i249 = getelementptr inbounds %struct.mz_zip_array* %238, i32 0, i32 2
  %239 = load i64* %m_capacity.i249, align 8
  %cmp.i250 = icmp ugt i64 %237, %239
  br i1 %cmp.i250, label %if.then.i253, label %if.end2.i257

if.then.i253:                                     ; preds = %if.then176
  %240 = load %struct.mz_zip_archive_tag** %pZip.addr.i245, align 8
  %241 = load %struct.mz_zip_array** %pArray.addr.i246, align 8
  %242 = load i64* %new_size.addr.i247, align 8
  %243 = load i32* %growing.addr.i248, align 4
  %call.i251 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %240, %struct.mz_zip_array* %241, i64 %242, i32 %243) #2
  %tobool.i252 = icmp ne i32 %call.i251, 0
  br i1 %tobool.i252, label %if.end.i255, label %if.then1.i254

if.then1.i254:                                    ; preds = %if.then.i253
  store i32 0, i32* %retval.i244
  br label %mz_zip_array_resize.exit258

if.end.i255:                                      ; preds = %if.then.i253
  br label %if.end2.i257

if.end2.i257:                                     ; preds = %if.end.i255, %if.then176
  %244 = load i64* %new_size.addr.i247, align 8
  %245 = load %struct.mz_zip_array** %pArray.addr.i246, align 8
  %m_size.i256 = getelementptr inbounds %struct.mz_zip_array* %245, i32 0, i32 1
  store i64 %244, i64* %m_size.i256, align 8
  store i32 1, i32* %retval.i244
  br label %mz_zip_array_resize.exit258

mz_zip_array_resize.exit258:                      ; preds = %if.end2.i257, %if.then1.i254
  %246 = load i32* %retval.i244
  store i32 0, i32* %retval
  br label %return

if.end179:                                        ; preds = %mz_zip_array_push_back.exit243
  %247 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir180 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %247, i32 0, i32 0
  %m_size181 = getelementptr inbounds %struct.mz_zip_array* %m_central_dir180, i32 0, i32 1
  %248 = load i64* %m_size181, align 8
  %cmp182 = icmp ugt i64 %248, 4294967295
  br i1 %cmp182, label %if.then184, label %if.end185

if.then184:                                       ; preds = %if.end179
  store i32 0, i32* %retval
  br label %return

if.end185:                                        ; preds = %if.end179
  %249 = load i64* %orig_central_dir_size, align 8
  %conv186 = trunc i64 %249 to i32
  store i32 %conv186, i32* %n, align 4
  %250 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %251 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %251, i32 0, i32 1
  %252 = bitcast i32* %n to i8*
  store %struct.mz_zip_archive_tag* %250, %struct.mz_zip_archive_tag** %pZip.addr.i265, align 8
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i266, align 8
  store i8* %252, i8** %pElements.addr.i267, align 8
  store i64 1, i64* %n.addr.i268, align 8
  %253 = load %struct.mz_zip_array** %pArray.addr.i266, align 8
  %m_size.i270 = getelementptr inbounds %struct.mz_zip_array* %253, i32 0, i32 1
  %254 = load i64* %m_size.i270, align 8
  store i64 %254, i64* %orig_size.i269, align 8
  %255 = load %struct.mz_zip_archive_tag** %pZip.addr.i265, align 8
  %256 = load %struct.mz_zip_array** %pArray.addr.i266, align 8
  %257 = load i64* %orig_size.i269, align 8
  %258 = load i64* %n.addr.i268, align 8
  %add.i271 = add i64 %257, %258
  store %struct.mz_zip_archive_tag* %255, %struct.mz_zip_archive_tag** %pZip.addr.i.i260, align 8
  store %struct.mz_zip_array* %256, %struct.mz_zip_array** %pArray.addr.i.i261, align 8
  store i64 %add.i271, i64* %new_size.addr.i.i262, align 8
  store i32 1, i32* %growing.addr.i.i263, align 4
  %259 = load i64* %new_size.addr.i.i262, align 8
  %260 = load %struct.mz_zip_array** %pArray.addr.i.i261, align 8
  %m_capacity.i.i272 = getelementptr inbounds %struct.mz_zip_array* %260, i32 0, i32 2
  %261 = load i64* %m_capacity.i.i272, align 8
  %cmp.i.i273 = icmp ugt i64 %259, %261
  br i1 %cmp.i.i273, label %if.then.i.i276, label %if.end2.i.i280

if.then.i.i276:                                   ; preds = %if.end185
  %262 = load %struct.mz_zip_archive_tag** %pZip.addr.i.i260, align 8
  %263 = load %struct.mz_zip_array** %pArray.addr.i.i261, align 8
  %264 = load i64* %new_size.addr.i.i262, align 8
  %265 = load i32* %growing.addr.i.i263, align 4
  %call.i.i274 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %262, %struct.mz_zip_array* %263, i64 %264, i32 %265) #2
  %tobool.i.i275 = icmp ne i32 %call.i.i274, 0
  br i1 %tobool.i.i275, label %if.end.i.i278, label %if.then1.i.i277

if.then1.i.i277:                                  ; preds = %if.then.i.i276
  store i32 0, i32* %retval.i.i259
  br label %mz_zip_array_resize.exit.i282

if.end.i.i278:                                    ; preds = %if.then.i.i276
  br label %if.end2.i.i280

if.end2.i.i280:                                   ; preds = %if.end.i.i278, %if.end185
  %266 = load i64* %new_size.addr.i.i262, align 8
  %267 = load %struct.mz_zip_array** %pArray.addr.i.i261, align 8
  %m_size.i.i279 = getelementptr inbounds %struct.mz_zip_array* %267, i32 0, i32 1
  store i64 %266, i64* %m_size.i.i279, align 8
  store i32 1, i32* %retval.i.i259
  br label %mz_zip_array_resize.exit.i282

mz_zip_array_resize.exit.i282:                    ; preds = %if.end2.i.i280, %if.then1.i.i277
  %268 = load i32* %retval.i.i259
  %tobool.i281 = icmp ne i32 %268, 0
  br i1 %tobool.i281, label %if.end.i292, label %if.then.i283

if.then.i283:                                     ; preds = %mz_zip_array_resize.exit.i282
  store i32 0, i32* %retval.i264
  br label %mz_zip_array_push_back.exit293

if.end.i292:                                      ; preds = %mz_zip_array_resize.exit.i282
  %269 = load %struct.mz_zip_array** %pArray.addr.i266, align 8
  %m_p.i284 = getelementptr inbounds %struct.mz_zip_array* %269, i32 0, i32 0
  %270 = load i8** %m_p.i284, align 8
  %271 = load i64* %orig_size.i269, align 8
  %272 = load %struct.mz_zip_array** %pArray.addr.i266, align 8
  %m_element_size.i285 = getelementptr inbounds %struct.mz_zip_array* %272, i32 0, i32 3
  %273 = load i32* %m_element_size.i285, align 4
  %conv.i286 = zext i32 %273 to i64
  %mul.i287 = mul i64 %271, %conv.i286
  %add.ptr.i288 = getelementptr inbounds i8* %270, i64 %mul.i287
  %274 = load i8** %pElements.addr.i267, align 8
  %275 = load i64* %n.addr.i268, align 8
  %276 = load %struct.mz_zip_array** %pArray.addr.i266, align 8
  %m_element_size1.i289 = getelementptr inbounds %struct.mz_zip_array* %276, i32 0, i32 3
  %277 = load i32* %m_element_size1.i289, align 4
  %conv2.i290 = zext i32 %277 to i64
  %mul3.i291 = mul i64 %275, %conv2.i290
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr.i288, i8* %274, i64 %mul3.i291, i32 1, i1 false) #2
  store i32 1, i32* %retval.i264
  br label %mz_zip_array_push_back.exit293

mz_zip_array_push_back.exit293:                   ; preds = %if.end.i292, %if.then.i283
  %278 = load i32* %retval.i264
  %tobool188 = icmp ne i32 %278, 0
  br i1 %tobool188, label %if.end192, label %if.then189

if.then189:                                       ; preds = %mz_zip_array_push_back.exit293
  %279 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %280 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir190 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %280, i32 0, i32 0
  %281 = load i64* %orig_central_dir_size, align 8
  store %struct.mz_zip_archive_tag* %279, %struct.mz_zip_archive_tag** %pZip.addr.i196, align 8
  store %struct.mz_zip_array* %m_central_dir190, %struct.mz_zip_array** %pArray.addr.i, align 8
  store i64 %281, i64* %new_size.addr.i, align 8
  store i32 0, i32* %growing.addr.i, align 4
  %282 = load i64* %new_size.addr.i, align 8
  %283 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_capacity.i = getelementptr inbounds %struct.mz_zip_array* %283, i32 0, i32 2
  %284 = load i64* %m_capacity.i, align 8
  %cmp.i197 = icmp ugt i64 %282, %284
  br i1 %cmp.i197, label %if.then.i199, label %if.end2.i

if.then.i199:                                     ; preds = %if.then189
  %285 = load %struct.mz_zip_archive_tag** %pZip.addr.i196, align 8
  %286 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %287 = load i64* %new_size.addr.i, align 8
  %288 = load i32* %growing.addr.i, align 4
  %call.i = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %285, %struct.mz_zip_array* %286, i64 %287, i32 %288) #2
  %tobool.i198 = icmp ne i32 %call.i, 0
  br i1 %tobool.i198, label %if.end.i200, label %if.then1.i

if.then1.i:                                       ; preds = %if.then.i199
  store i32 0, i32* %retval.i195
  br label %mz_zip_array_resize.exit

if.end.i200:                                      ; preds = %if.then.i199
  br label %if.end2.i

if.end2.i:                                        ; preds = %if.end.i200, %if.then189
  %289 = load i64* %new_size.addr.i, align 8
  %290 = load %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_size.i = getelementptr inbounds %struct.mz_zip_array* %290, i32 0, i32 1
  store i64 %289, i64* %m_size.i, align 8
  store i32 1, i32* %retval.i195
  br label %mz_zip_array_resize.exit

mz_zip_array_resize.exit:                         ; preds = %if.end2.i, %if.then1.i
  %291 = load i32* %retval.i195
  store i32 0, i32* %retval
  br label %return

if.end192:                                        ; preds = %mz_zip_array_push_back.exit293
  %292 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files193 = getelementptr inbounds %struct.mz_zip_archive_tag* %292, i32 0, i32 2
  %293 = load i32* %m_total_files193, align 4
  %inc = add i32 %293, 1
  store i32 %inc, i32* %m_total_files193, align 4
  %294 = load i64* %cur_dst_file_ofs, align 8
  %295 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size194 = getelementptr inbounds %struct.mz_zip_archive_tag* %295, i32 0, i32 0
  store i64 %294, i64* %m_archive_size194, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end192, %mz_zip_array_resize.exit, %if.then184, %mz_zip_array_resize.exit258, %if.then161, %if.then152, %if.then139, %if.then123, %if.then105, %if.then93, %if.then76, %if.then45, %if.then30, %if.then25, %if.then21, %if.then14, %if.then4, %if.then
  %296 = load i32* %retval
  ret i32 %296
}

; Function Attrs: nounwind uwtable
define internal void @mz_write_le32(i8* %p, i32 %v) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i32* %v.addr, align 4
  %conv = trunc i32 %0 to i8
  %1 = load i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8* %1, i64 0
  store i8 %conv, i8* %arrayidx, align 1
  %2 = load i32* %v.addr, align 4
  %shr = lshr i32 %2, 8
  %conv1 = trunc i32 %shr to i8
  %3 = load i8** %p.addr, align 8
  %arrayidx2 = getelementptr inbounds i8* %3, i64 1
  store i8 %conv1, i8* %arrayidx2, align 1
  %4 = load i32* %v.addr, align 4
  %shr3 = lshr i32 %4, 16
  %conv4 = trunc i32 %shr3 to i8
  %5 = load i8** %p.addr, align 8
  %arrayidx5 = getelementptr inbounds i8* %5, i64 2
  store i8 %conv4, i8* %arrayidx5, align 1
  %6 = load i32* %v.addr, align 4
  %shr6 = lshr i32 %6, 24
  %conv7 = trunc i32 %shr6 to i8
  %7 = load i8** %p.addr, align 8
  %arrayidx8 = getelementptr inbounds i8* %7, i64 3
  store i8 %conv7, i8* %arrayidx8, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_writer_finalize_archive(%struct.mz_zip_archive_tag* %pZip) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %central_dir_ofs = alloca i64, align 8
  %central_dir_size = alloca i64, align 8
  %hdr = alloca [22 x i8], align 16
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive_tag* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %1, i32 0, i32 12
  %2 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive_tag* %3, i32 0, i32 3
  %4 = load i32* %m_zip_mode, align 4
  %cmp = icmp ne i32 %4, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %5 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState3 = getelementptr inbounds %struct.mz_zip_archive_tag* %5, i32 0, i32 12
  %6 = load %struct.mz_zip_internal_state_tag** %m_pState3, align 8
  store %struct.mz_zip_internal_state_tag* %6, %struct.mz_zip_internal_state_tag** %pState, align 8
  %7 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive_tag* %7, i32 0, i32 2
  %8 = load i32* %m_total_files, align 4
  %cmp4 = icmp ugt i32 %8, 65535
  br i1 %cmp4, label %if.then8, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end
  %9 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive_tag* %9, i32 0, i32 0
  %10 = load i64* %m_archive_size, align 8
  %11 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag* %11, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %12 = load i64* %m_size, align 8
  %add = add i64 %10, %12
  %add6 = add i64 %add, 22
  %cmp7 = icmp ugt i64 %add6, 4294967295
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %lor.lhs.false5, %if.end
  store i32 0, i32* %retval
  br label %return

if.end9:                                          ; preds = %lor.lhs.false5
  store i64 0, i64* %central_dir_ofs, align 8
  store i64 0, i64* %central_dir_size, align 8
  %13 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files10 = getelementptr inbounds %struct.mz_zip_archive_tag* %13, i32 0, i32 2
  %14 = load i32* %m_total_files10, align 4
  %tobool11 = icmp ne i32 %14, 0
  br i1 %tobool11, label %if.then12, label %if.end22

if.then12:                                        ; preds = %if.end9
  %15 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size13 = getelementptr inbounds %struct.mz_zip_archive_tag* %15, i32 0, i32 0
  %16 = load i64* %m_archive_size13, align 8
  store i64 %16, i64* %central_dir_ofs, align 8
  %17 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir14 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %17, i32 0, i32 0
  %m_size15 = getelementptr inbounds %struct.mz_zip_array* %m_central_dir14, i32 0, i32 1
  %18 = load i64* %m_size15, align 8
  store i64 %18, i64* %central_dir_size, align 8
  %19 = load i64* %central_dir_ofs, align 8
  %20 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive_tag* %20, i32 0, i32 1
  store i64 %19, i64* %m_central_directory_file_ofs, align 8
  %21 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive_tag* %21, i32 0, i32 10
  %22 = load i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %23 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %23, i32 0, i32 11
  %24 = load i8** %m_pIO_opaque, align 8
  %25 = load i64* %central_dir_ofs, align 8
  %26 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir16 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %26, i32 0, i32 0
  %m_p = getelementptr inbounds %struct.mz_zip_array* %m_central_dir16, i32 0, i32 0
  %27 = load i8** %m_p, align 8
  %28 = load i64* %central_dir_size, align 8
  %call = call i64 %22(i8* %24, i64 %25, i8* %27, i64 %28)
  %29 = load i64* %central_dir_size, align 8
  %cmp17 = icmp ne i64 %call, %29
  br i1 %cmp17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.then12
  store i32 0, i32* %retval
  br label %return

if.end19:                                         ; preds = %if.then12
  %30 = load i64* %central_dir_size, align 8
  %31 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size20 = getelementptr inbounds %struct.mz_zip_archive_tag* %31, i32 0, i32 0
  %32 = load i64* %m_archive_size20, align 8
  %add21 = add i64 %32, %30
  store i64 %add21, i64* %m_archive_size20, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end19, %if.end9
  %33 = bitcast [22 x i8]* %hdr to i8*
  call void @llvm.memset.p0i8.i64(i8* %33, i8 0, i64 22, i32 16, i1 false)
  %arraydecay = getelementptr inbounds [22 x i8]* %hdr, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8* %arraydecay, i64 0
  call void @mz_write_le32(i8* %add.ptr, i32 101010256)
  %arraydecay23 = getelementptr inbounds [22 x i8]* %hdr, i32 0, i32 0
  %add.ptr24 = getelementptr inbounds i8* %arraydecay23, i64 8
  %34 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files25 = getelementptr inbounds %struct.mz_zip_archive_tag* %34, i32 0, i32 2
  %35 = load i32* %m_total_files25, align 4
  %conv = trunc i32 %35 to i16
  call void @mz_write_le16(i8* %add.ptr24, i16 zeroext %conv)
  %arraydecay26 = getelementptr inbounds [22 x i8]* %hdr, i32 0, i32 0
  %add.ptr27 = getelementptr inbounds i8* %arraydecay26, i64 10
  %36 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files28 = getelementptr inbounds %struct.mz_zip_archive_tag* %36, i32 0, i32 2
  %37 = load i32* %m_total_files28, align 4
  %conv29 = trunc i32 %37 to i16
  call void @mz_write_le16(i8* %add.ptr27, i16 zeroext %conv29)
  %arraydecay30 = getelementptr inbounds [22 x i8]* %hdr, i32 0, i32 0
  %add.ptr31 = getelementptr inbounds i8* %arraydecay30, i64 12
  %38 = load i64* %central_dir_size, align 8
  %conv32 = trunc i64 %38 to i32
  call void @mz_write_le32(i8* %add.ptr31, i32 %conv32)
  %arraydecay33 = getelementptr inbounds [22 x i8]* %hdr, i32 0, i32 0
  %add.ptr34 = getelementptr inbounds i8* %arraydecay33, i64 16
  %39 = load i64* %central_dir_ofs, align 8
  %conv35 = trunc i64 %39 to i32
  call void @mz_write_le32(i8* %add.ptr34, i32 %conv35)
  %40 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite36 = getelementptr inbounds %struct.mz_zip_archive_tag* %40, i32 0, i32 10
  %41 = load i64 (i8*, i64, i8*, i64)** %m_pWrite36, align 8
  %42 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pIO_opaque37 = getelementptr inbounds %struct.mz_zip_archive_tag* %42, i32 0, i32 11
  %43 = load i8** %m_pIO_opaque37, align 8
  %44 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size38 = getelementptr inbounds %struct.mz_zip_archive_tag* %44, i32 0, i32 0
  %45 = load i64* %m_archive_size38, align 8
  %arraydecay39 = getelementptr inbounds [22 x i8]* %hdr, i32 0, i32 0
  %call40 = call i64 %41(i8* %43, i64 %45, i8* %arraydecay39, i64 22)
  %cmp41 = icmp ne i64 %call40, 22
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %if.end22
  store i32 0, i32* %retval
  br label %return

if.end44:                                         ; preds = %if.end22
  %46 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag* %46, i32 0, i32 3
  %47 = load %struct._IO_FILE** %m_pFile, align 8
  %tobool45 = icmp ne %struct._IO_FILE* %47, null
  br i1 %tobool45, label %land.lhs.true, label %if.end51

land.lhs.true:                                    ; preds = %if.end44
  %48 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile46 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %48, i32 0, i32 3
  %49 = load %struct._IO_FILE** %m_pFile46, align 8
  %call47 = call i32 @fflush(%struct._IO_FILE* %49)
  %cmp48 = icmp eq i32 %call47, -1
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end51:                                         ; preds = %land.lhs.true, %if.end44
  %50 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_archive_size52 = getelementptr inbounds %struct.mz_zip_archive_tag* %50, i32 0, i32 0
  %51 = load i64* %m_archive_size52, align 8
  %add53 = add i64 %51, 22
  store i64 %add53, i64* %m_archive_size52, align 8
  %52 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_zip_mode54 = getelementptr inbounds %struct.mz_zip_archive_tag* %52, i32 0, i32 3
  store i32 3, i32* %m_zip_mode54, align 4
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end51, %if.then50, %if.then43, %if.then18, %if.then8, %if.then
  %53 = load i32* %retval
  ret i32 %53
}

; Function Attrs: nounwind uwtable
define internal void @mz_write_le16(i8* %p, i16 zeroext %v) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i16, align 2
  store i8* %p, i8** %p.addr, align 8
  store i16 %v, i16* %v.addr, align 2
  %0 = load i16* %v.addr, align 2
  %conv = trunc i16 %0 to i8
  %1 = load i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8* %1, i64 0
  store i8 %conv, i8* %arrayidx, align 1
  %2 = load i16* %v.addr, align 2
  %conv1 = zext i16 %2 to i32
  %shr = ashr i32 %conv1, 8
  %conv2 = trunc i32 %shr to i8
  %3 = load i8** %p.addr, align 8
  %arrayidx3 = getelementptr inbounds i8* %3, i64 1
  store i8 %conv2, i8* %arrayidx3, align 1
  ret void
}

declare i32 @fflush(%struct._IO_FILE*) #4

; Function Attrs: nounwind uwtable
define i32 @mz_zip_writer_finalize_heap_archive(%struct.mz_zip_archive_tag* %pZip, i8** %pBuf, i64* %pSize) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pBuf.addr = alloca i8**, align 8
  %pSize.addr = alloca i64*, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8** %pBuf, i8*** %pBuf.addr, align 8
  store i64* %pSize, i64** %pSize.addr, align 8
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive_tag* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %1, i32 0, i32 12
  %2 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i8*** %pBuf.addr, align 8
  %tobool3 = icmp ne i8** %3, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %4 = load i64** %pSize.addr, align 8
  %tobool5 = icmp ne i64* %4, null
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false4
  %5 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive_tag* %5, i32 0, i32 10
  %6 = load i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %cmp = icmp ne i64 (i8*, i64, i8*, i64)* %6, @mz_zip_heap_write_func
  br i1 %cmp, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end7:                                          ; preds = %if.end
  %7 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %call = call i32 @mz_zip_writer_finalize_archive(%struct.mz_zip_archive_tag* %7)
  %tobool8 = icmp ne i32 %call, 0
  br i1 %tobool8, label %if.end10, label %if.then9

if.then9:                                         ; preds = %if.end7
  store i32 0, i32* %retval
  br label %return

if.end10:                                         ; preds = %if.end7
  %8 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState11 = getelementptr inbounds %struct.mz_zip_archive_tag* %8, i32 0, i32 12
  %9 = load %struct.mz_zip_internal_state_tag** %m_pState11, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag* %9, i32 0, i32 4
  %10 = load i8** %m_pMem, align 8
  %11 = load i8*** %pBuf.addr, align 8
  store i8* %10, i8** %11, align 8
  %12 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState12 = getelementptr inbounds %struct.mz_zip_archive_tag* %12, i32 0, i32 12
  %13 = load %struct.mz_zip_internal_state_tag** %m_pState12, align 8
  %m_mem_size = getelementptr inbounds %struct.mz_zip_internal_state_tag* %13, i32 0, i32 5
  %14 = load i64* %m_mem_size, align 8
  %15 = load i64** %pSize.addr, align 8
  store i64 %14, i64* %15, align 8
  %16 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState13 = getelementptr inbounds %struct.mz_zip_archive_tag* %16, i32 0, i32 12
  %17 = load %struct.mz_zip_internal_state_tag** %m_pState13, align 8
  %m_pMem14 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %17, i32 0, i32 4
  store i8* null, i8** %m_pMem14, align 8
  %18 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState15 = getelementptr inbounds %struct.mz_zip_archive_tag* %18, i32 0, i32 12
  %19 = load %struct.mz_zip_internal_state_tag** %m_pState15, align 8
  %m_mem_capacity = getelementptr inbounds %struct.mz_zip_internal_state_tag* %19, i32 0, i32 6
  store i64 0, i64* %m_mem_capacity, align 8
  %20 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState16 = getelementptr inbounds %struct.mz_zip_archive_tag* %20, i32 0, i32 12
  %21 = load %struct.mz_zip_internal_state_tag** %m_pState16, align 8
  %m_mem_size17 = getelementptr inbounds %struct.mz_zip_internal_state_tag* %21, i32 0, i32 5
  store i64 0, i64* %m_mem_size17, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end10, %if.then9, %if.then6, %if.then
  %22 = load i32* %retval
  ret i32 %22
}

; Function Attrs: nounwind uwtable
define i32 @mz_zip_add_mem_to_archive_file_in_place(i8* %pZip_filename, i8* %pArchive_name, i8* %pBuf, i64 %buf_size, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip_filename.addr = alloca i8*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %created_new_archive = alloca i32, align 4
  %zip_archive = alloca %struct.mz_zip_archive_tag, align 8
  %file_stat = alloca %struct.stat, align 8
  %ignoredStatus = alloca i32, align 4
  store i8* %pZip_filename, i8** %pZip_filename.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i8* %pComment, i8** %pComment.addr, align 8
  store i16 %comment_size, i16* %comment_size.addr, align 2
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4
  store i32 0, i32* %created_new_archive, align 4
  %0 = bitcast %struct.mz_zip_archive_tag* %zip_archive to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 96, i32 8, i1 false)
  %1 = load i32* %level_and_flags.addr, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 6, i32* %level_and_flags.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8** %pZip_filename.addr, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %lor.lhs.false, label %if.then12

lor.lhs.false:                                    ; preds = %if.end
  %3 = load i8** %pArchive_name.addr, align 8
  %tobool1 = icmp ne i8* %3, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then12

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load i64* %buf_size.addr, align 8
  %tobool3 = icmp ne i64 %4, 0
  br i1 %tobool3, label %land.lhs.true, label %lor.lhs.false5

land.lhs.true:                                    ; preds = %lor.lhs.false2
  %5 = load i8** %pBuf.addr, align 8
  %tobool4 = icmp ne i8* %5, null
  br i1 %tobool4, label %lor.lhs.false5, label %if.then12

lor.lhs.false5:                                   ; preds = %land.lhs.true, %lor.lhs.false2
  %6 = load i16* %comment_size.addr, align 2
  %conv = zext i16 %6 to i32
  %tobool6 = icmp ne i32 %conv, 0
  br i1 %tobool6, label %land.lhs.true7, label %lor.lhs.false9

land.lhs.true7:                                   ; preds = %lor.lhs.false5
  %7 = load i8** %pComment.addr, align 8
  %tobool8 = icmp ne i8* %7, null
  br i1 %tobool8, label %lor.lhs.false9, label %if.then12

lor.lhs.false9:                                   ; preds = %land.lhs.true7, %lor.lhs.false5
  %8 = load i32* %level_and_flags.addr, align 4
  %and = and i32 %8, 15
  %cmp10 = icmp ugt i32 %and, 10
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %lor.lhs.false9, %land.lhs.true7, %land.lhs.true, %lor.lhs.false, %if.end
  store i32 0, i32* %retval
  br label %return

if.end13:                                         ; preds = %lor.lhs.false9
  %9 = load i8** %pArchive_name.addr, align 8
  %call = call i32 @mz_zip_writer_validate_archive_name(i8* %9)
  %tobool14 = icmp ne i32 %call, 0
  br i1 %tobool14, label %if.end16, label %if.then15

if.then15:                                        ; preds = %if.end13
  store i32 0, i32* %retval
  br label %return

if.end16:                                         ; preds = %if.end13
  %10 = load i8** %pZip_filename.addr, align 8
  %call17 = call i32 @stat(i8* %10, %struct.stat* %file_stat) #2
  %cmp18 = icmp ne i32 %call17, 0
  br i1 %cmp18, label %if.then20, label %if.else

if.then20:                                        ; preds = %if.end16
  %11 = load i8** %pZip_filename.addr, align 8
  %call21 = call i32 @mz_zip_writer_init_file(%struct.mz_zip_archive_tag* %zip_archive, i8* %11, i64 0)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %if.end24, label %if.then23

if.then23:                                        ; preds = %if.then20
  store i32 0, i32* %retval
  br label %return

if.end24:                                         ; preds = %if.then20
  store i32 1, i32* %created_new_archive, align 4
  br label %if.end34

if.else:                                          ; preds = %if.end16
  %12 = load i8** %pZip_filename.addr, align 8
  %13 = load i32* %level_and_flags.addr, align 4
  %or = or i32 %13, 2048
  %call25 = call i32 @mz_zip_reader_init_file(%struct.mz_zip_archive_tag* %zip_archive, i8* %12, i32 %or)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end28, label %if.then27

if.then27:                                        ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

if.end28:                                         ; preds = %if.else
  %14 = load i8** %pZip_filename.addr, align 8
  %call29 = call i32 @mz_zip_writer_init_from_reader(%struct.mz_zip_archive_tag* %zip_archive, i8* %14)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.end33, label %if.then31

if.then31:                                        ; preds = %if.end28
  %call32 = call i32 @mz_zip_reader_end(%struct.mz_zip_archive_tag* %zip_archive)
  store i32 0, i32* %retval
  br label %return

if.end33:                                         ; preds = %if.end28
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end24
  %15 = load i8** %pArchive_name.addr, align 8
  %16 = load i8** %pBuf.addr, align 8
  %17 = load i64* %buf_size.addr, align 8
  %18 = load i8** %pComment.addr, align 8
  %19 = load i16* %comment_size.addr, align 2
  %20 = load i32* %level_and_flags.addr, align 4
  %call35 = call i32 @mz_zip_writer_add_mem_ex(%struct.mz_zip_archive_tag* %zip_archive, i8* %15, i8* %16, i64 %17, i8* %18, i16 zeroext %19, i32 %20, i64 0, i32 0)
  store i32 %call35, i32* %status, align 4
  %call36 = call i32 @mz_zip_writer_finalize_archive(%struct.mz_zip_archive_tag* %zip_archive)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.end39, label %if.then38

if.then38:                                        ; preds = %if.end34
  store i32 0, i32* %status, align 4
  br label %if.end39

if.end39:                                         ; preds = %if.then38, %if.end34
  %call40 = call i32 @mz_zip_writer_end(%struct.mz_zip_archive_tag* %zip_archive)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end43, label %if.then42

if.then42:                                        ; preds = %if.end39
  store i32 0, i32* %status, align 4
  br label %if.end43

if.end43:                                         ; preds = %if.then42, %if.end39
  %21 = load i32* %status, align 4
  %tobool44 = icmp ne i32 %21, 0
  br i1 %tobool44, label %if.end49, label %land.lhs.true45

land.lhs.true45:                                  ; preds = %if.end43
  %22 = load i32* %created_new_archive, align 4
  %tobool46 = icmp ne i32 %22, 0
  br i1 %tobool46, label %if.then47, label %if.end49

if.then47:                                        ; preds = %land.lhs.true45
  %23 = load i8** %pZip_filename.addr, align 8
  %call48 = call i32 @remove(i8* %23) #2
  store i32 %call48, i32* %ignoredStatus, align 4
  %24 = load i32* %ignoredStatus, align 4
  br label %if.end49

if.end49:                                         ; preds = %if.then47, %land.lhs.true45, %if.end43
  %25 = load i32* %status, align 4
  store i32 %25, i32* %retval
  br label %return

return:                                           ; preds = %if.end49, %if.then31, %if.then27, %if.then23, %if.then15, %if.then12
  %26 = load i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind
declare i32 @stat(i8*, %struct.stat*) #1

; Function Attrs: nounwind
declare i32 @remove(i8*) #1

; Function Attrs: nounwind uwtable
define i8* @mz_zip_extract_archive_file_to_heap(i8* %pZip_filename, i8* %pArchive_name, i64* %pSize, i32 %flags) #0 {
entry:
  %retval = alloca i8*, align 8
  %pZip_filename.addr = alloca i8*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pSize.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  %zip_archive = alloca %struct.mz_zip_archive_tag, align 8
  %p = alloca i8*, align 8
  store i8* %pZip_filename, i8** %pZip_filename.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store i64* %pSize, i64** %pSize.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i8* null, i8** %p, align 8
  %0 = load i64** %pSize.addr, align 8
  %tobool = icmp ne i64* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64** %pSize.addr, align 8
  store i64 0, i64* %1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8** %pZip_filename.addr, align 8
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then3

lor.lhs.false:                                    ; preds = %if.end
  %3 = load i8** %pArchive_name.addr, align 8
  %tobool2 = icmp ne i8* %3, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  store i8* null, i8** %retval
  br label %return

if.end4:                                          ; preds = %lor.lhs.false
  %4 = bitcast %struct.mz_zip_archive_tag* %zip_archive to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 96, i32 8, i1 false)
  %5 = load i8** %pZip_filename.addr, align 8
  %6 = load i32* %flags.addr, align 4
  %or = or i32 %6, 2048
  %call = call i32 @mz_zip_reader_init_file(%struct.mz_zip_archive_tag* %zip_archive, i8* %5, i32 %or)
  %tobool5 = icmp ne i32 %call, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  store i8* null, i8** %retval
  br label %return

if.end7:                                          ; preds = %if.end4
  %7 = load i8** %pArchive_name.addr, align 8
  %8 = load i32* %flags.addr, align 4
  %call8 = call i32 @mz_zip_reader_locate_file(%struct.mz_zip_archive_tag* %zip_archive, i8* %7, i8* null, i32 %8)
  store i32 %call8, i32* %file_index, align 4
  %cmp = icmp sge i32 %call8, 0
  br i1 %cmp, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.end7
  %9 = load i32* %file_index, align 4
  %10 = load i64** %pSize.addr, align 8
  %11 = load i32* %flags.addr, align 4
  %call10 = call i8* @mz_zip_reader_extract_to_heap(%struct.mz_zip_archive_tag* %zip_archive, i32 %9, i64* %10, i32 %11)
  store i8* %call10, i8** %p, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %if.end7
  %call12 = call i32 @mz_zip_reader_end(%struct.mz_zip_archive_tag* %zip_archive)
  %12 = load i8** %p, align 8
  store i8* %12, i8** %retval
  br label %return

return:                                           ; preds = %if.end11, %if.then6, %if.then3
  %13 = load i8** %retval
  ret i8* %13
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %step = alloca i32, align 4
  %cmp_status = alloca i32, align 4
  %src_len = alloca i64, align 8
  %cmp_len = alloca i64, align 8
  %uncomp_len = alloca i64, align 8
  %pCmp = alloca i8*, align 8
  %pUncomp = alloca i8*, align 8
  %total_succeeded = alloca i32, align 4
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  store i32 0, i32* %step, align 4
  %0 = load i8** @s_pStr, align 8
  %call = call i64 @strlen(i8* %0) #7
  store i64 %call, i64* %src_len, align 8
  %1 = load i64* %src_len, align 8
  %call1 = call i64 @mz_compressBound(i64 %1)
  store i64 %call1, i64* %cmp_len, align 8
  %2 = load i64* %src_len, align 8
  store i64 %2, i64* %uncomp_len, align 8
  store i32 0, i32* %total_succeeded, align 4
  %3 = load i32* %argc.addr, align 4
  %4 = load i8*** %argv.addr, align 8
  %call2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str, i32 0, i32 0))
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %5 = load i64* %cmp_len, align 8
  %call3 = call noalias i8* @malloc(i64 %5) #2
  store i8* %call3, i8** %pCmp, align 8
  %6 = load i64* %src_len, align 8
  %call4 = call noalias i8* @malloc(i64 %6) #2
  store i8* %call4, i8** %pUncomp, align 8
  %7 = load i8** %pCmp, align 8
  %tobool = icmp ne i8* %7, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %do.body
  %8 = load i8** %pUncomp, align 8
  %tobool5 = icmp ne i8* %8, null
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %do.body
  %call6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str22, i32 0, i32 0))
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %9 = load i8** %pCmp, align 8
  %10 = load i8** @s_pStr, align 8
  %11 = load i64* %src_len, align 8
  %call7 = call i32 @mz_compress(i8* %9, i64* %cmp_len, i8* %10, i64 %11)
  store i32 %call7, i32* %cmp_status, align 4
  %12 = load i32* %cmp_status, align 4
  %cmp = icmp ne i32 %12, 0
  br i1 %cmp, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.end
  %call9 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([20 x i8]* @.str23, i32 0, i32 0))
  %13 = load i8** %pCmp, align 8
  call void @free(i8* %13) #2
  %14 = load i8** %pUncomp, align 8
  call void @free(i8* %14) #2
  store i32 1, i32* %retval
  br label %return

if.end10:                                         ; preds = %if.end
  %15 = load i64* %src_len, align 8
  %conv = trunc i64 %15 to i32
  %16 = load i64* %cmp_len, align 8
  %conv11 = trunc i64 %16 to i32
  %call12 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str24, i32 0, i32 0), i32 %conv, i32 %conv11)
  %17 = load i32* %step, align 4
  %tobool13 = icmp ne i32 %17, 0
  br i1 %tobool13, label %if.then14, label %if.end24

if.then14:                                        ; preds = %if.end10
  %call15 = call i32 @rand() #2
  %rem = srem i32 %call15, 3
  %add = add nsw i32 1, %rem
  store i32 %add, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then14
  %18 = load i32* %n, align 4
  %dec = add i32 %18, -1
  store i32 %dec, i32* %n, align 4
  %tobool16 = icmp ne i32 %18, 0
  br i1 %tobool16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call17 = call i32 @rand() #2
  %conv18 = sext i32 %call17 to i64
  %19 = load i64* %cmp_len, align 8
  %rem19 = urem i64 %conv18, %19
  %conv20 = trunc i64 %rem19 to i32
  store i32 %conv20, i32* %i, align 4
  %call21 = call i32 @rand() #2
  %and = and i32 %call21, 255
  %20 = load i32* %i, align 4
  %idxprom = zext i32 %20 to i64
  %21 = load i8** %pCmp, align 8
  %arrayidx = getelementptr inbounds i8* %21, i64 %idxprom
  %22 = load i8* %arrayidx, align 1
  %conv22 = zext i8 %22 to i32
  %xor = xor i32 %conv22, %and
  %conv23 = trunc i32 %xor to i8
  store i8 %conv23, i8* %arrayidx, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end24

if.end24:                                         ; preds = %while.end, %if.end10
  %23 = load i8** %pUncomp, align 8
  %24 = load i8** %pCmp, align 8
  %25 = load i64* %cmp_len, align 8
  %call25 = call i32 @mz_uncompress(i8* %23, i64* %uncomp_len, i8* %24, i64 %25)
  store i32 %call25, i32* %cmp_status, align 4
  %26 = load i32* %cmp_status, align 4
  %cmp26 = icmp eq i32 %26, 0
  %conv27 = zext i1 %cmp26 to i32
  %27 = load i32* %total_succeeded, align 4
  %add28 = add i32 %27, %conv27
  store i32 %add28, i32* %total_succeeded, align 4
  %28 = load i32* %step, align 4
  %tobool29 = icmp ne i32 %28, 0
  br i1 %tobool29, label %if.then30, label %if.else

if.then30:                                        ; preds = %if.end24
  %29 = load i32* %step, align 4
  %30 = load i32* %total_succeeded, align 4
  %call31 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([48 x i8]* @.str25, i32 0, i32 0), i32 %29, i32 %30)
  br label %if.end48

if.else:                                          ; preds = %if.end24
  %31 = load i32* %cmp_status, align 4
  %cmp32 = icmp ne i32 %31, 0
  br i1 %cmp32, label %if.then34, label %if.end36

if.then34:                                        ; preds = %if.else
  %call35 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([20 x i8]* @.str26, i32 0, i32 0))
  %32 = load i8** %pCmp, align 8
  call void @free(i8* %32) #2
  %33 = load i8** %pUncomp, align 8
  call void @free(i8* %33) #2
  store i32 1, i32* %retval
  br label %return

if.end36:                                         ; preds = %if.else
  %34 = load i64* %cmp_len, align 8
  %conv37 = trunc i64 %34 to i32
  %35 = load i64* %uncomp_len, align 8
  %conv38 = trunc i64 %35 to i32
  %call39 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([34 x i8]* @.str27, i32 0, i32 0), i32 %conv37, i32 %conv38)
  %36 = load i64* %uncomp_len, align 8
  %37 = load i64* %src_len, align 8
  %cmp40 = icmp ne i64 %36, %37
  br i1 %cmp40, label %if.then45, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %if.end36
  %38 = load i8** %pUncomp, align 8
  %39 = load i8** @s_pStr, align 8
  %40 = load i64* %src_len, align 8
  %call43 = call i32 @memcmp(i8* %38, i8* %39, i64 %40) #7
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.then45, label %if.end47

if.then45:                                        ; preds = %lor.lhs.false42, %if.end36
  %call46 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str28, i32 0, i32 0))
  %41 = load i8** %pCmp, align 8
  call void @free(i8* %41) #2
  %42 = load i8** %pUncomp, align 8
  call void @free(i8* %42) #2
  store i32 1, i32* %retval
  br label %return

if.end47:                                         ; preds = %lor.lhs.false42
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then30
  %43 = load i8** %pCmp, align 8
  call void @free(i8* %43) #2
  %44 = load i8** %pUncomp, align 8
  call void @free(i8* %44) #2
  %45 = load i32* %step, align 4
  %inc = add i32 %45, 1
  store i32 %inc, i32* %step, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end48
  %46 = load i32* %argc.addr, align 4
  %cmp49 = icmp sge i32 %46, 2
  br i1 %cmp49, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call51 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @.str29, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then45, %if.then34, %if.then8, %if.then
  %47 = load i32* %retval
  ret i32 %47
}

declare i32 @printf(i8*, ...) #4

; Function Attrs: nounwind
declare i32 @rand() #1

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8*, i8*, i64) #5

; Function Attrs: nounwind uwtable
define internal i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_array* %pArray, i64 %min_new_capacity, i32 %growing) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pArray.addr = alloca %struct.mz_zip_array*, align 8
  %min_new_capacity.addr = alloca i64, align 8
  %growing.addr = alloca i32, align 4
  %pNew_p = alloca i8*, align 8
  %new_capacity = alloca i64, align 8
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store %struct.mz_zip_array* %pArray, %struct.mz_zip_array** %pArray.addr, align 8
  store i64 %min_new_capacity, i64* %min_new_capacity.addr, align 8
  store i32 %growing, i32* %growing.addr, align 4
  %0 = load i64* %min_new_capacity.addr, align 8
  store i64 %0, i64* %new_capacity, align 8
  %1 = load %struct.mz_zip_array** %pArray.addr, align 8
  %m_element_size = getelementptr inbounds %struct.mz_zip_array* %1, i32 0, i32 3
  %2 = load i32* %m_element_size, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([23 x i8]* @.str31, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2998, i8* getelementptr inbounds ([88 x i8]* @__PRETTY_FUNCTION__.mz_zip_array_ensure_capacity, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %3, %cond.true
  %4 = load %struct.mz_zip_array** %pArray.addr, align 8
  %m_capacity = getelementptr inbounds %struct.mz_zip_array* %4, i32 0, i32 2
  %5 = load i64* %m_capacity, align 8
  %6 = load i64* %min_new_capacity.addr, align 8
  %cmp = icmp uge i64 %5, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %7 = load i32* %growing.addr, align 4
  %tobool1 = icmp ne i32 %7, 0
  br i1 %tobool1, label %if.then2, label %if.end10

if.then2:                                         ; preds = %if.end
  %8 = load %struct.mz_zip_array** %pArray.addr, align 8
  %m_capacity3 = getelementptr inbounds %struct.mz_zip_array* %8, i32 0, i32 2
  %9 = load i64* %m_capacity3, align 8
  %cmp4 = icmp ugt i64 1, %9
  br i1 %cmp4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %if.then2
  br label %cond.end8

cond.false6:                                      ; preds = %if.then2
  %10 = load %struct.mz_zip_array** %pArray.addr, align 8
  %m_capacity7 = getelementptr inbounds %struct.mz_zip_array* %10, i32 0, i32 2
  %11 = load i64* %m_capacity7, align 8
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true5
  %cond = phi i64 [ 1, %cond.true5 ], [ %11, %cond.false6 ]
  store i64 %cond, i64* %new_capacity, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %cond.end8
  %12 = load i64* %new_capacity, align 8
  %13 = load i64* %min_new_capacity.addr, align 8
  %cmp9 = icmp ult i64 %12, %13
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i64* %new_capacity, align 8
  %mul = mul i64 %14, 2
  store i64 %mul, i64* %new_capacity, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end10

if.end10:                                         ; preds = %while.end, %if.end
  %15 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pRealloc = getelementptr inbounds %struct.mz_zip_archive_tag* %15, i32 0, i32 7
  %16 = load i8* (i8*, i8*, i64, i64)** %m_pRealloc, align 8
  %17 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive_tag* %17, i32 0, i32 8
  %18 = load i8** %m_pAlloc_opaque, align 8
  %19 = load %struct.mz_zip_array** %pArray.addr, align 8
  %m_p = getelementptr inbounds %struct.mz_zip_array* %19, i32 0, i32 0
  %20 = load i8** %m_p, align 8
  %21 = load %struct.mz_zip_array** %pArray.addr, align 8
  %m_element_size11 = getelementptr inbounds %struct.mz_zip_array* %21, i32 0, i32 3
  %22 = load i32* %m_element_size11, align 4
  %conv = zext i32 %22 to i64
  %23 = load i64* %new_capacity, align 8
  %call = call i8* %16(i8* %18, i8* %20, i64 %conv, i64 %23)
  store i8* %call, i8** %pNew_p, align 8
  %cmp12 = icmp eq i8* null, %call
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end10
  store i32 0, i32* %retval
  br label %return

if.end15:                                         ; preds = %if.end10
  %24 = load i8** %pNew_p, align 8
  %25 = load %struct.mz_zip_array** %pArray.addr, align 8
  %m_p16 = getelementptr inbounds %struct.mz_zip_array* %25, i32 0, i32 0
  store i8* %24, i8** %m_p16, align 8
  %26 = load i64* %new_capacity, align 8
  %27 = load %struct.mz_zip_array** %pArray.addr, align 8
  %m_capacity17 = getelementptr inbounds %struct.mz_zip_array* %27, i32 0, i32 2
  store i64 %26, i64* %m_capacity17, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end15, %if.then14, %if.then
  %28 = load i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal i32 @mz_zip_writer_create_central_dir_header(%struct.mz_zip_archive_tag* %pZip, i8* %pDst, i16 zeroext %filename_size, i16 zeroext %extra_size, i16 zeroext %comment_size, i64 %uncomp_size, i64 %comp_size, i32 %uncomp_crc32, i16 zeroext %method, i16 zeroext %bit_flags, i16 zeroext %dos_time, i16 zeroext %dos_date, i64 %local_header_ofs, i32 %ext_attributes) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pDst.addr = alloca i8*, align 8
  %filename_size.addr = alloca i16, align 2
  %extra_size.addr = alloca i16, align 2
  %comment_size.addr = alloca i16, align 2
  %uncomp_size.addr = alloca i64, align 8
  %comp_size.addr = alloca i64, align 8
  %uncomp_crc32.addr = alloca i32, align 4
  %method.addr = alloca i16, align 2
  %bit_flags.addr = alloca i16, align 2
  %dos_time.addr = alloca i16, align 2
  %dos_date.addr = alloca i16, align 2
  %local_header_ofs.addr = alloca i64, align 8
  %ext_attributes.addr = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  store i8* %pDst, i8** %pDst.addr, align 8
  store i16 %filename_size, i16* %filename_size.addr, align 2
  store i16 %extra_size, i16* %extra_size.addr, align 2
  store i16 %comment_size, i16* %comment_size.addr, align 2
  store i64 %uncomp_size, i64* %uncomp_size.addr, align 8
  store i64 %comp_size, i64* %comp_size.addr, align 8
  store i32 %uncomp_crc32, i32* %uncomp_crc32.addr, align 4
  store i16 %method, i16* %method.addr, align 2
  store i16 %bit_flags, i16* %bit_flags.addr, align 2
  store i16 %dos_time, i16* %dos_time.addr, align 2
  store i16 %dos_date, i16* %dos_date.addr, align 2
  store i64 %local_header_ofs, i64* %local_header_ofs.addr, align 8
  store i32 %ext_attributes, i32* %ext_attributes.addr, align 4
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %1 = load i8** %pDst.addr, align 8
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 46, i32 1, i1 false)
  %2 = load i8** %pDst.addr, align 8
  %add.ptr = getelementptr inbounds i8* %2, i64 0
  call void @mz_write_le32(i8* %add.ptr, i32 33639248)
  %3 = load i8** %pDst.addr, align 8
  %add.ptr1 = getelementptr inbounds i8* %3, i64 6
  %4 = load i16* %method.addr, align 2
  %conv = zext i16 %4 to i32
  %tobool = icmp ne i32 %conv, 0
  %cond = select i1 %tobool, i32 20, i32 0
  %conv2 = trunc i32 %cond to i16
  call void @mz_write_le16(i8* %add.ptr1, i16 zeroext %conv2)
  %5 = load i8** %pDst.addr, align 8
  %add.ptr3 = getelementptr inbounds i8* %5, i64 8
  %6 = load i16* %bit_flags.addr, align 2
  call void @mz_write_le16(i8* %add.ptr3, i16 zeroext %6)
  %7 = load i8** %pDst.addr, align 8
  %add.ptr4 = getelementptr inbounds i8* %7, i64 10
  %8 = load i16* %method.addr, align 2
  call void @mz_write_le16(i8* %add.ptr4, i16 zeroext %8)
  %9 = load i8** %pDst.addr, align 8
  %add.ptr5 = getelementptr inbounds i8* %9, i64 12
  %10 = load i16* %dos_time.addr, align 2
  call void @mz_write_le16(i8* %add.ptr5, i16 zeroext %10)
  %11 = load i8** %pDst.addr, align 8
  %add.ptr6 = getelementptr inbounds i8* %11, i64 14
  %12 = load i16* %dos_date.addr, align 2
  call void @mz_write_le16(i8* %add.ptr6, i16 zeroext %12)
  %13 = load i8** %pDst.addr, align 8
  %add.ptr7 = getelementptr inbounds i8* %13, i64 16
  %14 = load i32* %uncomp_crc32.addr, align 4
  call void @mz_write_le32(i8* %add.ptr7, i32 %14)
  %15 = load i8** %pDst.addr, align 8
  %add.ptr8 = getelementptr inbounds i8* %15, i64 20
  %16 = load i64* %comp_size.addr, align 8
  %conv9 = trunc i64 %16 to i32
  call void @mz_write_le32(i8* %add.ptr8, i32 %conv9)
  %17 = load i8** %pDst.addr, align 8
  %add.ptr10 = getelementptr inbounds i8* %17, i64 24
  %18 = load i64* %uncomp_size.addr, align 8
  %conv11 = trunc i64 %18 to i32
  call void @mz_write_le32(i8* %add.ptr10, i32 %conv11)
  %19 = load i8** %pDst.addr, align 8
  %add.ptr12 = getelementptr inbounds i8* %19, i64 28
  %20 = load i16* %filename_size.addr, align 2
  call void @mz_write_le16(i8* %add.ptr12, i16 zeroext %20)
  %21 = load i8** %pDst.addr, align 8
  %add.ptr13 = getelementptr inbounds i8* %21, i64 30
  %22 = load i16* %extra_size.addr, align 2
  call void @mz_write_le16(i8* %add.ptr13, i16 zeroext %22)
  %23 = load i8** %pDst.addr, align 8
  %add.ptr14 = getelementptr inbounds i8* %23, i64 32
  %24 = load i16* %comment_size.addr, align 2
  call void @mz_write_le16(i8* %add.ptr14, i16 zeroext %24)
  %25 = load i8** %pDst.addr, align 8
  %add.ptr15 = getelementptr inbounds i8* %25, i64 38
  %26 = load i32* %ext_attributes.addr, align 4
  call void @mz_write_le32(i8* %add.ptr15, i32 %26)
  %27 = load i8** %pDst.addr, align 8
  %add.ptr16 = getelementptr inbounds i8* %27, i64 42
  %28 = load i64* %local_header_ofs.addr, align 8
  %conv17 = trunc i64 %28 to i32
  call void @mz_write_le32(i8* %add.ptr16, i32 %conv17)
  ret i32 1
}

; Function Attrs: nounwind
declare %struct.tm* @localtime(i64*) #1

declare i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #4

; Function Attrs: nounwind
declare i32 @utime(i8*, %struct.utimbuf*) #1

; Function Attrs: nounwind
declare i64 @mktime(%struct.tm*) #1

; Function Attrs: nounwind uwtable
define internal void @mz_zip_reader_sort_central_dir_offsets_by_filename(%struct.mz_zip_archive_tag* %pZip) #0 {
entry:
  %pCentral_dir_array.addr.i253 = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir_offsets.addr.i254 = alloca %struct.mz_zip_array*, align 8
  %l_index.addr.i255 = alloca i32, align 4
  %r_index.addr.i256 = alloca i32, align 4
  %pL.i257 = alloca i8*, align 8
  %pE.i258 = alloca i8*, align 8
  %pR.i259 = alloca i8*, align 8
  %l_len.i260 = alloca i32, align 4
  %r_len.i261 = alloca i32, align 4
  %l.i262 = alloca i8, align 1
  %r.i263 = alloca i8, align 1
  %pCentral_dir_array.addr.i167 = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir_offsets.addr.i168 = alloca %struct.mz_zip_array*, align 8
  %l_index.addr.i169 = alloca i32, align 4
  %r_index.addr.i170 = alloca i32, align 4
  %pL.i171 = alloca i8*, align 8
  %pE.i172 = alloca i8*, align 8
  %pR.i173 = alloca i8*, align 8
  %l_len.i174 = alloca i32, align 4
  %r_len.i175 = alloca i32, align 4
  %l.i176 = alloca i8, align 1
  %r.i177 = alloca i8, align 1
  %pCentral_dir_array.addr.i81 = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir_offsets.addr.i82 = alloca %struct.mz_zip_array*, align 8
  %l_index.addr.i83 = alloca i32, align 4
  %r_index.addr.i84 = alloca i32, align 4
  %pL.i85 = alloca i8*, align 8
  %pE.i86 = alloca i8*, align 8
  %pR.i87 = alloca i8*, align 8
  %l_len.i88 = alloca i32, align 4
  %r_len.i89 = alloca i32, align 4
  %l.i90 = alloca i8, align 1
  %r.i91 = alloca i8, align 1
  %pCentral_dir_array.addr.i = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir_offsets.addr.i = alloca %struct.mz_zip_array*, align 8
  %l_index.addr.i = alloca i32, align 4
  %r_index.addr.i = alloca i32, align 4
  %pL.i = alloca i8*, align 8
  %pE.i = alloca i8*, align 8
  %pR.i = alloca i8*, align 8
  %l_len.i = alloca i32, align 4
  %r_len.i = alloca i32, align 4
  %l.i = alloca i8, align 1
  %r.i = alloca i8, align 1
  %pZip.addr = alloca %struct.mz_zip_archive_tag*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %pCentral_dir_offsets = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir = alloca %struct.mz_zip_array*, align 8
  %pIndices = alloca i32*, align 8
  %size = alloca i32, align 4
  %start = alloca i32, align 4
  %end = alloca i32, align 4
  %child = alloca i32, align 4
  %root = alloca i32, align 4
  %t = alloca i32, align 4
  %child29 = alloca i32, align 4
  %root30 = alloca i32, align 4
  %t32 = alloca i32, align 4
  %t68 = alloca i32, align 4
  store %struct.mz_zip_archive_tag* %pZip, %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive_tag* %0, i32 0, i32 12
  %1 = load %struct.mz_zip_internal_state_tag** %m_pState, align 8
  store %struct.mz_zip_internal_state_tag* %1, %struct.mz_zip_internal_state_tag** %pState, align 8
  %2 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %2, i32 0, i32 1
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pCentral_dir_offsets, align 8
  %3 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag* %3, i32 0, i32 0
  store %struct.mz_zip_array* %m_central_dir, %struct.mz_zip_array** %pCentral_dir, align 8
  %4 = load %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag* %4, i32 0, i32 2
  %m_p = getelementptr inbounds %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 0
  %5 = load i8** %m_p, align 8
  %6 = bitcast i8* %5 to i32*
  %arrayidx = getelementptr inbounds i32* %6, i64 0
  store i32* %arrayidx, i32** %pIndices, align 8
  %7 = load %struct.mz_zip_archive_tag** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive_tag* %7, i32 0, i32 2
  %8 = load i32* %m_total_files, align 4
  store i32 %8, i32* %size, align 4
  %9 = load i32* %size, align 4
  %sub = sub nsw i32 %9, 2
  %shr = ashr i32 %sub, 1
  store i32 %shr, i32* %start, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end, %entry
  %10 = load i32* %start, align 4
  %cmp = icmp sge i32 %10, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i32* %start, align 4
  store i32 %11, i32* %root, align 4
  br label %for.cond

for.cond:                                         ; preds = %do.end, %while.body
  %12 = load i32* %root, align 4
  %shl = shl i32 %12, 1
  %add = add nsw i32 %shl, 1
  store i32 %add, i32* %child, align 4
  %13 = load i32* %size, align 4
  %cmp1 = icmp sge i32 %add, %13
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  br label %for.end

if.end:                                           ; preds = %for.cond
  %14 = load i32* %child, align 4
  %add2 = add nsw i32 %14, 1
  %15 = load i32* %size, align 4
  %cmp3 = icmp slt i32 %add2, %15
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end
  %16 = load %struct.mz_zip_array** %pCentral_dir, align 8
  %17 = load %struct.mz_zip_array** %pCentral_dir_offsets, align 8
  %18 = load i32* %child, align 4
  %idxprom = sext i32 %18 to i64
  %19 = load i32** %pIndices, align 8
  %arrayidx4 = getelementptr inbounds i32* %19, i64 %idxprom
  %20 = load i32* %arrayidx4, align 4
  %21 = load i32* %child, align 4
  %add5 = add nsw i32 %21, 1
  %idxprom6 = sext i32 %add5 to i64
  %22 = load i32** %pIndices, align 8
  %arrayidx7 = getelementptr inbounds i32* %22, i64 %idxprom6
  %23 = load i32* %arrayidx7, align 4
  store %struct.mz_zip_array* %16, %struct.mz_zip_array** %pCentral_dir_array.addr.i, align 8
  store %struct.mz_zip_array* %17, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i, align 8
  store i32 %20, i32* %l_index.addr.i, align 4
  store i32 %23, i32* %r_index.addr.i, align 4
  %24 = load i32* %l_index.addr.i, align 4
  %idxprom.i = zext i32 %24 to i64
  %25 = load %struct.mz_zip_array** %pCentral_dir_offsets.addr.i, align 8
  %m_p.i = getelementptr inbounds %struct.mz_zip_array* %25, i32 0, i32 0
  %26 = load i8** %m_p.i, align 8
  %27 = bitcast i8* %26 to i32*
  %arrayidx.i = getelementptr inbounds i32* %27, i64 %idxprom.i
  %28 = load i32* %arrayidx.i, align 4
  %idxprom1.i = zext i32 %28 to i64
  %29 = load %struct.mz_zip_array** %pCentral_dir_array.addr.i, align 8
  %m_p2.i = getelementptr inbounds %struct.mz_zip_array* %29, i32 0, i32 0
  %30 = load i8** %m_p2.i, align 8
  %arrayidx3.i = getelementptr inbounds i8* %30, i64 %idxprom1.i
  store i8* %arrayidx3.i, i8** %pL.i, align 8
  %31 = load i32* %r_index.addr.i, align 4
  %idxprom4.i = zext i32 %31 to i64
  %32 = load %struct.mz_zip_array** %pCentral_dir_offsets.addr.i, align 8
  %m_p5.i = getelementptr inbounds %struct.mz_zip_array* %32, i32 0, i32 0
  %33 = load i8** %m_p5.i, align 8
  %34 = bitcast i8* %33 to i32*
  %arrayidx6.i = getelementptr inbounds i32* %34, i64 %idxprom4.i
  %35 = load i32* %arrayidx6.i, align 4
  %idxprom7.i = zext i32 %35 to i64
  %36 = load %struct.mz_zip_array** %pCentral_dir_array.addr.i, align 8
  %m_p8.i = getelementptr inbounds %struct.mz_zip_array* %36, i32 0, i32 0
  %37 = load i8** %m_p8.i, align 8
  %arrayidx9.i = getelementptr inbounds i8* %37, i64 %idxprom7.i
  store i8* %arrayidx9.i, i8** %pR.i, align 8
  %38 = load i8** %pL.i, align 8
  %add.ptr.i = getelementptr inbounds i8* %38, i64 28
  %39 = bitcast i8* %add.ptr.i to i16*
  %40 = load i16* %39, align 2
  %conv.i = zext i16 %40 to i32
  store i32 %conv.i, i32* %l_len.i, align 4
  %41 = load i8** %pR.i, align 8
  %add.ptr10.i = getelementptr inbounds i8* %41, i64 28
  %42 = bitcast i8* %add.ptr10.i to i16*
  %43 = load i16* %42, align 2
  %conv11.i = zext i16 %43 to i32
  store i32 %conv11.i, i32* %r_len.i, align 4
  store i8 0, i8* %l.i, align 1
  store i8 0, i8* %r.i, align 1
  %44 = load i8** %pL.i, align 8
  %add.ptr12.i = getelementptr inbounds i8* %44, i64 46
  store i8* %add.ptr12.i, i8** %pL.i, align 8
  %45 = load i8** %pR.i, align 8
  %add.ptr13.i = getelementptr inbounds i8* %45, i64 46
  store i8* %add.ptr13.i, i8** %pR.i, align 8
  %46 = load i8** %pL.i, align 8
  %47 = load i32* %l_len.i, align 4
  %48 = load i32* %r_len.i, align 4
  %cmp.i = icmp ult i32 %47, %48
  br i1 %cmp.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %land.rhs
  %49 = load i32* %l_len.i, align 4
  br label %cond.end.i

cond.false.i:                                     ; preds = %land.rhs
  %50 = load i32* %r_len.i, align 4
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %49, %cond.true.i ], [ %50, %cond.false.i ]
  %idx.ext.i = zext i32 %cond.i to i64
  %add.ptr15.i = getelementptr inbounds i8* %46, i64 %idx.ext.i
  store i8* %add.ptr15.i, i8** %pE.i, align 8
  br label %while.cond.i

while.cond.i:                                     ; preds = %if.end.i, %cond.end.i
  %51 = load i8** %pL.i, align 8
  %52 = load i8** %pE.i, align 8
  %cmp16.i = icmp ult i8* %51, %52
  br i1 %cmp16.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %53 = load i8** %pL.i, align 8
  %54 = load i8* %53, align 1
  %conv18.i = zext i8 %54 to i32
  %cmp19.i = icmp sge i32 %conv18.i, 65
  br i1 %cmp19.i, label %land.lhs.true.i, label %cond.false26.i

land.lhs.true.i:                                  ; preds = %while.body.i
  %55 = load i8** %pL.i, align 8
  %56 = load i8* %55, align 1
  %conv21.i = zext i8 %56 to i32
  %cmp22.i = icmp sle i32 %conv21.i, 90
  br i1 %cmp22.i, label %cond.true24.i, label %cond.false26.i

cond.true24.i:                                    ; preds = %land.lhs.true.i
  %57 = load i8** %pL.i, align 8
  %58 = load i8* %57, align 1
  %conv25.i = zext i8 %58 to i32
  %sub.i = sub nsw i32 %conv25.i, 65
  %add.i = add nsw i32 %sub.i, 97
  br label %cond.end28.i

cond.false26.i:                                   ; preds = %land.lhs.true.i, %while.body.i
  %59 = load i8** %pL.i, align 8
  %60 = load i8* %59, align 1
  %conv27.i = zext i8 %60 to i32
  br label %cond.end28.i

cond.end28.i:                                     ; preds = %cond.false26.i, %cond.true24.i
  %cond29.i = phi i32 [ %add.i, %cond.true24.i ], [ %conv27.i, %cond.false26.i ]
  %conv30.i = trunc i32 %cond29.i to i8
  store i8 %conv30.i, i8* %l.i, align 1
  %conv31.i = zext i8 %conv30.i to i32
  %61 = load i8** %pR.i, align 8
  %62 = load i8* %61, align 1
  %conv32.i = zext i8 %62 to i32
  %cmp33.i = icmp sge i32 %conv32.i, 65
  br i1 %cmp33.i, label %land.lhs.true35.i, label %cond.false43.i

land.lhs.true35.i:                                ; preds = %cond.end28.i
  %63 = load i8** %pR.i, align 8
  %64 = load i8* %63, align 1
  %conv36.i = zext i8 %64 to i32
  %cmp37.i = icmp sle i32 %conv36.i, 90
  br i1 %cmp37.i, label %cond.true39.i, label %cond.false43.i

cond.true39.i:                                    ; preds = %land.lhs.true35.i
  %65 = load i8** %pR.i, align 8
  %66 = load i8* %65, align 1
  %conv40.i = zext i8 %66 to i32
  %sub41.i = sub nsw i32 %conv40.i, 65
  %add42.i = add nsw i32 %sub41.i, 97
  br label %cond.end45.i

cond.false43.i:                                   ; preds = %land.lhs.true35.i, %cond.end28.i
  %67 = load i8** %pR.i, align 8
  %68 = load i8* %67, align 1
  %conv44.i = zext i8 %68 to i32
  br label %cond.end45.i

cond.end45.i:                                     ; preds = %cond.false43.i, %cond.true39.i
  %cond46.i = phi i32 [ %add42.i, %cond.true39.i ], [ %conv44.i, %cond.false43.i ]
  %conv47.i = trunc i32 %cond46.i to i8
  store i8 %conv47.i, i8* %r.i, align 1
  %conv48.i = zext i8 %conv47.i to i32
  %cmp49.i = icmp ne i32 %conv31.i, %conv48.i
  br i1 %cmp49.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %cond.end45.i
  br label %while.end.i

if.end.i:                                         ; preds = %cond.end45.i
  %69 = load i8** %pL.i, align 8
  %incdec.ptr.i = getelementptr inbounds i8* %69, i32 1
  store i8* %incdec.ptr.i, i8** %pL.i, align 8
  %70 = load i8** %pR.i, align 8
  %incdec.ptr51.i = getelementptr inbounds i8* %70, i32 1
  store i8* %incdec.ptr51.i, i8** %pR.i, align 8
  br label %while.cond.i

while.end.i:                                      ; preds = %if.then.i, %while.cond.i
  %71 = load i8** %pL.i, align 8
  %72 = load i8** %pE.i, align 8
  %cmp52.i = icmp eq i8* %71, %72
  br i1 %cmp52.i, label %cond.true54.i, label %cond.false57.i

cond.true54.i:                                    ; preds = %while.end.i
  %73 = load i32* %l_len.i, align 4
  %74 = load i32* %r_len.i, align 4
  %cmp55.i = icmp ult i32 %73, %74
  %conv56.i = zext i1 %cmp55.i to i32
  br label %mz_zip_reader_filename_less.exit

cond.false57.i:                                   ; preds = %while.end.i
  %75 = load i8* %l.i, align 1
  %conv58.i = zext i8 %75 to i32
  %76 = load i8* %r.i, align 1
  %conv59.i = zext i8 %76 to i32
  %cmp60.i = icmp slt i32 %conv58.i, %conv59.i
  %conv61.i = zext i1 %cmp60.i to i32
  br label %mz_zip_reader_filename_less.exit

mz_zip_reader_filename_less.exit:                 ; preds = %cond.false57.i, %cond.true54.i
  %cond63.i = phi i32 [ %conv56.i, %cond.true54.i ], [ %conv61.i, %cond.false57.i ]
  %tobool = icmp ne i32 %cond63.i, 0
  br label %land.end

land.end:                                         ; preds = %mz_zip_reader_filename_less.exit, %if.end
  %77 = phi i1 [ false, %if.end ], [ %tobool, %mz_zip_reader_filename_less.exit ]
  %land.ext = zext i1 %77 to i32
  %78 = load i32* %child, align 4
  %add8 = add nsw i32 %78, %land.ext
  store i32 %add8, i32* %child, align 4
  %79 = load %struct.mz_zip_array** %pCentral_dir, align 8
  %80 = load %struct.mz_zip_array** %pCentral_dir_offsets, align 8
  %81 = load i32* %root, align 4
  %idxprom9 = sext i32 %81 to i64
  %82 = load i32** %pIndices, align 8
  %arrayidx10 = getelementptr inbounds i32* %82, i64 %idxprom9
  %83 = load i32* %arrayidx10, align 4
  %84 = load i32* %child, align 4
  %idxprom11 = sext i32 %84 to i64
  %85 = load i32** %pIndices, align 8
  %arrayidx12 = getelementptr inbounds i32* %85, i64 %idxprom11
  %86 = load i32* %arrayidx12, align 4
  store %struct.mz_zip_array* %79, %struct.mz_zip_array** %pCentral_dir_array.addr.i253, align 8
  store %struct.mz_zip_array* %80, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i254, align 8
  store i32 %83, i32* %l_index.addr.i255, align 4
  store i32 %86, i32* %r_index.addr.i256, align 4
  %87 = load i32* %l_index.addr.i255, align 4
  %idxprom.i264 = zext i32 %87 to i64
  %88 = load %struct.mz_zip_array** %pCentral_dir_offsets.addr.i254, align 8
  %m_p.i265 = getelementptr inbounds %struct.mz_zip_array* %88, i32 0, i32 0
  %89 = load i8** %m_p.i265, align 8
  %90 = bitcast i8* %89 to i32*
  %arrayidx.i266 = getelementptr inbounds i32* %90, i64 %idxprom.i264
  %91 = load i32* %arrayidx.i266, align 4
  %idxprom1.i267 = zext i32 %91 to i64
  %92 = load %struct.mz_zip_array** %pCentral_dir_array.addr.i253, align 8
  %m_p2.i268 = getelementptr inbounds %struct.mz_zip_array* %92, i32 0, i32 0
  %93 = load i8** %m_p2.i268, align 8
  %arrayidx3.i269 = getelementptr inbounds i8* %93, i64 %idxprom1.i267
  store i8* %arrayidx3.i269, i8** %pL.i257, align 8
  %94 = load i32* %r_index.addr.i256, align 4
  %idxprom4.i270 = zext i32 %94 to i64
  %95 = load %struct.mz_zip_array** %pCentral_dir_offsets.addr.i254, align 8
  %m_p5.i271 = getelementptr inbounds %struct.mz_zip_array* %95, i32 0, i32 0
  %96 = load i8** %m_p5.i271, align 8
  %97 = bitcast i8* %96 to i32*
  %arrayidx6.i272 = getelementptr inbounds i32* %97, i64 %idxprom4.i270
  %98 = load i32* %arrayidx6.i272, align 4
  %idxprom7.i273 = zext i32 %98 to i64
  %99 = load %struct.mz_zip_array** %pCentral_dir_array.addr.i253, align 8
  %m_p8.i274 = getelementptr inbounds %struct.mz_zip_array* %99, i32 0, i32 0
  %100 = load i8** %m_p8.i274, align 8
  %arrayidx9.i275 = getelementptr inbounds i8* %100, i64 %idxprom7.i273
  store i8* %arrayidx9.i275, i8** %pR.i259, align 8
  %101 = load i8** %pL.i257, align 8
  %add.ptr.i276 = getelementptr inbounds i8* %101, i64 28
  %102 = bitcast i8* %add.ptr.i276 to i16*
  %103 = load i16* %102, align 2
  %conv.i277 = zext i16 %103 to i32
  store i32 %conv.i277, i32* %l_len.i260, align 4
  %104 = load i8** %pR.i259, align 8
  %add.ptr10.i278 = getelementptr inbounds i8* %104, i64 28
  %105 = bitcast i8* %add.ptr10.i278 to i16*
  %106 = load i16* %105, align 2
  %conv11.i279 = zext i16 %106 to i32
  store i32 %conv11.i279, i32* %r_len.i261, align 4
  store i8 0, i8* %l.i262, align 1
  store i8 0, i8* %r.i263, align 1
  %107 = load i8** %pL.i257, align 8
  %add.ptr12.i280 = getelementptr inbounds i8* %107, i64 46
  store i8* %add.ptr12.i280, i8** %pL.i257, align 8
  %108 = load i8** %pR.i259, align 8
  %add.ptr13.i281 = getelementptr inbounds i8* %108, i64 46
  store i8* %add.ptr13.i281, i8** %pR.i259, align 8
  %109 = load i8** %pL.i257, align 8
  %110 = load i32* %l_len.i260, align 4
  %111 = load i32* %r_len.i261, align 4
  %cmp.i282 = icmp ult i32 %110, %111
  br i1 %cmp.i282, label %cond.true.i283, label %cond.false.i284

cond.true.i283:                                   ; preds = %land.end
  %112 = load i32* %l_len.i260, align 4
  br label %cond.end.i288

cond.false.i284:                                  ; preds = %land.end
  %113 = load i32* %r_len.i261, align 4
  br label %cond.end.i288

cond.end.i288:                                    ; preds = %cond.false.i284, %cond.true.i283
  %cond.i285 = phi i32 [ %112, %cond.true.i283 ], [ %113, %cond.false.i284 ]
  %idx.ext.i286 = zext i32 %cond.i285 to i64
  %add.ptr15.i287 = getelementptr inbounds i8* %109, i64 %idx.ext.i286
  store i8* %add.ptr15.i287, i8** %pE.i258, align 8
  br label %while.cond.i290

while.cond.i290:                                  ; preds = %if.end.i326, %cond.end.i288
  %114 = load i8** %pL.i257, align 8
  %115 = load i8** %pE.i258, align 8
  %cmp16.i289 = icmp ult i8* %114, %115
  br i1 %cmp16.i289, label %while.body.i293, label %while.end.i328

while.body.i293:                                  ; preds = %while.cond.i290
  %116 = load i8** %pL.i257, align 8
  %117 = load i8* %116, align 1
  %conv18.i291 = zext i8 %117 to i32
  %cmp19.i292 = icmp sge i32 %conv18.i291, 65
  br i1 %cmp19.i292, label %land.lhs.true.i296, label %cond.false26.i302

land.lhs.true.i296:                               ; preds = %while.body.i293
  %118 = load i8** %pL.i257, align 8
  %119 = load i8* %118, align 1
  %conv21.i294 = zext i8 %119 to i32
  %cmp22.i295 = icmp sle i32 %conv21.i294, 90
  br i1 %cmp22.i295, label %cond.true24.i300, label %cond.false26.i302

cond.true24.i300:                                 ; preds = %land.lhs.true.i296
  %120 = load i8** %pL.i257, align 8
  %121 = load i8* %120, align 1
  %conv25.i297 = zext i8 %121 to i32
  %sub.i298 = sub nsw i32 %conv25.i297, 65
  %add.i299 = add nsw i32 %sub.i298, 97
  br label %cond.end28.i308

cond.false26.i302:                                ; preds = %land.lhs.true.i296, %while.body.i293
  %122 = load i8** %pL.i257, align 8
  %123 = load i8* %122, align 1
  %conv27.i301 = zext i8 %123 to i32
  br label %cond.end28.i308

cond.end28.i308:                                  ; preds = %cond.false26.i302, %cond.true24.i300
  %cond29.i303 = phi i32 [ %add.i299, %cond.true24.i300 ], [ %conv27.i301, %cond.false26.i302 ]
  %conv30.i304 = trunc i32 %cond29.i303 to i8
  store i8 %conv30.i304, i8* %l.i262, align 1
  %conv31.i305 = zext i8 %conv30.i304 to i32
  %124 = load i8** %pR.i259, align 8
  %125 = load i8* %124, align 1
  %conv32.i306 = zext i8 %125 to i32
  %cmp33.i307 = icmp sge i32 %conv32.i306, 65
  br i1 %cmp33.i307, label %land.lhs.true35.i311, label %cond.false43.i317

land.lhs.true35.i311:                             ; preds = %cond.end28.i308
  %126 = load i8** %pR.i259, align 8
  %127 = load i8* %126, align 1
  %conv36.i309 = zext i8 %127 to i32
  %cmp37.i310 = icmp sle i32 %conv36.i309, 90
  br i1 %cmp37.i310, label %cond.true39.i315, label %cond.false43.i317

cond.true39.i315:                                 ; preds = %land.lhs.true35.i311
  %128 = load i8** %pR.i259, align 8
  %129 = load i8* %128, align 1
  %conv40.i312 = zext i8 %129 to i32
  %sub41.i313 = sub nsw i32 %conv40.i312, 65
  %add42.i314 = add nsw i32 %sub41.i313, 97
  br label %cond.end45.i322

cond.false43.i317:                                ; preds = %land.lhs.true35.i311, %cond.end28.i308
  %130 = load i8** %pR.i259, align 8
  %131 = load i8* %130, align 1
  %conv44.i316 = zext i8 %131 to i32
  br label %cond.end45.i322

cond.end45.i322:                                  ; preds = %cond.false43.i317, %cond.true39.i315
  %cond46.i318 = phi i32 [ %add42.i314, %cond.true39.i315 ], [ %conv44.i316, %cond.false43.i317 ]
  %conv47.i319 = trunc i32 %cond46.i318 to i8
  store i8 %conv47.i319, i8* %r.i263, align 1
  %conv48.i320 = zext i8 %conv47.i319 to i32
  %cmp49.i321 = icmp ne i32 %conv31.i305, %conv48.i320
  br i1 %cmp49.i321, label %if.then.i323, label %if.end.i326

if.then.i323:                                     ; preds = %cond.end45.i322
  br label %while.end.i328

if.end.i326:                                      ; preds = %cond.end45.i322
  %132 = load i8** %pL.i257, align 8
  %incdec.ptr.i324 = getelementptr inbounds i8* %132, i32 1
  store i8* %incdec.ptr.i324, i8** %pL.i257, align 8
  %133 = load i8** %pR.i259, align 8
  %incdec.ptr51.i325 = getelementptr inbounds i8* %133, i32 1
  store i8* %incdec.ptr51.i325, i8** %pR.i259, align 8
  br label %while.cond.i290

while.end.i328:                                   ; preds = %if.then.i323, %while.cond.i290
  %134 = load i8** %pL.i257, align 8
  %135 = load i8** %pE.i258, align 8
  %cmp52.i327 = icmp eq i8* %134, %135
  br i1 %cmp52.i327, label %cond.true54.i331, label %cond.false57.i336

cond.true54.i331:                                 ; preds = %while.end.i328
  %136 = load i32* %l_len.i260, align 4
  %137 = load i32* %r_len.i261, align 4
  %cmp55.i329 = icmp ult i32 %136, %137
  %conv56.i330 = zext i1 %cmp55.i329 to i32
  br label %mz_zip_reader_filename_less.exit338

cond.false57.i336:                                ; preds = %while.end.i328
  %138 = load i8* %l.i262, align 1
  %conv58.i332 = zext i8 %138 to i32
  %139 = load i8* %r.i263, align 1
  %conv59.i333 = zext i8 %139 to i32
  %cmp60.i334 = icmp slt i32 %conv58.i332, %conv59.i333
  %conv61.i335 = zext i1 %cmp60.i334 to i32
  br label %mz_zip_reader_filename_less.exit338

mz_zip_reader_filename_less.exit338:              ; preds = %cond.false57.i336, %cond.true54.i331
  %cond63.i337 = phi i32 [ %conv56.i330, %cond.true54.i331 ], [ %conv61.i335, %cond.false57.i336 ]
  %tobool14 = icmp ne i32 %cond63.i337, 0
  br i1 %tobool14, label %if.end16, label %if.then15

if.then15:                                        ; preds = %mz_zip_reader_filename_less.exit338
  br label %for.end

if.end16:                                         ; preds = %mz_zip_reader_filename_less.exit338
  br label %do.body

do.body:                                          ; preds = %if.end16
  %140 = load i32* %root, align 4
  %idxprom17 = sext i32 %140 to i64
  %141 = load i32** %pIndices, align 8
  %arrayidx18 = getelementptr inbounds i32* %141, i64 %idxprom17
  %142 = load i32* %arrayidx18, align 4
  store i32 %142, i32* %t, align 4
  %143 = load i32* %child, align 4
  %idxprom19 = sext i32 %143 to i64
  %144 = load i32** %pIndices, align 8
  %arrayidx20 = getelementptr inbounds i32* %144, i64 %idxprom19
  %145 = load i32* %arrayidx20, align 4
  %146 = load i32* %root, align 4
  %idxprom21 = sext i32 %146 to i64
  %147 = load i32** %pIndices, align 8
  %arrayidx22 = getelementptr inbounds i32* %147, i64 %idxprom21
  store i32 %145, i32* %arrayidx22, align 4
  %148 = load i32* %t, align 4
  %149 = load i32* %child, align 4
  %idxprom23 = sext i32 %149 to i64
  %150 = load i32** %pIndices, align 8
  %arrayidx24 = getelementptr inbounds i32* %150, i64 %idxprom23
  store i32 %148, i32* %arrayidx24, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %151 = load i32* %child, align 4
  store i32 %151, i32* %root, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then15, %if.then
  %152 = load i32* %start, align 4
  %dec = add nsw i32 %152, -1
  store i32 %dec, i32* %start, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %153 = load i32* %size, align 4
  %sub25 = sub nsw i32 %153, 1
  store i32 %sub25, i32* %end, align 4
  br label %while.cond26

while.cond26:                                     ; preds = %for.end78, %while.end
  %154 = load i32* %end, align 4
  %cmp27 = icmp sgt i32 %154, 0
  br i1 %cmp27, label %while.body28, label %while.end80

while.body28:                                     ; preds = %while.cond26
  store i32 0, i32* %root30, align 4
  br label %do.body31

do.body31:                                        ; preds = %while.body28
  %155 = load i32* %end, align 4
  %idxprom33 = sext i32 %155 to i64
  %156 = load i32** %pIndices, align 8
  %arrayidx34 = getelementptr inbounds i32* %156, i64 %idxprom33
  %157 = load i32* %arrayidx34, align 4
  store i32 %157, i32* %t32, align 4
  %158 = load i32** %pIndices, align 8
  %arrayidx35 = getelementptr inbounds i32* %158, i64 0
  %159 = load i32* %arrayidx35, align 4
  %160 = load i32* %end, align 4
  %idxprom36 = sext i32 %160 to i64
  %161 = load i32** %pIndices, align 8
  %arrayidx37 = getelementptr inbounds i32* %161, i64 %idxprom36
  store i32 %159, i32* %arrayidx37, align 4
  %162 = load i32* %t32, align 4
  %163 = load i32** %pIndices, align 8
  %arrayidx38 = getelementptr inbounds i32* %163, i64 0
  store i32 %162, i32* %arrayidx38, align 4
  br label %do.end39

do.end39:                                         ; preds = %do.body31
  br label %for.cond40

for.cond40:                                       ; preds = %do.end77, %do.end39
  %164 = load i32* %root30, align 4
  %shl41 = shl i32 %164, 1
  %add42 = add nsw i32 %shl41, 1
  store i32 %add42, i32* %child29, align 4
  %165 = load i32* %end, align 4
  %cmp43 = icmp sge i32 %add42, %165
  br i1 %cmp43, label %if.then44, label %if.end45

if.then44:                                        ; preds = %for.cond40
  br label %for.end78

if.end45:                                         ; preds = %for.cond40
  %166 = load i32* %child29, align 4
  %add46 = add nsw i32 %166, 1
  %167 = load i32* %end, align 4
  %cmp47 = icmp slt i32 %add46, %167
  br i1 %cmp47, label %land.rhs48, label %land.end56

land.rhs48:                                       ; preds = %if.end45
  %168 = load %struct.mz_zip_array** %pCentral_dir, align 8
  %169 = load %struct.mz_zip_array** %pCentral_dir_offsets, align 8
  %170 = load i32* %child29, align 4
  %idxprom49 = sext i32 %170 to i64
  %171 = load i32** %pIndices, align 8
  %arrayidx50 = getelementptr inbounds i32* %171, i64 %idxprom49
  %172 = load i32* %arrayidx50, align 4
  %173 = load i32* %child29, align 4
  %add51 = add nsw i32 %173, 1
  %idxprom52 = sext i32 %add51 to i64
  %174 = load i32** %pIndices, align 8
  %arrayidx53 = getelementptr inbounds i32* %174, i64 %idxprom52
  %175 = load i32* %arrayidx53, align 4
  store %struct.mz_zip_array* %168, %struct.mz_zip_array** %pCentral_dir_array.addr.i167, align 8
  store %struct.mz_zip_array* %169, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i168, align 8
  store i32 %172, i32* %l_index.addr.i169, align 4
  store i32 %175, i32* %r_index.addr.i170, align 4
  %176 = load i32* %l_index.addr.i169, align 4
  %idxprom.i178 = zext i32 %176 to i64
  %177 = load %struct.mz_zip_array** %pCentral_dir_offsets.addr.i168, align 8
  %m_p.i179 = getelementptr inbounds %struct.mz_zip_array* %177, i32 0, i32 0
  %178 = load i8** %m_p.i179, align 8
  %179 = bitcast i8* %178 to i32*
  %arrayidx.i180 = getelementptr inbounds i32* %179, i64 %idxprom.i178
  %180 = load i32* %arrayidx.i180, align 4
  %idxprom1.i181 = zext i32 %180 to i64
  %181 = load %struct.mz_zip_array** %pCentral_dir_array.addr.i167, align 8
  %m_p2.i182 = getelementptr inbounds %struct.mz_zip_array* %181, i32 0, i32 0
  %182 = load i8** %m_p2.i182, align 8
  %arrayidx3.i183 = getelementptr inbounds i8* %182, i64 %idxprom1.i181
  store i8* %arrayidx3.i183, i8** %pL.i171, align 8
  %183 = load i32* %r_index.addr.i170, align 4
  %idxprom4.i184 = zext i32 %183 to i64
  %184 = load %struct.mz_zip_array** %pCentral_dir_offsets.addr.i168, align 8
  %m_p5.i185 = getelementptr inbounds %struct.mz_zip_array* %184, i32 0, i32 0
  %185 = load i8** %m_p5.i185, align 8
  %186 = bitcast i8* %185 to i32*
  %arrayidx6.i186 = getelementptr inbounds i32* %186, i64 %idxprom4.i184
  %187 = load i32* %arrayidx6.i186, align 4
  %idxprom7.i187 = zext i32 %187 to i64
  %188 = load %struct.mz_zip_array** %pCentral_dir_array.addr.i167, align 8
  %m_p8.i188 = getelementptr inbounds %struct.mz_zip_array* %188, i32 0, i32 0
  %189 = load i8** %m_p8.i188, align 8
  %arrayidx9.i189 = getelementptr inbounds i8* %189, i64 %idxprom7.i187
  store i8* %arrayidx9.i189, i8** %pR.i173, align 8
  %190 = load i8** %pL.i171, align 8
  %add.ptr.i190 = getelementptr inbounds i8* %190, i64 28
  %191 = bitcast i8* %add.ptr.i190 to i16*
  %192 = load i16* %191, align 2
  %conv.i191 = zext i16 %192 to i32
  store i32 %conv.i191, i32* %l_len.i174, align 4
  %193 = load i8** %pR.i173, align 8
  %add.ptr10.i192 = getelementptr inbounds i8* %193, i64 28
  %194 = bitcast i8* %add.ptr10.i192 to i16*
  %195 = load i16* %194, align 2
  %conv11.i193 = zext i16 %195 to i32
  store i32 %conv11.i193, i32* %r_len.i175, align 4
  store i8 0, i8* %l.i176, align 1
  store i8 0, i8* %r.i177, align 1
  %196 = load i8** %pL.i171, align 8
  %add.ptr12.i194 = getelementptr inbounds i8* %196, i64 46
  store i8* %add.ptr12.i194, i8** %pL.i171, align 8
  %197 = load i8** %pR.i173, align 8
  %add.ptr13.i195 = getelementptr inbounds i8* %197, i64 46
  store i8* %add.ptr13.i195, i8** %pR.i173, align 8
  %198 = load i8** %pL.i171, align 8
  %199 = load i32* %l_len.i174, align 4
  %200 = load i32* %r_len.i175, align 4
  %cmp.i196 = icmp ult i32 %199, %200
  br i1 %cmp.i196, label %cond.true.i197, label %cond.false.i198

cond.true.i197:                                   ; preds = %land.rhs48
  %201 = load i32* %l_len.i174, align 4
  br label %cond.end.i202

cond.false.i198:                                  ; preds = %land.rhs48
  %202 = load i32* %r_len.i175, align 4
  br label %cond.end.i202

cond.end.i202:                                    ; preds = %cond.false.i198, %cond.true.i197
  %cond.i199 = phi i32 [ %201, %cond.true.i197 ], [ %202, %cond.false.i198 ]
  %idx.ext.i200 = zext i32 %cond.i199 to i64
  %add.ptr15.i201 = getelementptr inbounds i8* %198, i64 %idx.ext.i200
  store i8* %add.ptr15.i201, i8** %pE.i172, align 8
  br label %while.cond.i204

while.cond.i204:                                  ; preds = %if.end.i240, %cond.end.i202
  %203 = load i8** %pL.i171, align 8
  %204 = load i8** %pE.i172, align 8
  %cmp16.i203 = icmp ult i8* %203, %204
  br i1 %cmp16.i203, label %while.body.i207, label %while.end.i242

while.body.i207:                                  ; preds = %while.cond.i204
  %205 = load i8** %pL.i171, align 8
  %206 = load i8* %205, align 1
  %conv18.i205 = zext i8 %206 to i32
  %cmp19.i206 = icmp sge i32 %conv18.i205, 65
  br i1 %cmp19.i206, label %land.lhs.true.i210, label %cond.false26.i216

land.lhs.true.i210:                               ; preds = %while.body.i207
  %207 = load i8** %pL.i171, align 8
  %208 = load i8* %207, align 1
  %conv21.i208 = zext i8 %208 to i32
  %cmp22.i209 = icmp sle i32 %conv21.i208, 90
  br i1 %cmp22.i209, label %cond.true24.i214, label %cond.false26.i216

cond.true24.i214:                                 ; preds = %land.lhs.true.i210
  %209 = load i8** %pL.i171, align 8
  %210 = load i8* %209, align 1
  %conv25.i211 = zext i8 %210 to i32
  %sub.i212 = sub nsw i32 %conv25.i211, 65
  %add.i213 = add nsw i32 %sub.i212, 97
  br label %cond.end28.i222

cond.false26.i216:                                ; preds = %land.lhs.true.i210, %while.body.i207
  %211 = load i8** %pL.i171, align 8
  %212 = load i8* %211, align 1
  %conv27.i215 = zext i8 %212 to i32
  br label %cond.end28.i222

cond.end28.i222:                                  ; preds = %cond.false26.i216, %cond.true24.i214
  %cond29.i217 = phi i32 [ %add.i213, %cond.true24.i214 ], [ %conv27.i215, %cond.false26.i216 ]
  %conv30.i218 = trunc i32 %cond29.i217 to i8
  store i8 %conv30.i218, i8* %l.i176, align 1
  %conv31.i219 = zext i8 %conv30.i218 to i32
  %213 = load i8** %pR.i173, align 8
  %214 = load i8* %213, align 1
  %conv32.i220 = zext i8 %214 to i32
  %cmp33.i221 = icmp sge i32 %conv32.i220, 65
  br i1 %cmp33.i221, label %land.lhs.true35.i225, label %cond.false43.i231

land.lhs.true35.i225:                             ; preds = %cond.end28.i222
  %215 = load i8** %pR.i173, align 8
  %216 = load i8* %215, align 1
  %conv36.i223 = zext i8 %216 to i32
  %cmp37.i224 = icmp sle i32 %conv36.i223, 90
  br i1 %cmp37.i224, label %cond.true39.i229, label %cond.false43.i231

cond.true39.i229:                                 ; preds = %land.lhs.true35.i225
  %217 = load i8** %pR.i173, align 8
  %218 = load i8* %217, align 1
  %conv40.i226 = zext i8 %218 to i32
  %sub41.i227 = sub nsw i32 %conv40.i226, 65
  %add42.i228 = add nsw i32 %sub41.i227, 97
  br label %cond.end45.i236

cond.false43.i231:                                ; preds = %land.lhs.true35.i225, %cond.end28.i222
  %219 = load i8** %pR.i173, align 8
  %220 = load i8* %219, align 1
  %conv44.i230 = zext i8 %220 to i32
  br label %cond.end45.i236

cond.end45.i236:                                  ; preds = %cond.false43.i231, %cond.true39.i229
  %cond46.i232 = phi i32 [ %add42.i228, %cond.true39.i229 ], [ %conv44.i230, %cond.false43.i231 ]
  %conv47.i233 = trunc i32 %cond46.i232 to i8
  store i8 %conv47.i233, i8* %r.i177, align 1
  %conv48.i234 = zext i8 %conv47.i233 to i32
  %cmp49.i235 = icmp ne i32 %conv31.i219, %conv48.i234
  br i1 %cmp49.i235, label %if.then.i237, label %if.end.i240

if.then.i237:                                     ; preds = %cond.end45.i236
  br label %while.end.i242

if.end.i240:                                      ; preds = %cond.end45.i236
  %221 = load i8** %pL.i171, align 8
  %incdec.ptr.i238 = getelementptr inbounds i8* %221, i32 1
  store i8* %incdec.ptr.i238, i8** %pL.i171, align 8
  %222 = load i8** %pR.i173, align 8
  %incdec.ptr51.i239 = getelementptr inbounds i8* %222, i32 1
  store i8* %incdec.ptr51.i239, i8** %pR.i173, align 8
  br label %while.cond.i204

while.end.i242:                                   ; preds = %if.then.i237, %while.cond.i204
  %223 = load i8** %pL.i171, align 8
  %224 = load i8** %pE.i172, align 8
  %cmp52.i241 = icmp eq i8* %223, %224
  br i1 %cmp52.i241, label %cond.true54.i245, label %cond.false57.i250

cond.true54.i245:                                 ; preds = %while.end.i242
  %225 = load i32* %l_len.i174, align 4
  %226 = load i32* %r_len.i175, align 4
  %cmp55.i243 = icmp ult i32 %225, %226
  %conv56.i244 = zext i1 %cmp55.i243 to i32
  br label %mz_zip_reader_filename_less.exit252

cond.false57.i250:                                ; preds = %while.end.i242
  %227 = load i8* %l.i176, align 1
  %conv58.i246 = zext i8 %227 to i32
  %228 = load i8* %r.i177, align 1
  %conv59.i247 = zext i8 %228 to i32
  %cmp60.i248 = icmp slt i32 %conv58.i246, %conv59.i247
  %conv61.i249 = zext i1 %cmp60.i248 to i32
  br label %mz_zip_reader_filename_less.exit252

mz_zip_reader_filename_less.exit252:              ; preds = %cond.false57.i250, %cond.true54.i245
  %cond63.i251 = phi i32 [ %conv56.i244, %cond.true54.i245 ], [ %conv61.i249, %cond.false57.i250 ]
  %tobool55 = icmp ne i32 %cond63.i251, 0
  br label %land.end56

land.end56:                                       ; preds = %mz_zip_reader_filename_less.exit252, %if.end45
  %229 = phi i1 [ false, %if.end45 ], [ %tobool55, %mz_zip_reader_filename_less.exit252 ]
  %land.ext57 = zext i1 %229 to i32
  %230 = load i32* %child29, align 4
  %add58 = add nsw i32 %230, %land.ext57
  store i32 %add58, i32* %child29, align 4
  %231 = load %struct.mz_zip_array** %pCentral_dir, align 8
  %232 = load %struct.mz_zip_array** %pCentral_dir_offsets, align 8
  %233 = load i32* %root30, align 4
  %idxprom59 = sext i32 %233 to i64
  %234 = load i32** %pIndices, align 8
  %arrayidx60 = getelementptr inbounds i32* %234, i64 %idxprom59
  %235 = load i32* %arrayidx60, align 4
  %236 = load i32* %child29, align 4
  %idxprom61 = sext i32 %236 to i64
  %237 = load i32** %pIndices, align 8
  %arrayidx62 = getelementptr inbounds i32* %237, i64 %idxprom61
  %238 = load i32* %arrayidx62, align 4
  store %struct.mz_zip_array* %231, %struct.mz_zip_array** %pCentral_dir_array.addr.i81, align 8
  store %struct.mz_zip_array* %232, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i82, align 8
  store i32 %235, i32* %l_index.addr.i83, align 4
  store i32 %238, i32* %r_index.addr.i84, align 4
  %239 = load i32* %l_index.addr.i83, align 4
  %idxprom.i92 = zext i32 %239 to i64
  %240 = load %struct.mz_zip_array** %pCentral_dir_offsets.addr.i82, align 8
  %m_p.i93 = getelementptr inbounds %struct.mz_zip_array* %240, i32 0, i32 0
  %241 = load i8** %m_p.i93, align 8
  %242 = bitcast i8* %241 to i32*
  %arrayidx.i94 = getelementptr inbounds i32* %242, i64 %idxprom.i92
  %243 = load i32* %arrayidx.i94, align 4
  %idxprom1.i95 = zext i32 %243 to i64
  %244 = load %struct.mz_zip_array** %pCentral_dir_array.addr.i81, align 8
  %m_p2.i96 = getelementptr inbounds %struct.mz_zip_array* %244, i32 0, i32 0
  %245 = load i8** %m_p2.i96, align 8
  %arrayidx3.i97 = getelementptr inbounds i8* %245, i64 %idxprom1.i95
  store i8* %arrayidx3.i97, i8** %pL.i85, align 8
  %246 = load i32* %r_index.addr.i84, align 4
  %idxprom4.i98 = zext i32 %246 to i64
  %247 = load %struct.mz_zip_array** %pCentral_dir_offsets.addr.i82, align 8
  %m_p5.i99 = getelementptr inbounds %struct.mz_zip_array* %247, i32 0, i32 0
  %248 = load i8** %m_p5.i99, align 8
  %249 = bitcast i8* %248 to i32*
  %arrayidx6.i100 = getelementptr inbounds i32* %249, i64 %idxprom4.i98
  %250 = load i32* %arrayidx6.i100, align 4
  %idxprom7.i101 = zext i32 %250 to i64
  %251 = load %struct.mz_zip_array** %pCentral_dir_array.addr.i81, align 8
  %m_p8.i102 = getelementptr inbounds %struct.mz_zip_array* %251, i32 0, i32 0
  %252 = load i8** %m_p8.i102, align 8
  %arrayidx9.i103 = getelementptr inbounds i8* %252, i64 %idxprom7.i101
  store i8* %arrayidx9.i103, i8** %pR.i87, align 8
  %253 = load i8** %pL.i85, align 8
  %add.ptr.i104 = getelementptr inbounds i8* %253, i64 28
  %254 = bitcast i8* %add.ptr.i104 to i16*
  %255 = load i16* %254, align 2
  %conv.i105 = zext i16 %255 to i32
  store i32 %conv.i105, i32* %l_len.i88, align 4
  %256 = load i8** %pR.i87, align 8
  %add.ptr10.i106 = getelementptr inbounds i8* %256, i64 28
  %257 = bitcast i8* %add.ptr10.i106 to i16*
  %258 = load i16* %257, align 2
  %conv11.i107 = zext i16 %258 to i32
  store i32 %conv11.i107, i32* %r_len.i89, align 4
  store i8 0, i8* %l.i90, align 1
  store i8 0, i8* %r.i91, align 1
  %259 = load i8** %pL.i85, align 8
  %add.ptr12.i108 = getelementptr inbounds i8* %259, i64 46
  store i8* %add.ptr12.i108, i8** %pL.i85, align 8
  %260 = load i8** %pR.i87, align 8
  %add.ptr13.i109 = getelementptr inbounds i8* %260, i64 46
  store i8* %add.ptr13.i109, i8** %pR.i87, align 8
  %261 = load i8** %pL.i85, align 8
  %262 = load i32* %l_len.i88, align 4
  %263 = load i32* %r_len.i89, align 4
  %cmp.i110 = icmp ult i32 %262, %263
  br i1 %cmp.i110, label %cond.true.i111, label %cond.false.i112

cond.true.i111:                                   ; preds = %land.end56
  %264 = load i32* %l_len.i88, align 4
  br label %cond.end.i116

cond.false.i112:                                  ; preds = %land.end56
  %265 = load i32* %r_len.i89, align 4
  br label %cond.end.i116

cond.end.i116:                                    ; preds = %cond.false.i112, %cond.true.i111
  %cond.i113 = phi i32 [ %264, %cond.true.i111 ], [ %265, %cond.false.i112 ]
  %idx.ext.i114 = zext i32 %cond.i113 to i64
  %add.ptr15.i115 = getelementptr inbounds i8* %261, i64 %idx.ext.i114
  store i8* %add.ptr15.i115, i8** %pE.i86, align 8
  br label %while.cond.i118

while.cond.i118:                                  ; preds = %if.end.i154, %cond.end.i116
  %266 = load i8** %pL.i85, align 8
  %267 = load i8** %pE.i86, align 8
  %cmp16.i117 = icmp ult i8* %266, %267
  br i1 %cmp16.i117, label %while.body.i121, label %while.end.i156

while.body.i121:                                  ; preds = %while.cond.i118
  %268 = load i8** %pL.i85, align 8
  %269 = load i8* %268, align 1
  %conv18.i119 = zext i8 %269 to i32
  %cmp19.i120 = icmp sge i32 %conv18.i119, 65
  br i1 %cmp19.i120, label %land.lhs.true.i124, label %cond.false26.i130

land.lhs.true.i124:                               ; preds = %while.body.i121
  %270 = load i8** %pL.i85, align 8
  %271 = load i8* %270, align 1
  %conv21.i122 = zext i8 %271 to i32
  %cmp22.i123 = icmp sle i32 %conv21.i122, 90
  br i1 %cmp22.i123, label %cond.true24.i128, label %cond.false26.i130

cond.true24.i128:                                 ; preds = %land.lhs.true.i124
  %272 = load i8** %pL.i85, align 8
  %273 = load i8* %272, align 1
  %conv25.i125 = zext i8 %273 to i32
  %sub.i126 = sub nsw i32 %conv25.i125, 65
  %add.i127 = add nsw i32 %sub.i126, 97
  br label %cond.end28.i136

cond.false26.i130:                                ; preds = %land.lhs.true.i124, %while.body.i121
  %274 = load i8** %pL.i85, align 8
  %275 = load i8* %274, align 1
  %conv27.i129 = zext i8 %275 to i32
  br label %cond.end28.i136

cond.end28.i136:                                  ; preds = %cond.false26.i130, %cond.true24.i128
  %cond29.i131 = phi i32 [ %add.i127, %cond.true24.i128 ], [ %conv27.i129, %cond.false26.i130 ]
  %conv30.i132 = trunc i32 %cond29.i131 to i8
  store i8 %conv30.i132, i8* %l.i90, align 1
  %conv31.i133 = zext i8 %conv30.i132 to i32
  %276 = load i8** %pR.i87, align 8
  %277 = load i8* %276, align 1
  %conv32.i134 = zext i8 %277 to i32
  %cmp33.i135 = icmp sge i32 %conv32.i134, 65
  br i1 %cmp33.i135, label %land.lhs.true35.i139, label %cond.false43.i145

land.lhs.true35.i139:                             ; preds = %cond.end28.i136
  %278 = load i8** %pR.i87, align 8
  %279 = load i8* %278, align 1
  %conv36.i137 = zext i8 %279 to i32
  %cmp37.i138 = icmp sle i32 %conv36.i137, 90
  br i1 %cmp37.i138, label %cond.true39.i143, label %cond.false43.i145

cond.true39.i143:                                 ; preds = %land.lhs.true35.i139
  %280 = load i8** %pR.i87, align 8
  %281 = load i8* %280, align 1
  %conv40.i140 = zext i8 %281 to i32
  %sub41.i141 = sub nsw i32 %conv40.i140, 65
  %add42.i142 = add nsw i32 %sub41.i141, 97
  br label %cond.end45.i150

cond.false43.i145:                                ; preds = %land.lhs.true35.i139, %cond.end28.i136
  %282 = load i8** %pR.i87, align 8
  %283 = load i8* %282, align 1
  %conv44.i144 = zext i8 %283 to i32
  br label %cond.end45.i150

cond.end45.i150:                                  ; preds = %cond.false43.i145, %cond.true39.i143
  %cond46.i146 = phi i32 [ %add42.i142, %cond.true39.i143 ], [ %conv44.i144, %cond.false43.i145 ]
  %conv47.i147 = trunc i32 %cond46.i146 to i8
  store i8 %conv47.i147, i8* %r.i91, align 1
  %conv48.i148 = zext i8 %conv47.i147 to i32
  %cmp49.i149 = icmp ne i32 %conv31.i133, %conv48.i148
  br i1 %cmp49.i149, label %if.then.i151, label %if.end.i154

if.then.i151:                                     ; preds = %cond.end45.i150
  br label %while.end.i156

if.end.i154:                                      ; preds = %cond.end45.i150
  %284 = load i8** %pL.i85, align 8
  %incdec.ptr.i152 = getelementptr inbounds i8* %284, i32 1
  store i8* %incdec.ptr.i152, i8** %pL.i85, align 8
  %285 = load i8** %pR.i87, align 8
  %incdec.ptr51.i153 = getelementptr inbounds i8* %285, i32 1
  store i8* %incdec.ptr51.i153, i8** %pR.i87, align 8
  br label %while.cond.i118

while.end.i156:                                   ; preds = %if.then.i151, %while.cond.i118
  %286 = load i8** %pL.i85, align 8
  %287 = load i8** %pE.i86, align 8
  %cmp52.i155 = icmp eq i8* %286, %287
  br i1 %cmp52.i155, label %cond.true54.i159, label %cond.false57.i164

cond.true54.i159:                                 ; preds = %while.end.i156
  %288 = load i32* %l_len.i88, align 4
  %289 = load i32* %r_len.i89, align 4
  %cmp55.i157 = icmp ult i32 %288, %289
  %conv56.i158 = zext i1 %cmp55.i157 to i32
  br label %mz_zip_reader_filename_less.exit166

cond.false57.i164:                                ; preds = %while.end.i156
  %290 = load i8* %l.i90, align 1
  %conv58.i160 = zext i8 %290 to i32
  %291 = load i8* %r.i91, align 1
  %conv59.i161 = zext i8 %291 to i32
  %cmp60.i162 = icmp slt i32 %conv58.i160, %conv59.i161
  %conv61.i163 = zext i1 %cmp60.i162 to i32
  br label %mz_zip_reader_filename_less.exit166

mz_zip_reader_filename_less.exit166:              ; preds = %cond.false57.i164, %cond.true54.i159
  %cond63.i165 = phi i32 [ %conv56.i158, %cond.true54.i159 ], [ %conv61.i163, %cond.false57.i164 ]
  %tobool64 = icmp ne i32 %cond63.i165, 0
  br i1 %tobool64, label %if.end66, label %if.then65

if.then65:                                        ; preds = %mz_zip_reader_filename_less.exit166
  br label %for.end78

if.end66:                                         ; preds = %mz_zip_reader_filename_less.exit166
  br label %do.body67

do.body67:                                        ; preds = %if.end66
  %292 = load i32* %root30, align 4
  %idxprom69 = sext i32 %292 to i64
  %293 = load i32** %pIndices, align 8
  %arrayidx70 = getelementptr inbounds i32* %293, i64 %idxprom69
  %294 = load i32* %arrayidx70, align 4
  store i32 %294, i32* %t68, align 4
  %295 = load i32* %child29, align 4
  %idxprom71 = sext i32 %295 to i64
  %296 = load i32** %pIndices, align 8
  %arrayidx72 = getelementptr inbounds i32* %296, i64 %idxprom71
  %297 = load i32* %arrayidx72, align 4
  %298 = load i32* %root30, align 4
  %idxprom73 = sext i32 %298 to i64
  %299 = load i32** %pIndices, align 8
  %arrayidx74 = getelementptr inbounds i32* %299, i64 %idxprom73
  store i32 %297, i32* %arrayidx74, align 4
  %300 = load i32* %t68, align 4
  %301 = load i32* %child29, align 4
  %idxprom75 = sext i32 %301 to i64
  %302 = load i32** %pIndices, align 8
  %arrayidx76 = getelementptr inbounds i32* %302, i64 %idxprom75
  store i32 %300, i32* %arrayidx76, align 4
  br label %do.end77

do.end77:                                         ; preds = %do.body67
  %303 = load i32* %child29, align 4
  store i32 %303, i32* %root30, align 4
  br label %for.cond40

for.end78:                                        ; preds = %if.then65, %if.then44
  %304 = load i32* %end, align 4
  %dec79 = add nsw i32 %304, -1
  store i32 %dec79, i32* %end, align 4
  br label %while.cond26

while.end80:                                      ; preds = %while.cond26
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @tdefl_compress_block(%struct.tdefl_compressor* %d, i32 %static_block) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %static_block.addr = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  store i32 %static_block, i32* %static_block.addr, align 4
  %0 = load i32* %static_block.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.tdefl_compressor** %d.addr, align 8
  call void @tdefl_start_static_block(%struct.tdefl_compressor* %1)
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load %struct.tdefl_compressor** %d.addr, align 8
  call void @tdefl_start_dynamic_block(%struct.tdefl_compressor* %2)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load %struct.tdefl_compressor** %d.addr, align 8
  %call = call i32 @tdefl_compress_lz_codes(%struct.tdefl_compressor* %3)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal void @tdefl_start_static_block(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %i = alloca i32, align 4
  %p = alloca i8*, align 8
  %bits = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  %0 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes = getelementptr inbounds %struct.tdefl_compressor* %0, i32 0, i32 38
  %arrayidx = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes, i32 0, i64 0
  %arrayidx1 = getelementptr inbounds [288 x i8]* %arrayidx, i32 0, i64 0
  store i8* %arrayidx1, i8** %p, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32* %i, align 4
  %cmp = icmp ule i32 %1, 143
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8* %2, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  store i8 8, i8* %2, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32* %i, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc6, %for.end
  %4 = load i32* %i, align 4
  %cmp3 = icmp ule i32 %4, 255
  br i1 %cmp3, label %for.body4, label %for.end8

for.body4:                                        ; preds = %for.cond2
  %5 = load i8** %p, align 8
  %incdec.ptr5 = getelementptr inbounds i8* %5, i32 1
  store i8* %incdec.ptr5, i8** %p, align 8
  store i8 9, i8* %5, align 1
  br label %for.inc6

for.inc6:                                         ; preds = %for.body4
  %6 = load i32* %i, align 4
  %inc7 = add i32 %6, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond2

for.end8:                                         ; preds = %for.cond2
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc13, %for.end8
  %7 = load i32* %i, align 4
  %cmp10 = icmp ule i32 %7, 279
  br i1 %cmp10, label %for.body11, label %for.end15

for.body11:                                       ; preds = %for.cond9
  %8 = load i8** %p, align 8
  %incdec.ptr12 = getelementptr inbounds i8* %8, i32 1
  store i8* %incdec.ptr12, i8** %p, align 8
  store i8 7, i8* %8, align 1
  br label %for.inc13

for.inc13:                                        ; preds = %for.body11
  %9 = load i32* %i, align 4
  %inc14 = add i32 %9, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond9

for.end15:                                        ; preds = %for.cond9
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc20, %for.end15
  %10 = load i32* %i, align 4
  %cmp17 = icmp ule i32 %10, 287
  br i1 %cmp17, label %for.body18, label %for.end22

for.body18:                                       ; preds = %for.cond16
  %11 = load i8** %p, align 8
  %incdec.ptr19 = getelementptr inbounds i8* %11, i32 1
  store i8* %incdec.ptr19, i8** %p, align 8
  store i8 8, i8* %11, align 1
  br label %for.inc20

for.inc20:                                        ; preds = %for.body18
  %12 = load i32* %i, align 4
  %inc21 = add i32 %12, 1
  store i32 %inc21, i32* %i, align 4
  br label %for.cond16

for.end22:                                        ; preds = %for.cond16
  %13 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes23 = getelementptr inbounds %struct.tdefl_compressor* %13, i32 0, i32 38
  %arrayidx24 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes23, i32 0, i64 1
  %14 = bitcast [288 x i8]* %arrayidx24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %14, i8 5, i64 32, i32 1, i1 false)
  %15 = load %struct.tdefl_compressor** %d.addr, align 8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %15, i32 0, i32 288, i32 15, i32 1)
  %16 = load %struct.tdefl_compressor** %d.addr, align 8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %16, i32 1, i32 32, i32 15, i32 1)
  br label %do.body

do.body:                                          ; preds = %for.end22
  store i32 1, i32* %bits, align 4
  store i32 2, i32* %len, align 4
  %17 = load i32* %bits, align 4
  %18 = load i32* %len, align 4
  %shl = shl i32 1, %18
  %sub = sub i32 %shl, 1
  %cmp25 = icmp ule i32 %17, %sub
  br i1 %cmp25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br label %cond.end

cond.false:                                       ; preds = %do.body
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2013, i8* getelementptr inbounds ([50 x i8]* @__PRETTY_FUNCTION__.tdefl_start_static_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %19, %cond.true
  %20 = load i32* %bits, align 4
  %21 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor* %21, i32 0, i32 16
  %22 = load i32* %m_bits_in, align 4
  %shl26 = shl i32 %20, %22
  %23 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor* %23, i32 0, i32 17
  %24 = load i32* %m_bit_buffer, align 4
  %or = or i32 %24, %shl26
  store i32 %or, i32* %m_bit_buffer, align 4
  %25 = load i32* %len, align 4
  %26 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in27 = getelementptr inbounds %struct.tdefl_compressor* %26, i32 0, i32 16
  %27 = load i32* %m_bits_in27, align 4
  %add = add i32 %27, %25
  store i32 %add, i32* %m_bits_in27, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %28 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in28 = getelementptr inbounds %struct.tdefl_compressor* %28, i32 0, i32 16
  %29 = load i32* %m_bits_in28, align 4
  %cmp29 = icmp uge i32 %29, 8
  br i1 %cmp29, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %30 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor* %30, i32 0, i32 11
  %31 = load i8** %m_pOutput_buf, align 8
  %32 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor* %32, i32 0, i32 12
  %33 = load i8** %m_pOutput_buf_end, align 8
  %cmp30 = icmp ult i8* %31, %33
  br i1 %cmp30, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %34 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer31 = getelementptr inbounds %struct.tdefl_compressor* %34, i32 0, i32 17
  %35 = load i32* %m_bit_buffer31, align 4
  %conv = trunc i32 %35 to i8
  %36 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf32 = getelementptr inbounds %struct.tdefl_compressor* %36, i32 0, i32 11
  %37 = load i8** %m_pOutput_buf32, align 8
  %incdec.ptr33 = getelementptr inbounds i8* %37, i32 1
  store i8* %incdec.ptr33, i8** %m_pOutput_buf32, align 8
  store i8 %conv, i8* %37, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %38 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer34 = getelementptr inbounds %struct.tdefl_compressor* %38, i32 0, i32 17
  %39 = load i32* %m_bit_buffer34, align 4
  %shr = lshr i32 %39, 8
  store i32 %shr, i32* %m_bit_buffer34, align 4
  %40 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in35 = getelementptr inbounds %struct.tdefl_compressor* %40, i32 0, i32 16
  %41 = load i32* %m_bits_in35, align 4
  %sub36 = sub i32 %41, 8
  store i32 %sub36, i32* %m_bits_in35, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.end

do.end:                                           ; preds = %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tdefl_start_dynamic_block(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %num_lit_codes = alloca i32, align 4
  %num_dist_codes = alloca i32, align 4
  %num_bit_lengths = alloca i32, align 4
  %i = alloca i32, align 4
  %total_code_sizes_to_pack = alloca i32, align 4
  %num_packed_code_sizes = alloca i32, align 4
  %rle_z_count = alloca i32, align 4
  %rle_repeat_count = alloca i32, align 4
  %packed_code_sizes_index = alloca i32, align 4
  %code_sizes_to_pack = alloca [320 x i8], align 16
  %packed_code_sizes = alloca [320 x i8], align 16
  %prev_code_size = alloca i8, align 1
  %code_size = alloca i8, align 1
  %bits = alloca i32, align 4
  %len = alloca i32, align 4
  %bits462 = alloca i32, align 4
  %len464 = alloca i32, align 4
  %bits500 = alloca i32, align 4
  %len502 = alloca i32, align 4
  %bits561 = alloca i32, align 4
  %len563 = alloca i32, align 4
  %bits603 = alloca i32, align 4
  %len611 = alloca i32, align 4
  %code = alloca i32, align 4
  %bits663 = alloca i32, align 4
  %len668 = alloca i32, align 4
  %bits712 = alloca i32, align 4
  %len717 = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  store i8 -1, i8* %prev_code_size, align 1
  %0 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor* %0, i32 0, i32 36
  %arrayidx = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count, i32 0, i64 0
  %arrayidx1 = getelementptr inbounds [288 x i16]* %arrayidx, i32 0, i64 256
  store i16 1, i16* %arrayidx1, align 2
  %1 = load %struct.tdefl_compressor** %d.addr, align 8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %1, i32 0, i32 288, i32 15, i32 0)
  %2 = load %struct.tdefl_compressor** %d.addr, align 8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %2, i32 1, i32 32, i32 15, i32 0)
  store i32 286, i32* %num_lit_codes, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32* %num_lit_codes, align 4
  %cmp = icmp sgt i32 %3, 257
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32* %num_lit_codes, align 4
  %sub = sub nsw i32 %4, 1
  %idxprom = sext i32 %sub to i64
  %5 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes = getelementptr inbounds %struct.tdefl_compressor* %5, i32 0, i32 38
  %arrayidx2 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes, i32 0, i64 0
  %arrayidx3 = getelementptr inbounds [288 x i8]* %arrayidx2, i32 0, i64 %idxprom
  %6 = load i8* %arrayidx3, align 1
  %tobool = icmp ne i8 %6, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32* %num_lit_codes, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %num_lit_codes, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  store i32 30, i32* %num_dist_codes, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc15, %for.end
  %8 = load i32* %num_dist_codes, align 4
  %cmp5 = icmp sgt i32 %8, 1
  br i1 %cmp5, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond4
  %9 = load i32* %num_dist_codes, align 4
  %sub7 = sub nsw i32 %9, 1
  %idxprom8 = sext i32 %sub7 to i64
  %10 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes9 = getelementptr inbounds %struct.tdefl_compressor* %10, i32 0, i32 38
  %arrayidx10 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes9, i32 0, i64 1
  %arrayidx11 = getelementptr inbounds [288 x i8]* %arrayidx10, i32 0, i64 %idxprom8
  %11 = load i8* %arrayidx11, align 1
  %tobool12 = icmp ne i8 %11, 0
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %for.body6
  br label %for.end17

if.end14:                                         ; preds = %for.body6
  br label %for.inc15

for.inc15:                                        ; preds = %if.end14
  %12 = load i32* %num_dist_codes, align 4
  %dec16 = add nsw i32 %12, -1
  store i32 %dec16, i32* %num_dist_codes, align 4
  br label %for.cond4

for.end17:                                        ; preds = %if.then13, %for.cond4
  %13 = bitcast [320 x i8]* %code_sizes_to_pack to i8*
  %14 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes18 = getelementptr inbounds %struct.tdefl_compressor* %14, i32 0, i32 38
  %arrayidx19 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes18, i32 0, i64 0
  %arrayidx20 = getelementptr inbounds [288 x i8]* %arrayidx19, i32 0, i64 0
  %15 = load i32* %num_lit_codes, align 4
  %conv = sext i32 %15 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %arrayidx20, i64 %conv, i32 1, i1 false)
  %arraydecay = getelementptr inbounds [320 x i8]* %code_sizes_to_pack, i32 0, i32 0
  %16 = load i32* %num_lit_codes, align 4
  %idx.ext = sext i32 %16 to i64
  %add.ptr = getelementptr inbounds i8* %arraydecay, i64 %idx.ext
  %17 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes21 = getelementptr inbounds %struct.tdefl_compressor* %17, i32 0, i32 38
  %arrayidx22 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes21, i32 0, i64 1
  %arrayidx23 = getelementptr inbounds [288 x i8]* %arrayidx22, i32 0, i64 0
  %18 = load i32* %num_dist_codes, align 4
  %conv24 = sext i32 %18 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %arrayidx23, i64 %conv24, i32 1, i1 false)
  %19 = load i32* %num_lit_codes, align 4
  %20 = load i32* %num_dist_codes, align 4
  %add = add nsw i32 %19, %20
  store i32 %add, i32* %total_code_sizes_to_pack, align 4
  store i32 0, i32* %num_packed_code_sizes, align 4
  store i32 0, i32* %rle_z_count, align 4
  store i32 0, i32* %rle_repeat_count, align 4
  %21 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count25 = getelementptr inbounds %struct.tdefl_compressor* %21, i32 0, i32 36
  %arrayidx26 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count25, i32 0, i64 2
  %arrayidx27 = getelementptr inbounds [288 x i16]* %arrayidx26, i32 0, i64 0
  %22 = bitcast i16* %arrayidx27 to i8*
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 38, i32 2, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc324, %for.end17
  %23 = load i32* %i, align 4
  %24 = load i32* %total_code_sizes_to_pack, align 4
  %cmp29 = icmp ult i32 %23, %24
  br i1 %cmp29, label %for.body31, label %for.end326

for.body31:                                       ; preds = %for.cond28
  %25 = load i32* %i, align 4
  %idxprom32 = zext i32 %25 to i64
  %arrayidx33 = getelementptr inbounds [320 x i8]* %code_sizes_to_pack, i32 0, i64 %idxprom32
  %26 = load i8* %arrayidx33, align 1
  store i8 %26, i8* %code_size, align 1
  %27 = load i8* %code_size, align 1
  %tobool34 = icmp ne i8 %27, 0
  br i1 %tobool34, label %if.else144, label %if.then35

if.then35:                                        ; preds = %for.body31
  %28 = load i32* %rle_repeat_count, align 4
  %tobool36 = icmp ne i32 %28, 0
  br i1 %tobool36, label %if.then37, label %if.end74

if.then37:                                        ; preds = %if.then35
  %29 = load i32* %rle_repeat_count, align 4
  %cmp38 = icmp ult i32 %29, 3
  br i1 %cmp38, label %if.then40, label %if.else

if.then40:                                        ; preds = %if.then37
  %30 = load i8* %prev_code_size, align 1
  %idxprom41 = zext i8 %30 to i64
  %31 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count42 = getelementptr inbounds %struct.tdefl_compressor* %31, i32 0, i32 36
  %arrayidx43 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count42, i32 0, i64 2
  %arrayidx44 = getelementptr inbounds [288 x i16]* %arrayidx43, i32 0, i64 %idxprom41
  %32 = load i16* %arrayidx44, align 2
  %conv45 = zext i16 %32 to i32
  %33 = load i32* %rle_repeat_count, align 4
  %add46 = add i32 %conv45, %33
  %conv47 = trunc i32 %add46 to i16
  %34 = load i8* %prev_code_size, align 1
  %idxprom48 = zext i8 %34 to i64
  %35 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count49 = getelementptr inbounds %struct.tdefl_compressor* %35, i32 0, i32 36
  %arrayidx50 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count49, i32 0, i64 2
  %arrayidx51 = getelementptr inbounds [288 x i16]* %arrayidx50, i32 0, i64 %idxprom48
  store i16 %conv47, i16* %arrayidx51, align 2
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then40
  %36 = load i32* %rle_repeat_count, align 4
  %dec52 = add i32 %36, -1
  store i32 %dec52, i32* %rle_repeat_count, align 4
  %tobool53 = icmp ne i32 %36, 0
  br i1 %tobool53, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %37 = load i8* %prev_code_size, align 1
  %38 = load i32* %num_packed_code_sizes, align 4
  %inc = add i32 %38, 1
  store i32 %inc, i32* %num_packed_code_sizes, align 4
  %idxprom54 = zext i32 %38 to i64
  %arrayidx55 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom54
  store i8 %37, i8* %arrayidx55, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end73

if.else:                                          ; preds = %if.then37
  %39 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count56 = getelementptr inbounds %struct.tdefl_compressor* %39, i32 0, i32 36
  %arrayidx57 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count56, i32 0, i64 2
  %arrayidx58 = getelementptr inbounds [288 x i16]* %arrayidx57, i32 0, i64 16
  %40 = load i16* %arrayidx58, align 2
  %conv59 = zext i16 %40 to i32
  %add60 = add nsw i32 %conv59, 1
  %conv61 = trunc i32 %add60 to i16
  %41 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count62 = getelementptr inbounds %struct.tdefl_compressor* %41, i32 0, i32 36
  %arrayidx63 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count62, i32 0, i64 2
  %arrayidx64 = getelementptr inbounds [288 x i16]* %arrayidx63, i32 0, i64 16
  store i16 %conv61, i16* %arrayidx64, align 2
  %42 = load i32* %num_packed_code_sizes, align 4
  %inc65 = add i32 %42, 1
  store i32 %inc65, i32* %num_packed_code_sizes, align 4
  %idxprom66 = zext i32 %42 to i64
  %arrayidx67 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom66
  store i8 16, i8* %arrayidx67, align 1
  %43 = load i32* %rle_repeat_count, align 4
  %sub68 = sub i32 %43, 3
  %conv69 = trunc i32 %sub68 to i8
  %44 = load i32* %num_packed_code_sizes, align 4
  %inc70 = add i32 %44, 1
  store i32 %inc70, i32* %num_packed_code_sizes, align 4
  %idxprom71 = zext i32 %44 to i64
  %arrayidx72 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom71
  store i8 %conv69, i8* %arrayidx72, align 1
  br label %if.end73

if.end73:                                         ; preds = %if.else, %while.end
  store i32 0, i32* %rle_repeat_count, align 4
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %if.then35
  %45 = load i32* %rle_z_count, align 4
  %inc75 = add i32 %45, 1
  store i32 %inc75, i32* %rle_z_count, align 4
  %cmp76 = icmp eq i32 %inc75, 138
  br i1 %cmp76, label %if.then78, label %if.end143

if.then78:                                        ; preds = %if.end74
  %46 = load i32* %rle_z_count, align 4
  %tobool79 = icmp ne i32 %46, 0
  br i1 %tobool79, label %if.then80, label %if.end142

if.then80:                                        ; preds = %if.then78
  %47 = load i32* %rle_z_count, align 4
  %cmp81 = icmp ult i32 %47, 3
  br i1 %cmp81, label %if.then83, label %if.else101

if.then83:                                        ; preds = %if.then80
  %48 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count84 = getelementptr inbounds %struct.tdefl_compressor* %48, i32 0, i32 36
  %arrayidx85 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count84, i32 0, i64 2
  %arrayidx86 = getelementptr inbounds [288 x i16]* %arrayidx85, i32 0, i64 0
  %49 = load i16* %arrayidx86, align 2
  %conv87 = zext i16 %49 to i32
  %50 = load i32* %rle_z_count, align 4
  %add88 = add i32 %conv87, %50
  %conv89 = trunc i32 %add88 to i16
  %51 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count90 = getelementptr inbounds %struct.tdefl_compressor* %51, i32 0, i32 36
  %arrayidx91 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count90, i32 0, i64 2
  %arrayidx92 = getelementptr inbounds [288 x i16]* %arrayidx91, i32 0, i64 0
  store i16 %conv89, i16* %arrayidx92, align 2
  br label %while.cond93

while.cond93:                                     ; preds = %while.body96, %if.then83
  %52 = load i32* %rle_z_count, align 4
  %dec94 = add i32 %52, -1
  store i32 %dec94, i32* %rle_z_count, align 4
  %tobool95 = icmp ne i32 %52, 0
  br i1 %tobool95, label %while.body96, label %while.end100

while.body96:                                     ; preds = %while.cond93
  %53 = load i32* %num_packed_code_sizes, align 4
  %inc97 = add i32 %53, 1
  store i32 %inc97, i32* %num_packed_code_sizes, align 4
  %idxprom98 = zext i32 %53 to i64
  %arrayidx99 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom98
  store i8 0, i8* %arrayidx99, align 1
  br label %while.cond93

while.end100:                                     ; preds = %while.cond93
  br label %if.end141

if.else101:                                       ; preds = %if.then80
  %54 = load i32* %rle_z_count, align 4
  %cmp102 = icmp ule i32 %54, 10
  br i1 %cmp102, label %if.then104, label %if.else122

if.then104:                                       ; preds = %if.else101
  %55 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count105 = getelementptr inbounds %struct.tdefl_compressor* %55, i32 0, i32 36
  %arrayidx106 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count105, i32 0, i64 2
  %arrayidx107 = getelementptr inbounds [288 x i16]* %arrayidx106, i32 0, i64 17
  %56 = load i16* %arrayidx107, align 2
  %conv108 = zext i16 %56 to i32
  %add109 = add nsw i32 %conv108, 1
  %conv110 = trunc i32 %add109 to i16
  %57 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count111 = getelementptr inbounds %struct.tdefl_compressor* %57, i32 0, i32 36
  %arrayidx112 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count111, i32 0, i64 2
  %arrayidx113 = getelementptr inbounds [288 x i16]* %arrayidx112, i32 0, i64 17
  store i16 %conv110, i16* %arrayidx113, align 2
  %58 = load i32* %num_packed_code_sizes, align 4
  %inc114 = add i32 %58, 1
  store i32 %inc114, i32* %num_packed_code_sizes, align 4
  %idxprom115 = zext i32 %58 to i64
  %arrayidx116 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom115
  store i8 17, i8* %arrayidx116, align 1
  %59 = load i32* %rle_z_count, align 4
  %sub117 = sub i32 %59, 3
  %conv118 = trunc i32 %sub117 to i8
  %60 = load i32* %num_packed_code_sizes, align 4
  %inc119 = add i32 %60, 1
  store i32 %inc119, i32* %num_packed_code_sizes, align 4
  %idxprom120 = zext i32 %60 to i64
  %arrayidx121 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom120
  store i8 %conv118, i8* %arrayidx121, align 1
  br label %if.end140

if.else122:                                       ; preds = %if.else101
  %61 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count123 = getelementptr inbounds %struct.tdefl_compressor* %61, i32 0, i32 36
  %arrayidx124 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count123, i32 0, i64 2
  %arrayidx125 = getelementptr inbounds [288 x i16]* %arrayidx124, i32 0, i64 18
  %62 = load i16* %arrayidx125, align 2
  %conv126 = zext i16 %62 to i32
  %add127 = add nsw i32 %conv126, 1
  %conv128 = trunc i32 %add127 to i16
  %63 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count129 = getelementptr inbounds %struct.tdefl_compressor* %63, i32 0, i32 36
  %arrayidx130 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count129, i32 0, i64 2
  %arrayidx131 = getelementptr inbounds [288 x i16]* %arrayidx130, i32 0, i64 18
  store i16 %conv128, i16* %arrayidx131, align 2
  %64 = load i32* %num_packed_code_sizes, align 4
  %inc132 = add i32 %64, 1
  store i32 %inc132, i32* %num_packed_code_sizes, align 4
  %idxprom133 = zext i32 %64 to i64
  %arrayidx134 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom133
  store i8 18, i8* %arrayidx134, align 1
  %65 = load i32* %rle_z_count, align 4
  %sub135 = sub i32 %65, 11
  %conv136 = trunc i32 %sub135 to i8
  %66 = load i32* %num_packed_code_sizes, align 4
  %inc137 = add i32 %66, 1
  store i32 %inc137, i32* %num_packed_code_sizes, align 4
  %idxprom138 = zext i32 %66 to i64
  %arrayidx139 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom138
  store i8 %conv136, i8* %arrayidx139, align 1
  br label %if.end140

if.end140:                                        ; preds = %if.else122, %if.then104
  br label %if.end141

if.end141:                                        ; preds = %if.end140, %while.end100
  store i32 0, i32* %rle_z_count, align 4
  br label %if.end142

if.end142:                                        ; preds = %if.end141, %if.then78
  br label %if.end143

if.end143:                                        ; preds = %if.end142, %if.end74
  br label %if.end323

if.else144:                                       ; preds = %for.body31
  %67 = load i32* %rle_z_count, align 4
  %tobool145 = icmp ne i32 %67, 0
  br i1 %tobool145, label %if.then146, label %if.end208

if.then146:                                       ; preds = %if.else144
  %68 = load i32* %rle_z_count, align 4
  %cmp147 = icmp ult i32 %68, 3
  br i1 %cmp147, label %if.then149, label %if.else167

if.then149:                                       ; preds = %if.then146
  %69 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count150 = getelementptr inbounds %struct.tdefl_compressor* %69, i32 0, i32 36
  %arrayidx151 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count150, i32 0, i64 2
  %arrayidx152 = getelementptr inbounds [288 x i16]* %arrayidx151, i32 0, i64 0
  %70 = load i16* %arrayidx152, align 2
  %conv153 = zext i16 %70 to i32
  %71 = load i32* %rle_z_count, align 4
  %add154 = add i32 %conv153, %71
  %conv155 = trunc i32 %add154 to i16
  %72 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count156 = getelementptr inbounds %struct.tdefl_compressor* %72, i32 0, i32 36
  %arrayidx157 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count156, i32 0, i64 2
  %arrayidx158 = getelementptr inbounds [288 x i16]* %arrayidx157, i32 0, i64 0
  store i16 %conv155, i16* %arrayidx158, align 2
  br label %while.cond159

while.cond159:                                    ; preds = %while.body162, %if.then149
  %73 = load i32* %rle_z_count, align 4
  %dec160 = add i32 %73, -1
  store i32 %dec160, i32* %rle_z_count, align 4
  %tobool161 = icmp ne i32 %73, 0
  br i1 %tobool161, label %while.body162, label %while.end166

while.body162:                                    ; preds = %while.cond159
  %74 = load i32* %num_packed_code_sizes, align 4
  %inc163 = add i32 %74, 1
  store i32 %inc163, i32* %num_packed_code_sizes, align 4
  %idxprom164 = zext i32 %74 to i64
  %arrayidx165 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom164
  store i8 0, i8* %arrayidx165, align 1
  br label %while.cond159

while.end166:                                     ; preds = %while.cond159
  br label %if.end207

if.else167:                                       ; preds = %if.then146
  %75 = load i32* %rle_z_count, align 4
  %cmp168 = icmp ule i32 %75, 10
  br i1 %cmp168, label %if.then170, label %if.else188

if.then170:                                       ; preds = %if.else167
  %76 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count171 = getelementptr inbounds %struct.tdefl_compressor* %76, i32 0, i32 36
  %arrayidx172 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count171, i32 0, i64 2
  %arrayidx173 = getelementptr inbounds [288 x i16]* %arrayidx172, i32 0, i64 17
  %77 = load i16* %arrayidx173, align 2
  %conv174 = zext i16 %77 to i32
  %add175 = add nsw i32 %conv174, 1
  %conv176 = trunc i32 %add175 to i16
  %78 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count177 = getelementptr inbounds %struct.tdefl_compressor* %78, i32 0, i32 36
  %arrayidx178 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count177, i32 0, i64 2
  %arrayidx179 = getelementptr inbounds [288 x i16]* %arrayidx178, i32 0, i64 17
  store i16 %conv176, i16* %arrayidx179, align 2
  %79 = load i32* %num_packed_code_sizes, align 4
  %inc180 = add i32 %79, 1
  store i32 %inc180, i32* %num_packed_code_sizes, align 4
  %idxprom181 = zext i32 %79 to i64
  %arrayidx182 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom181
  store i8 17, i8* %arrayidx182, align 1
  %80 = load i32* %rle_z_count, align 4
  %sub183 = sub i32 %80, 3
  %conv184 = trunc i32 %sub183 to i8
  %81 = load i32* %num_packed_code_sizes, align 4
  %inc185 = add i32 %81, 1
  store i32 %inc185, i32* %num_packed_code_sizes, align 4
  %idxprom186 = zext i32 %81 to i64
  %arrayidx187 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom186
  store i8 %conv184, i8* %arrayidx187, align 1
  br label %if.end206

if.else188:                                       ; preds = %if.else167
  %82 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count189 = getelementptr inbounds %struct.tdefl_compressor* %82, i32 0, i32 36
  %arrayidx190 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count189, i32 0, i64 2
  %arrayidx191 = getelementptr inbounds [288 x i16]* %arrayidx190, i32 0, i64 18
  %83 = load i16* %arrayidx191, align 2
  %conv192 = zext i16 %83 to i32
  %add193 = add nsw i32 %conv192, 1
  %conv194 = trunc i32 %add193 to i16
  %84 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count195 = getelementptr inbounds %struct.tdefl_compressor* %84, i32 0, i32 36
  %arrayidx196 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count195, i32 0, i64 2
  %arrayidx197 = getelementptr inbounds [288 x i16]* %arrayidx196, i32 0, i64 18
  store i16 %conv194, i16* %arrayidx197, align 2
  %85 = load i32* %num_packed_code_sizes, align 4
  %inc198 = add i32 %85, 1
  store i32 %inc198, i32* %num_packed_code_sizes, align 4
  %idxprom199 = zext i32 %85 to i64
  %arrayidx200 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom199
  store i8 18, i8* %arrayidx200, align 1
  %86 = load i32* %rle_z_count, align 4
  %sub201 = sub i32 %86, 11
  %conv202 = trunc i32 %sub201 to i8
  %87 = load i32* %num_packed_code_sizes, align 4
  %inc203 = add i32 %87, 1
  store i32 %inc203, i32* %num_packed_code_sizes, align 4
  %idxprom204 = zext i32 %87 to i64
  %arrayidx205 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom204
  store i8 %conv202, i8* %arrayidx205, align 1
  br label %if.end206

if.end206:                                        ; preds = %if.else188, %if.then170
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %while.end166
  store i32 0, i32* %rle_z_count, align 4
  br label %if.end208

if.end208:                                        ; preds = %if.end207, %if.else144
  %88 = load i8* %code_size, align 1
  %conv209 = zext i8 %88 to i32
  %89 = load i8* %prev_code_size, align 1
  %conv210 = zext i8 %89 to i32
  %cmp211 = icmp ne i32 %conv209, %conv210
  br i1 %cmp211, label %if.then213, label %if.else272

if.then213:                                       ; preds = %if.end208
  %90 = load i32* %rle_repeat_count, align 4
  %tobool214 = icmp ne i32 %90, 0
  br i1 %tobool214, label %if.then215, label %if.end257

if.then215:                                       ; preds = %if.then213
  %91 = load i32* %rle_repeat_count, align 4
  %cmp216 = icmp ult i32 %91, 3
  br i1 %cmp216, label %if.then218, label %if.else238

if.then218:                                       ; preds = %if.then215
  %92 = load i8* %prev_code_size, align 1
  %idxprom219 = zext i8 %92 to i64
  %93 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count220 = getelementptr inbounds %struct.tdefl_compressor* %93, i32 0, i32 36
  %arrayidx221 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count220, i32 0, i64 2
  %arrayidx222 = getelementptr inbounds [288 x i16]* %arrayidx221, i32 0, i64 %idxprom219
  %94 = load i16* %arrayidx222, align 2
  %conv223 = zext i16 %94 to i32
  %95 = load i32* %rle_repeat_count, align 4
  %add224 = add i32 %conv223, %95
  %conv225 = trunc i32 %add224 to i16
  %96 = load i8* %prev_code_size, align 1
  %idxprom226 = zext i8 %96 to i64
  %97 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count227 = getelementptr inbounds %struct.tdefl_compressor* %97, i32 0, i32 36
  %arrayidx228 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count227, i32 0, i64 2
  %arrayidx229 = getelementptr inbounds [288 x i16]* %arrayidx228, i32 0, i64 %idxprom226
  store i16 %conv225, i16* %arrayidx229, align 2
  br label %while.cond230

while.cond230:                                    ; preds = %while.body233, %if.then218
  %98 = load i32* %rle_repeat_count, align 4
  %dec231 = add i32 %98, -1
  store i32 %dec231, i32* %rle_repeat_count, align 4
  %tobool232 = icmp ne i32 %98, 0
  br i1 %tobool232, label %while.body233, label %while.end237

while.body233:                                    ; preds = %while.cond230
  %99 = load i8* %prev_code_size, align 1
  %100 = load i32* %num_packed_code_sizes, align 4
  %inc234 = add i32 %100, 1
  store i32 %inc234, i32* %num_packed_code_sizes, align 4
  %idxprom235 = zext i32 %100 to i64
  %arrayidx236 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom235
  store i8 %99, i8* %arrayidx236, align 1
  br label %while.cond230

while.end237:                                     ; preds = %while.cond230
  br label %if.end256

if.else238:                                       ; preds = %if.then215
  %101 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count239 = getelementptr inbounds %struct.tdefl_compressor* %101, i32 0, i32 36
  %arrayidx240 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count239, i32 0, i64 2
  %arrayidx241 = getelementptr inbounds [288 x i16]* %arrayidx240, i32 0, i64 16
  %102 = load i16* %arrayidx241, align 2
  %conv242 = zext i16 %102 to i32
  %add243 = add nsw i32 %conv242, 1
  %conv244 = trunc i32 %add243 to i16
  %103 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count245 = getelementptr inbounds %struct.tdefl_compressor* %103, i32 0, i32 36
  %arrayidx246 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count245, i32 0, i64 2
  %arrayidx247 = getelementptr inbounds [288 x i16]* %arrayidx246, i32 0, i64 16
  store i16 %conv244, i16* %arrayidx247, align 2
  %104 = load i32* %num_packed_code_sizes, align 4
  %inc248 = add i32 %104, 1
  store i32 %inc248, i32* %num_packed_code_sizes, align 4
  %idxprom249 = zext i32 %104 to i64
  %arrayidx250 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom249
  store i8 16, i8* %arrayidx250, align 1
  %105 = load i32* %rle_repeat_count, align 4
  %sub251 = sub i32 %105, 3
  %conv252 = trunc i32 %sub251 to i8
  %106 = load i32* %num_packed_code_sizes, align 4
  %inc253 = add i32 %106, 1
  store i32 %inc253, i32* %num_packed_code_sizes, align 4
  %idxprom254 = zext i32 %106 to i64
  %arrayidx255 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom254
  store i8 %conv252, i8* %arrayidx255, align 1
  br label %if.end256

if.end256:                                        ; preds = %if.else238, %while.end237
  store i32 0, i32* %rle_repeat_count, align 4
  br label %if.end257

if.end257:                                        ; preds = %if.end256, %if.then213
  %107 = load i8* %code_size, align 1
  %idxprom258 = zext i8 %107 to i64
  %108 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count259 = getelementptr inbounds %struct.tdefl_compressor* %108, i32 0, i32 36
  %arrayidx260 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count259, i32 0, i64 2
  %arrayidx261 = getelementptr inbounds [288 x i16]* %arrayidx260, i32 0, i64 %idxprom258
  %109 = load i16* %arrayidx261, align 2
  %conv262 = zext i16 %109 to i32
  %add263 = add nsw i32 %conv262, 1
  %conv264 = trunc i32 %add263 to i16
  %110 = load i8* %code_size, align 1
  %idxprom265 = zext i8 %110 to i64
  %111 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count266 = getelementptr inbounds %struct.tdefl_compressor* %111, i32 0, i32 36
  %arrayidx267 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count266, i32 0, i64 2
  %arrayidx268 = getelementptr inbounds [288 x i16]* %arrayidx267, i32 0, i64 %idxprom265
  store i16 %conv264, i16* %arrayidx268, align 2
  %112 = load i8* %code_size, align 1
  %113 = load i32* %num_packed_code_sizes, align 4
  %inc269 = add i32 %113, 1
  store i32 %inc269, i32* %num_packed_code_sizes, align 4
  %idxprom270 = zext i32 %113 to i64
  %arrayidx271 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom270
  store i8 %112, i8* %arrayidx271, align 1
  br label %if.end322

if.else272:                                       ; preds = %if.end208
  %114 = load i32* %rle_repeat_count, align 4
  %inc273 = add i32 %114, 1
  store i32 %inc273, i32* %rle_repeat_count, align 4
  %cmp274 = icmp eq i32 %inc273, 6
  br i1 %cmp274, label %if.then276, label %if.end321

if.then276:                                       ; preds = %if.else272
  %115 = load i32* %rle_repeat_count, align 4
  %tobool277 = icmp ne i32 %115, 0
  br i1 %tobool277, label %if.then278, label %if.end320

if.then278:                                       ; preds = %if.then276
  %116 = load i32* %rle_repeat_count, align 4
  %cmp279 = icmp ult i32 %116, 3
  br i1 %cmp279, label %if.then281, label %if.else301

if.then281:                                       ; preds = %if.then278
  %117 = load i8* %prev_code_size, align 1
  %idxprom282 = zext i8 %117 to i64
  %118 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count283 = getelementptr inbounds %struct.tdefl_compressor* %118, i32 0, i32 36
  %arrayidx284 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count283, i32 0, i64 2
  %arrayidx285 = getelementptr inbounds [288 x i16]* %arrayidx284, i32 0, i64 %idxprom282
  %119 = load i16* %arrayidx285, align 2
  %conv286 = zext i16 %119 to i32
  %120 = load i32* %rle_repeat_count, align 4
  %add287 = add i32 %conv286, %120
  %conv288 = trunc i32 %add287 to i16
  %121 = load i8* %prev_code_size, align 1
  %idxprom289 = zext i8 %121 to i64
  %122 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count290 = getelementptr inbounds %struct.tdefl_compressor* %122, i32 0, i32 36
  %arrayidx291 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count290, i32 0, i64 2
  %arrayidx292 = getelementptr inbounds [288 x i16]* %arrayidx291, i32 0, i64 %idxprom289
  store i16 %conv288, i16* %arrayidx292, align 2
  br label %while.cond293

while.cond293:                                    ; preds = %while.body296, %if.then281
  %123 = load i32* %rle_repeat_count, align 4
  %dec294 = add i32 %123, -1
  store i32 %dec294, i32* %rle_repeat_count, align 4
  %tobool295 = icmp ne i32 %123, 0
  br i1 %tobool295, label %while.body296, label %while.end300

while.body296:                                    ; preds = %while.cond293
  %124 = load i8* %prev_code_size, align 1
  %125 = load i32* %num_packed_code_sizes, align 4
  %inc297 = add i32 %125, 1
  store i32 %inc297, i32* %num_packed_code_sizes, align 4
  %idxprom298 = zext i32 %125 to i64
  %arrayidx299 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom298
  store i8 %124, i8* %arrayidx299, align 1
  br label %while.cond293

while.end300:                                     ; preds = %while.cond293
  br label %if.end319

if.else301:                                       ; preds = %if.then278
  %126 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count302 = getelementptr inbounds %struct.tdefl_compressor* %126, i32 0, i32 36
  %arrayidx303 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count302, i32 0, i64 2
  %arrayidx304 = getelementptr inbounds [288 x i16]* %arrayidx303, i32 0, i64 16
  %127 = load i16* %arrayidx304, align 2
  %conv305 = zext i16 %127 to i32
  %add306 = add nsw i32 %conv305, 1
  %conv307 = trunc i32 %add306 to i16
  %128 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count308 = getelementptr inbounds %struct.tdefl_compressor* %128, i32 0, i32 36
  %arrayidx309 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count308, i32 0, i64 2
  %arrayidx310 = getelementptr inbounds [288 x i16]* %arrayidx309, i32 0, i64 16
  store i16 %conv307, i16* %arrayidx310, align 2
  %129 = load i32* %num_packed_code_sizes, align 4
  %inc311 = add i32 %129, 1
  store i32 %inc311, i32* %num_packed_code_sizes, align 4
  %idxprom312 = zext i32 %129 to i64
  %arrayidx313 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom312
  store i8 16, i8* %arrayidx313, align 1
  %130 = load i32* %rle_repeat_count, align 4
  %sub314 = sub i32 %130, 3
  %conv315 = trunc i32 %sub314 to i8
  %131 = load i32* %num_packed_code_sizes, align 4
  %inc316 = add i32 %131, 1
  store i32 %inc316, i32* %num_packed_code_sizes, align 4
  %idxprom317 = zext i32 %131 to i64
  %arrayidx318 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom317
  store i8 %conv315, i8* %arrayidx318, align 1
  br label %if.end319

if.end319:                                        ; preds = %if.else301, %while.end300
  store i32 0, i32* %rle_repeat_count, align 4
  br label %if.end320

if.end320:                                        ; preds = %if.end319, %if.then276
  br label %if.end321

if.end321:                                        ; preds = %if.end320, %if.else272
  br label %if.end322

if.end322:                                        ; preds = %if.end321, %if.end257
  br label %if.end323

if.end323:                                        ; preds = %if.end322, %if.end143
  %132 = load i8* %code_size, align 1
  store i8 %132, i8* %prev_code_size, align 1
  br label %for.inc324

for.inc324:                                       ; preds = %if.end323
  %133 = load i32* %i, align 4
  %inc325 = add i32 %133, 1
  store i32 %inc325, i32* %i, align 4
  br label %for.cond28

for.end326:                                       ; preds = %for.cond28
  %134 = load i32* %rle_repeat_count, align 4
  %tobool327 = icmp ne i32 %134, 0
  br i1 %tobool327, label %if.then328, label %if.else373

if.then328:                                       ; preds = %for.end326
  %135 = load i32* %rle_repeat_count, align 4
  %tobool329 = icmp ne i32 %135, 0
  br i1 %tobool329, label %if.then330, label %if.end372

if.then330:                                       ; preds = %if.then328
  %136 = load i32* %rle_repeat_count, align 4
  %cmp331 = icmp ult i32 %136, 3
  br i1 %cmp331, label %if.then333, label %if.else353

if.then333:                                       ; preds = %if.then330
  %137 = load i8* %prev_code_size, align 1
  %idxprom334 = zext i8 %137 to i64
  %138 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count335 = getelementptr inbounds %struct.tdefl_compressor* %138, i32 0, i32 36
  %arrayidx336 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count335, i32 0, i64 2
  %arrayidx337 = getelementptr inbounds [288 x i16]* %arrayidx336, i32 0, i64 %idxprom334
  %139 = load i16* %arrayidx337, align 2
  %conv338 = zext i16 %139 to i32
  %140 = load i32* %rle_repeat_count, align 4
  %add339 = add i32 %conv338, %140
  %conv340 = trunc i32 %add339 to i16
  %141 = load i8* %prev_code_size, align 1
  %idxprom341 = zext i8 %141 to i64
  %142 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count342 = getelementptr inbounds %struct.tdefl_compressor* %142, i32 0, i32 36
  %arrayidx343 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count342, i32 0, i64 2
  %arrayidx344 = getelementptr inbounds [288 x i16]* %arrayidx343, i32 0, i64 %idxprom341
  store i16 %conv340, i16* %arrayidx344, align 2
  br label %while.cond345

while.cond345:                                    ; preds = %while.body348, %if.then333
  %143 = load i32* %rle_repeat_count, align 4
  %dec346 = add i32 %143, -1
  store i32 %dec346, i32* %rle_repeat_count, align 4
  %tobool347 = icmp ne i32 %143, 0
  br i1 %tobool347, label %while.body348, label %while.end352

while.body348:                                    ; preds = %while.cond345
  %144 = load i8* %prev_code_size, align 1
  %145 = load i32* %num_packed_code_sizes, align 4
  %inc349 = add i32 %145, 1
  store i32 %inc349, i32* %num_packed_code_sizes, align 4
  %idxprom350 = zext i32 %145 to i64
  %arrayidx351 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom350
  store i8 %144, i8* %arrayidx351, align 1
  br label %while.cond345

while.end352:                                     ; preds = %while.cond345
  br label %if.end371

if.else353:                                       ; preds = %if.then330
  %146 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count354 = getelementptr inbounds %struct.tdefl_compressor* %146, i32 0, i32 36
  %arrayidx355 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count354, i32 0, i64 2
  %arrayidx356 = getelementptr inbounds [288 x i16]* %arrayidx355, i32 0, i64 16
  %147 = load i16* %arrayidx356, align 2
  %conv357 = zext i16 %147 to i32
  %add358 = add nsw i32 %conv357, 1
  %conv359 = trunc i32 %add358 to i16
  %148 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count360 = getelementptr inbounds %struct.tdefl_compressor* %148, i32 0, i32 36
  %arrayidx361 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count360, i32 0, i64 2
  %arrayidx362 = getelementptr inbounds [288 x i16]* %arrayidx361, i32 0, i64 16
  store i16 %conv359, i16* %arrayidx362, align 2
  %149 = load i32* %num_packed_code_sizes, align 4
  %inc363 = add i32 %149, 1
  store i32 %inc363, i32* %num_packed_code_sizes, align 4
  %idxprom364 = zext i32 %149 to i64
  %arrayidx365 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom364
  store i8 16, i8* %arrayidx365, align 1
  %150 = load i32* %rle_repeat_count, align 4
  %sub366 = sub i32 %150, 3
  %conv367 = trunc i32 %sub366 to i8
  %151 = load i32* %num_packed_code_sizes, align 4
  %inc368 = add i32 %151, 1
  store i32 %inc368, i32* %num_packed_code_sizes, align 4
  %idxprom369 = zext i32 %151 to i64
  %arrayidx370 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom369
  store i8 %conv367, i8* %arrayidx370, align 1
  br label %if.end371

if.end371:                                        ; preds = %if.else353, %while.end352
  store i32 0, i32* %rle_repeat_count, align 4
  br label %if.end372

if.end372:                                        ; preds = %if.end371, %if.then328
  br label %if.end438

if.else373:                                       ; preds = %for.end326
  %152 = load i32* %rle_z_count, align 4
  %tobool374 = icmp ne i32 %152, 0
  br i1 %tobool374, label %if.then375, label %if.end437

if.then375:                                       ; preds = %if.else373
  %153 = load i32* %rle_z_count, align 4
  %cmp376 = icmp ult i32 %153, 3
  br i1 %cmp376, label %if.then378, label %if.else396

if.then378:                                       ; preds = %if.then375
  %154 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count379 = getelementptr inbounds %struct.tdefl_compressor* %154, i32 0, i32 36
  %arrayidx380 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count379, i32 0, i64 2
  %arrayidx381 = getelementptr inbounds [288 x i16]* %arrayidx380, i32 0, i64 0
  %155 = load i16* %arrayidx381, align 2
  %conv382 = zext i16 %155 to i32
  %156 = load i32* %rle_z_count, align 4
  %add383 = add i32 %conv382, %156
  %conv384 = trunc i32 %add383 to i16
  %157 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count385 = getelementptr inbounds %struct.tdefl_compressor* %157, i32 0, i32 36
  %arrayidx386 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count385, i32 0, i64 2
  %arrayidx387 = getelementptr inbounds [288 x i16]* %arrayidx386, i32 0, i64 0
  store i16 %conv384, i16* %arrayidx387, align 2
  br label %while.cond388

while.cond388:                                    ; preds = %while.body391, %if.then378
  %158 = load i32* %rle_z_count, align 4
  %dec389 = add i32 %158, -1
  store i32 %dec389, i32* %rle_z_count, align 4
  %tobool390 = icmp ne i32 %158, 0
  br i1 %tobool390, label %while.body391, label %while.end395

while.body391:                                    ; preds = %while.cond388
  %159 = load i32* %num_packed_code_sizes, align 4
  %inc392 = add i32 %159, 1
  store i32 %inc392, i32* %num_packed_code_sizes, align 4
  %idxprom393 = zext i32 %159 to i64
  %arrayidx394 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom393
  store i8 0, i8* %arrayidx394, align 1
  br label %while.cond388

while.end395:                                     ; preds = %while.cond388
  br label %if.end436

if.else396:                                       ; preds = %if.then375
  %160 = load i32* %rle_z_count, align 4
  %cmp397 = icmp ule i32 %160, 10
  br i1 %cmp397, label %if.then399, label %if.else417

if.then399:                                       ; preds = %if.else396
  %161 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count400 = getelementptr inbounds %struct.tdefl_compressor* %161, i32 0, i32 36
  %arrayidx401 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count400, i32 0, i64 2
  %arrayidx402 = getelementptr inbounds [288 x i16]* %arrayidx401, i32 0, i64 17
  %162 = load i16* %arrayidx402, align 2
  %conv403 = zext i16 %162 to i32
  %add404 = add nsw i32 %conv403, 1
  %conv405 = trunc i32 %add404 to i16
  %163 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count406 = getelementptr inbounds %struct.tdefl_compressor* %163, i32 0, i32 36
  %arrayidx407 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count406, i32 0, i64 2
  %arrayidx408 = getelementptr inbounds [288 x i16]* %arrayidx407, i32 0, i64 17
  store i16 %conv405, i16* %arrayidx408, align 2
  %164 = load i32* %num_packed_code_sizes, align 4
  %inc409 = add i32 %164, 1
  store i32 %inc409, i32* %num_packed_code_sizes, align 4
  %idxprom410 = zext i32 %164 to i64
  %arrayidx411 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom410
  store i8 17, i8* %arrayidx411, align 1
  %165 = load i32* %rle_z_count, align 4
  %sub412 = sub i32 %165, 3
  %conv413 = trunc i32 %sub412 to i8
  %166 = load i32* %num_packed_code_sizes, align 4
  %inc414 = add i32 %166, 1
  store i32 %inc414, i32* %num_packed_code_sizes, align 4
  %idxprom415 = zext i32 %166 to i64
  %arrayidx416 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom415
  store i8 %conv413, i8* %arrayidx416, align 1
  br label %if.end435

if.else417:                                       ; preds = %if.else396
  %167 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count418 = getelementptr inbounds %struct.tdefl_compressor* %167, i32 0, i32 36
  %arrayidx419 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count418, i32 0, i64 2
  %arrayidx420 = getelementptr inbounds [288 x i16]* %arrayidx419, i32 0, i64 18
  %168 = load i16* %arrayidx420, align 2
  %conv421 = zext i16 %168 to i32
  %add422 = add nsw i32 %conv421, 1
  %conv423 = trunc i32 %add422 to i16
  %169 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count424 = getelementptr inbounds %struct.tdefl_compressor* %169, i32 0, i32 36
  %arrayidx425 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count424, i32 0, i64 2
  %arrayidx426 = getelementptr inbounds [288 x i16]* %arrayidx425, i32 0, i64 18
  store i16 %conv423, i16* %arrayidx426, align 2
  %170 = load i32* %num_packed_code_sizes, align 4
  %inc427 = add i32 %170, 1
  store i32 %inc427, i32* %num_packed_code_sizes, align 4
  %idxprom428 = zext i32 %170 to i64
  %arrayidx429 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom428
  store i8 18, i8* %arrayidx429, align 1
  %171 = load i32* %rle_z_count, align 4
  %sub430 = sub i32 %171, 11
  %conv431 = trunc i32 %sub430 to i8
  %172 = load i32* %num_packed_code_sizes, align 4
  %inc432 = add i32 %172, 1
  store i32 %inc432, i32* %num_packed_code_sizes, align 4
  %idxprom433 = zext i32 %172 to i64
  %arrayidx434 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom433
  store i8 %conv431, i8* %arrayidx434, align 1
  br label %if.end435

if.end435:                                        ; preds = %if.else417, %if.then399
  br label %if.end436

if.end436:                                        ; preds = %if.end435, %while.end395
  store i32 0, i32* %rle_z_count, align 4
  br label %if.end437

if.end437:                                        ; preds = %if.end436, %if.else373
  br label %if.end438

if.end438:                                        ; preds = %if.end437, %if.end372
  %173 = load %struct.tdefl_compressor** %d.addr, align 8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %173, i32 2, i32 19, i32 7, i32 0)
  br label %do.body

do.body:                                          ; preds = %if.end438
  store i32 2, i32* %bits, align 4
  store i32 2, i32* %len, align 4
  %174 = load i32* %bits, align 4
  %175 = load i32* %len, align 4
  %shl = shl i32 1, %175
  %sub439 = sub i32 %shl, 1
  %cmp440 = icmp ule i32 %174, %sub439
  br i1 %cmp440, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br label %cond.end

cond.false:                                       ; preds = %do.body
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 1981, i8* getelementptr inbounds ([51 x i8]* @__PRETTY_FUNCTION__.tdefl_start_dynamic_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %176, %cond.true
  %177 = load i32* %bits, align 4
  %178 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor* %178, i32 0, i32 16
  %179 = load i32* %m_bits_in, align 4
  %shl442 = shl i32 %177, %179
  %180 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor* %180, i32 0, i32 17
  %181 = load i32* %m_bit_buffer, align 4
  %or = or i32 %181, %shl442
  store i32 %or, i32* %m_bit_buffer, align 4
  %182 = load i32* %len, align 4
  %183 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in443 = getelementptr inbounds %struct.tdefl_compressor* %183, i32 0, i32 16
  %184 = load i32* %m_bits_in443, align 4
  %add444 = add i32 %184, %182
  store i32 %add444, i32* %m_bits_in443, align 4
  br label %while.cond445

while.cond445:                                    ; preds = %if.end456, %cond.end
  %185 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in446 = getelementptr inbounds %struct.tdefl_compressor* %185, i32 0, i32 16
  %186 = load i32* %m_bits_in446, align 4
  %cmp447 = icmp uge i32 %186, 8
  br i1 %cmp447, label %while.body449, label %while.end460

while.body449:                                    ; preds = %while.cond445
  %187 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor* %187, i32 0, i32 11
  %188 = load i8** %m_pOutput_buf, align 8
  %189 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor* %189, i32 0, i32 12
  %190 = load i8** %m_pOutput_buf_end, align 8
  %cmp450 = icmp ult i8* %188, %190
  br i1 %cmp450, label %if.then452, label %if.end456

if.then452:                                       ; preds = %while.body449
  %191 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer453 = getelementptr inbounds %struct.tdefl_compressor* %191, i32 0, i32 17
  %192 = load i32* %m_bit_buffer453, align 4
  %conv454 = trunc i32 %192 to i8
  %193 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf455 = getelementptr inbounds %struct.tdefl_compressor* %193, i32 0, i32 11
  %194 = load i8** %m_pOutput_buf455, align 8
  %incdec.ptr = getelementptr inbounds i8* %194, i32 1
  store i8* %incdec.ptr, i8** %m_pOutput_buf455, align 8
  store i8 %conv454, i8* %194, align 1
  br label %if.end456

if.end456:                                        ; preds = %if.then452, %while.body449
  %195 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer457 = getelementptr inbounds %struct.tdefl_compressor* %195, i32 0, i32 17
  %196 = load i32* %m_bit_buffer457, align 4
  %shr = lshr i32 %196, 8
  store i32 %shr, i32* %m_bit_buffer457, align 4
  %197 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in458 = getelementptr inbounds %struct.tdefl_compressor* %197, i32 0, i32 16
  %198 = load i32* %m_bits_in458, align 4
  %sub459 = sub i32 %198, 8
  store i32 %sub459, i32* %m_bits_in458, align 4
  br label %while.cond445

while.end460:                                     ; preds = %while.cond445
  br label %do.end

do.end:                                           ; preds = %while.end460
  br label %do.body461

do.body461:                                       ; preds = %do.end
  %199 = load i32* %num_lit_codes, align 4
  %sub463 = sub nsw i32 %199, 257
  store i32 %sub463, i32* %bits462, align 4
  store i32 5, i32* %len464, align 4
  %200 = load i32* %bits462, align 4
  %201 = load i32* %len464, align 4
  %shl465 = shl i32 1, %201
  %sub466 = sub i32 %shl465, 1
  %cmp467 = icmp ule i32 %200, %sub466
  br i1 %cmp467, label %cond.true469, label %cond.false470

cond.true469:                                     ; preds = %do.body461
  br label %cond.end471

cond.false470:                                    ; preds = %do.body461
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 1983, i8* getelementptr inbounds ([51 x i8]* @__PRETTY_FUNCTION__.tdefl_start_dynamic_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end471

cond.end471:                                      ; preds = %202, %cond.true469
  %203 = load i32* %bits462, align 4
  %204 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in472 = getelementptr inbounds %struct.tdefl_compressor* %204, i32 0, i32 16
  %205 = load i32* %m_bits_in472, align 4
  %shl473 = shl i32 %203, %205
  %206 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer474 = getelementptr inbounds %struct.tdefl_compressor* %206, i32 0, i32 17
  %207 = load i32* %m_bit_buffer474, align 4
  %or475 = or i32 %207, %shl473
  store i32 %or475, i32* %m_bit_buffer474, align 4
  %208 = load i32* %len464, align 4
  %209 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in476 = getelementptr inbounds %struct.tdefl_compressor* %209, i32 0, i32 16
  %210 = load i32* %m_bits_in476, align 4
  %add477 = add i32 %210, %208
  store i32 %add477, i32* %m_bits_in476, align 4
  br label %while.cond478

while.cond478:                                    ; preds = %if.end492, %cond.end471
  %211 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in479 = getelementptr inbounds %struct.tdefl_compressor* %211, i32 0, i32 16
  %212 = load i32* %m_bits_in479, align 4
  %cmp480 = icmp uge i32 %212, 8
  br i1 %cmp480, label %while.body482, label %while.end497

while.body482:                                    ; preds = %while.cond478
  %213 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf483 = getelementptr inbounds %struct.tdefl_compressor* %213, i32 0, i32 11
  %214 = load i8** %m_pOutput_buf483, align 8
  %215 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end484 = getelementptr inbounds %struct.tdefl_compressor* %215, i32 0, i32 12
  %216 = load i8** %m_pOutput_buf_end484, align 8
  %cmp485 = icmp ult i8* %214, %216
  br i1 %cmp485, label %if.then487, label %if.end492

if.then487:                                       ; preds = %while.body482
  %217 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer488 = getelementptr inbounds %struct.tdefl_compressor* %217, i32 0, i32 17
  %218 = load i32* %m_bit_buffer488, align 4
  %conv489 = trunc i32 %218 to i8
  %219 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf490 = getelementptr inbounds %struct.tdefl_compressor* %219, i32 0, i32 11
  %220 = load i8** %m_pOutput_buf490, align 8
  %incdec.ptr491 = getelementptr inbounds i8* %220, i32 1
  store i8* %incdec.ptr491, i8** %m_pOutput_buf490, align 8
  store i8 %conv489, i8* %220, align 1
  br label %if.end492

if.end492:                                        ; preds = %if.then487, %while.body482
  %221 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer493 = getelementptr inbounds %struct.tdefl_compressor* %221, i32 0, i32 17
  %222 = load i32* %m_bit_buffer493, align 4
  %shr494 = lshr i32 %222, 8
  store i32 %shr494, i32* %m_bit_buffer493, align 4
  %223 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in495 = getelementptr inbounds %struct.tdefl_compressor* %223, i32 0, i32 16
  %224 = load i32* %m_bits_in495, align 4
  %sub496 = sub i32 %224, 8
  store i32 %sub496, i32* %m_bits_in495, align 4
  br label %while.cond478

while.end497:                                     ; preds = %while.cond478
  br label %do.end498

do.end498:                                        ; preds = %while.end497
  br label %do.body499

do.body499:                                       ; preds = %do.end498
  %225 = load i32* %num_dist_codes, align 4
  %sub501 = sub nsw i32 %225, 1
  store i32 %sub501, i32* %bits500, align 4
  store i32 5, i32* %len502, align 4
  %226 = load i32* %bits500, align 4
  %227 = load i32* %len502, align 4
  %shl503 = shl i32 1, %227
  %sub504 = sub i32 %shl503, 1
  %cmp505 = icmp ule i32 %226, %sub504
  br i1 %cmp505, label %cond.true507, label %cond.false508

cond.true507:                                     ; preds = %do.body499
  br label %cond.end509

cond.false508:                                    ; preds = %do.body499
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 1984, i8* getelementptr inbounds ([51 x i8]* @__PRETTY_FUNCTION__.tdefl_start_dynamic_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end509

cond.end509:                                      ; preds = %228, %cond.true507
  %229 = load i32* %bits500, align 4
  %230 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in510 = getelementptr inbounds %struct.tdefl_compressor* %230, i32 0, i32 16
  %231 = load i32* %m_bits_in510, align 4
  %shl511 = shl i32 %229, %231
  %232 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer512 = getelementptr inbounds %struct.tdefl_compressor* %232, i32 0, i32 17
  %233 = load i32* %m_bit_buffer512, align 4
  %or513 = or i32 %233, %shl511
  store i32 %or513, i32* %m_bit_buffer512, align 4
  %234 = load i32* %len502, align 4
  %235 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in514 = getelementptr inbounds %struct.tdefl_compressor* %235, i32 0, i32 16
  %236 = load i32* %m_bits_in514, align 4
  %add515 = add i32 %236, %234
  store i32 %add515, i32* %m_bits_in514, align 4
  br label %while.cond516

while.cond516:                                    ; preds = %if.end530, %cond.end509
  %237 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in517 = getelementptr inbounds %struct.tdefl_compressor* %237, i32 0, i32 16
  %238 = load i32* %m_bits_in517, align 4
  %cmp518 = icmp uge i32 %238, 8
  br i1 %cmp518, label %while.body520, label %while.end535

while.body520:                                    ; preds = %while.cond516
  %239 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf521 = getelementptr inbounds %struct.tdefl_compressor* %239, i32 0, i32 11
  %240 = load i8** %m_pOutput_buf521, align 8
  %241 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end522 = getelementptr inbounds %struct.tdefl_compressor* %241, i32 0, i32 12
  %242 = load i8** %m_pOutput_buf_end522, align 8
  %cmp523 = icmp ult i8* %240, %242
  br i1 %cmp523, label %if.then525, label %if.end530

if.then525:                                       ; preds = %while.body520
  %243 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer526 = getelementptr inbounds %struct.tdefl_compressor* %243, i32 0, i32 17
  %244 = load i32* %m_bit_buffer526, align 4
  %conv527 = trunc i32 %244 to i8
  %245 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf528 = getelementptr inbounds %struct.tdefl_compressor* %245, i32 0, i32 11
  %246 = load i8** %m_pOutput_buf528, align 8
  %incdec.ptr529 = getelementptr inbounds i8* %246, i32 1
  store i8* %incdec.ptr529, i8** %m_pOutput_buf528, align 8
  store i8 %conv527, i8* %246, align 1
  br label %if.end530

if.end530:                                        ; preds = %if.then525, %while.body520
  %247 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer531 = getelementptr inbounds %struct.tdefl_compressor* %247, i32 0, i32 17
  %248 = load i32* %m_bit_buffer531, align 4
  %shr532 = lshr i32 %248, 8
  store i32 %shr532, i32* %m_bit_buffer531, align 4
  %249 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in533 = getelementptr inbounds %struct.tdefl_compressor* %249, i32 0, i32 16
  %250 = load i32* %m_bits_in533, align 4
  %sub534 = sub i32 %250, 8
  store i32 %sub534, i32* %m_bits_in533, align 4
  br label %while.cond516

while.end535:                                     ; preds = %while.cond516
  br label %do.end536

do.end536:                                        ; preds = %while.end535
  store i32 18, i32* %num_bit_lengths, align 4
  br label %for.cond537

for.cond537:                                      ; preds = %for.inc550, %do.end536
  %251 = load i32* %num_bit_lengths, align 4
  %cmp538 = icmp sge i32 %251, 0
  br i1 %cmp538, label %for.body540, label %for.end552

for.body540:                                      ; preds = %for.cond537
  %252 = load i32* %num_bit_lengths, align 4
  %idxprom541 = sext i32 %252 to i64
  %arrayidx542 = getelementptr inbounds [19 x i8]* @s_tdefl_packed_code_size_syms_swizzle, i32 0, i64 %idxprom541
  %253 = load i8* %arrayidx542, align 1
  %idxprom543 = zext i8 %253 to i64
  %254 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes544 = getelementptr inbounds %struct.tdefl_compressor* %254, i32 0, i32 38
  %arrayidx545 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes544, i32 0, i64 2
  %arrayidx546 = getelementptr inbounds [288 x i8]* %arrayidx545, i32 0, i64 %idxprom543
  %255 = load i8* %arrayidx546, align 1
  %tobool547 = icmp ne i8 %255, 0
  br i1 %tobool547, label %if.then548, label %if.end549

if.then548:                                       ; preds = %for.body540
  br label %for.end552

if.end549:                                        ; preds = %for.body540
  br label %for.inc550

for.inc550:                                       ; preds = %if.end549
  %256 = load i32* %num_bit_lengths, align 4
  %dec551 = add nsw i32 %256, -1
  store i32 %dec551, i32* %num_bit_lengths, align 4
  br label %for.cond537

for.end552:                                       ; preds = %if.then548, %for.cond537
  %257 = load i32* %num_bit_lengths, align 4
  %add553 = add nsw i32 %257, 1
  %cmp554 = icmp sgt i32 4, %add553
  br i1 %cmp554, label %cond.true556, label %cond.false557

cond.true556:                                     ; preds = %for.end552
  br label %cond.end559

cond.false557:                                    ; preds = %for.end552
  %258 = load i32* %num_bit_lengths, align 4
  %add558 = add nsw i32 %258, 1
  br label %cond.end559

cond.end559:                                      ; preds = %cond.false557, %cond.true556
  %cond = phi i32 [ 4, %cond.true556 ], [ %add558, %cond.false557 ]
  store i32 %cond, i32* %num_bit_lengths, align 4
  br label %do.body560

do.body560:                                       ; preds = %cond.end559
  %259 = load i32* %num_bit_lengths, align 4
  %sub562 = sub nsw i32 %259, 4
  store i32 %sub562, i32* %bits561, align 4
  store i32 4, i32* %len563, align 4
  %260 = load i32* %bits561, align 4
  %261 = load i32* %len563, align 4
  %shl564 = shl i32 1, %261
  %sub565 = sub i32 %shl564, 1
  %cmp566 = icmp ule i32 %260, %sub565
  br i1 %cmp566, label %cond.true568, label %cond.false569

cond.true568:                                     ; preds = %do.body560
  br label %cond.end570

cond.false569:                                    ; preds = %do.body560
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 1987, i8* getelementptr inbounds ([51 x i8]* @__PRETTY_FUNCTION__.tdefl_start_dynamic_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end570

cond.end570:                                      ; preds = %262, %cond.true568
  %263 = load i32* %bits561, align 4
  %264 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in571 = getelementptr inbounds %struct.tdefl_compressor* %264, i32 0, i32 16
  %265 = load i32* %m_bits_in571, align 4
  %shl572 = shl i32 %263, %265
  %266 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer573 = getelementptr inbounds %struct.tdefl_compressor* %266, i32 0, i32 17
  %267 = load i32* %m_bit_buffer573, align 4
  %or574 = or i32 %267, %shl572
  store i32 %or574, i32* %m_bit_buffer573, align 4
  %268 = load i32* %len563, align 4
  %269 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in575 = getelementptr inbounds %struct.tdefl_compressor* %269, i32 0, i32 16
  %270 = load i32* %m_bits_in575, align 4
  %add576 = add i32 %270, %268
  store i32 %add576, i32* %m_bits_in575, align 4
  br label %while.cond577

while.cond577:                                    ; preds = %if.end591, %cond.end570
  %271 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in578 = getelementptr inbounds %struct.tdefl_compressor* %271, i32 0, i32 16
  %272 = load i32* %m_bits_in578, align 4
  %cmp579 = icmp uge i32 %272, 8
  br i1 %cmp579, label %while.body581, label %while.end596

while.body581:                                    ; preds = %while.cond577
  %273 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf582 = getelementptr inbounds %struct.tdefl_compressor* %273, i32 0, i32 11
  %274 = load i8** %m_pOutput_buf582, align 8
  %275 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end583 = getelementptr inbounds %struct.tdefl_compressor* %275, i32 0, i32 12
  %276 = load i8** %m_pOutput_buf_end583, align 8
  %cmp584 = icmp ult i8* %274, %276
  br i1 %cmp584, label %if.then586, label %if.end591

if.then586:                                       ; preds = %while.body581
  %277 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer587 = getelementptr inbounds %struct.tdefl_compressor* %277, i32 0, i32 17
  %278 = load i32* %m_bit_buffer587, align 4
  %conv588 = trunc i32 %278 to i8
  %279 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf589 = getelementptr inbounds %struct.tdefl_compressor* %279, i32 0, i32 11
  %280 = load i8** %m_pOutput_buf589, align 8
  %incdec.ptr590 = getelementptr inbounds i8* %280, i32 1
  store i8* %incdec.ptr590, i8** %m_pOutput_buf589, align 8
  store i8 %conv588, i8* %280, align 1
  br label %if.end591

if.end591:                                        ; preds = %if.then586, %while.body581
  %281 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer592 = getelementptr inbounds %struct.tdefl_compressor* %281, i32 0, i32 17
  %282 = load i32* %m_bit_buffer592, align 4
  %shr593 = lshr i32 %282, 8
  store i32 %shr593, i32* %m_bit_buffer592, align 4
  %283 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in594 = getelementptr inbounds %struct.tdefl_compressor* %283, i32 0, i32 16
  %284 = load i32* %m_bits_in594, align 4
  %sub595 = sub i32 %284, 8
  store i32 %sub595, i32* %m_bits_in594, align 4
  br label %while.cond577

while.end596:                                     ; preds = %while.cond577
  br label %do.end597

do.end597:                                        ; preds = %while.end596
  store i32 0, i32* %i, align 4
  br label %for.cond598

for.cond598:                                      ; preds = %for.inc646, %do.end597
  %285 = load i32* %i, align 4
  %286 = load i32* %num_bit_lengths, align 4
  %cmp599 = icmp slt i32 %285, %286
  br i1 %cmp599, label %for.body601, label %for.end648

for.body601:                                      ; preds = %for.cond598
  br label %do.body602

do.body602:                                       ; preds = %for.body601
  %287 = load i32* %i, align 4
  %idxprom604 = zext i32 %287 to i64
  %arrayidx605 = getelementptr inbounds [19 x i8]* @s_tdefl_packed_code_size_syms_swizzle, i32 0, i64 %idxprom604
  %288 = load i8* %arrayidx605, align 1
  %idxprom606 = zext i8 %288 to i64
  %289 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes607 = getelementptr inbounds %struct.tdefl_compressor* %289, i32 0, i32 38
  %arrayidx608 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes607, i32 0, i64 2
  %arrayidx609 = getelementptr inbounds [288 x i8]* %arrayidx608, i32 0, i64 %idxprom606
  %290 = load i8* %arrayidx609, align 1
  %conv610 = zext i8 %290 to i32
  store i32 %conv610, i32* %bits603, align 4
  store i32 3, i32* %len611, align 4
  %291 = load i32* %bits603, align 4
  %292 = load i32* %len611, align 4
  %shl612 = shl i32 1, %292
  %sub613 = sub i32 %shl612, 1
  %cmp614 = icmp ule i32 %291, %sub613
  br i1 %cmp614, label %cond.true616, label %cond.false617

cond.true616:                                     ; preds = %do.body602
  br label %cond.end618

cond.false617:                                    ; preds = %do.body602
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 1988, i8* getelementptr inbounds ([51 x i8]* @__PRETTY_FUNCTION__.tdefl_start_dynamic_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end618

cond.end618:                                      ; preds = %293, %cond.true616
  %294 = load i32* %bits603, align 4
  %295 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in619 = getelementptr inbounds %struct.tdefl_compressor* %295, i32 0, i32 16
  %296 = load i32* %m_bits_in619, align 4
  %shl620 = shl i32 %294, %296
  %297 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer621 = getelementptr inbounds %struct.tdefl_compressor* %297, i32 0, i32 17
  %298 = load i32* %m_bit_buffer621, align 4
  %or622 = or i32 %298, %shl620
  store i32 %or622, i32* %m_bit_buffer621, align 4
  %299 = load i32* %len611, align 4
  %300 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in623 = getelementptr inbounds %struct.tdefl_compressor* %300, i32 0, i32 16
  %301 = load i32* %m_bits_in623, align 4
  %add624 = add i32 %301, %299
  store i32 %add624, i32* %m_bits_in623, align 4
  br label %while.cond625

while.cond625:                                    ; preds = %if.end639, %cond.end618
  %302 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in626 = getelementptr inbounds %struct.tdefl_compressor* %302, i32 0, i32 16
  %303 = load i32* %m_bits_in626, align 4
  %cmp627 = icmp uge i32 %303, 8
  br i1 %cmp627, label %while.body629, label %while.end644

while.body629:                                    ; preds = %while.cond625
  %304 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf630 = getelementptr inbounds %struct.tdefl_compressor* %304, i32 0, i32 11
  %305 = load i8** %m_pOutput_buf630, align 8
  %306 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end631 = getelementptr inbounds %struct.tdefl_compressor* %306, i32 0, i32 12
  %307 = load i8** %m_pOutput_buf_end631, align 8
  %cmp632 = icmp ult i8* %305, %307
  br i1 %cmp632, label %if.then634, label %if.end639

if.then634:                                       ; preds = %while.body629
  %308 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer635 = getelementptr inbounds %struct.tdefl_compressor* %308, i32 0, i32 17
  %309 = load i32* %m_bit_buffer635, align 4
  %conv636 = trunc i32 %309 to i8
  %310 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf637 = getelementptr inbounds %struct.tdefl_compressor* %310, i32 0, i32 11
  %311 = load i8** %m_pOutput_buf637, align 8
  %incdec.ptr638 = getelementptr inbounds i8* %311, i32 1
  store i8* %incdec.ptr638, i8** %m_pOutput_buf637, align 8
  store i8 %conv636, i8* %311, align 1
  br label %if.end639

if.end639:                                        ; preds = %if.then634, %while.body629
  %312 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer640 = getelementptr inbounds %struct.tdefl_compressor* %312, i32 0, i32 17
  %313 = load i32* %m_bit_buffer640, align 4
  %shr641 = lshr i32 %313, 8
  store i32 %shr641, i32* %m_bit_buffer640, align 4
  %314 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in642 = getelementptr inbounds %struct.tdefl_compressor* %314, i32 0, i32 16
  %315 = load i32* %m_bits_in642, align 4
  %sub643 = sub i32 %315, 8
  store i32 %sub643, i32* %m_bits_in642, align 4
  br label %while.cond625

while.end644:                                     ; preds = %while.cond625
  br label %do.end645

do.end645:                                        ; preds = %while.end644
  br label %for.inc646

for.inc646:                                       ; preds = %do.end645
  %316 = load i32* %i, align 4
  %inc647 = add i32 %316, 1
  store i32 %inc647, i32* %i, align 4
  br label %for.cond598

for.end648:                                       ; preds = %for.cond598
  store i32 0, i32* %packed_code_sizes_index, align 4
  br label %for.cond649

for.cond649:                                      ; preds = %if.end756, %for.end648
  %317 = load i32* %packed_code_sizes_index, align 4
  %318 = load i32* %num_packed_code_sizes, align 4
  %cmp650 = icmp ult i32 %317, %318
  br i1 %cmp650, label %for.body652, label %for.end757

for.body652:                                      ; preds = %for.cond649
  %319 = load i32* %packed_code_sizes_index, align 4
  %inc653 = add i32 %319, 1
  store i32 %inc653, i32* %packed_code_sizes_index, align 4
  %idxprom654 = zext i32 %319 to i64
  %arrayidx655 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom654
  %320 = load i8* %arrayidx655, align 1
  %conv656 = zext i8 %320 to i32
  store i32 %conv656, i32* %code, align 4
  %321 = load i32* %code, align 4
  %cmp657 = icmp ult i32 %321, 19
  br i1 %cmp657, label %cond.true659, label %cond.false660

cond.true659:                                     ; preds = %for.body652
  br label %cond.end661

cond.false660:                                    ; preds = %for.body652
  call void @__assert_fail(i8* getelementptr inbounds ([32 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 1992, i8* getelementptr inbounds ([51 x i8]* @__PRETTY_FUNCTION__.tdefl_start_dynamic_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end661

cond.end661:                                      ; preds = %322, %cond.true659
  br label %do.body662

do.body662:                                       ; preds = %cond.end661
  %323 = load i32* %code, align 4
  %idxprom664 = zext i32 %323 to i64
  %324 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes = getelementptr inbounds %struct.tdefl_compressor* %324, i32 0, i32 37
  %arrayidx665 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_codes, i32 0, i64 2
  %arrayidx666 = getelementptr inbounds [288 x i16]* %arrayidx665, i32 0, i64 %idxprom664
  %325 = load i16* %arrayidx666, align 2
  %conv667 = zext i16 %325 to i32
  store i32 %conv667, i32* %bits663, align 4
  %326 = load i32* %code, align 4
  %idxprom669 = zext i32 %326 to i64
  %327 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes670 = getelementptr inbounds %struct.tdefl_compressor* %327, i32 0, i32 38
  %arrayidx671 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes670, i32 0, i64 2
  %arrayidx672 = getelementptr inbounds [288 x i8]* %arrayidx671, i32 0, i64 %idxprom669
  %328 = load i8* %arrayidx672, align 1
  %conv673 = zext i8 %328 to i32
  store i32 %conv673, i32* %len668, align 4
  %329 = load i32* %bits663, align 4
  %330 = load i32* %len668, align 4
  %shl674 = shl i32 1, %330
  %sub675 = sub i32 %shl674, 1
  %cmp676 = icmp ule i32 %329, %sub675
  br i1 %cmp676, label %cond.true678, label %cond.false679

cond.true678:                                     ; preds = %do.body662
  br label %cond.end680

cond.false679:                                    ; preds = %do.body662
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 1993, i8* getelementptr inbounds ([51 x i8]* @__PRETTY_FUNCTION__.tdefl_start_dynamic_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end680

cond.end680:                                      ; preds = %331, %cond.true678
  %332 = load i32* %bits663, align 4
  %333 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in681 = getelementptr inbounds %struct.tdefl_compressor* %333, i32 0, i32 16
  %334 = load i32* %m_bits_in681, align 4
  %shl682 = shl i32 %332, %334
  %335 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer683 = getelementptr inbounds %struct.tdefl_compressor* %335, i32 0, i32 17
  %336 = load i32* %m_bit_buffer683, align 4
  %or684 = or i32 %336, %shl682
  store i32 %or684, i32* %m_bit_buffer683, align 4
  %337 = load i32* %len668, align 4
  %338 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in685 = getelementptr inbounds %struct.tdefl_compressor* %338, i32 0, i32 16
  %339 = load i32* %m_bits_in685, align 4
  %add686 = add i32 %339, %337
  store i32 %add686, i32* %m_bits_in685, align 4
  br label %while.cond687

while.cond687:                                    ; preds = %if.end701, %cond.end680
  %340 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in688 = getelementptr inbounds %struct.tdefl_compressor* %340, i32 0, i32 16
  %341 = load i32* %m_bits_in688, align 4
  %cmp689 = icmp uge i32 %341, 8
  br i1 %cmp689, label %while.body691, label %while.end706

while.body691:                                    ; preds = %while.cond687
  %342 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf692 = getelementptr inbounds %struct.tdefl_compressor* %342, i32 0, i32 11
  %343 = load i8** %m_pOutput_buf692, align 8
  %344 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end693 = getelementptr inbounds %struct.tdefl_compressor* %344, i32 0, i32 12
  %345 = load i8** %m_pOutput_buf_end693, align 8
  %cmp694 = icmp ult i8* %343, %345
  br i1 %cmp694, label %if.then696, label %if.end701

if.then696:                                       ; preds = %while.body691
  %346 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer697 = getelementptr inbounds %struct.tdefl_compressor* %346, i32 0, i32 17
  %347 = load i32* %m_bit_buffer697, align 4
  %conv698 = trunc i32 %347 to i8
  %348 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf699 = getelementptr inbounds %struct.tdefl_compressor* %348, i32 0, i32 11
  %349 = load i8** %m_pOutput_buf699, align 8
  %incdec.ptr700 = getelementptr inbounds i8* %349, i32 1
  store i8* %incdec.ptr700, i8** %m_pOutput_buf699, align 8
  store i8 %conv698, i8* %349, align 1
  br label %if.end701

if.end701:                                        ; preds = %if.then696, %while.body691
  %350 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer702 = getelementptr inbounds %struct.tdefl_compressor* %350, i32 0, i32 17
  %351 = load i32* %m_bit_buffer702, align 4
  %shr703 = lshr i32 %351, 8
  store i32 %shr703, i32* %m_bit_buffer702, align 4
  %352 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in704 = getelementptr inbounds %struct.tdefl_compressor* %352, i32 0, i32 16
  %353 = load i32* %m_bits_in704, align 4
  %sub705 = sub i32 %353, 8
  store i32 %sub705, i32* %m_bits_in704, align 4
  br label %while.cond687

while.end706:                                     ; preds = %while.cond687
  br label %do.end707

do.end707:                                        ; preds = %while.end706
  %354 = load i32* %code, align 4
  %cmp708 = icmp uge i32 %354, 16
  br i1 %cmp708, label %if.then710, label %if.end756

if.then710:                                       ; preds = %do.end707
  br label %do.body711

do.body711:                                       ; preds = %if.then710
  %355 = load i32* %packed_code_sizes_index, align 4
  %inc713 = add i32 %355, 1
  store i32 %inc713, i32* %packed_code_sizes_index, align 4
  %idxprom714 = zext i32 %355 to i64
  %arrayidx715 = getelementptr inbounds [320 x i8]* %packed_code_sizes, i32 0, i64 %idxprom714
  %356 = load i8* %arrayidx715, align 1
  %conv716 = zext i8 %356 to i32
  store i32 %conv716, i32* %bits712, align 4
  %357 = load i32* %code, align 4
  %sub718 = sub i32 %357, 16
  %idxprom719 = zext i32 %sub718 to i64
  %arrayidx720 = getelementptr inbounds [4 x i8]* @.str12, i32 0, i64 %idxprom719
  %358 = load i8* %arrayidx720, align 1
  %conv721 = sext i8 %358 to i32
  store i32 %conv721, i32* %len717, align 4
  %359 = load i32* %bits712, align 4
  %360 = load i32* %len717, align 4
  %shl722 = shl i32 1, %360
  %sub723 = sub i32 %shl722, 1
  %cmp724 = icmp ule i32 %359, %sub723
  br i1 %cmp724, label %cond.true726, label %cond.false727

cond.true726:                                     ; preds = %do.body711
  br label %cond.end728

cond.false727:                                    ; preds = %do.body711
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 1994, i8* getelementptr inbounds ([51 x i8]* @__PRETTY_FUNCTION__.tdefl_start_dynamic_block, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end728

cond.end728:                                      ; preds = %361, %cond.true726
  %362 = load i32* %bits712, align 4
  %363 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in729 = getelementptr inbounds %struct.tdefl_compressor* %363, i32 0, i32 16
  %364 = load i32* %m_bits_in729, align 4
  %shl730 = shl i32 %362, %364
  %365 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer731 = getelementptr inbounds %struct.tdefl_compressor* %365, i32 0, i32 17
  %366 = load i32* %m_bit_buffer731, align 4
  %or732 = or i32 %366, %shl730
  store i32 %or732, i32* %m_bit_buffer731, align 4
  %367 = load i32* %len717, align 4
  %368 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in733 = getelementptr inbounds %struct.tdefl_compressor* %368, i32 0, i32 16
  %369 = load i32* %m_bits_in733, align 4
  %add734 = add i32 %369, %367
  store i32 %add734, i32* %m_bits_in733, align 4
  br label %while.cond735

while.cond735:                                    ; preds = %if.end749, %cond.end728
  %370 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in736 = getelementptr inbounds %struct.tdefl_compressor* %370, i32 0, i32 16
  %371 = load i32* %m_bits_in736, align 4
  %cmp737 = icmp uge i32 %371, 8
  br i1 %cmp737, label %while.body739, label %while.end754

while.body739:                                    ; preds = %while.cond735
  %372 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf740 = getelementptr inbounds %struct.tdefl_compressor* %372, i32 0, i32 11
  %373 = load i8** %m_pOutput_buf740, align 8
  %374 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end741 = getelementptr inbounds %struct.tdefl_compressor* %374, i32 0, i32 12
  %375 = load i8** %m_pOutput_buf_end741, align 8
  %cmp742 = icmp ult i8* %373, %375
  br i1 %cmp742, label %if.then744, label %if.end749

if.then744:                                       ; preds = %while.body739
  %376 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer745 = getelementptr inbounds %struct.tdefl_compressor* %376, i32 0, i32 17
  %377 = load i32* %m_bit_buffer745, align 4
  %conv746 = trunc i32 %377 to i8
  %378 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf747 = getelementptr inbounds %struct.tdefl_compressor* %378, i32 0, i32 11
  %379 = load i8** %m_pOutput_buf747, align 8
  %incdec.ptr748 = getelementptr inbounds i8* %379, i32 1
  store i8* %incdec.ptr748, i8** %m_pOutput_buf747, align 8
  store i8 %conv746, i8* %379, align 1
  br label %if.end749

if.end749:                                        ; preds = %if.then744, %while.body739
  %380 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer750 = getelementptr inbounds %struct.tdefl_compressor* %380, i32 0, i32 17
  %381 = load i32* %m_bit_buffer750, align 4
  %shr751 = lshr i32 %381, 8
  store i32 %shr751, i32* %m_bit_buffer750, align 4
  %382 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in752 = getelementptr inbounds %struct.tdefl_compressor* %382, i32 0, i32 16
  %383 = load i32* %m_bits_in752, align 4
  %sub753 = sub i32 %383, 8
  store i32 %sub753, i32* %m_bits_in752, align 4
  br label %while.cond735

while.end754:                                     ; preds = %while.cond735
  br label %do.end755

do.end755:                                        ; preds = %while.end754
  br label %if.end756

if.end756:                                        ; preds = %do.end755, %do.end707
  br label %for.cond649

for.end757:                                       ; preds = %for.cond649
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @tdefl_compress_lz_codes(%struct.tdefl_compressor* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %flags = alloca i32, align 4
  %pLZ_codes = alloca i8*, align 8
  %pOutput_buf = alloca i8*, align 8
  %pLZ_code_buf_end = alloca i8*, align 8
  %bit_buffer = alloca i64, align 8
  %bits_in = alloca i32, align 4
  %s0 = alloca i32, align 4
  %s1 = alloca i32, align 4
  %n0 = alloca i32, align 4
  %n1 = alloca i32, align 4
  %sym = alloca i32, align 4
  %num_extra_bits = alloca i32, align 4
  %match_len = alloca i32, align 4
  %match_dist = alloca i32, align 4
  %lit = alloca i32, align 4
  %n = alloca i32, align 4
  %bits = alloca i32, align 4
  %len = alloca i32, align 4
  %bits253 = alloca i32, align 4
  %len258 = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  %0 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor* %0, i32 0, i32 11
  %1 = load i8** %m_pOutput_buf, align 8
  store i8* %1, i8** %pOutput_buf, align 8
  %2 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor* %2, i32 0, i32 9
  %3 = load i8** %m_pLZ_code_buf, align 8
  store i8* %3, i8** %pLZ_code_buf_end, align 8
  %4 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor* %4, i32 0, i32 17
  %5 = load i32* %m_bit_buffer, align 4
  %conv = zext i32 %5 to i64
  store i64 %conv, i64* %bit_buffer, align 8
  %6 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor* %6, i32 0, i32 16
  %7 = load i32* %m_bits_in, align 4
  store i32 %7, i32* %bits_in, align 4
  store i32 1, i32* %flags, align 4
  %8 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor* %8, i32 0, i32 39
  %arraydecay = getelementptr inbounds [65536 x i8]* %m_lz_code_buf, i32 0, i32 0
  store i8* %arraydecay, i8** %pLZ_codes, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i8** %pLZ_codes, align 8
  %10 = load i8** %pLZ_code_buf_end, align 8
  %cmp = icmp ult i8* %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32* %flags, align 4
  %cmp2 = icmp eq i32 %11, 1
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %12 = load i8** %pLZ_codes, align 8
  %incdec.ptr = getelementptr inbounds i8* %12, i32 1
  store i8* %incdec.ptr, i8** %pLZ_codes, align 8
  %13 = load i8* %12, align 1
  %conv4 = zext i8 %13 to i32
  %or = or i32 %conv4, 256
  store i32 %or, i32* %flags, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %14 = load i32* %flags, align 4
  %and = and i32 %14, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %15 = load i8** %pLZ_codes, align 8
  %arrayidx = getelementptr inbounds i8* %15, i64 0
  %16 = load i8* %arrayidx, align 1
  %conv6 = zext i8 %16 to i32
  store i32 %conv6, i32* %match_len, align 4
  %17 = load i8** %pLZ_codes, align 8
  %add.ptr = getelementptr inbounds i8* %17, i64 1
  %18 = bitcast i8* %add.ptr to i16*
  %19 = load i16* %18, align 2
  %conv7 = zext i16 %19 to i32
  store i32 %conv7, i32* %match_dist, align 4
  %20 = load i8** %pLZ_codes, align 8
  %add.ptr8 = getelementptr inbounds i8* %20, i64 3
  store i8* %add.ptr8, i8** %pLZ_codes, align 8
  %21 = load i32* %match_len, align 4
  %idxprom = zext i32 %21 to i64
  %arrayidx9 = getelementptr inbounds [256 x i16]* @s_tdefl_len_sym, i32 0, i64 %idxprom
  %22 = load i16* %arrayidx9, align 2
  %idxprom10 = zext i16 %22 to i64
  %23 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes = getelementptr inbounds %struct.tdefl_compressor* %23, i32 0, i32 38
  %arrayidx11 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes, i32 0, i64 0
  %arrayidx12 = getelementptr inbounds [288 x i8]* %arrayidx11, i32 0, i64 %idxprom10
  %24 = load i8* %arrayidx12, align 1
  %conv13 = zext i8 %24 to i32
  %tobool14 = icmp ne i32 %conv13, 0
  br i1 %tobool14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then5
  br label %cond.end

cond.false:                                       ; preds = %if.then5
  call void @__assert_fail(i8* getelementptr inbounds ([52 x i8]* @.str35, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2041, i8* getelementptr inbounds ([52 x i8]* @__PRETTY_FUNCTION__.tdefl_compress_lz_codes, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %25, %cond.true
  %26 = load i32* %match_len, align 4
  %idxprom15 = zext i32 %26 to i64
  %arrayidx16 = getelementptr inbounds [256 x i16]* @s_tdefl_len_sym, i32 0, i64 %idxprom15
  %27 = load i16* %arrayidx16, align 2
  %idxprom17 = zext i16 %27 to i64
  %28 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes = getelementptr inbounds %struct.tdefl_compressor* %28, i32 0, i32 37
  %arrayidx18 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_codes, i32 0, i64 0
  %arrayidx19 = getelementptr inbounds [288 x i16]* %arrayidx18, i32 0, i64 %idxprom17
  %29 = load i16* %arrayidx19, align 2
  %conv20 = zext i16 %29 to i64
  %30 = load i32* %bits_in, align 4
  %sh_prom = zext i32 %30 to i64
  %shl = shl i64 %conv20, %sh_prom
  %31 = load i64* %bit_buffer, align 8
  %or21 = or i64 %31, %shl
  store i64 %or21, i64* %bit_buffer, align 8
  %32 = load i32* %match_len, align 4
  %idxprom22 = zext i32 %32 to i64
  %arrayidx23 = getelementptr inbounds [256 x i16]* @s_tdefl_len_sym, i32 0, i64 %idxprom22
  %33 = load i16* %arrayidx23, align 2
  %idxprom24 = zext i16 %33 to i64
  %34 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes25 = getelementptr inbounds %struct.tdefl_compressor* %34, i32 0, i32 38
  %arrayidx26 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes25, i32 0, i64 0
  %arrayidx27 = getelementptr inbounds [288 x i8]* %arrayidx26, i32 0, i64 %idxprom24
  %35 = load i8* %arrayidx27, align 1
  %conv28 = zext i8 %35 to i32
  %36 = load i32* %bits_in, align 4
  %add = add i32 %36, %conv28
  store i32 %add, i32* %bits_in, align 4
  %37 = load i32* %match_len, align 4
  %38 = load i32* %match_len, align 4
  %idxprom29 = zext i32 %38 to i64
  %arrayidx30 = getelementptr inbounds [256 x i8]* @s_tdefl_len_extra, i32 0, i64 %idxprom29
  %39 = load i8* %arrayidx30, align 1
  %idxprom31 = zext i8 %39 to i64
  %arrayidx32 = getelementptr inbounds [17 x i32]* @mz_bitmasks, i32 0, i64 %idxprom31
  %40 = load i32* %arrayidx32, align 4
  %and33 = and i32 %37, %40
  %conv34 = zext i32 %and33 to i64
  %41 = load i32* %bits_in, align 4
  %sh_prom35 = zext i32 %41 to i64
  %shl36 = shl i64 %conv34, %sh_prom35
  %42 = load i64* %bit_buffer, align 8
  %or37 = or i64 %42, %shl36
  store i64 %or37, i64* %bit_buffer, align 8
  %43 = load i32* %match_len, align 4
  %idxprom38 = zext i32 %43 to i64
  %arrayidx39 = getelementptr inbounds [256 x i8]* @s_tdefl_len_extra, i32 0, i64 %idxprom38
  %44 = load i8* %arrayidx39, align 1
  %conv40 = zext i8 %44 to i32
  %45 = load i32* %bits_in, align 4
  %add41 = add i32 %45, %conv40
  store i32 %add41, i32* %bits_in, align 4
  %46 = load i32* %match_dist, align 4
  %and42 = and i32 %46, 511
  %idxprom43 = zext i32 %and42 to i64
  %arrayidx44 = getelementptr inbounds [512 x i8]* @s_tdefl_small_dist_sym, i32 0, i64 %idxprom43
  %47 = load i8* %arrayidx44, align 1
  %conv45 = zext i8 %47 to i32
  store i32 %conv45, i32* %s0, align 4
  %48 = load i32* %match_dist, align 4
  %and46 = and i32 %48, 511
  %idxprom47 = zext i32 %and46 to i64
  %arrayidx48 = getelementptr inbounds [512 x i8]* @s_tdefl_small_dist_extra, i32 0, i64 %idxprom47
  %49 = load i8* %arrayidx48, align 1
  %conv49 = zext i8 %49 to i32
  store i32 %conv49, i32* %n0, align 4
  %50 = load i32* %match_dist, align 4
  %shr = lshr i32 %50, 8
  %idxprom50 = zext i32 %shr to i64
  %arrayidx51 = getelementptr inbounds [128 x i8]* @s_tdefl_large_dist_sym, i32 0, i64 %idxprom50
  %51 = load i8* %arrayidx51, align 1
  %conv52 = zext i8 %51 to i32
  store i32 %conv52, i32* %s1, align 4
  %52 = load i32* %match_dist, align 4
  %shr53 = lshr i32 %52, 8
  %idxprom54 = zext i32 %shr53 to i64
  %arrayidx55 = getelementptr inbounds [128 x i8]* @s_tdefl_large_dist_extra, i32 0, i64 %idxprom54
  %53 = load i8* %arrayidx55, align 1
  %conv56 = zext i8 %53 to i32
  store i32 %conv56, i32* %n1, align 4
  %54 = load i32* %match_dist, align 4
  %cmp57 = icmp ult i32 %54, 512
  br i1 %cmp57, label %cond.true59, label %cond.false60

cond.true59:                                      ; preds = %cond.end
  %55 = load i32* %s0, align 4
  br label %cond.end61

cond.false60:                                     ; preds = %cond.end
  %56 = load i32* %s1, align 4
  br label %cond.end61

cond.end61:                                       ; preds = %cond.false60, %cond.true59
  %cond = phi i32 [ %55, %cond.true59 ], [ %56, %cond.false60 ]
  store i32 %cond, i32* %sym, align 4
  %57 = load i32* %match_dist, align 4
  %cmp62 = icmp ult i32 %57, 512
  br i1 %cmp62, label %cond.true64, label %cond.false65

cond.true64:                                      ; preds = %cond.end61
  %58 = load i32* %n0, align 4
  br label %cond.end66

cond.false65:                                     ; preds = %cond.end61
  %59 = load i32* %n1, align 4
  br label %cond.end66

cond.end66:                                       ; preds = %cond.false65, %cond.true64
  %cond67 = phi i32 [ %58, %cond.true64 ], [ %59, %cond.false65 ]
  store i32 %cond67, i32* %num_extra_bits, align 4
  %60 = load i32* %sym, align 4
  %idxprom68 = zext i32 %60 to i64
  %61 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes69 = getelementptr inbounds %struct.tdefl_compressor* %61, i32 0, i32 38
  %arrayidx70 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes69, i32 0, i64 1
  %arrayidx71 = getelementptr inbounds [288 x i8]* %arrayidx70, i32 0, i64 %idxprom68
  %62 = load i8* %arrayidx71, align 1
  %conv72 = zext i8 %62 to i32
  %tobool73 = icmp ne i32 %conv72, 0
  br i1 %tobool73, label %cond.true74, label %cond.false75

cond.true74:                                      ; preds = %cond.end66
  br label %cond.end76

cond.false75:                                     ; preds = %cond.end66
  call void @__assert_fail(i8* getelementptr inbounds ([29 x i8]* @.str36, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2053, i8* getelementptr inbounds ([52 x i8]* @__PRETTY_FUNCTION__.tdefl_compress_lz_codes, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end76

cond.end76:                                       ; preds = %63, %cond.true74
  %64 = load i32* %sym, align 4
  %idxprom77 = zext i32 %64 to i64
  %65 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes78 = getelementptr inbounds %struct.tdefl_compressor* %65, i32 0, i32 37
  %arrayidx79 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_codes78, i32 0, i64 1
  %arrayidx80 = getelementptr inbounds [288 x i16]* %arrayidx79, i32 0, i64 %idxprom77
  %66 = load i16* %arrayidx80, align 2
  %conv81 = zext i16 %66 to i64
  %67 = load i32* %bits_in, align 4
  %sh_prom82 = zext i32 %67 to i64
  %shl83 = shl i64 %conv81, %sh_prom82
  %68 = load i64* %bit_buffer, align 8
  %or84 = or i64 %68, %shl83
  store i64 %or84, i64* %bit_buffer, align 8
  %69 = load i32* %sym, align 4
  %idxprom85 = zext i32 %69 to i64
  %70 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes86 = getelementptr inbounds %struct.tdefl_compressor* %70, i32 0, i32 38
  %arrayidx87 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes86, i32 0, i64 1
  %arrayidx88 = getelementptr inbounds [288 x i8]* %arrayidx87, i32 0, i64 %idxprom85
  %71 = load i8* %arrayidx88, align 1
  %conv89 = zext i8 %71 to i32
  %72 = load i32* %bits_in, align 4
  %add90 = add i32 %72, %conv89
  store i32 %add90, i32* %bits_in, align 4
  %73 = load i32* %match_dist, align 4
  %74 = load i32* %num_extra_bits, align 4
  %idxprom91 = zext i32 %74 to i64
  %arrayidx92 = getelementptr inbounds [17 x i32]* @mz_bitmasks, i32 0, i64 %idxprom91
  %75 = load i32* %arrayidx92, align 4
  %and93 = and i32 %73, %75
  %conv94 = zext i32 %and93 to i64
  %76 = load i32* %bits_in, align 4
  %sh_prom95 = zext i32 %76 to i64
  %shl96 = shl i64 %conv94, %sh_prom95
  %77 = load i64* %bit_buffer, align 8
  %or97 = or i64 %77, %shl96
  store i64 %or97, i64* %bit_buffer, align 8
  %78 = load i32* %num_extra_bits, align 4
  %79 = load i32* %bits_in, align 4
  %add98 = add i32 %79, %78
  store i32 %add98, i32* %bits_in, align 4
  br label %if.end191

if.else:                                          ; preds = %if.end
  %80 = load i8** %pLZ_codes, align 8
  %incdec.ptr99 = getelementptr inbounds i8* %80, i32 1
  store i8* %incdec.ptr99, i8** %pLZ_codes, align 8
  %81 = load i8* %80, align 1
  %conv100 = zext i8 %81 to i32
  store i32 %conv100, i32* %lit, align 4
  %82 = load i32* %lit, align 4
  %idxprom101 = zext i32 %82 to i64
  %83 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes102 = getelementptr inbounds %struct.tdefl_compressor* %83, i32 0, i32 38
  %arrayidx103 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes102, i32 0, i64 0
  %arrayidx104 = getelementptr inbounds [288 x i8]* %arrayidx103, i32 0, i64 %idxprom101
  %84 = load i8* %arrayidx104, align 1
  %conv105 = zext i8 %84 to i32
  %tobool106 = icmp ne i32 %conv105, 0
  br i1 %tobool106, label %cond.true107, label %cond.false108

cond.true107:                                     ; preds = %if.else
  br label %cond.end109

cond.false108:                                    ; preds = %if.else
  call void @__assert_fail(i8* getelementptr inbounds ([29 x i8]* @.str37, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2060, i8* getelementptr inbounds ([52 x i8]* @__PRETTY_FUNCTION__.tdefl_compress_lz_codes, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end109

cond.end109:                                      ; preds = %85, %cond.true107
  %86 = load i32* %lit, align 4
  %idxprom110 = zext i32 %86 to i64
  %87 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes111 = getelementptr inbounds %struct.tdefl_compressor* %87, i32 0, i32 37
  %arrayidx112 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_codes111, i32 0, i64 0
  %arrayidx113 = getelementptr inbounds [288 x i16]* %arrayidx112, i32 0, i64 %idxprom110
  %88 = load i16* %arrayidx113, align 2
  %conv114 = zext i16 %88 to i64
  %89 = load i32* %bits_in, align 4
  %sh_prom115 = zext i32 %89 to i64
  %shl116 = shl i64 %conv114, %sh_prom115
  %90 = load i64* %bit_buffer, align 8
  %or117 = or i64 %90, %shl116
  store i64 %or117, i64* %bit_buffer, align 8
  %91 = load i32* %lit, align 4
  %idxprom118 = zext i32 %91 to i64
  %92 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes119 = getelementptr inbounds %struct.tdefl_compressor* %92, i32 0, i32 38
  %arrayidx120 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes119, i32 0, i64 0
  %arrayidx121 = getelementptr inbounds [288 x i8]* %arrayidx120, i32 0, i64 %idxprom118
  %93 = load i8* %arrayidx121, align 1
  %conv122 = zext i8 %93 to i32
  %94 = load i32* %bits_in, align 4
  %add123 = add i32 %94, %conv122
  store i32 %add123, i32* %bits_in, align 4
  %95 = load i32* %flags, align 4
  %and124 = and i32 %95, 2
  %cmp125 = icmp eq i32 %and124, 0
  br i1 %cmp125, label %land.lhs.true, label %if.end190

land.lhs.true:                                    ; preds = %cond.end109
  %96 = load i8** %pLZ_codes, align 8
  %97 = load i8** %pLZ_code_buf_end, align 8
  %cmp127 = icmp ult i8* %96, %97
  br i1 %cmp127, label %if.then129, label %if.end190

if.then129:                                       ; preds = %land.lhs.true
  %98 = load i32* %flags, align 4
  %shr130 = lshr i32 %98, 1
  store i32 %shr130, i32* %flags, align 4
  %99 = load i8** %pLZ_codes, align 8
  %incdec.ptr131 = getelementptr inbounds i8* %99, i32 1
  store i8* %incdec.ptr131, i8** %pLZ_codes, align 8
  %100 = load i8* %99, align 1
  %conv132 = zext i8 %100 to i32
  store i32 %conv132, i32* %lit, align 4
  %101 = load i32* %lit, align 4
  %idxprom133 = zext i32 %101 to i64
  %102 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes134 = getelementptr inbounds %struct.tdefl_compressor* %102, i32 0, i32 38
  %arrayidx135 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes134, i32 0, i64 0
  %arrayidx136 = getelementptr inbounds [288 x i8]* %arrayidx135, i32 0, i64 %idxprom133
  %103 = load i8* %arrayidx136, align 1
  %conv137 = zext i8 %103 to i32
  %tobool138 = icmp ne i32 %conv137, 0
  br i1 %tobool138, label %cond.true139, label %cond.false140

cond.true139:                                     ; preds = %if.then129
  br label %cond.end141

cond.false140:                                    ; preds = %if.then129
  call void @__assert_fail(i8* getelementptr inbounds ([29 x i8]* @.str37, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2067, i8* getelementptr inbounds ([52 x i8]* @__PRETTY_FUNCTION__.tdefl_compress_lz_codes, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end141

cond.end141:                                      ; preds = %104, %cond.true139
  %105 = load i32* %lit, align 4
  %idxprom142 = zext i32 %105 to i64
  %106 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes143 = getelementptr inbounds %struct.tdefl_compressor* %106, i32 0, i32 37
  %arrayidx144 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_codes143, i32 0, i64 0
  %arrayidx145 = getelementptr inbounds [288 x i16]* %arrayidx144, i32 0, i64 %idxprom142
  %107 = load i16* %arrayidx145, align 2
  %conv146 = zext i16 %107 to i64
  %108 = load i32* %bits_in, align 4
  %sh_prom147 = zext i32 %108 to i64
  %shl148 = shl i64 %conv146, %sh_prom147
  %109 = load i64* %bit_buffer, align 8
  %or149 = or i64 %109, %shl148
  store i64 %or149, i64* %bit_buffer, align 8
  %110 = load i32* %lit, align 4
  %idxprom150 = zext i32 %110 to i64
  %111 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes151 = getelementptr inbounds %struct.tdefl_compressor* %111, i32 0, i32 38
  %arrayidx152 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes151, i32 0, i64 0
  %arrayidx153 = getelementptr inbounds [288 x i8]* %arrayidx152, i32 0, i64 %idxprom150
  %112 = load i8* %arrayidx153, align 1
  %conv154 = zext i8 %112 to i32
  %113 = load i32* %bits_in, align 4
  %add155 = add i32 %113, %conv154
  store i32 %add155, i32* %bits_in, align 4
  %114 = load i32* %flags, align 4
  %and156 = and i32 %114, 2
  %cmp157 = icmp eq i32 %and156, 0
  br i1 %cmp157, label %land.lhs.true159, label %if.end189

land.lhs.true159:                                 ; preds = %cond.end141
  %115 = load i8** %pLZ_codes, align 8
  %116 = load i8** %pLZ_code_buf_end, align 8
  %cmp160 = icmp ult i8* %115, %116
  br i1 %cmp160, label %if.then162, label %if.end189

if.then162:                                       ; preds = %land.lhs.true159
  %117 = load i32* %flags, align 4
  %shr163 = lshr i32 %117, 1
  store i32 %shr163, i32* %flags, align 4
  %118 = load i8** %pLZ_codes, align 8
  %incdec.ptr164 = getelementptr inbounds i8* %118, i32 1
  store i8* %incdec.ptr164, i8** %pLZ_codes, align 8
  %119 = load i8* %118, align 1
  %conv165 = zext i8 %119 to i32
  store i32 %conv165, i32* %lit, align 4
  %120 = load i32* %lit, align 4
  %idxprom166 = zext i32 %120 to i64
  %121 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes167 = getelementptr inbounds %struct.tdefl_compressor* %121, i32 0, i32 38
  %arrayidx168 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes167, i32 0, i64 0
  %arrayidx169 = getelementptr inbounds [288 x i8]* %arrayidx168, i32 0, i64 %idxprom166
  %122 = load i8* %arrayidx169, align 1
  %conv170 = zext i8 %122 to i32
  %tobool171 = icmp ne i32 %conv170, 0
  br i1 %tobool171, label %cond.true172, label %cond.false173

cond.true172:                                     ; preds = %if.then162
  br label %cond.end174

cond.false173:                                    ; preds = %if.then162
  call void @__assert_fail(i8* getelementptr inbounds ([29 x i8]* @.str37, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2074, i8* getelementptr inbounds ([52 x i8]* @__PRETTY_FUNCTION__.tdefl_compress_lz_codes, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end174

cond.end174:                                      ; preds = %123, %cond.true172
  %124 = load i32* %lit, align 4
  %idxprom175 = zext i32 %124 to i64
  %125 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes176 = getelementptr inbounds %struct.tdefl_compressor* %125, i32 0, i32 37
  %arrayidx177 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_codes176, i32 0, i64 0
  %arrayidx178 = getelementptr inbounds [288 x i16]* %arrayidx177, i32 0, i64 %idxprom175
  %126 = load i16* %arrayidx178, align 2
  %conv179 = zext i16 %126 to i64
  %127 = load i32* %bits_in, align 4
  %sh_prom180 = zext i32 %127 to i64
  %shl181 = shl i64 %conv179, %sh_prom180
  %128 = load i64* %bit_buffer, align 8
  %or182 = or i64 %128, %shl181
  store i64 %or182, i64* %bit_buffer, align 8
  %129 = load i32* %lit, align 4
  %idxprom183 = zext i32 %129 to i64
  %130 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes184 = getelementptr inbounds %struct.tdefl_compressor* %130, i32 0, i32 38
  %arrayidx185 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes184, i32 0, i64 0
  %arrayidx186 = getelementptr inbounds [288 x i8]* %arrayidx185, i32 0, i64 %idxprom183
  %131 = load i8* %arrayidx186, align 1
  %conv187 = zext i8 %131 to i32
  %132 = load i32* %bits_in, align 4
  %add188 = add i32 %132, %conv187
  store i32 %add188, i32* %bits_in, align 4
  br label %if.end189

if.end189:                                        ; preds = %cond.end174, %land.lhs.true159, %cond.end141
  br label %if.end190

if.end190:                                        ; preds = %if.end189, %land.lhs.true, %cond.end109
  br label %if.end191

if.end191:                                        ; preds = %if.end190, %cond.end76
  %133 = load i8** %pOutput_buf, align 8
  %134 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor* %134, i32 0, i32 12
  %135 = load i8** %m_pOutput_buf_end, align 8
  %cmp192 = icmp uge i8* %133, %135
  br i1 %cmp192, label %if.then194, label %if.end195

if.then194:                                       ; preds = %if.end191
  store i32 0, i32* %retval
  br label %return

if.end195:                                        ; preds = %if.end191
  %136 = load i64* %bit_buffer, align 8
  %137 = load i8** %pOutput_buf, align 8
  %138 = bitcast i8* %137 to i64*
  store i64 %136, i64* %138, align 8
  %139 = load i32* %bits_in, align 4
  %shr196 = lshr i32 %139, 3
  %140 = load i8** %pOutput_buf, align 8
  %idx.ext = zext i32 %shr196 to i64
  %add.ptr197 = getelementptr inbounds i8* %140, i64 %idx.ext
  store i8* %add.ptr197, i8** %pOutput_buf, align 8
  %141 = load i32* %bits_in, align 4
  %and198 = and i32 %141, -8
  %142 = load i64* %bit_buffer, align 8
  %sh_prom199 = zext i32 %and198 to i64
  %shr200 = lshr i64 %142, %sh_prom199
  store i64 %shr200, i64* %bit_buffer, align 8
  %143 = load i32* %bits_in, align 4
  %and201 = and i32 %143, 7
  store i32 %and201, i32* %bits_in, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end195
  %144 = load i32* %flags, align 4
  %shr202 = lshr i32 %144, 1
  store i32 %shr202, i32* %flags, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %145 = load i8** %pOutput_buf, align 8
  %146 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf203 = getelementptr inbounds %struct.tdefl_compressor* %146, i32 0, i32 11
  store i8* %145, i8** %m_pOutput_buf203, align 8
  %147 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in204 = getelementptr inbounds %struct.tdefl_compressor* %147, i32 0, i32 16
  store i32 0, i32* %m_bits_in204, align 4
  %148 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer205 = getelementptr inbounds %struct.tdefl_compressor* %148, i32 0, i32 17
  store i32 0, i32* %m_bit_buffer205, align 4
  br label %while.cond

while.cond:                                       ; preds = %do.end, %for.end
  %149 = load i32* %bits_in, align 4
  %tobool206 = icmp ne i32 %149, 0
  br i1 %tobool206, label %while.body, label %while.end251

while.body:                                       ; preds = %while.cond
  %150 = load i32* %bits_in, align 4
  %cmp207 = icmp ult i32 %150, 16
  br i1 %cmp207, label %cond.true209, label %cond.false210

cond.true209:                                     ; preds = %while.body
  %151 = load i32* %bits_in, align 4
  br label %cond.end211

cond.false210:                                    ; preds = %while.body
  br label %cond.end211

cond.end211:                                      ; preds = %cond.false210, %cond.true209
  %cond212 = phi i32 [ %151, %cond.true209 ], [ 16, %cond.false210 ]
  store i32 %cond212, i32* %n, align 4
  br label %do.body

do.body:                                          ; preds = %cond.end211
  %152 = load i64* %bit_buffer, align 8
  %conv213 = trunc i64 %152 to i32
  %153 = load i32* %n, align 4
  %idxprom214 = zext i32 %153 to i64
  %arrayidx215 = getelementptr inbounds [17 x i32]* @mz_bitmasks, i32 0, i64 %idxprom214
  %154 = load i32* %arrayidx215, align 4
  %and216 = and i32 %conv213, %154
  store i32 %and216, i32* %bits, align 4
  %155 = load i32* %n, align 4
  store i32 %155, i32* %len, align 4
  %156 = load i32* %bits, align 4
  %157 = load i32* %len, align 4
  %shl217 = shl i32 1, %157
  %sub = sub i32 %shl217, 1
  %cmp218 = icmp ule i32 %156, %sub
  br i1 %cmp218, label %cond.true220, label %cond.false221

cond.true220:                                     ; preds = %do.body
  br label %cond.end222

cond.false221:                                    ; preds = %do.body
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2098, i8* getelementptr inbounds ([52 x i8]* @__PRETTY_FUNCTION__.tdefl_compress_lz_codes, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end222

cond.end222:                                      ; preds = %158, %cond.true220
  %159 = load i32* %bits, align 4
  %160 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in223 = getelementptr inbounds %struct.tdefl_compressor* %160, i32 0, i32 16
  %161 = load i32* %m_bits_in223, align 4
  %shl224 = shl i32 %159, %161
  %162 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer225 = getelementptr inbounds %struct.tdefl_compressor* %162, i32 0, i32 17
  %163 = load i32* %m_bit_buffer225, align 4
  %or226 = or i32 %163, %shl224
  store i32 %or226, i32* %m_bit_buffer225, align 4
  %164 = load i32* %len, align 4
  %165 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in227 = getelementptr inbounds %struct.tdefl_compressor* %165, i32 0, i32 16
  %166 = load i32* %m_bits_in227, align 4
  %add228 = add i32 %166, %164
  store i32 %add228, i32* %m_bits_in227, align 4
  br label %while.cond229

while.cond229:                                    ; preds = %if.end243, %cond.end222
  %167 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in230 = getelementptr inbounds %struct.tdefl_compressor* %167, i32 0, i32 16
  %168 = load i32* %m_bits_in230, align 4
  %cmp231 = icmp uge i32 %168, 8
  br i1 %cmp231, label %while.body233, label %while.end

while.body233:                                    ; preds = %while.cond229
  %169 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf234 = getelementptr inbounds %struct.tdefl_compressor* %169, i32 0, i32 11
  %170 = load i8** %m_pOutput_buf234, align 8
  %171 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end235 = getelementptr inbounds %struct.tdefl_compressor* %171, i32 0, i32 12
  %172 = load i8** %m_pOutput_buf_end235, align 8
  %cmp236 = icmp ult i8* %170, %172
  br i1 %cmp236, label %if.then238, label %if.end243

if.then238:                                       ; preds = %while.body233
  %173 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer239 = getelementptr inbounds %struct.tdefl_compressor* %173, i32 0, i32 17
  %174 = load i32* %m_bit_buffer239, align 4
  %conv240 = trunc i32 %174 to i8
  %175 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf241 = getelementptr inbounds %struct.tdefl_compressor* %175, i32 0, i32 11
  %176 = load i8** %m_pOutput_buf241, align 8
  %incdec.ptr242 = getelementptr inbounds i8* %176, i32 1
  store i8* %incdec.ptr242, i8** %m_pOutput_buf241, align 8
  store i8 %conv240, i8* %176, align 1
  br label %if.end243

if.end243:                                        ; preds = %if.then238, %while.body233
  %177 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer244 = getelementptr inbounds %struct.tdefl_compressor* %177, i32 0, i32 17
  %178 = load i32* %m_bit_buffer244, align 4
  %shr245 = lshr i32 %178, 8
  store i32 %shr245, i32* %m_bit_buffer244, align 4
  %179 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in246 = getelementptr inbounds %struct.tdefl_compressor* %179, i32 0, i32 16
  %180 = load i32* %m_bits_in246, align 4
  %sub247 = sub i32 %180, 8
  store i32 %sub247, i32* %m_bits_in246, align 4
  br label %while.cond229

while.end:                                        ; preds = %while.cond229
  br label %do.end

do.end:                                           ; preds = %while.end
  %181 = load i32* %n, align 4
  %182 = load i64* %bit_buffer, align 8
  %sh_prom248 = zext i32 %181 to i64
  %shr249 = lshr i64 %182, %sh_prom248
  store i64 %shr249, i64* %bit_buffer, align 8
  %183 = load i32* %n, align 4
  %184 = load i32* %bits_in, align 4
  %sub250 = sub i32 %184, %183
  store i32 %sub250, i32* %bits_in, align 4
  br label %while.cond

while.end251:                                     ; preds = %while.cond
  br label %do.body252

do.body252:                                       ; preds = %while.end251
  %185 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes254 = getelementptr inbounds %struct.tdefl_compressor* %185, i32 0, i32 37
  %arrayidx255 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_codes254, i32 0, i64 0
  %arrayidx256 = getelementptr inbounds [288 x i16]* %arrayidx255, i32 0, i64 256
  %186 = load i16* %arrayidx256, align 2
  %conv257 = zext i16 %186 to i32
  store i32 %conv257, i32* %bits253, align 4
  %187 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes259 = getelementptr inbounds %struct.tdefl_compressor* %187, i32 0, i32 38
  %arrayidx260 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes259, i32 0, i64 0
  %arrayidx261 = getelementptr inbounds [288 x i8]* %arrayidx260, i32 0, i64 256
  %188 = load i8* %arrayidx261, align 1
  %conv262 = zext i8 %188 to i32
  store i32 %conv262, i32* %len258, align 4
  %189 = load i32* %bits253, align 4
  %190 = load i32* %len258, align 4
  %shl263 = shl i32 1, %190
  %sub264 = sub i32 %shl263, 1
  %cmp265 = icmp ule i32 %189, %sub264
  br i1 %cmp265, label %cond.true267, label %cond.false268

cond.true267:                                     ; preds = %do.body252
  br label %cond.end269

cond.false268:                                    ; preds = %do.body252
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str15, i32 0, i32 0), i32 2103, i8* getelementptr inbounds ([52 x i8]* @__PRETTY_FUNCTION__.tdefl_compress_lz_codes, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end269

cond.end269:                                      ; preds = %191, %cond.true267
  %192 = load i32* %bits253, align 4
  %193 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in270 = getelementptr inbounds %struct.tdefl_compressor* %193, i32 0, i32 16
  %194 = load i32* %m_bits_in270, align 4
  %shl271 = shl i32 %192, %194
  %195 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer272 = getelementptr inbounds %struct.tdefl_compressor* %195, i32 0, i32 17
  %196 = load i32* %m_bit_buffer272, align 4
  %or273 = or i32 %196, %shl271
  store i32 %or273, i32* %m_bit_buffer272, align 4
  %197 = load i32* %len258, align 4
  %198 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in274 = getelementptr inbounds %struct.tdefl_compressor* %198, i32 0, i32 16
  %199 = load i32* %m_bits_in274, align 4
  %add275 = add i32 %199, %197
  store i32 %add275, i32* %m_bits_in274, align 4
  br label %while.cond276

while.cond276:                                    ; preds = %if.end290, %cond.end269
  %200 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in277 = getelementptr inbounds %struct.tdefl_compressor* %200, i32 0, i32 16
  %201 = load i32* %m_bits_in277, align 4
  %cmp278 = icmp uge i32 %201, 8
  br i1 %cmp278, label %while.body280, label %while.end295

while.body280:                                    ; preds = %while.cond276
  %202 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf281 = getelementptr inbounds %struct.tdefl_compressor* %202, i32 0, i32 11
  %203 = load i8** %m_pOutput_buf281, align 8
  %204 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end282 = getelementptr inbounds %struct.tdefl_compressor* %204, i32 0, i32 12
  %205 = load i8** %m_pOutput_buf_end282, align 8
  %cmp283 = icmp ult i8* %203, %205
  br i1 %cmp283, label %if.then285, label %if.end290

if.then285:                                       ; preds = %while.body280
  %206 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer286 = getelementptr inbounds %struct.tdefl_compressor* %206, i32 0, i32 17
  %207 = load i32* %m_bit_buffer286, align 4
  %conv287 = trunc i32 %207 to i8
  %208 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf288 = getelementptr inbounds %struct.tdefl_compressor* %208, i32 0, i32 11
  %209 = load i8** %m_pOutput_buf288, align 8
  %incdec.ptr289 = getelementptr inbounds i8* %209, i32 1
  store i8* %incdec.ptr289, i8** %m_pOutput_buf288, align 8
  store i8 %conv287, i8* %209, align 1
  br label %if.end290

if.end290:                                        ; preds = %if.then285, %while.body280
  %210 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer291 = getelementptr inbounds %struct.tdefl_compressor* %210, i32 0, i32 17
  %211 = load i32* %m_bit_buffer291, align 4
  %shr292 = lshr i32 %211, 8
  store i32 %shr292, i32* %m_bit_buffer291, align 4
  %212 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in293 = getelementptr inbounds %struct.tdefl_compressor* %212, i32 0, i32 16
  %213 = load i32* %m_bits_in293, align 4
  %sub294 = sub i32 %213, 8
  store i32 %sub294, i32* %m_bits_in293, align 4
  br label %while.cond276

while.end295:                                     ; preds = %while.cond276
  br label %do.end296

do.end296:                                        ; preds = %while.end295
  %214 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf297 = getelementptr inbounds %struct.tdefl_compressor* %214, i32 0, i32 11
  %215 = load i8** %m_pOutput_buf297, align 8
  %216 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end298 = getelementptr inbounds %struct.tdefl_compressor* %216, i32 0, i32 12
  %217 = load i8** %m_pOutput_buf_end298, align 8
  %cmp299 = icmp ult i8* %215, %217
  %conv300 = zext i1 %cmp299 to i32
  store i32 %conv300, i32* %retval
  br label %return

return:                                           ; preds = %do.end296, %if.then194
  %218 = load i32* %retval
  ret i32 %218
}

; Function Attrs: nounwind uwtable
define internal void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %d, i32 %table_num, i32 %table_len, i32 %code_size_limit, i32 %static_table) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %table_num.addr = alloca i32, align 4
  %table_len.addr = alloca i32, align 4
  %code_size_limit.addr = alloca i32, align 4
  %static_table.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %num_codes = alloca [33 x i32], align 16
  %next_code = alloca [33 x i32], align 16
  %syms0 = alloca [288 x %struct.tdefl_sym_freq], align 16
  %syms1 = alloca [288 x %struct.tdefl_sym_freq], align 16
  %pSyms = alloca %struct.tdefl_sym_freq*, align 8
  %num_used_syms = alloca i32, align 4
  %pSym_count = alloca i16*, align 8
  %rev_code = alloca i32, align 4
  %code = alloca i32, align 4
  %code_size = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  store i32 %table_num, i32* %table_num.addr, align 4
  store i32 %table_len, i32* %table_len.addr, align 4
  store i32 %code_size_limit, i32* %code_size_limit.addr, align 4
  store i32 %static_table, i32* %static_table.addr, align 4
  %0 = bitcast [33 x i32]* %num_codes to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 132, i32 16, i1 false)
  %1 = load i32* %static_table.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32* %i, align 4
  %3 = load i32* %table_len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i32* %table_num.addr, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes = getelementptr inbounds %struct.tdefl_compressor* %6, i32 0, i32 38
  %arrayidx = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes, i32 0, i64 %idxprom1
  %arrayidx2 = getelementptr inbounds [288 x i8]* %arrayidx, i32 0, i64 %idxprom
  %7 = load i8* %arrayidx2, align 1
  %idxprom3 = zext i8 %7 to i64
  %arrayidx4 = getelementptr inbounds [33 x i32]* %num_codes, i32 0, i64 %idxprom3
  %8 = load i32* %arrayidx4, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32* %i, align 4
  %inc5 = add nsw i32 %9, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end71

if.else:                                          ; preds = %entry
  store i32 0, i32* %num_used_syms, align 4
  %10 = load i32* %table_num.addr, align 4
  %idxprom6 = sext i32 %10 to i64
  %11 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor* %11, i32 0, i32 36
  %arrayidx7 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_count, i32 0, i64 %idxprom6
  %arrayidx8 = getelementptr inbounds [288 x i16]* %arrayidx7, i32 0, i64 0
  store i16* %arrayidx8, i16** %pSym_count, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc23, %if.else
  %12 = load i32* %i, align 4
  %13 = load i32* %table_len.addr, align 4
  %cmp10 = icmp slt i32 %12, %13
  br i1 %cmp10, label %for.body11, label %for.end25

for.body11:                                       ; preds = %for.cond9
  %14 = load i32* %i, align 4
  %idxprom12 = sext i32 %14 to i64
  %15 = load i16** %pSym_count, align 8
  %arrayidx13 = getelementptr inbounds i16* %15, i64 %idxprom12
  %16 = load i16* %arrayidx13, align 2
  %tobool14 = icmp ne i16 %16, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body11
  %17 = load i32* %i, align 4
  %idxprom16 = sext i32 %17 to i64
  %18 = load i16** %pSym_count, align 8
  %arrayidx17 = getelementptr inbounds i16* %18, i64 %idxprom16
  %19 = load i16* %arrayidx17, align 2
  %20 = load i32* %num_used_syms, align 4
  %idxprom18 = sext i32 %20 to i64
  %arrayidx19 = getelementptr inbounds [288 x %struct.tdefl_sym_freq]* %syms0, i32 0, i64 %idxprom18
  %m_key = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx19, i32 0, i32 0
  store i16 %19, i16* %m_key, align 2
  %21 = load i32* %i, align 4
  %conv = trunc i32 %21 to i16
  %22 = load i32* %num_used_syms, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %num_used_syms, align 4
  %idxprom21 = sext i32 %22 to i64
  %arrayidx22 = getelementptr inbounds [288 x %struct.tdefl_sym_freq]* %syms0, i32 0, i64 %idxprom21
  %m_sym_index = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx22, i32 0, i32 1
  store i16 %conv, i16* %m_sym_index, align 2
  br label %if.end

if.end:                                           ; preds = %if.then15, %for.body11
  br label %for.inc23

for.inc23:                                        ; preds = %if.end
  %23 = load i32* %i, align 4
  %inc24 = add nsw i32 %23, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond9

for.end25:                                        ; preds = %for.cond9
  %24 = load i32* %num_used_syms, align 4
  %arraydecay = getelementptr inbounds [288 x %struct.tdefl_sym_freq]* %syms0, i32 0, i32 0
  %arraydecay26 = getelementptr inbounds [288 x %struct.tdefl_sym_freq]* %syms1, i32 0, i32 0
  %call = call %struct.tdefl_sym_freq* @tdefl_radix_sort_syms(i32 %24, %struct.tdefl_sym_freq* %arraydecay, %struct.tdefl_sym_freq* %arraydecay26)
  store %struct.tdefl_sym_freq* %call, %struct.tdefl_sym_freq** %pSyms, align 8
  %25 = load %struct.tdefl_sym_freq** %pSyms, align 8
  %26 = load i32* %num_used_syms, align 4
  call void @tdefl_calculate_minimum_redundancy(%struct.tdefl_sym_freq* %25, i32 %26)
  store i32 0, i32* %i, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc37, %for.end25
  %27 = load i32* %i, align 4
  %28 = load i32* %num_used_syms, align 4
  %cmp28 = icmp slt i32 %27, %28
  br i1 %cmp28, label %for.body30, label %for.end39

for.body30:                                       ; preds = %for.cond27
  %29 = load i32* %i, align 4
  %idxprom31 = sext i32 %29 to i64
  %30 = load %struct.tdefl_sym_freq** %pSyms, align 8
  %arrayidx32 = getelementptr inbounds %struct.tdefl_sym_freq* %30, i64 %idxprom31
  %m_key33 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx32, i32 0, i32 0
  %31 = load i16* %m_key33, align 2
  %idxprom34 = zext i16 %31 to i64
  %arrayidx35 = getelementptr inbounds [33 x i32]* %num_codes, i32 0, i64 %idxprom34
  %32 = load i32* %arrayidx35, align 4
  %inc36 = add nsw i32 %32, 1
  store i32 %inc36, i32* %arrayidx35, align 4
  br label %for.inc37

for.inc37:                                        ; preds = %for.body30
  %33 = load i32* %i, align 4
  %inc38 = add nsw i32 %33, 1
  store i32 %inc38, i32* %i, align 4
  br label %for.cond27

for.end39:                                        ; preds = %for.cond27
  %arraydecay40 = getelementptr inbounds [33 x i32]* %num_codes, i32 0, i32 0
  %34 = load i32* %num_used_syms, align 4
  %35 = load i32* %code_size_limit.addr, align 4
  call void @tdefl_huffman_enforce_max_code_size(i32* %arraydecay40, i32 %34, i32 %35)
  %36 = load i32* %table_num.addr, align 4
  %idxprom41 = sext i32 %36 to i64
  %37 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes42 = getelementptr inbounds %struct.tdefl_compressor* %37, i32 0, i32 38
  %arrayidx43 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes42, i32 0, i64 %idxprom41
  %38 = bitcast [288 x i8]* %arrayidx43 to i8*
  call void @llvm.memset.p0i8.i64(i8* %38, i8 0, i64 288, i32 1, i1 false)
  %39 = load i32* %table_num.addr, align 4
  %idxprom44 = sext i32 %39 to i64
  %40 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes = getelementptr inbounds %struct.tdefl_compressor* %40, i32 0, i32 37
  %arrayidx45 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_codes, i32 0, i64 %idxprom44
  %41 = bitcast [288 x i16]* %arrayidx45 to i8*
  call void @llvm.memset.p0i8.i64(i8* %41, i8 0, i64 576, i32 2, i1 false)
  store i32 1, i32* %i, align 4
  %42 = load i32* %num_used_syms, align 4
  store i32 %42, i32* %j, align 4
  br label %for.cond46

for.cond46:                                       ; preds = %for.inc68, %for.end39
  %43 = load i32* %i, align 4
  %44 = load i32* %code_size_limit.addr, align 4
  %cmp47 = icmp sle i32 %43, %44
  br i1 %cmp47, label %for.body49, label %for.end70

for.body49:                                       ; preds = %for.cond46
  %45 = load i32* %i, align 4
  %idxprom50 = sext i32 %45 to i64
  %arrayidx51 = getelementptr inbounds [33 x i32]* %num_codes, i32 0, i64 %idxprom50
  %46 = load i32* %arrayidx51, align 4
  store i32 %46, i32* %l, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.inc65, %for.body49
  %47 = load i32* %l, align 4
  %cmp53 = icmp sgt i32 %47, 0
  br i1 %cmp53, label %for.body55, label %for.end67

for.body55:                                       ; preds = %for.cond52
  %48 = load i32* %i, align 4
  %conv56 = trunc i32 %48 to i8
  %49 = load i32* %j, align 4
  %dec = add nsw i32 %49, -1
  store i32 %dec, i32* %j, align 4
  %idxprom57 = sext i32 %dec to i64
  %50 = load %struct.tdefl_sym_freq** %pSyms, align 8
  %arrayidx58 = getelementptr inbounds %struct.tdefl_sym_freq* %50, i64 %idxprom57
  %m_sym_index59 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx58, i32 0, i32 1
  %51 = load i16* %m_sym_index59, align 2
  %idxprom60 = zext i16 %51 to i64
  %52 = load i32* %table_num.addr, align 4
  %idxprom61 = sext i32 %52 to i64
  %53 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes62 = getelementptr inbounds %struct.tdefl_compressor* %53, i32 0, i32 38
  %arrayidx63 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes62, i32 0, i64 %idxprom61
  %arrayidx64 = getelementptr inbounds [288 x i8]* %arrayidx63, i32 0, i64 %idxprom60
  store i8 %conv56, i8* %arrayidx64, align 1
  br label %for.inc65

for.inc65:                                        ; preds = %for.body55
  %54 = load i32* %l, align 4
  %dec66 = add nsw i32 %54, -1
  store i32 %dec66, i32* %l, align 4
  br label %for.cond52

for.end67:                                        ; preds = %for.cond52
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %55 = load i32* %i, align 4
  %inc69 = add nsw i32 %55, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond46

for.end70:                                        ; preds = %for.cond46
  br label %if.end71

if.end71:                                         ; preds = %for.end70, %for.end
  %arrayidx72 = getelementptr inbounds [33 x i32]* %next_code, i32 0, i64 1
  store i32 0, i32* %arrayidx72, align 4
  store i32 0, i32* %j, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond73

for.cond73:                                       ; preds = %for.inc81, %if.end71
  %56 = load i32* %i, align 4
  %57 = load i32* %code_size_limit.addr, align 4
  %cmp74 = icmp sle i32 %56, %57
  br i1 %cmp74, label %for.body76, label %for.end83

for.body76:                                       ; preds = %for.cond73
  %58 = load i32* %j, align 4
  %59 = load i32* %i, align 4
  %sub = sub nsw i32 %59, 1
  %idxprom77 = sext i32 %sub to i64
  %arrayidx78 = getelementptr inbounds [33 x i32]* %num_codes, i32 0, i64 %idxprom77
  %60 = load i32* %arrayidx78, align 4
  %add = add nsw i32 %58, %60
  %shl = shl i32 %add, 1
  store i32 %shl, i32* %j, align 4
  %61 = load i32* %i, align 4
  %idxprom79 = sext i32 %61 to i64
  %arrayidx80 = getelementptr inbounds [33 x i32]* %next_code, i32 0, i64 %idxprom79
  store i32 %shl, i32* %arrayidx80, align 4
  br label %for.inc81

for.inc81:                                        ; preds = %for.body76
  %62 = load i32* %i, align 4
  %inc82 = add nsw i32 %62, 1
  store i32 %inc82, i32* %i, align 4
  br label %for.cond73

for.end83:                                        ; preds = %for.cond73
  store i32 0, i32* %i, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc115, %for.end83
  %63 = load i32* %i, align 4
  %64 = load i32* %table_len.addr, align 4
  %cmp85 = icmp slt i32 %63, %64
  br i1 %cmp85, label %for.body87, label %for.end117

for.body87:                                       ; preds = %for.cond84
  store i32 0, i32* %rev_code, align 4
  %65 = load i32* %i, align 4
  %idxprom88 = sext i32 %65 to i64
  %66 = load i32* %table_num.addr, align 4
  %idxprom89 = sext i32 %66 to i64
  %67 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes90 = getelementptr inbounds %struct.tdefl_compressor* %67, i32 0, i32 38
  %arrayidx91 = getelementptr inbounds [3 x [288 x i8]]* %m_huff_code_sizes90, i32 0, i64 %idxprom89
  %arrayidx92 = getelementptr inbounds [288 x i8]* %arrayidx91, i32 0, i64 %idxprom88
  %68 = load i8* %arrayidx92, align 1
  %conv93 = zext i8 %68 to i32
  store i32 %conv93, i32* %code_size, align 4
  %cmp94 = icmp eq i32 %conv93, 0
  br i1 %cmp94, label %if.then96, label %if.end97

if.then96:                                        ; preds = %for.body87
  br label %for.inc115

if.end97:                                         ; preds = %for.body87
  %69 = load i32* %code_size, align 4
  %idxprom98 = zext i32 %69 to i64
  %arrayidx99 = getelementptr inbounds [33 x i32]* %next_code, i32 0, i64 %idxprom98
  %70 = load i32* %arrayidx99, align 4
  %inc100 = add i32 %70, 1
  store i32 %inc100, i32* %arrayidx99, align 4
  store i32 %70, i32* %code, align 4
  %71 = load i32* %code_size, align 4
  store i32 %71, i32* %l, align 4
  br label %for.cond101

for.cond101:                                      ; preds = %for.inc106, %if.end97
  %72 = load i32* %l, align 4
  %cmp102 = icmp sgt i32 %72, 0
  br i1 %cmp102, label %for.body104, label %for.end108

for.body104:                                      ; preds = %for.cond101
  %73 = load i32* %rev_code, align 4
  %shl105 = shl i32 %73, 1
  %74 = load i32* %code, align 4
  %and = and i32 %74, 1
  %or = or i32 %shl105, %and
  store i32 %or, i32* %rev_code, align 4
  br label %for.inc106

for.inc106:                                       ; preds = %for.body104
  %75 = load i32* %l, align 4
  %dec107 = add nsw i32 %75, -1
  store i32 %dec107, i32* %l, align 4
  %76 = load i32* %code, align 4
  %shr = lshr i32 %76, 1
  store i32 %shr, i32* %code, align 4
  br label %for.cond101

for.end108:                                       ; preds = %for.cond101
  %77 = load i32* %rev_code, align 4
  %conv109 = trunc i32 %77 to i16
  %78 = load i32* %i, align 4
  %idxprom110 = sext i32 %78 to i64
  %79 = load i32* %table_num.addr, align 4
  %idxprom111 = sext i32 %79 to i64
  %80 = load %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes112 = getelementptr inbounds %struct.tdefl_compressor* %80, i32 0, i32 37
  %arrayidx113 = getelementptr inbounds [3 x [288 x i16]]* %m_huff_codes112, i32 0, i64 %idxprom111
  %arrayidx114 = getelementptr inbounds [288 x i16]* %arrayidx113, i32 0, i64 %idxprom110
  store i16 %conv109, i16* %arrayidx114, align 2
  br label %for.inc115

for.inc115:                                       ; preds = %for.end108, %if.then96
  %81 = load i32* %i, align 4
  %inc116 = add nsw i32 %81, 1
  store i32 %inc116, i32* %i, align 4
  br label %for.cond84

for.end117:                                       ; preds = %for.cond84
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.tdefl_sym_freq* @tdefl_radix_sort_syms(i32 %num_syms, %struct.tdefl_sym_freq* %pSyms0, %struct.tdefl_sym_freq* %pSyms1) #0 {
entry:
  %num_syms.addr = alloca i32, align 4
  %pSyms0.addr = alloca %struct.tdefl_sym_freq*, align 8
  %pSyms1.addr = alloca %struct.tdefl_sym_freq*, align 8
  %total_passes = alloca i32, align 4
  %pass_shift = alloca i32, align 4
  %pass = alloca i32, align 4
  %i = alloca i32, align 4
  %hist = alloca [512 x i32], align 16
  %pCur_syms = alloca %struct.tdefl_sym_freq*, align 8
  %pNew_syms = alloca %struct.tdefl_sym_freq*, align 8
  %freq = alloca i32, align 4
  %pHist = alloca i32*, align 8
  %offsets = alloca [256 x i32], align 16
  %cur_ofs = alloca i32, align 4
  %t = alloca %struct.tdefl_sym_freq*, align 8
  store i32 %num_syms, i32* %num_syms.addr, align 4
  store %struct.tdefl_sym_freq* %pSyms0, %struct.tdefl_sym_freq** %pSyms0.addr, align 8
  store %struct.tdefl_sym_freq* %pSyms1, %struct.tdefl_sym_freq** %pSyms1.addr, align 8
  store i32 2, i32* %total_passes, align 4
  %0 = load %struct.tdefl_sym_freq** %pSyms0.addr, align 8
  store %struct.tdefl_sym_freq* %0, %struct.tdefl_sym_freq** %pCur_syms, align 8
  %1 = load %struct.tdefl_sym_freq** %pSyms1.addr, align 8
  store %struct.tdefl_sym_freq* %1, %struct.tdefl_sym_freq** %pNew_syms, align 8
  %2 = bitcast [512 x i32]* %hist to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 2048, i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32* %i, align 4
  %4 = load i32* %num_syms.addr, align 4
  %cmp = icmp ult i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32* %i, align 4
  %idxprom = zext i32 %5 to i64
  %6 = load %struct.tdefl_sym_freq** %pSyms0.addr, align 8
  %arrayidx = getelementptr inbounds %struct.tdefl_sym_freq* %6, i64 %idxprom
  %m_key = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx, i32 0, i32 0
  %7 = load i16* %m_key, align 2
  %conv = zext i16 %7 to i32
  store i32 %conv, i32* %freq, align 4
  %8 = load i32* %freq, align 4
  %and = and i32 %8, 255
  %idxprom1 = zext i32 %and to i64
  %arrayidx2 = getelementptr inbounds [512 x i32]* %hist, i32 0, i64 %idxprom1
  %9 = load i32* %arrayidx2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %arrayidx2, align 4
  %10 = load i32* %freq, align 4
  %shr = lshr i32 %10, 8
  %and3 = and i32 %shr, 255
  %add = add i32 256, %and3
  %idxprom4 = zext i32 %add to i64
  %arrayidx5 = getelementptr inbounds [512 x i32]* %hist, i32 0, i64 %idxprom4
  %11 = load i32* %arrayidx5, align 4
  %inc6 = add i32 %11, 1
  store i32 %inc6, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32* %i, align 4
  %inc7 = add i32 %12, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %13 = load i32* %total_passes, align 4
  %cmp8 = icmp ugt i32 %13, 1
  br i1 %cmp8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %14 = load i32* %num_syms.addr, align 4
  %15 = load i32* %total_passes, align 4
  %sub = sub i32 %15, 1
  %mul = mul i32 %sub, 256
  %idxprom10 = zext i32 %mul to i64
  %arrayidx11 = getelementptr inbounds [512 x i32]* %hist, i32 0, i64 %idxprom10
  %16 = load i32* %arrayidx11, align 4
  %cmp12 = icmp eq i32 %14, %16
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %17 = phi i1 [ false, %while.cond ], [ %cmp12, %land.rhs ]
  br i1 %17, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %18 = load i32* %total_passes, align 4
  %dec = add i32 %18, -1
  store i32 %dec, i32* %total_passes, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  store i32 0, i32* %pass_shift, align 4
  store i32 0, i32* %pass, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc52, %while.end
  %19 = load i32* %pass, align 4
  %20 = load i32* %total_passes, align 4
  %cmp15 = icmp ult i32 %19, %20
  br i1 %cmp15, label %for.body17, label %for.end55

for.body17:                                       ; preds = %for.cond14
  %21 = load i32* %pass, align 4
  %shl = shl i32 %21, 8
  %idxprom18 = zext i32 %shl to i64
  %arrayidx19 = getelementptr inbounds [512 x i32]* %hist, i32 0, i64 %idxprom18
  store i32* %arrayidx19, i32** %pHist, align 8
  store i32 0, i32* %cur_ofs, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc29, %for.body17
  %22 = load i32* %i, align 4
  %cmp21 = icmp ult i32 %22, 256
  br i1 %cmp21, label %for.body23, label %for.end31

for.body23:                                       ; preds = %for.cond20
  %23 = load i32* %cur_ofs, align 4
  %24 = load i32* %i, align 4
  %idxprom24 = zext i32 %24 to i64
  %arrayidx25 = getelementptr inbounds [256 x i32]* %offsets, i32 0, i64 %idxprom24
  store i32 %23, i32* %arrayidx25, align 4
  %25 = load i32* %i, align 4
  %idxprom26 = zext i32 %25 to i64
  %26 = load i32** %pHist, align 8
  %arrayidx27 = getelementptr inbounds i32* %26, i64 %idxprom26
  %27 = load i32* %arrayidx27, align 4
  %28 = load i32* %cur_ofs, align 4
  %add28 = add i32 %28, %27
  store i32 %add28, i32* %cur_ofs, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body23
  %29 = load i32* %i, align 4
  %inc30 = add i32 %29, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond20

for.end31:                                        ; preds = %for.cond20
  store i32 0, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc49, %for.end31
  %30 = load i32* %i, align 4
  %31 = load i32* %num_syms.addr, align 4
  %cmp33 = icmp ult i32 %30, %31
  br i1 %cmp33, label %for.body35, label %for.end51

for.body35:                                       ; preds = %for.cond32
  %32 = load i32* %i, align 4
  %idxprom36 = zext i32 %32 to i64
  %33 = load %struct.tdefl_sym_freq** %pCur_syms, align 8
  %arrayidx37 = getelementptr inbounds %struct.tdefl_sym_freq* %33, i64 %idxprom36
  %m_key38 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx37, i32 0, i32 0
  %34 = load i16* %m_key38, align 2
  %conv39 = zext i16 %34 to i32
  %35 = load i32* %pass_shift, align 4
  %shr40 = ashr i32 %conv39, %35
  %and41 = and i32 %shr40, 255
  %idxprom42 = sext i32 %and41 to i64
  %arrayidx43 = getelementptr inbounds [256 x i32]* %offsets, i32 0, i64 %idxprom42
  %36 = load i32* %arrayidx43, align 4
  %inc44 = add i32 %36, 1
  store i32 %inc44, i32* %arrayidx43, align 4
  %idxprom45 = zext i32 %36 to i64
  %37 = load %struct.tdefl_sym_freq** %pNew_syms, align 8
  %arrayidx46 = getelementptr inbounds %struct.tdefl_sym_freq* %37, i64 %idxprom45
  %38 = load i32* %i, align 4
  %idxprom47 = zext i32 %38 to i64
  %39 = load %struct.tdefl_sym_freq** %pCur_syms, align 8
  %arrayidx48 = getelementptr inbounds %struct.tdefl_sym_freq* %39, i64 %idxprom47
  %40 = bitcast %struct.tdefl_sym_freq* %arrayidx46 to i8*
  %41 = bitcast %struct.tdefl_sym_freq* %arrayidx48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %40, i8* %41, i64 4, i32 2, i1 false)
  br label %for.inc49

for.inc49:                                        ; preds = %for.body35
  %42 = load i32* %i, align 4
  %inc50 = add i32 %42, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond32

for.end51:                                        ; preds = %for.cond32
  %43 = load %struct.tdefl_sym_freq** %pCur_syms, align 8
  store %struct.tdefl_sym_freq* %43, %struct.tdefl_sym_freq** %t, align 8
  %44 = load %struct.tdefl_sym_freq** %pNew_syms, align 8
  store %struct.tdefl_sym_freq* %44, %struct.tdefl_sym_freq** %pCur_syms, align 8
  %45 = load %struct.tdefl_sym_freq** %t, align 8
  store %struct.tdefl_sym_freq* %45, %struct.tdefl_sym_freq** %pNew_syms, align 8
  br label %for.inc52

for.inc52:                                        ; preds = %for.end51
  %46 = load i32* %pass, align 4
  %inc53 = add i32 %46, 1
  store i32 %inc53, i32* %pass, align 4
  %47 = load i32* %pass_shift, align 4
  %add54 = add i32 %47, 8
  store i32 %add54, i32* %pass_shift, align 4
  br label %for.cond14

for.end55:                                        ; preds = %for.cond14
  %48 = load %struct.tdefl_sym_freq** %pCur_syms, align 8
  ret %struct.tdefl_sym_freq* %48
}

; Function Attrs: nounwind uwtable
define internal void @tdefl_calculate_minimum_redundancy(%struct.tdefl_sym_freq* %A, i32 %n) #0 {
entry:
  %A.addr = alloca %struct.tdefl_sym_freq*, align 8
  %n.addr = alloca i32, align 4
  %root = alloca i32, align 4
  %leaf = alloca i32, align 4
  %next = alloca i32, align 4
  %avbl = alloca i32, align 4
  %used = alloca i32, align 4
  %dpth = alloca i32, align 4
  store %struct.tdefl_sym_freq* %A, %struct.tdefl_sym_freq** %A.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32* %n.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %while.end145

if.else:                                          ; preds = %entry
  %1 = load i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 1
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.else
  %2 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx = getelementptr inbounds %struct.tdefl_sym_freq* %2, i64 0
  %m_key = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx, i32 0, i32 0
  store i16 1, i16* %m_key, align 2
  br label %while.end145

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end
  %3 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.tdefl_sym_freq* %3, i64 1
  %m_key5 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx4, i32 0, i32 0
  %4 = load i16* %m_key5, align 2
  %conv = zext i16 %4 to i32
  %5 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.tdefl_sym_freq* %5, i64 0
  %m_key7 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx6, i32 0, i32 0
  %6 = load i16* %m_key7, align 2
  %conv8 = zext i16 %6 to i32
  %add = add nsw i32 %conv8, %conv
  %conv9 = trunc i32 %add to i16
  store i16 %conv9, i16* %m_key7, align 2
  store i32 0, i32* %root, align 4
  store i32 2, i32* %leaf, align 4
  store i32 1, i32* %next, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end3
  %7 = load i32* %next, align 4
  %8 = load i32* %n.addr, align 4
  %sub = sub nsw i32 %8, 1
  %cmp10 = icmp slt i32 %7, %sub
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32* %leaf, align 4
  %10 = load i32* %n.addr, align 4
  %cmp12 = icmp sge i32 %9, %10
  br i1 %cmp12, label %if.then23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %11 = load i32* %root, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.tdefl_sym_freq* %12, i64 %idxprom
  %m_key15 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx14, i32 0, i32 0
  %13 = load i16* %m_key15, align 2
  %conv16 = zext i16 %13 to i32
  %14 = load i32* %leaf, align 4
  %idxprom17 = sext i32 %14 to i64
  %15 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx18 = getelementptr inbounds %struct.tdefl_sym_freq* %15, i64 %idxprom17
  %m_key19 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx18, i32 0, i32 0
  %16 = load i16* %m_key19, align 2
  %conv20 = zext i16 %16 to i32
  %cmp21 = icmp slt i32 %conv16, %conv20
  br i1 %cmp21, label %if.then23, label %if.else34

if.then23:                                        ; preds = %lor.lhs.false, %for.body
  %17 = load i32* %root, align 4
  %idxprom24 = sext i32 %17 to i64
  %18 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx25 = getelementptr inbounds %struct.tdefl_sym_freq* %18, i64 %idxprom24
  %m_key26 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx25, i32 0, i32 0
  %19 = load i16* %m_key26, align 2
  %20 = load i32* %next, align 4
  %idxprom27 = sext i32 %20 to i64
  %21 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx28 = getelementptr inbounds %struct.tdefl_sym_freq* %21, i64 %idxprom27
  %m_key29 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx28, i32 0, i32 0
  store i16 %19, i16* %m_key29, align 2
  %22 = load i32* %next, align 4
  %conv30 = trunc i32 %22 to i16
  %23 = load i32* %root, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %root, align 4
  %idxprom31 = sext i32 %23 to i64
  %24 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx32 = getelementptr inbounds %struct.tdefl_sym_freq* %24, i64 %idxprom31
  %m_key33 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx32, i32 0, i32 0
  store i16 %conv30, i16* %m_key33, align 2
  br label %if.end42

if.else34:                                        ; preds = %lor.lhs.false
  %25 = load i32* %leaf, align 4
  %inc35 = add nsw i32 %25, 1
  store i32 %inc35, i32* %leaf, align 4
  %idxprom36 = sext i32 %25 to i64
  %26 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx37 = getelementptr inbounds %struct.tdefl_sym_freq* %26, i64 %idxprom36
  %m_key38 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx37, i32 0, i32 0
  %27 = load i16* %m_key38, align 2
  %28 = load i32* %next, align 4
  %idxprom39 = sext i32 %28 to i64
  %29 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx40 = getelementptr inbounds %struct.tdefl_sym_freq* %29, i64 %idxprom39
  %m_key41 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx40, i32 0, i32 0
  store i16 %27, i16* %m_key41, align 2
  br label %if.end42

if.end42:                                         ; preds = %if.else34, %if.then23
  %30 = load i32* %leaf, align 4
  %31 = load i32* %n.addr, align 4
  %cmp43 = icmp sge i32 %30, %31
  br i1 %cmp43, label %if.then58, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %if.end42
  %32 = load i32* %root, align 4
  %33 = load i32* %next, align 4
  %cmp46 = icmp slt i32 %32, %33
  br i1 %cmp46, label %land.lhs.true, label %if.else77

land.lhs.true:                                    ; preds = %lor.lhs.false45
  %34 = load i32* %root, align 4
  %idxprom48 = sext i32 %34 to i64
  %35 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx49 = getelementptr inbounds %struct.tdefl_sym_freq* %35, i64 %idxprom48
  %m_key50 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx49, i32 0, i32 0
  %36 = load i16* %m_key50, align 2
  %conv51 = zext i16 %36 to i32
  %37 = load i32* %leaf, align 4
  %idxprom52 = sext i32 %37 to i64
  %38 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx53 = getelementptr inbounds %struct.tdefl_sym_freq* %38, i64 %idxprom52
  %m_key54 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx53, i32 0, i32 0
  %39 = load i16* %m_key54, align 2
  %conv55 = zext i16 %39 to i32
  %cmp56 = icmp slt i32 %conv51, %conv55
  br i1 %cmp56, label %if.then58, label %if.else77

if.then58:                                        ; preds = %land.lhs.true, %if.end42
  %40 = load i32* %next, align 4
  %idxprom59 = sext i32 %40 to i64
  %41 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx60 = getelementptr inbounds %struct.tdefl_sym_freq* %41, i64 %idxprom59
  %m_key61 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx60, i32 0, i32 0
  %42 = load i16* %m_key61, align 2
  %conv62 = zext i16 %42 to i32
  %43 = load i32* %root, align 4
  %idxprom63 = sext i32 %43 to i64
  %44 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx64 = getelementptr inbounds %struct.tdefl_sym_freq* %44, i64 %idxprom63
  %m_key65 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx64, i32 0, i32 0
  %45 = load i16* %m_key65, align 2
  %conv66 = zext i16 %45 to i32
  %add67 = add nsw i32 %conv62, %conv66
  %conv68 = trunc i32 %add67 to i16
  %46 = load i32* %next, align 4
  %idxprom69 = sext i32 %46 to i64
  %47 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx70 = getelementptr inbounds %struct.tdefl_sym_freq* %47, i64 %idxprom69
  %m_key71 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx70, i32 0, i32 0
  store i16 %conv68, i16* %m_key71, align 2
  %48 = load i32* %next, align 4
  %conv72 = trunc i32 %48 to i16
  %49 = load i32* %root, align 4
  %inc73 = add nsw i32 %49, 1
  store i32 %inc73, i32* %root, align 4
  %idxprom74 = sext i32 %49 to i64
  %50 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx75 = getelementptr inbounds %struct.tdefl_sym_freq* %50, i64 %idxprom74
  %m_key76 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx75, i32 0, i32 0
  store i16 %conv72, i16* %m_key76, align 2
  br label %if.end92

if.else77:                                        ; preds = %land.lhs.true, %lor.lhs.false45
  %51 = load i32* %next, align 4
  %idxprom78 = sext i32 %51 to i64
  %52 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx79 = getelementptr inbounds %struct.tdefl_sym_freq* %52, i64 %idxprom78
  %m_key80 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx79, i32 0, i32 0
  %53 = load i16* %m_key80, align 2
  %conv81 = zext i16 %53 to i32
  %54 = load i32* %leaf, align 4
  %inc82 = add nsw i32 %54, 1
  store i32 %inc82, i32* %leaf, align 4
  %idxprom83 = sext i32 %54 to i64
  %55 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx84 = getelementptr inbounds %struct.tdefl_sym_freq* %55, i64 %idxprom83
  %m_key85 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx84, i32 0, i32 0
  %56 = load i16* %m_key85, align 2
  %conv86 = zext i16 %56 to i32
  %add87 = add nsw i32 %conv81, %conv86
  %conv88 = trunc i32 %add87 to i16
  %57 = load i32* %next, align 4
  %idxprom89 = sext i32 %57 to i64
  %58 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx90 = getelementptr inbounds %struct.tdefl_sym_freq* %58, i64 %idxprom89
  %m_key91 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx90, i32 0, i32 0
  store i16 %conv88, i16* %m_key91, align 2
  br label %if.end92

if.end92:                                         ; preds = %if.else77, %if.then58
  br label %for.inc

for.inc:                                          ; preds = %if.end92
  %59 = load i32* %next, align 4
  %inc93 = add nsw i32 %59, 1
  store i32 %inc93, i32* %next, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %60 = load i32* %n.addr, align 4
  %sub94 = sub nsw i32 %60, 2
  %idxprom95 = sext i32 %sub94 to i64
  %61 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx96 = getelementptr inbounds %struct.tdefl_sym_freq* %61, i64 %idxprom95
  %m_key97 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx96, i32 0, i32 0
  store i16 0, i16* %m_key97, align 2
  %62 = load i32* %n.addr, align 4
  %sub98 = sub nsw i32 %62, 3
  store i32 %sub98, i32* %next, align 4
  br label %for.cond99

for.cond99:                                       ; preds = %for.inc115, %for.end
  %63 = load i32* %next, align 4
  %cmp100 = icmp sge i32 %63, 0
  br i1 %cmp100, label %for.body102, label %for.end116

for.body102:                                      ; preds = %for.cond99
  %64 = load i32* %next, align 4
  %idxprom103 = sext i32 %64 to i64
  %65 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx104 = getelementptr inbounds %struct.tdefl_sym_freq* %65, i64 %idxprom103
  %m_key105 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx104, i32 0, i32 0
  %66 = load i16* %m_key105, align 2
  %idxprom106 = zext i16 %66 to i64
  %67 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx107 = getelementptr inbounds %struct.tdefl_sym_freq* %67, i64 %idxprom106
  %m_key108 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx107, i32 0, i32 0
  %68 = load i16* %m_key108, align 2
  %conv109 = zext i16 %68 to i32
  %add110 = add nsw i32 %conv109, 1
  %conv111 = trunc i32 %add110 to i16
  %69 = load i32* %next, align 4
  %idxprom112 = sext i32 %69 to i64
  %70 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx113 = getelementptr inbounds %struct.tdefl_sym_freq* %70, i64 %idxprom112
  %m_key114 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx113, i32 0, i32 0
  store i16 %conv111, i16* %m_key114, align 2
  br label %for.inc115

for.inc115:                                       ; preds = %for.body102
  %71 = load i32* %next, align 4
  %dec = add nsw i32 %71, -1
  store i32 %dec, i32* %next, align 4
  br label %for.cond99

for.end116:                                       ; preds = %for.cond99
  store i32 1, i32* %avbl, align 4
  store i32 0, i32* %dpth, align 4
  store i32 0, i32* %used, align 4
  %72 = load i32* %n.addr, align 4
  %sub117 = sub nsw i32 %72, 2
  store i32 %sub117, i32* %root, align 4
  %73 = load i32* %n.addr, align 4
  %sub118 = sub nsw i32 %73, 1
  store i32 %sub118, i32* %next, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end143, %for.end116
  %74 = load i32* %avbl, align 4
  %cmp119 = icmp sgt i32 %74, 0
  br i1 %cmp119, label %while.body, label %while.end145

while.body:                                       ; preds = %while.cond
  br label %while.cond121

while.cond121:                                    ; preds = %while.body130, %while.body
  %75 = load i32* %root, align 4
  %cmp122 = icmp sge i32 %75, 0
  br i1 %cmp122, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond121
  %76 = load i32* %root, align 4
  %idxprom124 = sext i32 %76 to i64
  %77 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx125 = getelementptr inbounds %struct.tdefl_sym_freq* %77, i64 %idxprom124
  %m_key126 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx125, i32 0, i32 0
  %78 = load i16* %m_key126, align 2
  %conv127 = zext i16 %78 to i32
  %79 = load i32* %dpth, align 4
  %cmp128 = icmp eq i32 %conv127, %79
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond121
  %80 = phi i1 [ false, %while.cond121 ], [ %cmp128, %land.rhs ]
  br i1 %80, label %while.body130, label %while.end

while.body130:                                    ; preds = %land.end
  %81 = load i32* %used, align 4
  %inc131 = add nsw i32 %81, 1
  store i32 %inc131, i32* %used, align 4
  %82 = load i32* %root, align 4
  %dec132 = add nsw i32 %82, -1
  store i32 %dec132, i32* %root, align 4
  br label %while.cond121

while.end:                                        ; preds = %land.end
  br label %while.cond133

while.cond133:                                    ; preds = %while.body136, %while.end
  %83 = load i32* %avbl, align 4
  %84 = load i32* %used, align 4
  %cmp134 = icmp sgt i32 %83, %84
  br i1 %cmp134, label %while.body136, label %while.end143

while.body136:                                    ; preds = %while.cond133
  %85 = load i32* %dpth, align 4
  %conv137 = trunc i32 %85 to i16
  %86 = load i32* %next, align 4
  %dec138 = add nsw i32 %86, -1
  store i32 %dec138, i32* %next, align 4
  %idxprom139 = sext i32 %86 to i64
  %87 = load %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx140 = getelementptr inbounds %struct.tdefl_sym_freq* %87, i64 %idxprom139
  %m_key141 = getelementptr inbounds %struct.tdefl_sym_freq* %arrayidx140, i32 0, i32 0
  store i16 %conv137, i16* %m_key141, align 2
  %88 = load i32* %avbl, align 4
  %dec142 = add nsw i32 %88, -1
  store i32 %dec142, i32* %avbl, align 4
  br label %while.cond133

while.end143:                                     ; preds = %while.cond133
  %89 = load i32* %used, align 4
  %mul = mul nsw i32 2, %89
  store i32 %mul, i32* %avbl, align 4
  %90 = load i32* %dpth, align 4
  %inc144 = add nsw i32 %90, 1
  store i32 %inc144, i32* %dpth, align 4
  store i32 0, i32* %used, align 4
  br label %while.cond

while.end145:                                     ; preds = %while.cond, %if.then2, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tdefl_huffman_enforce_max_code_size(i32* %pNum_codes, i32 %code_list_len, i32 %max_code_size) #0 {
entry:
  %pNum_codes.addr = alloca i32*, align 8
  %code_list_len.addr = alloca i32, align 4
  %max_code_size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %total = alloca i32, align 4
  store i32* %pNum_codes, i32** %pNum_codes.addr, align 8
  store i32 %code_list_len, i32* %code_list_len.addr, align 4
  store i32 %max_code_size, i32* %max_code_size.addr, align 4
  store i32 0, i32* %total, align 4
  %0 = load i32* %code_list_len.addr, align 4
  %cmp = icmp sle i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.end

if.end:                                           ; preds = %entry
  %1 = load i32* %max_code_size.addr, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32* %i, align 4
  %cmp1 = icmp sle i32 %2, 32
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i32** %pNum_codes.addr, align 8
  %arrayidx = getelementptr inbounds i32* %4, i64 %idxprom
  %5 = load i32* %arrayidx, align 4
  %6 = load i32* %max_code_size.addr, align 4
  %idxprom2 = sext i32 %6 to i64
  %7 = load i32** %pNum_codes.addr, align 8
  %arrayidx3 = getelementptr inbounds i32* %7, i64 %idxprom2
  %8 = load i32* %arrayidx3, align 4
  %add4 = add nsw i32 %8, %5
  store i32 %add4, i32* %arrayidx3, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32* %max_code_size.addr, align 4
  store i32 %10, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc11, %for.end
  %11 = load i32* %i, align 4
  %cmp6 = icmp sgt i32 %11, 0
  br i1 %cmp6, label %for.body7, label %for.end12

for.body7:                                        ; preds = %for.cond5
  %12 = load i32* %i, align 4
  %idxprom8 = sext i32 %12 to i64
  %13 = load i32** %pNum_codes.addr, align 8
  %arrayidx9 = getelementptr inbounds i32* %13, i64 %idxprom8
  %14 = load i32* %arrayidx9, align 4
  %15 = load i32* %max_code_size.addr, align 4
  %16 = load i32* %i, align 4
  %sub = sub nsw i32 %15, %16
  %shl = shl i32 %14, %sub
  %17 = load i32* %total, align 4
  %add10 = add i32 %17, %shl
  store i32 %add10, i32* %total, align 4
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %18 = load i32* %i, align 4
  %dec = add nsw i32 %18, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond5

for.end12:                                        ; preds = %for.cond5
  br label %while.cond

while.cond:                                       ; preds = %for.end37, %for.end12
  %19 = load i32* %total, align 4
  %conv = zext i32 %19 to i64
  %20 = load i32* %max_code_size.addr, align 4
  %sh_prom = zext i32 %20 to i64
  %shl13 = shl i64 1, %sh_prom
  %cmp14 = icmp ne i64 %conv, %shl13
  br i1 %cmp14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %21 = load i32* %max_code_size.addr, align 4
  %idxprom16 = sext i32 %21 to i64
  %22 = load i32** %pNum_codes.addr, align 8
  %arrayidx17 = getelementptr inbounds i32* %22, i64 %idxprom16
  %23 = load i32* %arrayidx17, align 4
  %dec18 = add nsw i32 %23, -1
  store i32 %dec18, i32* %arrayidx17, align 4
  %24 = load i32* %max_code_size.addr, align 4
  %sub19 = sub nsw i32 %24, 1
  store i32 %sub19, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc35, %while.body
  %25 = load i32* %i, align 4
  %cmp21 = icmp sgt i32 %25, 0
  br i1 %cmp21, label %for.body23, label %for.end37

for.body23:                                       ; preds = %for.cond20
  %26 = load i32* %i, align 4
  %idxprom24 = sext i32 %26 to i64
  %27 = load i32** %pNum_codes.addr, align 8
  %arrayidx25 = getelementptr inbounds i32* %27, i64 %idxprom24
  %28 = load i32* %arrayidx25, align 4
  %tobool = icmp ne i32 %28, 0
  br i1 %tobool, label %if.then26, label %if.end34

if.then26:                                        ; preds = %for.body23
  %29 = load i32* %i, align 4
  %idxprom27 = sext i32 %29 to i64
  %30 = load i32** %pNum_codes.addr, align 8
  %arrayidx28 = getelementptr inbounds i32* %30, i64 %idxprom27
  %31 = load i32* %arrayidx28, align 4
  %dec29 = add nsw i32 %31, -1
  store i32 %dec29, i32* %arrayidx28, align 4
  %32 = load i32* %i, align 4
  %add30 = add nsw i32 %32, 1
  %idxprom31 = sext i32 %add30 to i64
  %33 = load i32** %pNum_codes.addr, align 8
  %arrayidx32 = getelementptr inbounds i32* %33, i64 %idxprom31
  %34 = load i32* %arrayidx32, align 4
  %add33 = add nsw i32 %34, 2
  store i32 %add33, i32* %arrayidx32, align 4
  br label %for.end37

if.end34:                                         ; preds = %for.body23
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %35 = load i32* %i, align 4
  %dec36 = add nsw i32 %35, -1
  store i32 %dec36, i32* %i, align 4
  br label %for.cond20

for.end37:                                        ; preds = %if.then26, %for.cond20
  %36 = load i32* %total, align 4
  %dec38 = add i32 %36, -1
  store i32 %dec38, i32* %total, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond, %if.then
  ret void
}

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { noreturn nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind }
attributes #7 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.4 (tags/RELEASE_34/final)"}
