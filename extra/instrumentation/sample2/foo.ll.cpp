// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("foo.ll", getGlobalContext());
 mod->setDataLayout("e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 ArrayType* ArrayTy_0 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 5);
 
 PointerType* PointerTy_1 = PointerType::get(ArrayTy_0, 0);
 
 std::vector<Type*>FuncTy_2_args;
 PointerType* PointerTy_3 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 FuncTy_2_args.push_back(PointerTy_3);
 FuncTy_2_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_2 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_2_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_4 = PointerType::get(PointerTy_3, 0);
 
 PointerType* PointerTy_5 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 std::vector<Type*>FuncTy_6_args;
 FunctionType* FuncTy_6 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_6_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_7 = PointerType::get(FuncTy_2, 0);
 
 
 // Function Declarations
 
 Function* func_foo = mod->getFunction("foo");
 if (!func_foo) {
 func_foo = Function::Create(
  /*Type=*/FuncTy_2,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"foo", mod); 
 func_foo->setCallingConv(CallingConv::C);
 }
 AttributeSet func_foo_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_foo_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_foo->setAttributes(func_foo_PAL);
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_6,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_0,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str");
 gvar_array__str->setAlignment(1);
 
 // Constant Definitions
 Constant *const_array_8 = ConstantDataArray::getString(mod->getContext(), "gogo", true);
 ConstantInt* const_int32_9 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 std::vector<Constant*> const_ptr_10_indices;
 ConstantInt* const_int32_11 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 const_ptr_10_indices.push_back(const_int32_11);
 const_ptr_10_indices.push_back(const_int32_11);
 Constant* const_ptr_10 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_10_indices);
 ConstantInt* const_int32_12 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("3"), 10));
 
 // Global Variable Definitions
 gvar_array__str->setInitializer(const_array_8);
 
 // Function Definitions
 
 // Function: foo (func_foo)
 {
  Function::arg_iterator args = func_foo->arg_begin();
  Value* ptr_name = args++;
  ptr_name->setName("name");
  Value* int32_count = args++;
  int32_count->setName("count");
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_foo,0);
  
  // Block entry (label_entry)
  AllocaInst* ptr_name_addr = new AllocaInst(PointerTy_3, "name.addr", label_entry);
  ptr_name_addr->setAlignment(8);
  AllocaInst* ptr_count_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "count.addr", label_entry);
  ptr_count_addr->setAlignment(4);
  StoreInst* void_13 = new StoreInst(ptr_name, ptr_name_addr, false, label_entry);
  void_13->setAlignment(8);
  StoreInst* void_14 = new StoreInst(int32_count, ptr_count_addr, false, label_entry);
  void_14->setAlignment(4);
  ReturnInst::Create(mod->getContext(), label_entry);
  
 }
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_entry_16 = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
  
  // Block entry (label_entry_16)
  AllocaInst* ptr_myarg1 = new AllocaInst(PointerTy_3, "myarg1", label_entry_16);
  ptr_myarg1->setAlignment(8);
  AllocaInst* ptr_myarg2 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "myarg2", label_entry_16);
  ptr_myarg2->setAlignment(4);
  StoreInst* void_17 = new StoreInst(const_ptr_10, ptr_myarg1, false, label_entry_16);
  void_17->setAlignment(8);
  StoreInst* void_18 = new StoreInst(const_int32_12, ptr_myarg2, false, label_entry_16);
  void_18->setAlignment(4);
  LoadInst* ptr_19 = new LoadInst(ptr_myarg1, "", false, label_entry_16);
  ptr_19->setAlignment(8);
  LoadInst* int32_20 = new LoadInst(ptr_myarg2, "", false, label_entry_16);
  int32_20->setAlignment(4);
  std::vector<Value*> void_21_params;
  void_21_params.push_back(ptr_19);
  void_21_params.push_back(int32_20);
  CallInst* void_21 = CallInst::Create(func_foo, void_21_params, "", label_entry_16);
  void_21->setCallingConv(CallingConv::C);
  void_21->setTailCall(false);
  AttributeSet void_21_PAL;
  void_21->setAttributes(void_21_PAL);
  
  ReturnInst::Create(mod->getContext(), const_int32_11, label_entry_16);
  
 }
 
 return mod;
}
